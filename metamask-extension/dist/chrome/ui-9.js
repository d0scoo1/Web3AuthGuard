LavaPack.loadBundle([
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\send.js", {"../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/lib/metamask-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","../../helpers/constants/error-keys":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\error-keys.js","../../helpers/utils/optimism/fetchEstimatedL1Fee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js","../../helpers/utils/token-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../pages/send/send.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\send\\send.constants.js","../../pages/send/send.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\send\\send.utils.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actionConstants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actionConstants.ts","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../domains":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\domains.js","../gas/gas.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\gas\\gas.duck.js","../metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","./helpers":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\helpers.js","@reduxjs/toolkit":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","ethereumjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","uuid":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cducks%5Csend%5Csend.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.draftTransactionInitialState = exports.default = exports.computeEstimatedGasLimit = exports.addHistoryEntry = exports.acknowledgeRecipientWarning = exports.SEND_STATUSES = exports.SEND_STAGES = exports.RECIPIENT_SEARCH_MODES = exports.GAS_INPUT_MODES = exports.AMOUNT_MODES = void 0;
exports.editExistingTransaction = editExistingTransaction;
exports.gasFeeIsInError = gasFeeIsInError;
exports.getAssetError = getAssetError;
exports.getCurrentDraftTransaction = getCurrentDraftTransaction;
exports.getCurrentTransactionUUID = getCurrentTransactionUUID;
exports.getDraftTransactionExists = getDraftTransactionExists;
exports.getDraftTransactionID = getDraftTransactionID;
exports.getGasInputMode = getGasInputMode;
exports.getGasLimit = getGasLimit;
exports.getGasPrice = getGasPrice;
exports.getGasTotal = getGasTotal;
exports.getIsAssetSendable = getIsAssetSendable;
exports.getIsBalanceInsufficient = getIsBalanceInsufficient;
exports.getIsUsingMyAccountForRecipientSearch = getIsUsingMyAccountForRecipientSearch;
exports.getMinimumGasLimitForSend = getMinimumGasLimitForSend;
exports.getRecipient = getRecipient;
exports.getRecipientUserInput = getRecipientUserInput;
exports.getRecipientWarningAcknowledgement = getRecipientWarningAcknowledgement;
exports.getSendAmount = getSendAmount;
exports.getSendAsset = getSendAsset;
exports.getSendAssetAddress = getSendAssetAddress;
exports.getSendErrors = getSendErrors;
exports.getSendHexData = getSendHexData;
exports.getSendMaxModeState = getSendMaxModeState;
exports.getSendStage = getSendStage;
exports.getSendTo = getSendTo;
exports.initializeSendState = exports.initialState = void 0;
exports.isSendFormInvalid = isSendFormInvalid;
exports.isSendStateInitialized = isSendStateInitialized;
exports.resetRecipientInput = resetRecipientInput;
exports.resetSendState = resetSendState;
exports.sendAmountIsInError = sendAmountIsInError;
exports.signTransaction = signTransaction;
exports.startNewDraftTransaction = startNewDraftTransaction;
exports.toggleSendMaxMode = toggleSendMaxMode;
exports.updateGasLimit = void 0;
exports.updateGasPrice = updateGasPrice;
exports.updateRecipient = updateRecipient;
exports.updateRecipientUserInput = updateRecipientUserInput;
exports.updateSendAmount = updateSendAmount;
exports.updateSendAsset = updateSendAsset;
exports.updateSendHexData = updateSendHexData;
exports.useContactListForRecipientSearch = useContactListForRecipientSearch;
exports.useDefaultGas = exports.useCustomGas = void 0;
exports.useMyAccountsForRecipientSearch = useMyAccountsForRecipientSearch;
var _toolkit = require("@reduxjs/toolkit");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _ethereumjsUtil = require("ethereumjs-util");
var _lodash = require("lodash");
var _uuid = require("uuid");
var _conversion = require("../../../shared/modules/conversion.utils");
var _gas = require("../../../shared/constants/gas");
var _send = require("../../pages/send/send.constants");
var _send2 = require("../../pages/send/send.utils");
var _selectors = require("../../selectors");
var _actions = require("../../store/actions");
var _gas2 = require("../gas/gas.duck");
var _actionConstants = require("../../store/actionConstants");
var _tokenUtil = require("../../helpers/utils/token-util");
var _util = require("../../helpers/utils/util");
var _metamask = require("../metamask/metamask");
var _domains = require("../domains");
var _hexstringUtils = require("../../../shared/modules/hexstring-utils");
var _transactions = require("../../helpers/utils/transactions.util");
var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../helpers/utils/optimism/fetchEstimatedL1Fee"));
var _transaction = require("../../../shared/constants/transaction");
var _errorKeys = require("../../helpers/constants/error-keys");
var _stringUtils = require("../../../shared/modules/string-utils");
var _transaction2 = require("../../../shared/modules/transaction.utils");
var _metamaskControllerUtils = require("../../../shared/lib/metamask-controller-utils");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _Numeric = require("../../../shared/modules/Numeric");
var _common = require("../../../shared/constants/common");
var _helpers = require("./helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// typedef import statements
/**
 * @typedef {(
 *  __import__('immer/dist/internal').WritableDraft<SendState>
 * )} SendStateDraft
 * @typedef {(
 *  __import__( '../../helpers/constants/common').TokenStandardStrings
 * )} TokenStandardStrings
 * @typedef {(
 *  __import__( '../../../shared/constants/tokens').TokenDetails
 * )} TokenDetails
 * @typedef {(
 *  __import__('@metamask/gas-fee-controller').LegacyGasPriceEstimate
 * )} LegacyGasPriceEstimate
 * @typedef {(
 *  __import__('@metamask/gas-fee-controller').GasFeeEstimates
 * )} GasFeeEstimates
 * @typedef {(
 *  __import__('@metamask/gas-fee-controller').EthGasPriceEstimate
 * )} EthGasPriceEstimate
 * @typedef {(
 *  __import__('@metamask/gas-fee-controller').GasEstimateType
 * )} GasEstimateType
 * @typedef {(
 *  __import__('redux').AnyAction
 * )} AnyAction
 */

/**
 * @template R - Return type of the async function
 * @typedef {(
 *  __import__('redux-thunk').ThunkAction<R, MetaMaskState, unknown, AnyAction>
 * )} ThunkAction<R>
 */

/**
 * This type will take a typical constant string mapped object and turn it into
 * a union type of the values.
 *
 * @template O - The object to make strings out of
 * @typedef {O[keyof O]} MapValuesToUnion<O>
 */

/**
 * @typedef {object} SendStateStages
 * @property {'ADD_RECIPIENT'} ADD_RECIPIENT - The user is selecting which
 *  address to send an asset to.
 * @property {'DRAFT'} DRAFT - The send form is shown for a transaction yet to
 *  be sent to the Transaction Controller.
 * @property {'EDIT'} EDIT - The send form is shown for a transaction already
 *  submitted to the Transaction Controller but not yet confirmed. This happens
 *  when a confirmation is shown for a transaction and the 'edit' button in the
 *  header is clicked.
 * @property {'INACTIVE'} INACTIVE - The send state is idle, and hasn't yet
 *  fetched required data for gasPrice and gasLimit estimations, etc.
 */

/**
 * The Stages that the send slice can be in
 *
 * @type {SendStateStages}
 */
const SEND_STAGES = {
  ADD_RECIPIENT: 'ADD_RECIPIENT',
  DRAFT: 'DRAFT',
  EDIT: 'EDIT',
  INACTIVE: 'INACTIVE'
};

/**
 * @typedef {object} DraftTxStatus
 * @property {'INVALID'} INVALID - The transaction is invalid and cannot be
 *  submitted. There are a number of cases that would result in an invalid
 *  send state:
 *  1. The recipient is not yet defined
 *  2. The amount + gasTotal is greater than the user's balance when sending
 *     native currency
 *  3. The gasTotal is greater than the user's *native* balance
 *  4. The amount of sent asset is greater than the user's *asset* balance
 *  5. Gas price estimates failed to load entirely
 *  6. The gasLimit is less than 21000 (0x5208)
 * @property {'VALID'} VALID - The transaction is valid and can be submitted.
 */

/**
 * The status of the send slice
 *
 * @type {DraftTxStatus}
 */
exports.SEND_STAGES = SEND_STAGES;
const SEND_STATUSES = {
  INVALID: 'INVALID',
  VALID: 'VALID'
};

/**
 * @typedef {object} SendStateGasModes
 * @property {'BASIC'} BASIC - Shows the basic estimate slow/avg/fast buttons
 *  when on mainnet and the metaswaps API request is successful.
 * @property {'CUSTOM'} CUSTOM - Shows GasFeeDisplay component that is a read
 *  only display of the values the user has set in the advanced gas modal
 *  (stored in the gas duck under the customData key).
 * @property {'INLINE'} INLINE - Shows inline gasLimit/gasPrice fields when on
 *  any other network or metaswaps API fails and we use eth_gasPrice.
 */

/**
 * Controls what is displayed in the send-gas-row component.
 *
 * @type {SendStateGasModes}
 */
exports.SEND_STATUSES = SEND_STATUSES;
const GAS_INPUT_MODES = {
  BASIC: 'BASIC',
  CUSTOM: 'CUSTOM',
  INLINE: 'INLINE'
};

/**
 * @typedef {object} SendStateAmountModes
 * @property {'INPUT'} INPUT - the user provides the amount by typing in the
 *  field.
 * @property {'MAX'} MAX - The user selects the MAX button and amount is
 *  calculated based on balance - (amount + gasTotal).
 */

/**
 * The modes that the amount field can be set by
 *
 * @type {SendStateAmountModes}
 */
exports.GAS_INPUT_MODES = GAS_INPUT_MODES;
const AMOUNT_MODES = {
  INPUT: 'INPUT',
  MAX: 'MAX'
};

/**
 * @typedef {object} SendStateRecipientModes
 * @property {'CONTACT_LIST'} CONTACT_LIST - The user is displayed a list of
 *  their contacts and addresses they have recently send to.
 * @property {'MY_ACCOUNTS'} MY_ACCOUNTS - the user is displayed a list of
 *  their own accounts to send to.
 */

/**
 * The type of recipient list that is displayed to user
 *
 * @type {SendStateRecipientModes}
 */
exports.AMOUNT_MODES = AMOUNT_MODES;
const RECIPIENT_SEARCH_MODES = {
  CONTACT_LIST: 'CONTACT_LIST',
  MY_ACCOUNTS: 'MY_ACCOUNTS'
};

/**
 * @typedef {object} Account
 * @property {string} address - The hex address of the account.
 * @property {string} balance - Hex string representing the native asset
 *  balance of the account the transaction will be sent from.
 */

/**
 * @typedef {object} Amount
 * @property {string} [error] - Error to display for the amount field.
 * @property {string} value - A hex string representing the amount of the
 *  selected currency to send.
 */

/**
 * @typedef {object} Asset
 * @property {string} balance - A hex string representing the balance
 *  that the user holds of the asset that they are attempting to send.
 * @property {TokenDetails} [details] - An object that describes the
 *  selected asset in the case that the user is sending a token or collectibe.
 *  Will be null when asset.type is 'NATIVE'.
 * @property {string} [error] - Error to display when there is an issue
 *  with the asset.
 * @property {AssetType} type - The type of asset that the user
 *  is attempting to send. Defaults to 'NATIVE' which represents the native
 *  asset of the chain. Can also be 'TOKEN' or 'NFT'.
 */

/**
 * @typedef {object} GasFees
 * @property {string} [error] - error to display for gas fields.
 * @property {string} gasLimit - maximum gas needed for tx.
 * @property {string} gasPrice - price in wei to pay per gas.
 * @property {string} gasTotal - maximum total price in wei to pay.
 * @property {string} maxFeePerGas - Maximum price in wei to pay per gas.
 * @property {string} maxPriorityFeePerGas - Maximum priority fee in wei to pay
 *  per gas.
 */

/**
 * An object that describes the intended recipient of a transaction.
 *
 * @typedef {object} Recipient
 * @property {string} address - The fully qualified address of the recipient.
 *  This is set after the recipient.userInput is validated, the userInput field
 *  is quickly updated to avoid delay between keystrokes and seeing the input
 *  field updated. After a debounce the address typed is validated and then the
 *  address field is updated. The address field is also set when the user
 *  selects a contact or account from the list, or an ENS resolution when
 *  typing ENS names.
 * @property {string} [error] - Error to display on the address field.
 * @property {string} nickname - The nickname that the user has added to their
 *  address book for the recipient.address.
 * @property {string} [warning] - Warning to display on the address field.
 */

/**
 * @typedef {object} DraftTransaction
 * @property {Amount} amount - An object containing information about the
 *  amount of currency to send.
 * @property {Asset} asset - An object that describes the asset that the user
 *  has selected to send.
 * @property {Account} [fromAccount] - The send flow is usually only relative to
 *  the currently selected account. When editing a transaction, however, the
 *  account may differ. In that case, the details of that account will be
 *  stored in this object within the draftTransaction.
 * @property {GasFees} gas - Details about the current gas settings
 * @property {Array<{event: string, timestamp: number}>} history - An array of
 *  entries that describe the user's journey through the send flow. This is
 *  sent to the controller for attaching to state logs for troubleshooting and
 *  support.
 * @property {string} [id] - If the transaction has already been added to the
 *  TransactionController this field will be populated with its id from the
 *  TransactionController state. This is required to be able to update the
 *  transaction in the controller.
 * @property {Recipient} recipient - An object that describes the intended
 *  recipient of the transaction.
 * @property {MapValuesToUnion<DraftTxStatus>} status - Describes the
 *  validity of the draft transaction, which will be either 'VALID' or
 *  'INVALID', depending on our ability to generate a valid txParams object for
 *  submission.
 * @property {string} transactionType - Determines type of transaction being
 *  sent, defaulted to 0x0 (legacy).
 * @property {string} [userInputHexData] - When a user has enabled custom hex
 *  data field in advanced options, they can supply data to the field which is
 *  stored under this key.
 */

/**
 * @type {DraftTransaction}
 */
exports.RECIPIENT_SEARCH_MODES = RECIPIENT_SEARCH_MODES;
const draftTransactionInitialState = {
  amount: {
    error: null,
    value: '0x0'
  },
  asset: {
    balance: '0x0',
    details: null,
    error: null,
    type: _transaction.AssetType.native
  },
  fromAccount: null,
  gas: {
    error: null,
    gasLimit: '0x0',
    gasPrice: '0x0',
    gasTotal: '0x0',
    maxFeePerGas: '0x0',
    maxPriorityFeePerGas: '0x0',
    wasManuallyEdited: false
  },
  history: [],
  id: null,
  recipient: {
    address: '',
    error: null,
    nickname: '',
    warning: null,
    type: '',
    recipientWarningAcknowledged: false
  },
  status: SEND_STATUSES.VALID,
  transactionType: _transaction.TransactionEnvelopeType.legacy,
  userInputHexData: null
};

/**
 * Describes the state tree of the send slice
 *
 * @typedef {object} SendState
 * @property {MapValuesToUnion<SendStateAmountModes>} amountMode - Describe
 *  whether the user has manually input an amount or if they have selected max
 *  to send the maximum amount of the selected currency.
 * @property {string} currentTransactionUUID - The UUID of the transaction
 *  currently being modified by the send flow. This UUID is generated upon
 *  initialization of the send flow, any previous UUIDs are discarded at
 *  clean up AND during initialization. When a transaction is edited a new UUID
 *  is generated for it and the state of that transaction is copied into a new
 *  entry in the draftTransactions object.
 * @property {Object<string, DraftTransaction>} draftTransactions - An object keyed
 *  by UUID with draftTransactions as the values.
 * @property {boolean} eip1559support - tracks whether the current network
 *  supports EIP 1559 transactions.
 * @property {boolean} gasEstimateIsLoading - Indicates whether the gas
 *  estimate is loading.
 * @property {string} [gasEstimatePollToken] - String token identifying a
 *  listener for polling on the gasFeeController
 * @property {boolean} gasIsSetInModal - true if the user set custom gas in the
 *  custom gas modal
 * @property {string} gasLimitMinimum - minimum supported gasLimit.
 * @property {string} gasPriceEstimate - Expected price in wei necessary to
 *  pay per gas used for a transaction to be included in a reasonable timeframe.
 *  Comes from the GasFeeController.
 * @property {string} gasTotalForLayer1 -  Layer 1 gas fee total on multi-layer
 *  fee networks
 * @property {string} recipientInput - The user input of the recipient
 *  which is updated quickly to avoid delays in the UI reflecting manual entry
 *  of addresses.
 * @property {MapValuesToUnion<SendStateRecipientModes>} recipientMode -
 *  Describes which list of recipients the user is shown on the add recipient
 *  screen. When this key is set to 'MY_ACCOUNTS' the user is shown the list of
 *  accounts they own. When it is 'CONTACT_LIST' the user is shown the list of
 *  contacts they have saved in MetaMask and any addresses they have recently
 *  sent to.
 * @property {Account} selectedAccount - The currently selected account in
 *  MetaMask. Native balance and address will be pulled from this account if a
 *  fromAccount is not specified in the draftTransaction object. During an edit
 *  the fromAccount is specified.
 * @property {MapValuesToUnion<SendStateStages>} stage - The stage of the
 *  send flow that the user has progressed to. Defaults to 'INACTIVE' which
 *  results in the send screen not being shown.
 */

/**
 * @type {SendState}
 */
exports.draftTransactionInitialState = draftTransactionInitialState;
const initialState = {
  amountMode: AMOUNT_MODES.INPUT,
  currentTransactionUUID: null,
  draftTransactions: {},
  eip1559support: false,
  gasEstimateIsLoading: true,
  gasEstimatePollToken: null,
  gasIsSetInModal: false,
  gasPriceEstimate: '0x0',
  gasLimitMinimum: _gas.GAS_LIMITS.SIMPLE,
  gasTotalForLayer1: '0x0',
  recipientMode: RECIPIENT_SEARCH_MODES.CONTACT_LIST,
  recipientInput: '',
  selectedAccount: {
    address: null,
    balance: '0x0'
  },
  stage: SEND_STAGES.INACTIVE
};

/**
 * TODO: We really need to start creating the metamask state type, and the
 * entire state tree of redux. Would be *extremely* valuable in future
 * typescript conversions. The metamask key is typed as an object on purpose
 * here because I cannot go so far in this work as to type that entire object.
 *
 * @typedef {object} MetaMaskState
 * @property {SendState} send - The state of the send flow.
 * @property {object} metamask - The state of the metamask store.
 */
exports.initialState = initialState;
const name = 'send';

// After modification of specific fields in specific circumstances we must
// recompute the gasLimit estimate to be as accurate as possible. the cases
// that necessitate this logic are listed below:
// 1. when the amount sent changes when sending a token due to the amount being
//    part of the hex encoded data property of the transaction.
// 2. when updating the data property while sending NATIVE currency (ex: ETH)
//    because the data parameter defines function calls that the EVM will have
//    to execute which is where a large chunk of gas is potentially consumed.
// 3. when the recipient changes while sending a token due to the recipient's
//    address being included in the hex encoded data property of the
//    transaction
// 4. when the asset being sent changes due to the contract address and details
//    of the token being included in the hex encoded data property of the
//    transaction. If switching to NATIVE currency (ex: ETH), the gasLimit will
//    change due to hex data being removed (unless supplied by user).
// This method computes the gasLimit estimate which is written to state in an
// action handler in extraReducers.
const computeEstimatedGasLimit = (0, _toolkit.createAsyncThunk)('send/computeEstimatedGasLimit', async (_, thunkApi) => {
  var _transaction$dappSugg;
  const state = thunkApi.getState();
  const {
    send,
    metamask
  } = state;
  const draftTransaction = send.draftTransactions[send.currentTransactionUUID];
  const unapprovedTxs = (0, _metamask.getUnapprovedTxs)(state);
  const isMultiLayerFeeNetwork = (0, _selectors.getIsMultiLayerFeeNetwork)(state);
  const transaction = unapprovedTxs[draftTransaction.id];
  const isNonStandardEthChain = (0, _selectors.getIsNonStandardEthChain)(state);
  const chainId = (0, _selectors.getCurrentChainId)(state);
  let gasTotalForLayer1;
  if (isMultiLayerFeeNetwork) {
    var _draftTransaction$rec;
    gasTotalForLayer1 = await (0, _fetchEstimatedL1Fee.default)(chainId, {
      txParams: {
        gasPrice: draftTransaction.gas.gasPrice,
        gas: draftTransaction.gas.gasLimit,
        to: (_draftTransaction$rec = draftTransaction.recipient.address) === null || _draftTransaction$rec === void 0 ? void 0 : _draftTransaction$rec.toLowerCase(),
        value: send.amountMode === AMOUNT_MODES.MAX ? send.selectedAccount.balance : draftTransaction.amount.value,
        from: send.selectedAccount.address,
        data: draftTransaction.userInputHexData,
        type: '0x0'
      }
    });
  }
  if (send.stage !== SEND_STAGES.EDIT || !((_transaction$dappSugg = transaction.dappSuggestedGasFees) !== null && _transaction$dappSugg !== void 0 && _transaction$dappSugg.gas) || !transaction.userEditedGasLimit) {
    var _draftTransaction$rec2;
    const gasLimit = await (0, _helpers.estimateGasLimitForSend)({
      gasPrice: draftTransaction.gas.gasPrice,
      blockGasLimit: metamask.currentBlockGasLimit,
      selectedAddress: metamask.selectedAddress,
      sendToken: draftTransaction.asset.details,
      to: (_draftTransaction$rec2 = draftTransaction.recipient.address) === null || _draftTransaction$rec2 === void 0 ? void 0 : _draftTransaction$rec2.toLowerCase(),
      value: draftTransaction.amount.value,
      data: draftTransaction.userInputHexData,
      isNonStandardEthChain,
      chainId,
      gasLimit: draftTransaction.gas.gasLimit
    });
    await thunkApi.dispatch((0, _gas2.setCustomGasLimit)(gasLimit));
    return {
      gasLimit,
      gasTotalForLayer1
    };
  }
  return null;
});

/**
 * @typedef {object} Asset
 * @property {AssetType} type - The type of asset that the user
 *  is attempting to send. Defaults to 'NATIVE' which represents the native
 *  asset of the chain. Can also be 'TOKEN' or 'NFT'.
 * @property {string} balance - A hex string representing the balance
 *  that the user holds of the asset that they are attempting to send.
 * @property {TokenDetails} [details] - An object that describes the
 *  selected asset in the case that the user is sending a token or collectibe.
 *  Will be null when asset.type is 'NATIVE'.
 * @property {string} [error] - Error to display when there is an issue
 *  with the asset.
 */

/**
 * Responsible for initializing required state for the send slice.
 * This method is dispatched from the send page in the componentDidMount
 * method. It is also dispatched anytime the network changes to ensure that
 * the slice remains valid with changing token and account balances. To do so
 * it keys into state to get necessary values and computes a starting point for
 * the send slice. It returns the values that might change from this action and
 * those values are written to the slice in the `initializeSendState.fulfilled`
 * action handler.
 *
 * @type {__import__('@reduxjs/toolkit').AsyncThunk<any, { chainHasChanged: boolean }, {}>}
 */
exports.computeEstimatedGasLimit = computeEstimatedGasLimit;
const initializeSendState = (0, _toolkit.createAsyncThunk)('send/initializeSendState', async ({
  chainHasChanged = false
} = {}, thunkApi) => {
  /**
   * @typedef {object} ReduxState
   * @property {object} metamask - Half baked type for the MetaMask object
   * @property {SendState} send - the send state
   */

  /**
   * @type {ReduxState}
   */
  const state = thunkApi.getState();
  const isNonStandardEthChain = (0, _selectors.getIsNonStandardEthChain)(state);
  const chainId = (0, _selectors.getCurrentChainId)(state);
  let eip1559support = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
  if (eip1559support === undefined) {
    eip1559support = await (0, _actions.getCurrentNetworkEIP1559Compatibility)();
  }
  const account = (0, _selectors.getSelectedAccount)(state);
  const {
    send: sendState,
    metamask
  } = state;
  const draftTransaction = sendState.draftTransactions[sendState.currentTransactionUUID];

  // If the draft transaction is not present, then this action has been
  // dispatched out of sync with the intended flow. This is not always a bug.
  // For instance, in the actions.js file we dispatch this action anytime the
  // chain changes.
  if (!draftTransaction) {
    return thunkApi.rejectWithValue('draftTransaction not found, possibly not on send flow');
  }

  // Default gasPrice to 1 gwei if all estimation fails, this is only used
  // for gasLimit estimation and won't be set directly in state. Instead, we
  // will return the gasFeeEstimates and gasEstimateType so that the reducer
  // can set the appropriate gas fees in state.
  let gasPrice = sendState.stage === SEND_STAGES.EDIT ? draftTransaction.gas.gasPrice : '0x1';
  let gasEstimatePollToken = null;

  // Instruct the background process that polling for gas prices should begin
  gasEstimatePollToken = await (0, _actions.getGasFeeEstimatesAndStartPolling)();
  (0, _actions.addPollingTokenToAppState)(gasEstimatePollToken);
  const {
    metamask: {
      gasFeeEstimates,
      gasEstimateType
    }
  } = thunkApi.getState();
  if (sendState.stage !== SEND_STAGES.EDIT) {
    // Because we are only interested in getting a gasLimit estimation we only
    // need to worry about gasPrice. So we use maxFeePerGas as gasPrice if we
    // have a fee market estimation.
    if (gasEstimateType === _gas.GasEstimateTypes.legacy) {
      gasPrice = (0, _selectors.getGasPriceInHexWei)(gasFeeEstimates.medium);
    } else if (gasEstimateType === _gas.GasEstimateTypes.ethGasPrice) {
      gasPrice = (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.gasPrice);
    } else if (gasEstimateType === _gas.GasEstimateTypes.feeMarket) {
      gasPrice = (0, _selectors.getGasPriceInHexWei)(gasFeeEstimates.medium.suggestedMaxFeePerGas);
    } else {
      gasPrice = gasFeeEstimates.gasPrice ? (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.gasPrice) : '0x0';
    }
  }

  // Set a basic gasLimit in the event that other estimation fails
  let {
    gasLimit
  } = draftTransaction.gas;
  if (gasEstimateType !== _gas.GasEstimateTypes.none && sendState.stage !== SEND_STAGES.EDIT && draftTransaction.recipient.address) {
    var _draftTransaction$fro;
    gasLimit = draftTransaction.asset.type === _transaction.AssetType.token || draftTransaction.asset.type === _transaction.AssetType.NFT ? _gas.GAS_LIMITS.BASE_TOKEN_ESTIMATE : _gas.GAS_LIMITS.SIMPLE;
    // Run our estimateGasLimit logic to get a more accurate estimation of
    // required gas. If this value isn't nullish, set it as the new gasLimit
    const estimatedGasLimit = await (0, _helpers.estimateGasLimitForSend)({
      gasPrice,
      blockGasLimit: metamask.currentBlockGasLimit,
      selectedAddress: ((_draftTransaction$fro = draftTransaction.fromAccount) === null || _draftTransaction$fro === void 0 ? void 0 : _draftTransaction$fro.address) ?? sendState.selectedAccount.address,
      sendToken: draftTransaction.asset.details,
      to: draftTransaction.recipient.address.toLowerCase(),
      value: draftTransaction.amount.value,
      data: draftTransaction.userInputHexData,
      isNonStandardEthChain,
      chainId
    });
    gasLimit = estimatedGasLimit || gasLimit;
  }
  // We have to keep the gas slice in sync with the send slice state
  // so that it'll be initialized correctly if the gas modal is opened.
  await thunkApi.dispatch((0, _gas2.setCustomGasLimit)(gasLimit));

  // There may be a case where the send has been canceled by the user while
  // the gas estimate is being computed. So we check again to make sure that
  // a currentTransactionUUID exists and matches the previous tx.
  const newState = thunkApi.getState();
  if (newState.send.currentTransactionUUID !== sendState.currentTransactionUUID) {
    return thunkApi.rejectWithValue(`draftTransaction changed during initialization.
        A new initializeSendState action must be dispatched.`);
  }
  return {
    account,
    chainId: (0, _selectors.getCurrentChainId)(state),
    tokens: (0, _metamask.getTokens)(state),
    chainHasChanged,
    gasFeeEstimates,
    gasEstimateType,
    gasLimit,
    gasTotal: (0, _ethereumjsUtil.addHexPrefix)((0, _transactionsControllerUtils.calcGasTotal)(gasLimit, gasPrice)),
    gasEstimatePollToken,
    eip1559support,
    useTokenDetection: (0, _selectors.getUseTokenDetection)(state),
    tokenAddressList: Object.keys((0, _selectors.getTokenList)(state))
  };
});

// Action Payload Typedefs
/**
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<string>
 * )} SimpleStringPayload
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<MapValuesToUnion<SendStateAmountModes>>
 * )} SendStateAmountModePayload
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<DraftTransaction['asset']>
 * )} UpdateAssetPayload
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<Partial<
 *   Pick<DraftTransaction['recipient'], 'address' | 'nickname'>>
 *  >
 * )} updateRecipientPayload
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<SendState['recipientMode']>
 * )} UpdateRecipientModePayload
 */

/**
 * @typedef {object} GasFeeUpdateParams
 * @property {TransactionType} transactionType - The transaction type
 * @property {string} [maxFeePerGas] - The maximum amount in hex wei to pay
 *  per gas on a FEE_MARKET transaction.
 * @property {string} [maxPriorityFeePerGas] - The maximum amount in hex
 *  wei to pay per gas as an incentive to miners on a FEE_MARKET
 *  transaction.
 * @property {string} [gasPrice] - The amount in hex wei to pay per gas on
 *  a LEGACY transaction.
 * @property {boolean} [isAutomaticUpdate] - true if the update is the
 *  result of a gas estimate update from the controller.
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<GasFeeUpdateParams>
 * )} GasFeeUpdatePayload
 */

/**
 * @typedef {object} GasEstimateUpdateParams
 * @property {GasEstimateType} gasEstimateType - The type of gas estimation
 *  provided by the controller.
 * @property {(
 *  EthGasPriceEstimate | LegacyGasPriceEstimate | GasFeeEstimates
 * )} gasFeeEstimates - The gas fee estimates provided by the controller.
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<GasEstimateUpdateParams>
 * )} GasEstimateUpdatePayload
 */

/**
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<DraftTransaction['asset']>
 * )} UpdateAssetPayload
 * @typedef {(
 *  __import__('@reduxjs/toolkit').PayloadAction<DraftTransaction>
 * )} DraftTransactionPayload
 */
exports.initializeSendState = initializeSendState;
const slice = (0, _toolkit.createSlice)({
  name,
  initialState,
  reducers: {
    /**
     * Adds a new draft transaction to state, first generating a new UUID for
     * the transaction and setting that as the currentTransactionUUID. If the
     * draft has an id property set, the stage is set to EDIT.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {DraftTransactionPayload} action - An action with payload that is
     *  a new draft transaction that will be added to state.
     * @returns {void}
     */
    addNewDraft: (state, action) => {
      state.currentTransactionUUID = (0, _uuid.v4)();
      state.draftTransactions[state.currentTransactionUUID] = action.payload;
      if (action.payload.id) {
        state.stage = SEND_STAGES.EDIT;
      } else {
        state.stage = SEND_STAGES.ADD_RECIPIENT;
      }
    },
    /**
     * Adds an entry, with timestamp, to the draftTransaction history.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {SimpleStringPayload} action - An action with payload that is
     *  a string to be added to the history of the draftTransaction
     * @returns {void}
     */
    addHistoryEntry: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      if (draftTransaction) {
        draftTransaction.history.push({
          entry: action.payload,
          timestamp: Date.now()
        });
      }
    },
    /**
     * gasTotal is computed based on gasPrice and gasLimit and set in state
     * recomputes the maximum amount if the current amount mode is 'MAX' and
     * sending the native token. ERC20 assets max amount is unaffected by
     * gasTotal so does not need to be recomputed. Finally, validates the gas
     * field and send state.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @returns {void}
     */
    calculateGasTotal: state => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      // use maxFeePerGas as the multiplier if working with a FEE_MARKET transaction
      // otherwise use gasPrice
      if (draftTransaction.transactionType === _transaction.TransactionEnvelopeType.feeMarket) {
        draftTransaction.gas.gasTotal = (0, _ethereumjsUtil.addHexPrefix)((0, _transactionsControllerUtils.calcGasTotal)(draftTransaction.gas.gasLimit, draftTransaction.gas.maxFeePerGas));
      } else {
        draftTransaction.gas.gasTotal = (0, _ethereumjsUtil.addHexPrefix)((0, _transactionsControllerUtils.calcGasTotal)(draftTransaction.gas.gasLimit, draftTransaction.gas.gasPrice));
      }
      if (state.amountMode === AMOUNT_MODES.MAX && draftTransaction.asset.type === _transaction.AssetType.native) {
        slice.caseReducers.updateAmountToMax(state);
      }
      slice.caseReducers.validateAmountField(state);
      slice.caseReducers.validateGasField(state);
      // validate send state
      slice.caseReducers.validateSendState(state);
    },
    /**
     * Clears all drafts from send state and drops the currentTransactionUUID.
     * This is an important first step before adding a new draft transaction to
     * avoid possible collision.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @returns {void}
     */
    clearPreviousDrafts: state => {
      state.currentTransactionUUID = null;
      state.draftTransactions = {};
    },
    /**
     * Clears the send state by setting it to the initial value
     *
     * @returns {SendState}
     */
    resetSendState: () => initialState,
    /**
     * sets the amount mode to the provided value as long as it is one of the
     * supported modes (MAX|INPUT)
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {SendStateAmountModePayload} action - The amount mode
     *  to set the state to.
     * @returns {void}
     */
    updateAmountMode: (state, action) => {
      if (Object.values(AMOUNT_MODES).includes(action.payload)) {
        state.amountMode = action.payload;
      }
    },
    /**
     * computes the maximum amount of asset that can be sent and then calls
     * the updateSendAmount action above with the computed value, which will
     * revalidate the field and form.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @returns {void}
     */
    updateAmountToMax: state => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      let amount = '0x0';
      if (draftTransaction.asset.type === _transaction.AssetType.token) {
        var _draftTransaction$ass;
        const decimals = ((_draftTransaction$ass = draftTransaction.asset.details) === null || _draftTransaction$ass === void 0 ? void 0 : _draftTransaction$ass.decimals) ?? 0;
        const multiplier = Math.pow(10, Number(decimals));
        amount = new _Numeric.Numeric(draftTransaction.asset.balance, 16).times(multiplier, 10).toString();
      } else {
        const _gasTotal = new _Numeric.Numeric(draftTransaction.gas.gasTotal || '0x0', 16).add(new _Numeric.Numeric(state.gasTotalForLayer1 || '0x0', 16));
        amount = new _Numeric.Numeric(draftTransaction.asset.balance, 16).minus(_gasTotal).toString();
      }
      slice.caseReducers.updateSendAmount(state, {
        payload: amount
      });
    },
    /**
     * Updates the currently selected asset
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {UpdateAssetPayload} action - The asset to set in the
     *  draftTransaction.
     * @returns {void}
     */
    updateAsset: (state, action) => {
      const {
        asset,
        initialAssetSet
      } = action.payload;
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      draftTransaction.asset.type = asset.type;
      draftTransaction.asset.balance = asset.balance;
      draftTransaction.asset.error = asset.error;
      if (draftTransaction.asset.type === _transaction.AssetType.token || draftTransaction.asset.type === _transaction.AssetType.NFT) {
        draftTransaction.asset.details = asset.details;
      } else {
        // clear the details object when sending native currency
        draftTransaction.asset.details = null;
        if (draftTransaction.recipient.error === _send.CONTRACT_ADDRESS_ERROR) {
          // Errors related to sending tokens to their own contract address
          // are no longer valid when sending native currency.
          draftTransaction.recipient.error = null;
        }
      }
      // if amount mode is MAX update amount to max of new asset, otherwise set
      // to zero. This will revalidate the send amount field.
      if (state.amountMode === AMOUNT_MODES.MAX) {
        slice.caseReducers.updateAmountToMax(state);
      } else if (initialAssetSet === false) {
        slice.caseReducers.updateSendAmount(state, {
          payload: '0x0'
        });
      }
      // validate send state
      slice.caseReducers.validateSendState(state);
    },
    /**
     * Sets the appropriate gas fees in state after receiving new estimates.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {GasEstimateUpdatePayload)} action - The gas fee update payload
     * @returns {void}
     */
    updateGasFeeEstimates: (state, action) => {
      const {
        gasFeeEstimates,
        gasEstimateType
      } = action.payload;
      let gasPriceEstimate = '0x0';
      switch (gasEstimateType) {
        case _gas.GasEstimateTypes.feeMarket:
          slice.caseReducers.updateGasFees(state, {
            payload: {
              transactionType: _transaction.TransactionEnvelopeType.feeMarket,
              maxFeePerGas: (0, _selectors.getGasPriceInHexWei)(gasFeeEstimates.medium.suggestedMaxFeePerGas),
              maxPriorityFeePerGas: (0, _selectors.getGasPriceInHexWei)(gasFeeEstimates.medium.suggestedMaxPriorityFeePerGas)
            }
          });
          break;
        case _gas.GasEstimateTypes.legacy:
          gasPriceEstimate = (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.medium);
          slice.caseReducers.updateGasFees(state, {
            payload: {
              gasPrice: gasPriceEstimate,
              type: _transaction.TransactionEnvelopeType.legacy,
              isAutomaticUpdate: true
            }
          });
          break;
        case _gas.GasEstimateTypes.ethGasPrice:
          gasPriceEstimate = (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.gasPrice);
          slice.caseReducers.updateGasFees(state, {
            payload: {
              gasPrice: (0, _helpers.getRoundedGasPrice)(gasFeeEstimates.gasPrice),
              type: _transaction.TransactionEnvelopeType.legacy,
              isAutomaticUpdate: true
            }
          });
          break;
        case _gas.GasEstimateTypes.none:
        default:
          break;
      }
      // Record the latest gasPriceEstimate for future comparisons
      state.gasPriceEstimate = (0, _ethereumjsUtil.addHexPrefix)(gasPriceEstimate);
    },
    /**
     * Sets the appropriate gas fees in state and determines and sets the
     * appropriate transactionType based on gas fee fields received.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {GasFeeUpdatePayload} action - The gas fees to update with
     * @returns {void}
     */
    updateGasFees: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      if (draftTransaction) {
        if (action.payload.transactionType === _transaction.TransactionEnvelopeType.feeMarket) {
          draftTransaction.gas.maxFeePerGas = (0, _ethereumjsUtil.addHexPrefix)(action.payload.maxFeePerGas);
          draftTransaction.gas.maxPriorityFeePerGas = (0, _ethereumjsUtil.addHexPrefix)(action.payload.maxPriorityFeePerGas);
          draftTransaction.transactionType = _transaction.TransactionEnvelopeType.feeMarket;
        } else {
          if (action.payload.manuallyEdited) {
            draftTransaction.gas.wasManuallyEdited = true;
          }

          // Update the gas price if it has not been manually edited,
          // or if this current action is a manual edit.
          if (!draftTransaction.gas.wasManuallyEdited || action.payload.manuallyEdited) {
            draftTransaction.gas.gasPrice = (0, _ethereumjsUtil.addHexPrefix)(action.payload.gasPrice);
          }
          draftTransaction.transactionType = _transaction.TransactionEnvelopeType.legacy;
        }
        slice.caseReducers.calculateGasTotal(state);
      }
    },
    /**
     * sets the provided gasLimit in state and then recomputes the gasTotal.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {SimpleStringPayload} action - The
     *  gasLimit in hex to set in state.
     * @returns {void}
     */
    updateGasLimit: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      if (draftTransaction) {
        draftTransaction.gas.gasLimit = (0, _ethereumjsUtil.addHexPrefix)(action.payload);
        slice.caseReducers.calculateGasTotal(state);
      }
    },
    /**
     * sets the layer 1 fees total (for a multi-layer fee network)
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {SimpleStringPayload} action - the
     *  gasTotalForLayer1 to set in hex wei.
     * @returns {void}
     */
    updateLayer1Fees: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      state.gasTotalForLayer1 = action.payload;
      if (state.amountMode === AMOUNT_MODES.MAX && draftTransaction.asset.type === _transaction.AssetType.native) {
        slice.caseReducers.updateAmountToMax(state);
      }
    },
    /**
     * Updates the recipient of the draftTransaction
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {updateRecipientPayload} action - The recipient to set in the
     *  draftTransaction.
     * @returns {void}
     */
    updateRecipient: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      draftTransaction.recipient.error = null;
      state.recipientInput = '';
      draftTransaction.recipient.address = action.payload.address ?? '';
      draftTransaction.recipient.nickname = action.payload.nickname ?? '';
      if (draftTransaction.recipient.address === '') {
        // If address is null we are clearing the recipient and must return
        // to the ADD_RECIPIENT stage.
        state.stage = SEND_STAGES.ADD_RECIPIENT;
      } else {
        // if an address is provided and an id exists, we progress to the EDIT
        // stage, otherwise we progress to the DRAFT stage. We also reset the
        // search mode for recipient search.
        state.stage = draftTransaction.id === null ? SEND_STAGES.DRAFT : SEND_STAGES.EDIT;
        state.recipientMode = RECIPIENT_SEARCH_MODES.CONTACT_LIST;
      }

      // validate send state
      slice.caseReducers.validateSendState(state);
    },
    /**
     * Clears the user input and changes the recipient search mode to the
     * specified value
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {UpdateRecipientModePayload} action - The mode to set the
     *  recipient search to
     * @returns {void}
     */
    updateRecipientSearchMode: (state, action) => {
      state.recipientInput = '';
      state.recipientMode = action.payload;
    },
    updateRecipientWarning: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      draftTransaction.recipient.warning = action.payload;
    },
    updateRecipientType: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      draftTransaction.recipient.type = action.payload;
    },
    updateDraftTransactionStatus: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      draftTransaction.status = action.payload;
    },
    acknowledgeRecipientWarning: state => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      draftTransaction.recipient.recipientWarningAcknowledged = true;
      slice.caseReducers.validateSendState(state);
    },
    /**
     * Updates the value of the recipientInput key with what the user has
     * typed into the recipient input field in the UI.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {SimpleStringPayload} action - the value the user has typed into
     *  the recipient field.
     * @returns {void}
     */
    updateRecipientUserInput: (state, action) => {
      // Update the value in state to match what the user is typing into the
      // input field
      state.recipientInput = action.payload;
    },
    /**
     * update current amount.value in state and run post update validation of
     * the amount field and the send state.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {SimpleStringPayload} action - The hex string to be set as the
     *  amount value.
     * @returns {void}
     */
    updateSendAmount: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      draftTransaction.amount.value = (0, _ethereumjsUtil.addHexPrefix)(action.payload);
      // Once amount has changed, validate the field
      slice.caseReducers.validateAmountField(state);
      if (draftTransaction.asset.type === _transaction.AssetType.native) {
        // if sending the native asset the amount being sent will impact the
        // gas field as well because the gas validation takes into
        // consideration the available balance minus amount sent before
        // checking if there is enough left to cover the gas fee.
        slice.caseReducers.validateGasField(state);
      }
      // validate send state
      slice.caseReducers.validateSendState(state);
    },
    /**
     * updates the userInputHexData state key
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @param {SimpleStringPayload} action - The hex string to be set as the
     *  userInputHexData value.
     * @returns {void}
     */
    updateUserInputHexData: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      draftTransaction.userInputHexData = action.payload;
    },
    /**
     * Updates the gasIsSetInModal property to true which results in showing
     * the gas fees from the custom gas modal in the send page.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @returns {void}
     */
    useCustomGas: state => {
      state.gasIsSetInModal = true;
    },
    /**
     * Updates the gasIsSetInModal property to false which results in showing
     * the default gas price/limit fields in the send page.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @returns {void}
     */
    useDefaultGas: state => {
      state.gasIsSetInModal = false;
    },
    /**
     * Checks for the validity of the draftTransactions selected amount to send
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @returns {void}
     */
    validateAmountField: state => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      const amountValue = new _Numeric.Numeric(draftTransaction.amount.value, 16);
      switch (true) {
        // set error to INSUFFICIENT_FUNDS_FOR_GAS_ERROR if the account balance is lower
        // than the total price of the transaction inclusive of gas fees.
        case draftTransaction.asset.type === _transaction.AssetType.native && !(0, _send2.isBalanceSufficient)({
          amount: draftTransaction.amount.value,
          balance: draftTransaction.asset.balance,
          gasTotal: draftTransaction.gas.gasTotal ?? '0x0'
        }):
          draftTransaction.amount.error = _send.INSUFFICIENT_FUNDS_FOR_GAS_ERROR;
          break;
        // set error to INSUFFICIENT_TOKENS_ERROR if the token balance is lower
        // than the amount of token the user is attempting to send.
        case draftTransaction.asset.type === _transaction.AssetType.token && !(0, _send2.isTokenBalanceSufficient)({
          tokenBalance: draftTransaction.asset.balance ?? '0x0',
          amount: draftTransaction.amount.value,
          decimals: draftTransaction.asset.details.decimals
        }):
          draftTransaction.amount.error = _send.INSUFFICIENT_TOKENS_ERROR;
          break;
        // if the amount is negative, set error to NEGATIVE_ETH_ERROR
        // TODO: change this to NEGATIVE_ERROR and remove the currency bias.
        case amountValue.isNegative():
          draftTransaction.amount.error = _send.NEGATIVE_ETH_ERROR;
          break;
        // If none of the above are true, set error to null
        default:
          draftTransaction.amount.error = null;
      }
    },
    /**
     * Checks if the user has enough funds to cover the cost of gas, always
     * uses the native currency and does not take into account the amount
     * being sent. If the user has enough to cover cost of gas but not gas
     * + amount then the error will be displayed on the amount field.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @returns {void}
     */
    validateGasField: state => {
      var _draftTransaction$fro2;
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      const insufficientFunds = !(0, _send2.isBalanceSufficient)({
        amount: draftTransaction.asset.type === _transaction.AssetType.native ? draftTransaction.amount.value : '0x0',
        balance: ((_draftTransaction$fro2 = draftTransaction.fromAccount) === null || _draftTransaction$fro2 === void 0 ? void 0 : _draftTransaction$fro2.balance) ?? state.selectedAccount.balance,
        gasTotal: draftTransaction.gas.gasTotal ?? '0x0'
      });
      draftTransaction.gas.error = insufficientFunds ? _send.INSUFFICIENT_FUNDS_ERROR : null;
    },
    validateRecipientUserInput: (state, action) => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      if (draftTransaction) {
        if (state.recipientMode === RECIPIENT_SEARCH_MODES.MY_ACCOUNTS || state.recipientInput === '' || state.recipientInput === null) {
          draftTransaction.recipient.error = null;
          draftTransaction.recipient.warning = null;
        } else {
          var _draftTransaction$ass2, _draftTransaction$ass3;
          const {
            chainId,
            tokens,
            tokenAddressList,
            isProbablyAnAssetContract
          } = action.payload;
          if ((0, _hexstringUtils.isBurnAddress)(state.recipientInput) || !(0, _hexstringUtils.isValidHexAddress)(state.recipientInput, {
            mixedCaseUseChecksum: true
          }) && !(0, _util.isValidDomainName)(state.recipientInput)) {
            draftTransaction.recipient.error = (0, _util.isDefaultMetaMaskChain)(chainId) ? _send.INVALID_RECIPIENT_ADDRESS_ERROR : _send.INVALID_RECIPIENT_ADDRESS_NOT_ETH_NETWORK_ERROR;
          } else if ((0, _util.isOriginContractAddress)(state.recipientInput, (_draftTransaction$ass2 = draftTransaction.asset) === null || _draftTransaction$ass2 === void 0 ? void 0 : (_draftTransaction$ass3 = _draftTransaction$ass2.details) === null || _draftTransaction$ass3 === void 0 ? void 0 : _draftTransaction$ass3.address)) {
            draftTransaction.recipient.error = _send.CONTRACT_ADDRESS_ERROR;
          } else {
            draftTransaction.recipient.error = null;
          }
          if ((0, _hexstringUtils.isValidHexAddress)(state.recipientInput) && (tokenAddressList.find(address => (0, _stringUtils.isEqualCaseInsensitive)(address, state.recipientInput)) || (0, _util.checkExistingAddresses)(state.recipientInput, tokens)) || isProbablyAnAssetContract) {
            draftTransaction.recipient.warning = _send.KNOWN_RECIPIENT_ADDRESS_WARNING;
          } else {
            draftTransaction.recipient.warning = null;
          }
        }
      }
      slice.caseReducers.validateSendState(state);
    },
    /**
     * Checks if the draftTransaction is currently valid. The following list of
     * cases from the switch statement in this function describe when the
     * transaction is invalid. Please keep this comment updated.
     *
     * case 1: State is invalid when amount field has an error.
     * case 2: State is invalid when gas field has an error.
     * case 3: State is invalid when asset field has an error.
     * case 4: State is invalid if asset type is a token and the token details
     *  are unknown.
     * case 5: State is invalid if no recipient has been added.
     * case 6: State is invalid if the send state is uninitialized.
     * case 7: State is invalid if gas estimates are loading.
     * case 8: State is invalid if gasLimit is less than the gasLimitMinimum.
     *
     * @param {SendStateDraft} state - A writable draft of the send state to be
     *  updated.
     * @returns {void}
     */
    validateSendState: state => {
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      slice.caseReducers.addHistoryEntry(state, {
        payload: 'Begin validating send state'
      });
      if (draftTransaction) {
        switch (true) {
          case Boolean(draftTransaction.amount.error):
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Amount is in error ${draftTransaction.amount.error}`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case Boolean(draftTransaction.gas.error):
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Gas is in error ${draftTransaction.gas.error}`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case Boolean(draftTransaction.asset.error):
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Asset is in error ${draftTransaction.asset.error}`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case draftTransaction.asset.type === _transaction.AssetType.token && draftTransaction.asset.details === null:
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Asset is TOKEN and token details is null`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case state.stage === SEND_STAGES.ADD_RECIPIENT:
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Form is invalid because stage is ADD_RECIPIENT`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case state.stage === SEND_STAGES.INACTIVE:
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Form is invalid because stage is INACTIVE`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case state.gasEstimateIsLoading:
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Form is invalid because gasEstimateIsLoading`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case new _bignumber.default(draftTransaction.gas.gasLimit, 16).lessThan(new _bignumber.default(state.gasLimitMinimum)):
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Form is invalid because ${draftTransaction.gas.gasLimit} is lessThan ${state.gasLimitMinimum}`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case draftTransaction.recipient.warning === 'loading':
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Form is invalid because recipient warning is loading`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          case draftTransaction.recipient.warning === _send.KNOWN_RECIPIENT_ADDRESS_WARNING && draftTransaction.recipient.recipientWarningAcknowledged === false:
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Form is invalid because recipient warning not acknolwedged`
            });
            draftTransaction.status = SEND_STATUSES.INVALID;
            break;
          default:
            slice.caseReducers.addHistoryEntry(state, {
              payload: `Form is valid`
            });
            draftTransaction.status = SEND_STATUSES.VALID;
        }
      }
    }
  },
  extraReducers: builder => {
    builder.addCase(_actionConstants.ACCOUNT_CHANGED, (state, action) => {
      // This event occurs when the user's account details update due to
      // background state changes. If the account that is being updated is
      // the current from account on the edit flow we need to update
      // the balance for the account and revalidate the send state.
      if (state.stage === SEND_STAGES.EDIT && action.payload.account) {
        const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
        if (draftTransaction && draftTransaction.fromAccount && draftTransaction.fromAccount.address === action.payload.account.address) {
          draftTransaction.fromAccount.balance = action.payload.account.balance;
          // We need to update the asset balance if the asset is the native
          // network asset. Once we update the balance we recompute error state.
          if (draftTransaction.asset.type === _transaction.AssetType.native) {
            draftTransaction.asset.balance = action.payload.account.balance;
          }
          slice.caseReducers.validateAmountField(state);
          slice.caseReducers.validateGasField(state);
          slice.caseReducers.validateSendState(state);
        }
      }
    }).addCase(_actionConstants.ADDRESS_BOOK_UPDATED, (state, action) => {
      var _addressBook$draftTra;
      // When the address book updates from background state changes we need
      // to check to see if an entry exists for the current address or if the
      // entry changed.
      const {
        addressBook
      } = action.payload;
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      if (draftTransaction && (_addressBook$draftTra = addressBook[draftTransaction.recipient.address]) !== null && _addressBook$draftTra !== void 0 && _addressBook$draftTra.name) {
        draftTransaction.recipient.nickname = addressBook[draftTransaction.recipient.address].name;
      }
    }).addCase(computeEstimatedGasLimit.pending, state => {
      // When we begin to fetch gasLimit we should indicate we are loading
      // a gas estimate.
      state.gasEstimateIsLoading = true;
    }).addCase(computeEstimatedGasLimit.fulfilled, (state, action) => {
      var _action$payload, _action$payload2;
      // When we receive a new gasLimit from the computeEstimatedGasLimit
      // thunk we need to update our gasLimit in the slice. We call into the
      // caseReducer updateGasLimit to tap into the appropriate follow up
      // checks and gasTotal calculation. First set gasEstimateIsLoading to
      // false.
      state.gasEstimateIsLoading = false;
      if ((_action$payload = action.payload) !== null && _action$payload !== void 0 && _action$payload.gasLimit) {
        slice.caseReducers.updateGasLimit(state, {
          payload: action.payload.gasLimit
        });
      }
      if ((_action$payload2 = action.payload) !== null && _action$payload2 !== void 0 && _action$payload2.gasTotalForLayer1) {
        slice.caseReducers.updateLayer1Fees(state, {
          payload: action.payload.gasTotalForLayer1
        });
      }
    }).addCase(computeEstimatedGasLimit.rejected, state => {
      // If gas estimation fails, we should set the loading state to false,
      // because it is no longer loading
      state.gasEstimateIsLoading = false;
    }).addCase(_actionConstants.GAS_FEE_ESTIMATES_UPDATED, (state, action) => {
      // When the gasFeeController updates its gas fee estimates we need to
      // update and validate state based on those new values
      slice.caseReducers.updateGasFeeEstimates(state, {
        payload: action.payload
      });
    }).addCase(initializeSendState.pending, state => {
      // when we begin initializing state, which can happen when switching
      // chains even after loading the send flow, we set gasEstimateIsLoading
      // as initialization will trigger a fetch for gasPrice estimates.
      state.gasEstimateIsLoading = true;
    }).addCase(initializeSendState.fulfilled, (state, action) => {
      // writes the computed initialized state values into the slice and then
      // calculates slice validity using the caseReducers.
      state.eip1559support = action.payload.eip1559support;
      state.selectedAccount.address = action.payload.account.address;
      state.selectedAccount.balance = action.payload.account.balance;
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      if (draftTransaction) {
        draftTransaction.gas.gasLimit = action.payload.gasLimit;
        draftTransaction.gas.gasTotal = action.payload.gasTotal;
        if (action.payload.chainHasChanged) {
          var _draftTransaction$fro3;
          // If the state was reinitialized as a result of the user changing
          // the network from the network dropdown, then the selected asset is
          // no longer valid and should be set to the native asset for the
          // network.
          draftTransaction.asset.type = _transaction.AssetType.native;
          draftTransaction.asset.balance = ((_draftTransaction$fro3 = draftTransaction.fromAccount) === null || _draftTransaction$fro3 === void 0 ? void 0 : _draftTransaction$fro3.balance) ?? state.selectedAccount.balance;
          draftTransaction.asset.details = null;
        }
      }
      slice.caseReducers.updateGasFeeEstimates(state, {
        payload: {
          gasFeeEstimates: action.payload.gasFeeEstimates,
          gasEstimateType: action.payload.gasEstimateType
        }
      });
      state.gasEstimatePollToken = action.payload.gasEstimatePollToken;
      if (action.payload.gasEstimatePollToken) {
        state.gasEstimateIsLoading = false;
      }
      if (state.stage !== SEND_STAGES.INACTIVE) {
        slice.caseReducers.validateRecipientUserInput(state, {
          payload: {
            chainId: action.payload.chainId,
            tokens: action.payload.tokens,
            useTokenDetection: action.payload.useTokenDetection,
            tokenAddressList: action.payload.tokenAddressList
          }
        });
      }
      if (state.amountMode === AMOUNT_MODES.MAX) {
        slice.caseReducers.updateAmountToMax(state);
      }
      slice.caseReducers.validateAmountField(state);
      slice.caseReducers.validateGasField(state);
      slice.caseReducers.validateSendState(state);
    }).addCase(_actionConstants.SELECTED_ACCOUNT_CHANGED, (state, action) => {
      // This event occurs when the user selects a new account from the
      // account menu, or the currently active account's balance updates.
      // We only care about new transactions, not edits, here, because we use
      // the fromAccount and ACCOUNT_CHANGED action for that.
      if (state.stage !== SEND_STAGES.EDIT && action.payload.account) {
        state.selectedAccount.balance = action.payload.account.balance;
        state.selectedAccount.address = action.payload.account.address;
        const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
        // This action will occur even when we aren't on the send flow, which
        // is okay as it keeps the selectedAccount details up to date. We do
        // not need to validate anything if there isn't a current draft
        // transaction. If there is, we need to update the asset balance if
        // the asset is set to the native network asset, and then validate
        // the transaction.
        if (draftTransaction) {
          if ((draftTransaction === null || draftTransaction === void 0 ? void 0 : draftTransaction.asset.type) === _transaction.AssetType.native) {
            draftTransaction.asset.balance = action.payload.account.balance;
          }
          slice.caseReducers.validateAmountField(state);
          slice.caseReducers.validateGasField(state);
          slice.caseReducers.validateSendState(state);
        }
      }
    }).addCase(_actionConstants.QR_CODE_DETECTED, (state, action) => {
      // When data is received from the QR Code Scanner we set the recipient
      // as long as a valid address can be pulled from the data. If an
      // address is pulled but it is invalid, we display an error.
      const qrCodeData = action.value;
      const draftTransaction = state.draftTransactions[state.currentTransactionUUID];
      if (qrCodeData && draftTransaction) {
        if (qrCodeData.type === 'address') {
          const scannedAddress = qrCodeData.values.address.toLowerCase();
          if ((0, _hexstringUtils.isValidHexAddress)(scannedAddress, {
            allowNonPrefixed: false
          })) {
            if (draftTransaction.recipient.address !== scannedAddress) {
              slice.caseReducers.updateRecipient(state, {
                payload: {
                  address: scannedAddress
                }
              });
            }
          } else {
            draftTransaction.recipient.error = _send.INVALID_RECIPIENT_ADDRESS_ERROR;
          }
        }
      }
    });
  }
});
const {
  actions,
  reducer
} = slice;
var _default = reducer;
exports.default = _default;
const {
  useDefaultGas,
  useCustomGas,
  updateGasLimit,
  validateRecipientUserInput,
  updateRecipientSearchMode,
  addHistoryEntry,
  acknowledgeRecipientWarning
} = actions;
exports.acknowledgeRecipientWarning = acknowledgeRecipientWarning;
exports.addHistoryEntry = addHistoryEntry;
exports.updateGasLimit = updateGasLimit;
exports.useCustomGas = useCustomGas;
exports.useDefaultGas = useDefaultGas;
// Action Creators
/**
 * This method is for usage when validating user input so that validation
 * is only run after a delay in typing of 300ms. Usage at callsites requires
 * passing in both the dispatch method and the payload to dispatch, which makes
 * it only applicable for use within action creators.
 */
const debouncedValidateRecipientUserInput = (0, _lodash.debounce)((dispatch, payload, resolve) => {
  dispatch(addHistoryEntry(`sendFlow - user typed ${payload.userInput} into recipient input field`));
  dispatch(validateRecipientUserInput(payload));
  resolve();
}, 300);

/**
 * Begins a new draft transaction, derived from the txParams of an existing
 * transaction in the TransactionController. This action will first clear out
 * the previous draft transactions and currentTransactionUUID from state. This
 * action is one of the two entry points into the send flow. NOTE: You must
 * route to the send page *after* dispatching this action resolves to ensure
 * that the draftTransaction is properly created.
 *
 * @param {AssetType} assetType - The type of asset the transaction
 *  being edited was sending. The details of the asset will be retrieved from
 *  the transaction data in state.
 * @param {string} transactionId - The id of the transaction being edited.
 * @returns {ThunkAction<void>}
 */
function editExistingTransaction(assetType, transactionId) {
  return async (dispatch, getState) => {
    await dispatch(actions.clearPreviousDrafts());
    const state = getState();
    const unapprovedTransactions = (0, _metamask.getUnapprovedTxs)(state);
    const transaction = unapprovedTransactions[transactionId];
    const account = (0, _selectors.getTargetAccount)(state, transaction.txParams.from);
    if (assetType === _transaction.AssetType.native) {
      await dispatch(actions.addNewDraft({
        ...draftTransactionInitialState,
        id: transactionId,
        fromAccount: account,
        gas: {
          ...draftTransactionInitialState.gas,
          gasLimit: transaction.txParams.gas,
          gasPrice: transaction.txParams.gasPrice
        },
        userInputHexData: transaction.txParams.data,
        recipient: {
          ...draftTransactionInitialState.recipient,
          address: transaction.txParams.to,
          nickname: (0, _selectors.getAddressBookEntryOrAccountName)(state, transaction.txParams.to) ?? ''
        },
        amount: {
          ...draftTransactionInitialState.amount,
          value: transaction.txParams.value
        },
        history: [`sendFlow - user clicked edit on transaction with id ${transactionId}`]
      }));
      await dispatch(updateSendAsset({
        type: _transaction.AssetType.native
      }, {
        initialAssetSet: true
      }));
    } else {
      const tokenData = (0, _transaction2.parseStandardTokenTransactionData)(transaction.txParams.data);
      const tokenAmountInDec = assetType === _transaction.AssetType.token ? (0, _metamaskControllerUtils.getTokenValueParam)(tokenData) : '1';
      const address = (0, _tokenUtil.getTokenAddressParam)(tokenData);
      const nickname = (0, _selectors.getAddressBookEntryOrAccountName)(state, address) ?? '';
      const tokenAmountInHex = (0, _ethereumjsUtil.addHexPrefix)((0, _conversion.decimalToHex)(tokenAmountInDec));
      await dispatch(actions.addNewDraft({
        ...draftTransactionInitialState,
        id: transactionId,
        fromAccount: account,
        gas: {
          ...draftTransactionInitialState.gas,
          gasLimit: transaction.txParams.gas,
          gasPrice: transaction.txParams.gasPrice
        },
        userInputHexData: transaction.txParams.data,
        recipient: {
          ...draftTransactionInitialState.recipient,
          address,
          nickname
        },
        amount: {
          ...draftTransactionInitialState.amount,
          value: tokenAmountInHex
        },
        history: [`sendFlow - user clicked edit on transaction with id ${transactionId}`]
      }));
      await dispatch(updateSendAsset({
        type: assetType,
        details: {
          address: transaction.txParams.to,
          ...(assetType === _transaction.AssetType.NFT ? {
            tokenId: (0, _tokenUtil.getTokenIdParam)(tokenData) ?? (0, _metamaskControllerUtils.getTokenValueParam)(tokenData)
          } : {})
        }
      }, {
        initialAssetSet: true
      }));
    }
    await dispatch(initializeSendState());
  };
}

/**
 * This method is a temporary placeholder to support the old UI in both the
 * gas modal and the send flow. Soon we won't need to modify gasPrice from the
 * send flow based on user input, it'll just be a shallow copy of the current
 * estimate. This method is necessary because the internal structure of this
 * slice has been changed such that it is agnostic to transaction envelope
 * type, and this method calls into the new structure in the appropriate way.
 *
 * @deprecated - don't extend the usage of this temporary method
 * @param {string} gasPrice - new gas price in hex wei
 * @returns {ThunkAction<void>}
 */
function updateGasPrice(gasPrice) {
  return dispatch => {
    dispatch(addHistoryEntry(`sendFlow - user set legacy gasPrice to ${gasPrice}`));
    dispatch(actions.updateGasFees({
      gasPrice,
      transactionType: _transaction.TransactionEnvelopeType.legacy,
      manuallyEdited: true
    }));
  };
}

/**
 * Updates the recipient in state based on the input provided, and then will
 * recompute gas limit when sending a TOKEN asset type. Changing the recipient
 * address results in hex data changing because the recipient address is
 * encoded in the data instead of being in the 'to' field. The to field in a
 * token send will always be the token contract address.
 * If no nickname is provided, the address book state will be checked to see if
 * a nickname for the passed address has already been saved. This ensures the
 * (temporary) send state recipient nickname is consistent with the address book
 * nickname which has already been persisted to state.
 *
 * @param {object} recipient - Recipient information
 * @param {string} recipient.address - hex address to send the transaction to
 * @param {string} [recipient.nickname] - Alias for the address to display
 *  to the user
 * @returns {ThunkAction<void>}
 */
function updateRecipient({
  address,
  nickname
}) {
  return async (dispatch, getState) => {
    // Do not addHistoryEntry here as this is called from a number of places
    // each with significance to the user and transaction history.
    const state = getState();
    const nicknameFromAddressBookEntryOrAccountName = (0, _selectors.getAddressBookEntryOrAccountName)(state, address) ?? '';
    await dispatch(actions.updateRecipient({
      address,
      nickname: nickname || nicknameFromAddressBookEntryOrAccountName
    }));
    await dispatch(computeEstimatedGasLimit());
  };
}

/**
 * This method is called to update the user's input into the ENS input field.
 * Once the field is updated, the field will be validated using a debounced
 * version of the validateRecipientUserInput action. This way validation only
 * occurs once the user has stopped typing.
 *
 * @param {string} userInput - the value that the user is typing into the field
 */
function updateRecipientUserInput(userInput) {
  return async (dispatch, getState) => {
    var _draftTransaction$fro4;
    dispatch(actions.updateRecipientWarning('loading'));
    dispatch(actions.updateDraftTransactionStatus(SEND_STATUSES.INVALID));
    await dispatch(actions.updateRecipientUserInput(userInput));
    const state = getState();
    const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];
    const sendingAddress = ((_draftTransaction$fro4 = draftTransaction.fromAccount) === null || _draftTransaction$fro4 === void 0 ? void 0 : _draftTransaction$fro4.address) ?? state[name].selectedAccount.address ?? (0, _selectors.getSelectedAddress)(state);
    const chainId = (0, _selectors.getCurrentChainId)(state);
    const tokens = (0, _metamask.getTokens)(state);
    const useTokenDetection = (0, _selectors.getUseTokenDetection)(state);
    const tokenMap = (0, _selectors.getTokenList)(state);
    const tokenAddressList = Object.keys(tokenMap);
    const inputIsValidHexAddress = (0, _hexstringUtils.isValidHexAddress)(userInput);
    let isProbablyAnAssetContract = false;
    if (inputIsValidHexAddress) {
      const smartContractAddress = await (0, _transactions.isSmartContractAddress)(userInput);
      if (smartContractAddress) {
        dispatch(actions.updateRecipientType(_send.RECIPIENT_TYPES.SMART_CONTRACT));
        const {
          symbol,
          decimals
        } = (0, _tokenUtil.getTokenMetadata)(userInput, tokenMap) || {};
        isProbablyAnAssetContract = symbol && decimals !== undefined;
        if (!isProbablyAnAssetContract) {
          try {
            const {
              standard
            } = await (0, _actions.getTokenStandardAndDetails)(userInput, sendingAddress);
            isProbablyAnAssetContract = Boolean(standard);
          } catch (e) {
            console.log(e);
          }
        }
      }
    }
    return new Promise(resolve => {
      debouncedValidateRecipientUserInput(dispatch, {
        userInput,
        chainId,
        tokens,
        useTokenDetection,
        tokenAddressList,
        isProbablyAnAssetContract
      }, resolve);
    });
  };
}

/**
 * Updates the amount the user intends to send and performs side effects.
 * 1. If the current mode is MAX change to INPUT
 * 2. If sending a token, recompute the gasLimit estimate
 *
 * @param {string} amount - hex string representing value
 * @returns {ThunkAction<void>}
 */
function updateSendAmount(amount) {
  return async (dispatch, getState) => {
    const state = getState();
    const {
      ticker
    } = (0, _metamask.getProviderConfig)(state);
    const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];
    let logAmount = amount;
    if (draftTransaction.asset.type === _transaction.AssetType.token) {
      var _draftTransaction$ass4, _draftTransaction$ass5, _draftTransaction$ass6;
      const multiplier = Math.pow(10, Number(((_draftTransaction$ass4 = draftTransaction.asset.details) === null || _draftTransaction$ass4 === void 0 ? void 0 : _draftTransaction$ass4.decimals) || 0));
      const decimalValueString = new _Numeric.Numeric((0, _ethereumjsUtil.addHexPrefix)(amount), 16).toBase(10).applyConversionRate((_draftTransaction$ass5 = draftTransaction.asset.details) !== null && _draftTransaction$ass5 !== void 0 && _draftTransaction$ass5.symbol ? multiplier : 1, true).toString();
      logAmount = `${Number(decimalValueString) ? decimalValueString : ''} ${(_draftTransaction$ass6 = draftTransaction.asset.details) === null || _draftTransaction$ass6 === void 0 ? void 0 : _draftTransaction$ass6.symbol}`;
    } else {
      const ethValue = (0, _conversion.getValueFromWeiHex)({
        value: amount,
        toCurrency: _common.EtherDenomination.ETH,
        numberOfDecimals: 8
      });
      logAmount = `${ethValue} ${ticker || _common.EtherDenomination.ETH}`;
    }
    await dispatch(addHistoryEntry(`sendFlow - user set amount to ${logAmount}`));
    await dispatch(actions.updateSendAmount(amount));
    if (state[name].amountMode === AMOUNT_MODES.MAX) {
      await dispatch(actions.updateAmountMode(AMOUNT_MODES.INPUT));
    }
    await dispatch(computeEstimatedGasLimit());
  };
}

/**
 * updates the asset to send to one of NATIVE or TOKEN and ensures that the
 * asset balance is set. If sending a TOKEN also updates the asset details
 * object with the appropriate ERC20 details including address, symbol and
 * decimals.
 *
 * @param {object} payload - action payload
 * @param {string} payload.type - type of asset to send
 * @param {TokenDetails} [payload.details] - ERC20 details if sending TOKEN asset
 * @returns {ThunkAction<void>}
 */
function updateSendAsset({
  type,
  details: providedDetails
}, {
  initialAssetSet = false
} = {}) {
  return async (dispatch, getState) => {
    var _draftTransaction$fro5;
    const state = getState();
    const {
      ticker
    } = (0, _metamask.getProviderConfig)(state);
    const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];
    const sendingAddress = ((_draftTransaction$fro5 = draftTransaction.fromAccount) === null || _draftTransaction$fro5 === void 0 ? void 0 : _draftTransaction$fro5.address) ?? state[name].selectedAccount.address ?? (0, _selectors.getSelectedAddress)(state);
    const account = (0, _selectors.getTargetAccount)(state, sendingAddress);
    if (type === _transaction.AssetType.native) {
      const unapprovedTxs = (0, _metamask.getUnapprovedTxs)(state);
      const unapprovedTx = unapprovedTxs === null || unapprovedTxs === void 0 ? void 0 : unapprovedTxs[draftTransaction.id];
      await dispatch(addHistoryEntry(`sendFlow - user set asset of type ${_transaction.AssetType.native} with symbol ${ticker ?? _common.EtherDenomination.ETH}`));
      await dispatch(actions.updateAsset({
        asset: {
          type,
          details: null,
          balance: account.balance,
          error: null
        },
        initialAssetSet
      }));

      // This is meant to handle cases where we are editing an unapprovedTx from the background state
      // and its type is a token method. In such a case, the hex data will be the necessary hex data
      // for calling the contract transfer method.
      // Now that we are updating the transaction to be a send of a native asset type, we should
      // set the hex data of the transaction being editing to be empty.
      // then the user will not want to send any hex data now that they have change the
      if ((unapprovedTx === null || unapprovedTx === void 0 ? void 0 : unapprovedTx.type) === _transaction.TransactionType.tokenMethodTransferFrom || (unapprovedTx === null || unapprovedTx === void 0 ? void 0 : unapprovedTx.type) === _transaction.TransactionType.tokenMethodTransfer || (unapprovedTx === null || unapprovedTx === void 0 ? void 0 : unapprovedTx.type) === _transaction.TransactionType.tokenMethodSafeTransferFrom) {
        await dispatch(actions.updateUserInputHexData(''));
      }
    } else {
      await dispatch((0, _actions.showLoadingIndication)());
      const details = {
        ...providedDetails,
        ...(await (0, _actions.getTokenStandardAndDetails)(providedDetails.address, sendingAddress, providedDetails.tokenId))
      };
      await dispatch((0, _actions.hideLoadingIndication)());
      const asset = {
        type,
        details,
        error: null
      };
      if (details.standard === _transaction.TokenStandard.ERC20) {
        asset.balance = (0, _ethereumjsUtil.addHexPrefix)((0, _transactionsControllerUtils.calcTokenAmount)(details.balance, details.decimals).toString(16));
        await dispatch(addHistoryEntry(`sendFlow - user set asset to ERC20 token with symbol ${details.symbol} and address ${details.address}`));
      } else if (details.standard === _transaction.TokenStandard.ERC1155 && type === _transaction.AssetType.NFT) {
        throw new Error('Sends of ERC1155 tokens are not currently supported');
      } else if (details.standard === _transaction.TokenStandard.ERC1155 || details.standard === _transaction.TokenStandard.ERC721) {
        if (type === _transaction.AssetType.token) {
          dispatch((0, _actions.showModal)({
            name: 'CONVERT_TOKEN_TO_NFT',
            tokenAddress: details.address
          }));
          asset.error = _errorKeys.INVALID_ASSET_TYPE;
          throw new Error(_errorKeys.INVALID_ASSET_TYPE);
        } else {
          let isCurrentOwner = true;
          try {
            isCurrentOwner = await (0, _actions.isNftOwner)(sendingAddress, details.address, details.tokenId);
          } catch (err) {
            if (err.message.includes('Unable to verify ownership.')) {
              // this would indicate that either our attempts to verify ownership failed because of network issues,
              // or, somehow a token has been added to NFTs state with an incorrect chainId.
            } else {
              // Any other error is unexpected and should be surfaced.
              dispatch((0, _actions.displayWarning)(err.message));
            }
          }
          if (isCurrentOwner) {
            asset.error = null;
            asset.balance = '0x1';
          } else {
            throw new Error('Send slice initialized as NFT send with an NFT not currently owned by the select account');
          }
          await dispatch(addHistoryEntry(`sendFlow - user set asset to NFT with tokenId ${details.tokenId} and address ${details.address}`));
        }
      }
      await dispatch(actions.updateAsset({
        asset,
        initialAssetSet
      }));
    }
    if (initialAssetSet === false) {
      await dispatch(computeEstimatedGasLimit());
    }
  };
}

/**
 * When a user has enabled hex data field in advanced settings they will be
 * able to supply hex data on a transaction. This method updates the user
 * supplied data. Note, when sending native assets this will result in
 * recomputing estimated gasLimit. When sending a ERC20 asset this is not done
 * because the data sent in the transaction will be determined by the asset,
 * recipient and value, NOT what the user has supplied.
 *
 * @param {string} hexData - hex encoded string representing transaction data.
 * @returns {ThunkAction<void>}
 */
function updateSendHexData(hexData) {
  return async (dispatch, getState) => {
    await dispatch(addHistoryEntry(`sendFlow - user added custom hexData ${hexData}`));
    await dispatch(actions.updateUserInputHexData(hexData));
    const state = getState();
    const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];
    if (draftTransaction.asset.type === _transaction.AssetType.native) {
      await dispatch(computeEstimatedGasLimit());
    }
  };
}

/**
 * Sets the recipient search mode to show a list of the user's contacts and
 * recently interacted with addresses.
 *
 * @returns {ThunkAction<void>}
 */
function useContactListForRecipientSearch() {
  return dispatch => {
    dispatch(addHistoryEntry(`sendFlow - user selected back to all on recipient screen`));
    dispatch(updateRecipientSearchMode(RECIPIENT_SEARCH_MODES.CONTACT_LIST));
  };
}

/**
 * Sets the recipient search mode to show a list of the user's own accounts.
 *
 * @returns {ThunkAction<void>}
 */
function useMyAccountsForRecipientSearch() {
  return dispatch => {
    dispatch(addHistoryEntry(`sendFlow - user selected transfer to my accounts on recipient screen`));
    dispatch(updateRecipientSearchMode(RECIPIENT_SEARCH_MODES.MY_ACCOUNTS));
  };
}

/**
 * Clears out the recipient user input, ENS resolution and recipient validation.
 *
 * @returns {ThunkAction<void>}
 */
function resetRecipientInput() {
  return async (dispatch, getState) => {
    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    await dispatch(addHistoryEntry(`sendFlow - user cleared recipient input`));
    await dispatch(updateRecipientUserInput(''));
    await dispatch(updateRecipient({
      address: '',
      nickname: ''
    }));
    await dispatch((0, _domains.resetDomainResolution)());
    await dispatch(validateRecipientUserInput({
      chainId
    }));
  };
}

/**
 * Resets the entire send state tree to the initial state. It also disconnects
 * polling from the gas controller if the token is present in state.
 *
 * @returns {ThunkAction<void>}
 */
function resetSendState() {
  return async (dispatch, getState) => {
    const state = getState();
    dispatch(actions.resetSendState());
    if (state[name].gasEstimatePollToken) {
      await (0, _actions.disconnectGasFeeEstimatePoller)(state[name].gasEstimatePollToken);
      (0, _actions.removePollingTokenFromAppState)(state[name].gasEstimatePollToken);
    }
  };
}

/**
 * Signs a transaction or updates a transaction in state if editing.
 * This method is called when a user clicks the next button in the footer of
 * the send page, signaling that a transaction should be executed. This method
 * will create the transaction in state (by way of the various global provider
 * constructs) which will eventually (and fairly quickly from user perspective)
 * result in a confirmation window being displayed for the transaction.
 *
 * @returns {ThunkAction<void>}
 */
function signTransaction() {
  return async (dispatch, getState) => {
    const state = getState();
    const {
      stage,
      eip1559support
    } = state[name];
    const txParams = (0, _helpers.generateTransactionParams)(state[name]);
    const draftTransaction = state[name].draftTransactions[state[name].currentTransactionUUID];
    if (stage === SEND_STAGES.EDIT) {
      var _unapprovedTx$sendFlo;
      // When dealing with the edit flow there is already a transaction in
      // state that we must update, this branch is responsible for that logic.
      // We first must grab the previous transaction object from state and then
      // merge in the modified txParams. Once the transaction has been modified
      // we can send that to the background to update the transaction in state.
      const unapprovedTxs = (0, _metamask.getUnapprovedTxs)(state);
      const unapprovedTx = (0, _lodash.cloneDeep)(unapprovedTxs[draftTransaction.id]);
      // We only update the tx params that can be changed via the edit flow UX
      const eip1559OnlyTxParamsToUpdate = {
        data: txParams.data,
        from: txParams.from,
        to: txParams.to,
        value: txParams.value,
        gas: unapprovedTx.userEditedGasLimit ? unapprovedTx.txParams.gas : txParams.gas
      };
      unapprovedTx.originalGasEstimate = eip1559OnlyTxParamsToUpdate.gas;
      const editingTx = {
        ...unapprovedTx,
        txParams: Object.assign(unapprovedTx.txParams, eip1559support ? eip1559OnlyTxParamsToUpdate : txParams)
      };
      await dispatch(addHistoryEntry(`sendFlow - user clicked next and transaction should be updated in controller`));
      await dispatch((0, _actions.updateTransactionSendFlowHistory)(draftTransaction.id, ((_unapprovedTx$sendFlo = unapprovedTx.sendFlowHistory) === null || _unapprovedTx$sendFlo === void 0 ? void 0 : _unapprovedTx$sendFlo.length) || 0, draftTransaction.history));
      await dispatch((0, _actions.updateEditableParams)(draftTransaction.id, editingTx.txParams));
      await dispatch((0, _actions.updateTransactionGasFees)(draftTransaction.id, editingTx.txParams));
    } else {
      let transactionType = draftTransaction.recipient.type === _send.RECIPIENT_TYPES.SMART_CONTRACT ? _transaction.TransactionType.contractInteraction : _transaction.TransactionType.simpleSend;
      if (draftTransaction.asset.type !== _transaction.AssetType.native) {
        transactionType = draftTransaction.asset.type === _transaction.AssetType.NFT ? _transaction.TransactionType.tokenMethodTransferFrom : _transaction.TransactionType.tokenMethodTransfer;
      }
      await dispatch(addHistoryEntry(`sendFlow - user clicked next and transaction should be added to controller`));
      dispatch((0, _actions.addUnapprovedTransactionAndRouteToConfirmationPage)(undefined, txParams, transactionType, draftTransaction.history));
    }
  };
}

/**
 * Toggles the amount.mode between INPUT and MAX modes.
 * As a result, the amount.value will change to either '0x0' when moving from
 * MAX to INPUT, or to the maximum allowable amount based on current asset when
 * moving from INPUT to MAX.
 *
 * @returns {ThunkAction<void>}
 */
function toggleSendMaxMode() {
  return async (dispatch, getState) => {
    const state = getState();
    if (state[name].amountMode === AMOUNT_MODES.MAX) {
      await dispatch(actions.updateAmountMode(AMOUNT_MODES.INPUT));
      await dispatch(actions.updateSendAmount('0x0'));
      await dispatch(addHistoryEntry(`sendFlow - user toggled max mode off`));
    } else {
      await dispatch(actions.updateAmountMode(AMOUNT_MODES.MAX));
      await dispatch(actions.updateAmountToMax());
      await dispatch(addHistoryEntry(`sendFlow - user toggled max mode on`));
    }
    await dispatch(computeEstimatedGasLimit());
  };
}

/**
 * Begins a new draft transaction, clearing out the previous draft transactions
 * from state, and clearing the currentTransactionUUID. This action is one of
 * the two entry points into the send flow. NOTE: You must route to the send
 * page *after* dispatching this action resolves to ensure that the
 * draftTransaction is properly created.
 *
 * @param {Pick<Asset, 'type' | 'details'>} asset - A partial asset
 *  object containing at least the asset type. If specifying a non-native asset
 *  then the asset details must be included with at least the address.
 * @returns {ThunkAction<void>}
 */
function startNewDraftTransaction(asset) {
  return async dispatch => {
    await dispatch(actions.clearPreviousDrafts());
    await dispatch(actions.addNewDraft({
      ...draftTransactionInitialState,
      history: [`sendFlow - User started new draft transaction`]
    }));
    await dispatch(updateSendAsset({
      type: asset.type ?? _transaction.AssetType.native,
      details: asset.details
    }));
    await dispatch(initializeSendState());
  };
}

// Selectors
/**
 * The following typedef is a shortcut for typing selectors below. It uses a
 * generic type, T, so that each selector can specify it's return type.
 *
 * @template T
 * @typedef {(state: MetaMaskState) => T} Selector
 */

/**
 * Selector that returns the current draft transaction's UUID.
 *
 * @type {Selector<string>}
 */
function getCurrentTransactionUUID(state) {
  return state[name].currentTransactionUUID;
}

/**
 * Selector that returns the current draft transaction.
 *
 * @type {Selector<DraftTransaction>}
 */
function getCurrentDraftTransaction(state) {
  return state[name].draftTransactions[getCurrentTransactionUUID(state)] ?? {};
}

/**
 * Selector that returns true if a draft transaction exists.
 *
 * @type {Selector<boolean>}
 */
function getDraftTransactionExists(state) {
  const draftTransaction = getCurrentDraftTransaction(state);
  if (Object.keys(draftTransaction).length === 0) {
    return false;
  }
  return true;
}

// Gas selectors

/**
 * Selector that returns the current draft transaction's gasLimit.
 *
 * @type {Selector<?string>}
 */
function getGasLimit(state) {
  var _getCurrentDraftTrans;
  return (_getCurrentDraftTrans = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans === void 0 ? void 0 : _getCurrentDraftTrans.gasLimit;
}

/**
 * Selector that returns the current draft transaction's gasPrice.
 *
 * @type {Selector<?string>}
 */
function getGasPrice(state) {
  var _getCurrentDraftTrans2;
  return (_getCurrentDraftTrans2 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans2 === void 0 ? void 0 : _getCurrentDraftTrans2.gasPrice;
}

/**
 * Selector that returns the current draft transaction's gasTotal.
 *
 * @type {Selector<?string>}
 */
function getGasTotal(state) {
  var _getCurrentDraftTrans3;
  return (_getCurrentDraftTrans3 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans3 === void 0 ? void 0 : _getCurrentDraftTrans3.gasTotal;
}

/**
 * Selector that returns the error, if present, for the gas fields.
 *
 * @type {Selector<?string>}
 */
function gasFeeIsInError(state) {
  var _getCurrentDraftTrans4;
  return Boolean((_getCurrentDraftTrans4 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans4 === void 0 ? void 0 : _getCurrentDraftTrans4.error);
}

/**
 * Selector that returns the minimum gasLimit for the current network.
 *
 * @type {Selector<string>}
 */
function getMinimumGasLimitForSend(state) {
  return state[name].gasLimitMinimum;
}

/**
 * Selector that returns the current draft transaction's gasLimit.
 *
 * @type {Selector<MapValuesToUnion<SendStateGasModes>>}
 */
function getGasInputMode(state) {
  const isMainnet = (0, _selectors.getIsMainnet)(state);
  const gasEstimateType = (0, _metamask.getGasEstimateType)(state);
  const showAdvancedGasFields = (0, _selectors.getAdvancedInlineGasShown)(state);
  if (state[name].gasIsSetInModal) {
    return GAS_INPUT_MODES.CUSTOM;
  }
  if (!isMainnet && !false || showAdvancedGasFields) {
    return GAS_INPUT_MODES.INLINE;
  }

  // We get eth_gasPrice estimation if the legacy API fails but we need to
  // instruct the UI to render the INLINE inputs in this case, only on
  // mainnet or IN_TEST.
  if ((isMainnet || false) && gasEstimateType === _gas.GasEstimateTypes.ethGasPrice) {
    return GAS_INPUT_MODES.INLINE;
  }
  return GAS_INPUT_MODES.BASIC;
}

// Asset Selectors
/**
 * Selector that returns the asset the current draft transaction is sending.
 *
 * @type {Selector<?Asset>}
 */
function getSendAsset(state) {
  return getCurrentDraftTransaction(state).asset;
}

/**
 * Selector that returns the contract address of the non-native asset that
 * the current transaction is sending, if it exists.
 *
 * @type {Selector<?string>}
 */
function getSendAssetAddress(state) {
  var _getSendAsset, _getSendAsset$details;
  return (_getSendAsset = getSendAsset(state)) === null || _getSendAsset === void 0 ? void 0 : (_getSendAsset$details = _getSendAsset.details) === null || _getSendAsset$details === void 0 ? void 0 : _getSendAsset$details.address;
}

/**
 * Selector that returns a boolean value describing whether the currently
 * selected asset is sendable, based upon the standard of the token.
 *
 * @type {Selector<boolean>}
 */
function getIsAssetSendable(state) {
  var _getSendAsset2, _getSendAsset3, _getSendAsset3$detail;
  if (((_getSendAsset2 = getSendAsset(state)) === null || _getSendAsset2 === void 0 ? void 0 : _getSendAsset2.type) === _transaction.AssetType.native) {
    return true;
  }
  return ((_getSendAsset3 = getSendAsset(state)) === null || _getSendAsset3 === void 0 ? void 0 : (_getSendAsset3$detail = _getSendAsset3.details) === null || _getSendAsset3$detail === void 0 ? void 0 : _getSendAsset3$detail.isERC721) === false;
}

/**
 * Selector that returns the asset error if it exists.
 *
 * @type {Selector<?string>}
 */
function getAssetError(state) {
  return getSendAsset(state).error;
}

// Amount Selectors
/**
 * Selector that returns the amount that current draft transaction is sending.
 *
 * @type {Selector<?string>}
 */
function getSendAmount(state) {
  var _getCurrentDraftTrans5;
  return (_getCurrentDraftTrans5 = getCurrentDraftTransaction(state).amount) === null || _getCurrentDraftTrans5 === void 0 ? void 0 : _getCurrentDraftTrans5.value;
}

/**
 * Selector that returns true if the user has enough native asset balance to
 * cover the cost of the transaction.
 *
 * @type {Selector<boolean>}
 */
function getIsBalanceInsufficient(state) {
  var _getCurrentDraftTrans6;
  return ((_getCurrentDraftTrans6 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans6 === void 0 ? void 0 : _getCurrentDraftTrans6.error) === _send.INSUFFICIENT_FUNDS_ERROR;
}

/**
 * Selector that returns the amoung send mode, either MAX or INPUT.
 *
 * @type {Selector<boolean>}
 */
function getSendMaxModeState(state) {
  return state[name].amountMode === AMOUNT_MODES.MAX;
}

/**
 * Selector that returns the current draft transaction's data field.
 *
 * @type {Selector<?string>}
 */
function getSendHexData(state) {
  return getCurrentDraftTransaction(state).userInputHexData;
}

/**
 * Selector that returns the current draft transaction's id, if present.
 *
 * @type {Selector<?string>}
 */
function getDraftTransactionID(state) {
  return getCurrentDraftTransaction(state).id;
}

/**
 * Selector that returns true if there is an error on the amount field.
 *
 * @type {Selector<boolean>}
 */
function sendAmountIsInError(state) {
  var _getCurrentDraftTrans7;
  return Boolean((_getCurrentDraftTrans7 = getCurrentDraftTransaction(state).amount) === null || _getCurrentDraftTrans7 === void 0 ? void 0 : _getCurrentDraftTrans7.error);
}

// Recipient Selectors
/**
 * Selector that returns the current draft transaction's recipient.
 *
 * @type {Selector<DraftTransaction['recipient']>}
 */
function getRecipient(state) {
  const draft = getCurrentDraftTransaction(state);
  if (!draft.recipient) {
    return {
      address: '',
      nickname: '',
      error: null,
      warning: null
    };
  }
  const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(draft.recipient.address);
  if (state.metamask.ensResolutionsByAddress) {
    return {
      ...draft.recipient,
      nickname: draft.recipient.nickname || (0, _selectors.getEnsResolutionByAddress)(state, checksummedAddress)
    };
  }
  return draft.recipient;
}

/**
 * Selector that returns the addres of the current draft transaction's
 * recipient.
 *
 * @type {Selector<?string>}
 */
function getSendTo(state) {
  var _getRecipient;
  return (_getRecipient = getRecipient(state)) === null || _getRecipient === void 0 ? void 0 : _getRecipient.address;
}

/**
 * Selector that returns true if the current recipientMode is MY_ACCOUNTS
 *
 * @type {Selector<boolean>}
 */
function getIsUsingMyAccountForRecipientSearch(state) {
  return state[name].recipientMode === RECIPIENT_SEARCH_MODES.MY_ACCOUNTS;
}

/**
 * Selector that returns the value that the user has typed into the recipient
 * input field.
 *
 * @type {Selector<?string>}
 */
function getRecipientUserInput(state) {
  return state[name].recipientInput;
}
function getRecipientWarningAcknowledgement(state) {
  var _getCurrentDraftTrans8;
  return ((_getCurrentDraftTrans8 = getCurrentDraftTransaction(state).recipient) === null || _getCurrentDraftTrans8 === void 0 ? void 0 : _getCurrentDraftTrans8.recipientWarningAcknowledged) ?? false;
}

// Overall validity and stage selectors

/**
 * Selector that returns the gasFee and amount errors, if they exist.
 *
 * @type {Selector<{ gasFee?: string, amount?: string}>}
 */
function getSendErrors(state) {
  var _getCurrentDraftTrans9, _getCurrentDraftTrans10;
  return {
    gasFee: (_getCurrentDraftTrans9 = getCurrentDraftTransaction(state).gas) === null || _getCurrentDraftTrans9 === void 0 ? void 0 : _getCurrentDraftTrans9.error,
    amount: (_getCurrentDraftTrans10 = getCurrentDraftTransaction(state).amount) === null || _getCurrentDraftTrans10 === void 0 ? void 0 : _getCurrentDraftTrans10.error
  };
}

/**
 * Selector that returns true if the stage is anything except INACTIVE
 *
 * @type {Selector<boolean>}
 */
function isSendStateInitialized(state) {
  return state[name].stage !== SEND_STAGES.INACTIVE;
}

/**
 * Selector that returns true if the current draft transaction is valid and in
 * a sendable state.
 *
 * @type {Selector<boolean>}
 */
function isSendFormInvalid(state) {
  const draftTransaction = getCurrentDraftTransaction(state);
  if (!draftTransaction) {
    return true;
  }
  return draftTransaction.status === SEND_STATUSES.INVALID;
}

/**
 * Selector that returns the current stage of the send flow
 *
 * @type {Selector<MapValuesToUnion<SendStateStages>>}
 */
function getSendStage(state) {
  return state[name].stage;
}


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\ducks\\send\\send.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\swaps\\swaps.js", {"../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/constants/swaps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\swaps.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../pages/swaps/swaps.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\swaps\\swaps.util.ts","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","@reduxjs/toolkit":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@reduxjs\\toolkit\\dist\\index.js","@sentry/browser":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cducks%5Cswaps%5Cswaps.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GAS_PRICES_LOADING_STATES = exports.FALLBACK_GAS_MULTIPLIER = void 0;
exports.cancelSwapsSmartTransaction = cancelSwapsSmartTransaction;
exports.fetchAndSetSwapsGasPriceInfo = exports.default = exports.clearSwapsState = void 0;
exports.fetchMetaSwapsGasPriceEstimates = fetchMetaSwapsGasPriceEstimates;
exports.fetchSwapsLivenessAndFeatureFlags = exports.fetchQuotesAndSetQuoteState = void 0;
exports.fetchSwapsSmartTransactionFees = fetchSwapsSmartTransactionFees;
exports.setTopAssets = exports.setSwapsFromToken = exports.setSwapToToken = exports.setSwapQuotesFetchStartTime = exports.setReviewSwapClickedTimestamp = exports.setMaxSlippage = exports.setIsFeatureFlagLoaded = exports.setFromTokenInputValue = exports.setFromTokenError = exports.setFetchingQuotes = exports.setBalanceError = exports.setAggregatorMetadata = exports.prepareToLeaveSwaps = exports.prepareForRetryGetQuotes = exports.navigateBackToBuildQuote = exports.getUsedSwapsGasPrice = exports.getUsedQuote = exports.getTradeTxId = exports.getTopQuote = exports.getTopAssets = exports.getToToken = exports.getSwapsWelcomeMessageSeenStatus = exports.getSwapsUserFeeLevel = exports.getSwapsTokens = exports.getSwapsSTXLoading = exports.getSwapsQuoteRefreshTime = exports.getSwapsQuotePrefetchingRefreshTime = exports.getSwapsNetworkConfig = exports.getSwapsFeatureIsLive = exports.getSwapsFallbackGasPrice = exports.getSwapsErrorKey = exports.getSwapsCustomizationModalPrice = exports.getSwapsCustomizationModalLimit = exports.getSwapGasPriceEstimateData = exports.getSmartTransactionsOptInStatus = exports.getSmartTransactionsErrorMessageDismissed = exports.getSmartTransactionsError = exports.getSmartTransactionsEnabled = exports.getSmartTransactionFees = exports.getSmartTransactionEstimatedGas = exports.getShowQuoteLoadingScreen = exports.getSelectedQuote = exports.getReviewSwapClickedTimestamp = exports.getQuotesLastFetched = exports.getQuotesFetchStartTime = exports.getQuotes = exports.getPendingSmartTransactions = exports.getMaxSlippage = exports.getIsFeatureFlagLoaded = exports.getFromTokenInputValue = exports.getFromTokenError = exports.getFromToken = exports.getFetchingQuotes = exports.getFetchParams = exports.getDestinationTokenInfo = exports.getCustomSwapsGasPrice = exports.getCustomSwapsGas = exports.getCustomMaxPriorityFeePerGas = exports.getCustomMaxFeePerGas = exports.getCurrentSmartTransactionsError = exports.getCurrentSmartTransactionsEnabled = exports.getCurrentSmartTransactions = exports.getBalanceError = exports.getBackgroundSwapRouteState = exports.getApproveTxParams = exports.getApproveTxId = exports.getAggregatorMetadata = void 0;
exports.shouldShowCustomPriceTooLowWarning = shouldShowCustomPriceTooLowWarning;
exports.swapsQuoteSelected = exports.swapGasPriceEstimateIsLoading = exports.swapGasEstimateLoadingHasFailed = exports.swapCustomGasModalPriceEdited = exports.swapCustomGasModalLimitEdited = exports.swapCustomGasModalClosed = exports.signAndSendTransactions = exports.signAndSendSwapsSmartTransaction = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _browser = require("@sentry/browser");
var _actions = require("../../store/actions");
var _routes = require("../../helpers/constants/routes");
var _swaps = require("../../pages/swaps/swaps.util");
var _conversion = require("../../../shared/modules/conversion.utils");
var _selectors = require("../../selectors");
var _metametrics = require("../../../shared/constants/metametrics");
var _swaps2 = require("../../../shared/constants/swaps");
var _transaction = require("../../../shared/constants/transaction");
var _metamask = require("../metamask/metamask");
var _app = require("../../../shared/constants/app");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _common = require("../../../shared/constants/common");
var _Numeric = require("../../../shared/modules/Numeric");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GAS_PRICES_LOADING_STATES = {
  INITIAL: 'INITIAL',
  LOADING: 'LOADING',
  FAILED: 'FAILED',
  COMPLETED: 'COMPLETED'
};
exports.GAS_PRICES_LOADING_STATES = GAS_PRICES_LOADING_STATES;
const FALLBACK_GAS_MULTIPLIER = 1.5;
exports.FALLBACK_GAS_MULTIPLIER = FALLBACK_GAS_MULTIPLIER;
const initialState = {
  aggregatorMetadata: null,
  approveTxId: null,
  tradeTxId: null,
  balanceError: false,
  fetchingQuotes: false,
  fromToken: null,
  fromTokenInputValue: '',
  fromTokenError: null,
  isFeatureFlagLoaded: false,
  maxSlippage: _swaps2.Slippage.default,
  quotesFetchStartTime: null,
  reviewSwapClickedTimestamp: null,
  topAssets: {},
  toToken: null,
  customGas: {
    price: null,
    limit: null,
    loading: GAS_PRICES_LOADING_STATES.INITIAL,
    priceEstimates: {},
    fallBackPrice: null
  },
  currentSmartTransactionsError: '',
  swapsSTXLoading: false
};
const slice = (0, _toolkit.createSlice)({
  name: 'swaps',
  initialState,
  reducers: {
    clearSwapsState: () => initialState,
    navigatedBackToBuildQuote: state => {
      state.approveTxId = null;
      state.tradeTxId = null;
      state.balanceError = false;
      state.fetchingQuotes = false;
      state.customGas.limit = null;
      state.customGas.price = null;
    },
    retriedGetQuotes: state => {
      state.approveTxId = null;
      state.balanceError = false;
      state.fetchingQuotes = false;
    },
    setAggregatorMetadata: (state, action) => {
      state.aggregatorMetadata = action.payload;
    },
    setBalanceError: (state, action) => {
      state.balanceError = action.payload;
    },
    setFetchingQuotes: (state, action) => {
      state.fetchingQuotes = action.payload;
    },
    setFromToken: (state, action) => {
      state.fromToken = action.payload;
    },
    setFromTokenInputValue: (state, action) => {
      state.fromTokenInputValue = action.payload;
    },
    setFromTokenError: (state, action) => {
      state.fromTokenError = action.payload;
    },
    setIsFeatureFlagLoaded: (state, action) => {
      state.isFeatureFlagLoaded = action.payload;
    },
    setMaxSlippage: (state, action) => {
      state.maxSlippage = action.payload;
    },
    setQuotesFetchStartTime: (state, action) => {
      state.quotesFetchStartTime = action.payload;
    },
    setReviewSwapClickedTimestamp: (state, action) => {
      state.reviewSwapClickedTimestamp = action.payload;
    },
    setTopAssets: (state, action) => {
      state.topAssets = action.payload;
    },
    setToToken: (state, action) => {
      state.toToken = action.payload;
    },
    swapCustomGasModalClosed: state => {
      state.customGas.price = null;
      state.customGas.limit = null;
    },
    swapCustomGasModalPriceEdited: (state, action) => {
      state.customGas.price = action.payload;
    },
    swapCustomGasModalLimitEdited: (state, action) => {
      state.customGas.limit = action.payload;
    },
    swapGasPriceEstimatesFetchStarted: state => {
      state.customGas.loading = GAS_PRICES_LOADING_STATES.LOADING;
    },
    swapGasPriceEstimatesFetchFailed: state => {
      state.customGas.loading = GAS_PRICES_LOADING_STATES.FAILED;
    },
    swapGasPriceEstimatesFetchCompleted: (state, action) => {
      state.customGas.priceEstimates = action.payload.priceEstimates;
      state.customGas.loading = GAS_PRICES_LOADING_STATES.COMPLETED;
    },
    retrievedFallbackSwapsGasPrice: (state, action) => {
      state.customGas.fallBackPrice = action.payload;
    },
    setCurrentSmartTransactionsError: (state, action) => {
      const errorType = Object.values(_swaps.StxErrorTypes).includes(action.payload) ? action.payload : _swaps.StxErrorTypes.UNAVAILABLE;
      state.currentSmartTransactionsError = errorType;
    },
    setSwapsSTXSubmitLoading: (state, action) => {
      state.swapsSTXLoading = action.payload || false;
    }
  }
});
const {
  actions,
  reducer
} = slice;
var _default = reducer; // Selectors
exports.default = _default;
const getAggregatorMetadata = state => state.swaps.aggregatorMetadata;
exports.getAggregatorMetadata = getAggregatorMetadata;
const getBalanceError = state => state.swaps.balanceError;
exports.getBalanceError = getBalanceError;
const getFromToken = state => state.swaps.fromToken;
exports.getFromToken = getFromToken;
const getFromTokenError = state => state.swaps.fromTokenError;
exports.getFromTokenError = getFromTokenError;
const getFromTokenInputValue = state => state.swaps.fromTokenInputValue;
exports.getFromTokenInputValue = getFromTokenInputValue;
const getIsFeatureFlagLoaded = state => state.swaps.isFeatureFlagLoaded;
exports.getIsFeatureFlagLoaded = getIsFeatureFlagLoaded;
const getSwapsSTXLoading = state => state.swaps.swapsSTXLoading;
exports.getSwapsSTXLoading = getSwapsSTXLoading;
const getMaxSlippage = state => state.swaps.maxSlippage;
exports.getMaxSlippage = getMaxSlippage;
const getTopAssets = state => state.swaps.topAssets;
exports.getTopAssets = getTopAssets;
const getToToken = state => state.swaps.toToken;
exports.getToToken = getToToken;
const getFetchingQuotes = state => state.swaps.fetchingQuotes;
exports.getFetchingQuotes = getFetchingQuotes;
const getQuotesFetchStartTime = state => state.swaps.quotesFetchStartTime;
exports.getQuotesFetchStartTime = getQuotesFetchStartTime;
const getReviewSwapClickedTimestamp = state => state.swaps.reviewSwapClickedTimestamp;
exports.getReviewSwapClickedTimestamp = getReviewSwapClickedTimestamp;
const getSwapsCustomizationModalPrice = state => state.swaps.customGas.price;
exports.getSwapsCustomizationModalPrice = getSwapsCustomizationModalPrice;
const getSwapsCustomizationModalLimit = state => state.swaps.customGas.limit;
exports.getSwapsCustomizationModalLimit = getSwapsCustomizationModalLimit;
const swapGasPriceEstimateIsLoading = state => state.swaps.customGas.loading === GAS_PRICES_LOADING_STATES.LOADING;
exports.swapGasPriceEstimateIsLoading = swapGasPriceEstimateIsLoading;
const swapGasEstimateLoadingHasFailed = state => state.swaps.customGas.loading === GAS_PRICES_LOADING_STATES.INITIAL;
exports.swapGasEstimateLoadingHasFailed = swapGasEstimateLoadingHasFailed;
const getSwapGasPriceEstimateData = state => state.swaps.customGas.priceEstimates;
exports.getSwapGasPriceEstimateData = getSwapGasPriceEstimateData;
const getSwapsFallbackGasPrice = state => state.swaps.customGas.fallBackPrice;
exports.getSwapsFallbackGasPrice = getSwapsFallbackGasPrice;
const getCurrentSmartTransactionsError = state => state.swaps.currentSmartTransactionsError;
exports.getCurrentSmartTransactionsError = getCurrentSmartTransactionsError;
function shouldShowCustomPriceTooLowWarning(state) {
  const {
    average
  } = getSwapGasPriceEstimateData(state);
  const customGasPrice = getSwapsCustomizationModalPrice(state);
  if (!customGasPrice || average === undefined) {
    return false;
  }
  const customPriceRisksSwapFailure = new _Numeric.Numeric(customGasPrice, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.GWEI).greaterThan(average, 10);
  return customPriceRisksSwapFailure;
}

// Background selectors

const getSwapsState = state => state.metamask.swapsState;
const getSwapsFeatureIsLive = state => state.metamask.swapsState.swapsFeatureIsLive;
exports.getSwapsFeatureIsLive = getSwapsFeatureIsLive;
const getSmartTransactionsError = state => state.appState.smartTransactionsError;
exports.getSmartTransactionsError = getSmartTransactionsError;
const getSmartTransactionsErrorMessageDismissed = state => state.appState.smartTransactionsErrorMessageDismissed;
exports.getSmartTransactionsErrorMessageDismissed = getSmartTransactionsErrorMessageDismissed;
const getSmartTransactionsEnabled = state => {
  var _state$metamask$swaps, _state$metamask$swaps2, _state$metamask$swaps3, _state$metamask$smart;
  const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
  const chainId = (0, _selectors.getCurrentChainId)(state);
  const isAllowedNetwork = _swaps2.ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS.includes(chainId);
  const smartTransactionsFeatureFlagEnabled = (_state$metamask$swaps = state.metamask.swapsState) === null || _state$metamask$swaps === void 0 ? void 0 : (_state$metamask$swaps2 = _state$metamask$swaps.swapsFeatureFlags) === null || _state$metamask$swaps2 === void 0 ? void 0 : (_state$metamask$swaps3 = _state$metamask$swaps2.smartTransactions) === null || _state$metamask$swaps3 === void 0 ? void 0 : _state$metamask$swaps3.extensionActive;
  const smartTransactionsLiveness = (_state$metamask$smart = state.metamask.smartTransactionsState) === null || _state$metamask$smart === void 0 ? void 0 : _state$metamask$smart.liveness;
  return Boolean(isAllowedNetwork && !hardwareWalletUsed && smartTransactionsFeatureFlagEnabled && smartTransactionsLiveness);
};
exports.getSmartTransactionsEnabled = getSmartTransactionsEnabled;
const getCurrentSmartTransactionsEnabled = state => {
  const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
  const currentSmartTransactionsError = getCurrentSmartTransactionsError(state);
  return smartTransactionsEnabled && !currentSmartTransactionsError;
};
exports.getCurrentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled;
const getSwapsQuoteRefreshTime = state => state.metamask.swapsState.swapsQuoteRefreshTime;
exports.getSwapsQuoteRefreshTime = getSwapsQuoteRefreshTime;
const getSwapsQuotePrefetchingRefreshTime = state => state.metamask.swapsState.swapsQuotePrefetchingRefreshTime;
exports.getSwapsQuotePrefetchingRefreshTime = getSwapsQuotePrefetchingRefreshTime;
const getBackgroundSwapRouteState = state => state.metamask.swapsState.routeState;
exports.getBackgroundSwapRouteState = getBackgroundSwapRouteState;
const getCustomSwapsGas = state => state.metamask.swapsState.customMaxGas;
exports.getCustomSwapsGas = getCustomSwapsGas;
const getCustomSwapsGasPrice = state => state.metamask.swapsState.customGasPrice;
exports.getCustomSwapsGasPrice = getCustomSwapsGasPrice;
const getCustomMaxFeePerGas = state => state.metamask.swapsState.customMaxFeePerGas;
exports.getCustomMaxFeePerGas = getCustomMaxFeePerGas;
const getCustomMaxPriorityFeePerGas = state => state.metamask.swapsState.customMaxPriorityFeePerGas;
exports.getCustomMaxPriorityFeePerGas = getCustomMaxPriorityFeePerGas;
const getSwapsUserFeeLevel = state => state.metamask.swapsState.swapsUserFeeLevel;
exports.getSwapsUserFeeLevel = getSwapsUserFeeLevel;
const getFetchParams = state => state.metamask.swapsState.fetchParams;
exports.getFetchParams = getFetchParams;
const getQuotes = state => state.metamask.swapsState.quotes;
exports.getQuotes = getQuotes;
const getQuotesLastFetched = state => state.metamask.swapsState.quotesLastFetched;
exports.getQuotesLastFetched = getQuotesLastFetched;
const getSelectedQuote = state => {
  const {
    selectedAggId,
    quotes
  } = getSwapsState(state);
  return quotes[selectedAggId];
};
exports.getSelectedQuote = getSelectedQuote;
const getSwapsErrorKey = state => {
  var _getSwapsState;
  return (_getSwapsState = getSwapsState(state)) === null || _getSwapsState === void 0 ? void 0 : _getSwapsState.errorKey;
};
exports.getSwapsErrorKey = getSwapsErrorKey;
const getShowQuoteLoadingScreen = state => state.swaps.showQuoteLoadingScreen;
exports.getShowQuoteLoadingScreen = getShowQuoteLoadingScreen;
const getSwapsTokens = state => state.metamask.swapsState.tokens;
exports.getSwapsTokens = getSwapsTokens;
const getSwapsWelcomeMessageSeenStatus = state => state.metamask.swapsWelcomeMessageHasBeenShown;
exports.getSwapsWelcomeMessageSeenStatus = getSwapsWelcomeMessageSeenStatus;
const getTopQuote = state => {
  const {
    topAggId,
    quotes
  } = getSwapsState(state);
  return quotes[topAggId];
};
exports.getTopQuote = getTopQuote;
const getApproveTxId = state => state.metamask.swapsState.approveTxId;
exports.getApproveTxId = getApproveTxId;
const getTradeTxId = state => state.metamask.swapsState.tradeTxId;
exports.getTradeTxId = getTradeTxId;
const getUsedQuote = state => getSelectedQuote(state) || getTopQuote(state);

// Compound selectors
exports.getUsedQuote = getUsedQuote;
const getDestinationTokenInfo = state => {
  var _getFetchParams, _getFetchParams$metaD;
  return (_getFetchParams = getFetchParams(state)) === null || _getFetchParams === void 0 ? void 0 : (_getFetchParams$metaD = _getFetchParams.metaData) === null || _getFetchParams$metaD === void 0 ? void 0 : _getFetchParams$metaD.destinationTokenInfo;
};
exports.getDestinationTokenInfo = getDestinationTokenInfo;
const getUsedSwapsGasPrice = state => getCustomSwapsGasPrice(state) || getSwapsFallbackGasPrice(state);
exports.getUsedSwapsGasPrice = getUsedSwapsGasPrice;
const getApproveTxParams = state => {
  var _getSwapsState2;
  const {
    approvalNeeded
  } = getSelectedQuote(state) || getTopQuote(state) || {};
  if (!approvalNeeded) {
    return null;
  }
  const data = ((_getSwapsState2 = getSwapsState(state)) === null || _getSwapsState2 === void 0 ? void 0 : _getSwapsState2.customApproveTxData) || approvalNeeded.data;
  const gasPrice = getUsedSwapsGasPrice(state);
  return {
    ...approvalNeeded,
    gasPrice,
    data
  };
};
exports.getApproveTxParams = getApproveTxParams;
const getSmartTransactionsOptInStatus = state => {
  var _state$metamask$smart2;
  return (_state$metamask$smart2 = state.metamask.smartTransactionsState) === null || _state$metamask$smart2 === void 0 ? void 0 : _state$metamask$smart2.userOptIn;
};
exports.getSmartTransactionsOptInStatus = getSmartTransactionsOptInStatus;
const getCurrentSmartTransactions = state => {
  var _state$metamask$smart3, _state$metamask$smart4;
  return (_state$metamask$smart3 = state.metamask.smartTransactionsState) === null || _state$metamask$smart3 === void 0 ? void 0 : (_state$metamask$smart4 = _state$metamask$smart3.smartTransactions) === null || _state$metamask$smart4 === void 0 ? void 0 : _state$metamask$smart4[(0, _selectors.getCurrentChainId)(state)];
};
exports.getCurrentSmartTransactions = getCurrentSmartTransactions;
const getPendingSmartTransactions = state => {
  const currentSmartTransactions = getCurrentSmartTransactions(state);
  if (!currentSmartTransactions || currentSmartTransactions.length === 0) {
    return [];
  }
  return currentSmartTransactions.filter(stx => stx.status === _transaction.SmartTransactionStatus.pending);
};
exports.getPendingSmartTransactions = getPendingSmartTransactions;
const getSmartTransactionFees = state => {
  var _state$metamask$smart5;
  return (_state$metamask$smart5 = state.metamask.smartTransactionsState) === null || _state$metamask$smart5 === void 0 ? void 0 : _state$metamask$smart5.fees;
};
exports.getSmartTransactionFees = getSmartTransactionFees;
const getSmartTransactionEstimatedGas = state => {
  var _state$metamask$smart6;
  return (_state$metamask$smart6 = state.metamask.smartTransactionsState) === null || _state$metamask$smart6 === void 0 ? void 0 : _state$metamask$smart6.estimatedGas;
};
exports.getSmartTransactionEstimatedGas = getSmartTransactionEstimatedGas;
const getSwapsNetworkConfig = state => {
  const {
    swapsQuoteRefreshTime,
    swapsQuotePrefetchingRefreshTime,
    swapsStxGetTransactionsRefreshTime,
    swapsStxBatchStatusRefreshTime,
    swapsStxStatusDeadline,
    swapsStxMaxFeeMultiplier
  } = state.metamask.swapsState;
  return {
    quoteRefreshTime: swapsQuoteRefreshTime,
    quotePrefetchingRefreshTime: swapsQuotePrefetchingRefreshTime,
    stxGetTransactionsRefreshTime: swapsStxGetTransactionsRefreshTime,
    stxBatchStatusRefreshTime: swapsStxBatchStatusRefreshTime,
    stxStatusDeadline: swapsStxStatusDeadline,
    stxMaxFeeMultiplier: swapsStxMaxFeeMultiplier
  };
};

// Actions / action-creators
exports.getSwapsNetworkConfig = getSwapsNetworkConfig;
const {
  clearSwapsState,
  navigatedBackToBuildQuote,
  retriedGetQuotes,
  swapGasPriceEstimatesFetchCompleted,
  swapGasPriceEstimatesFetchStarted,
  swapGasPriceEstimatesFetchFailed,
  setAggregatorMetadata,
  setBalanceError,
  setFetchingQuotes,
  setFromToken,
  setFromTokenError,
  setFromTokenInputValue,
  setIsFeatureFlagLoaded,
  setMaxSlippage,
  setQuotesFetchStartTime,
  setReviewSwapClickedTimestamp,
  setTopAssets,
  setToToken,
  swapCustomGasModalPriceEdited,
  swapCustomGasModalLimitEdited,
  retrievedFallbackSwapsGasPrice,
  swapCustomGasModalClosed,
  setCurrentSmartTransactionsError,
  setSwapsSTXSubmitLoading
} = actions;
exports.swapCustomGasModalClosed = swapCustomGasModalClosed;
exports.swapCustomGasModalLimitEdited = swapCustomGasModalLimitEdited;
exports.swapCustomGasModalPriceEdited = swapCustomGasModalPriceEdited;
exports.setSwapToToken = setToToken;
exports.setTopAssets = setTopAssets;
exports.setReviewSwapClickedTimestamp = setReviewSwapClickedTimestamp;
exports.setSwapQuotesFetchStartTime = setQuotesFetchStartTime;
exports.setMaxSlippage = setMaxSlippage;
exports.setIsFeatureFlagLoaded = setIsFeatureFlagLoaded;
exports.setFromTokenInputValue = setFromTokenInputValue;
exports.setFromTokenError = setFromTokenError;
exports.setSwapsFromToken = setFromToken;
exports.setFetchingQuotes = setFetchingQuotes;
exports.setBalanceError = setBalanceError;
exports.setAggregatorMetadata = setAggregatorMetadata;
exports.clearSwapsState = clearSwapsState;
const navigateBackToBuildQuote = history => {
  return async dispatch => {
    // TODO: Ensure any fetch in progress is cancelled
    await dispatch((0, _actions.setBackgroundSwapRouteState)(''));
    dispatch(navigatedBackToBuildQuote());
    history.push(_routes.BUILD_QUOTE_ROUTE);
  };
};
exports.navigateBackToBuildQuote = navigateBackToBuildQuote;
const prepareForRetryGetQuotes = () => {
  return async dispatch => {
    // TODO: Ensure any fetch in progress is cancelled
    await dispatch((0, _actions.resetSwapsPostFetchState)());
    dispatch(retriedGetQuotes());
  };
};
exports.prepareForRetryGetQuotes = prepareForRetryGetQuotes;
const prepareToLeaveSwaps = () => {
  return async dispatch => {
    dispatch(clearSwapsState());
    await dispatch((0, _actions.resetBackgroundSwapsState)());
  };
};
exports.prepareToLeaveSwaps = prepareToLeaveSwaps;
const swapsQuoteSelected = aggId => {
  return dispatch => {
    dispatch(swapCustomGasModalLimitEdited(null));
    dispatch((0, _actions.setSelectedQuoteAggId)(aggId));
    dispatch((0, _actions.setSwapsTxGasLimit)(''));
  };
};
exports.swapsQuoteSelected = swapsQuoteSelected;
const fetchAndSetSwapsGasPriceInfo = () => {
  return async dispatch => {
    const basicEstimates = await dispatch(fetchMetaSwapsGasPriceEstimates());
    if (basicEstimates !== null && basicEstimates !== void 0 && basicEstimates.fast) {
      dispatch((0, _actions.setSwapsTxGasPrice)((0, _conversion.decGWEIToHexWEI)(basicEstimates.fast)));
    }
  };
};
exports.fetchAndSetSwapsGasPriceInfo = fetchAndSetSwapsGasPriceInfo;
const disableStxIfRegularTxInProgress = (dispatch, transactions) => {
  if ((transactions === null || transactions === void 0 ? void 0 : transactions.length) <= 0) {
    return;
  }
  for (const transaction of transactions) {
    if (_transaction.IN_PROGRESS_TRANSACTION_STATUSES.includes(transaction.status)) {
      dispatch(setCurrentSmartTransactionsError(_swaps.StxErrorTypes.REGULAR_TX_IN_PROGRESS));
      break;
    }
  }
};
const fetchSwapsLivenessAndFeatureFlags = () => {
  return async (dispatch, getState) => {
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };
    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      await dispatch((0, _actions.setSwapsFeatureFlags)(swapsFeatureFlags));
      if (_swaps2.ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS.includes(chainId)) {
        var _state$metamask;
        await dispatch((0, _actions.fetchSmartTransactionsLiveness)());
        const transactions = await (0, _actions.getTransactions)({
          searchCriteria: {
            from: (_state$metamask = state.metamask) === null || _state$metamask === void 0 ? void 0 : _state$metamask.selectedAddress
          }
        });
        disableStxIfRegularTxInProgress(dispatch, transactions);
      }
      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(chainId, swapsFeatureFlags);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps feature flags and Swaps liveness, defaulting to false.', error);
    }
    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));
    dispatch(setIsFeatureFlagLoaded(true));
    return swapsLivenessForNetwork;
  };
};
exports.fetchSwapsLivenessAndFeatureFlags = fetchSwapsLivenessAndFeatureFlags;
const isTokenAlreadyAdded = (tokenAddress, tokens) => {
  if (!Array.isArray(tokens)) {
    return false;
  }
  return tokens.find(token => token.address.toLowerCase() === tokenAddress.toLowerCase());
};
const fetchQuotesAndSetQuoteState = (history, inputValue, maxSlippage, trackEvent, pageRedirectionDisabled) => {
  return async (dispatch, getState) => {
    var _fetchParams$metaData, _fetchParams$metaData2, _fetchParams$metaData3, _fetchParams$metaData4;
    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };
    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(chainId, swapsFeatureFlags);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps liveness, defaulting to false.', error);
    }
    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));
    if (!swapsLivenessForNetwork.swapsFeatureIsLive) {
      await history.push(_routes.SWAPS_MAINTENANCE_ROUTE);
      return;
    }
    const fetchParams = getFetchParams(state);
    const selectedAccount = (0, _selectors.getSelectedAccount)(state);
    const balanceError = getBalanceError(state);
    const swapsDefaultToken = (0, _selectors.getSwapsDefaultToken)(state);
    const fetchParamsFromToken = (fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData = fetchParams.metaData) === null || _fetchParams$metaData === void 0 ? void 0 : (_fetchParams$metaData2 = _fetchParams$metaData.sourceTokenInfo) === null || _fetchParams$metaData2 === void 0 ? void 0 : _fetchParams$metaData2.symbol) === swapsDefaultToken.symbol ? swapsDefaultToken : fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData3 = fetchParams.metaData) === null || _fetchParams$metaData3 === void 0 ? void 0 : _fetchParams$metaData3.sourceTokenInfo;
    const selectedFromToken = getFromToken(state) || fetchParamsFromToken || {};
    const selectedToToken = getToToken(state) || (fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData4 = fetchParams.metaData) === null || _fetchParams$metaData4 === void 0 ? void 0 : _fetchParams$metaData4.destinationTokenInfo) || {};
    const {
      address: fromTokenAddress,
      symbol: fromTokenSymbol,
      decimals: fromTokenDecimals,
      iconUrl: fromTokenIconUrl,
      balance: fromTokenBalance
    } = selectedFromToken;
    const {
      address: toTokenAddress,
      symbol: toTokenSymbol,
      decimals: toTokenDecimals,
      iconUrl: toTokenIconUrl
    } = selectedToToken;
    // pageRedirectionDisabled is true if quotes prefetching is active (a user is on the Build Quote page).
    // In that case we just want to silently prefetch quotes without redirecting to the quotes loading page.
    if (!pageRedirectionDisabled) {
      await dispatch((0, _actions.setBackgroundSwapRouteState)('loading'));
      history.push(_routes.LOADING_QUOTES_ROUTE);
    }
    dispatch(setFetchingQuotes(true));
    const contractExchangeRates = (0, _selectors.getTokenExchangeRates)(state);
    let destinationTokenAddedForSwap = false;
    if (toTokenAddress && toTokenSymbol !== swapsDefaultToken.symbol && contractExchangeRates[toTokenAddress] === undefined && !isTokenAlreadyAdded(toTokenAddress, (0, _metamask.getTokens)(state))) {
      destinationTokenAddedForSwap = true;
      await dispatch((0, _actions.addToken)(toTokenAddress, toTokenSymbol, toTokenDecimals, toTokenIconUrl, true));
    }
    if (fromTokenAddress && fromTokenSymbol !== swapsDefaultToken.symbol && !contractExchangeRates[fromTokenAddress] && fromTokenBalance && new _bignumber.default(fromTokenBalance, 16).gt(0)) {
      dispatch((0, _actions.addToken)(fromTokenAddress, fromTokenSymbol, fromTokenDecimals, fromTokenIconUrl, true));
    }
    const swapsTokens = getSwapsTokens(state);
    const sourceTokenInfo = (swapsTokens === null || swapsTokens === void 0 ? void 0 : swapsTokens.find(({
      address
    }) => address === fromTokenAddress)) || selectedFromToken;
    const destinationTokenInfo = (swapsTokens === null || swapsTokens === void 0 ? void 0 : swapsTokens.find(({
      address
    }) => address === toTokenAddress)) || selectedToToken;
    dispatch(setFromToken(selectedFromToken));
    const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
    const hardwareWalletType = (0, _selectors.getHardwareWalletType)(state);
    const networkAndAccountSupports1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const currentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled(state);
    trackEvent({
      event: 'Quotes Requested',
      category: _metametrics.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: {
        token_from: fromTokenSymbol,
        token_from_amount: String(inputValue),
        token_to: toTokenSymbol,
        request_type: balanceError ? 'Quote' : 'Order',
        slippage: maxSlippage,
        custom_slippage: maxSlippage !== _swaps2.Slippage.default,
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus,
        anonymizedData: true
      }
    });
    try {
      var _Object$values;
      const fetchStartTime = Date.now();
      dispatch(setQuotesFetchStartTime(fetchStartTime));
      const fetchAndSetQuotesPromise = dispatch((0, _actions.fetchAndSetQuotes)({
        slippage: maxSlippage,
        sourceToken: fromTokenAddress,
        destinationToken: toTokenAddress,
        value: inputValue,
        fromAddress: selectedAccount.address,
        destinationTokenAddedForSwap,
        balanceError,
        sourceDecimals: fromTokenDecimals
      }, {
        sourceTokenInfo,
        destinationTokenInfo,
        accountBalance: selectedAccount.balance,
        chainId
      }));
      const gasPriceFetchPromise = networkAndAccountSupports1559 ? null // For EIP 1559 we can get gas prices via "useGasFeeEstimates".
      : dispatch(fetchAndSetSwapsGasPriceInfo());
      const [[fetchedQuotes, selectedAggId]] = await Promise.all([fetchAndSetQuotesPromise, gasPriceFetchPromise]);
      if (((_Object$values = Object.values(fetchedQuotes)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) === 0) {
        trackEvent({
          event: 'No Quotes Available',
          category: _metametrics.MetaMetricsEventCategory.Swaps,
          sensitiveProperties: {
            token_from: fromTokenSymbol,
            token_from_amount: String(inputValue),
            token_to: toTokenSymbol,
            request_type: balanceError ? 'Quote' : 'Order',
            slippage: maxSlippage,
            custom_slippage: maxSlippage !== _swaps2.Slippage.default,
            is_hardware_wallet: hardwareWalletUsed,
            hardware_wallet_type: hardwareWalletType,
            stx_enabled: smartTransactionsEnabled,
            current_stx_enabled: currentSmartTransactionsEnabled,
            stx_user_opt_in: smartTransactionsOptInStatus
          }
        });
        dispatch((0, _actions.setSwapsErrorKey)(_swaps2.QUOTES_NOT_AVAILABLE_ERROR));
      } else {
        var _Object$values2;
        const newSelectedQuote = fetchedQuotes[selectedAggId];
        trackEvent({
          event: 'Quotes Received',
          category: _metametrics.MetaMetricsEventCategory.Swaps,
          sensitiveProperties: {
            token_from: fromTokenSymbol,
            token_from_amount: String(inputValue),
            token_to: toTokenSymbol,
            token_to_amount: (0, _transactionsControllerUtils.calcTokenAmount)(newSelectedQuote.destinationAmount, newSelectedQuote.decimals || 18),
            request_type: balanceError ? 'Quote' : 'Order',
            slippage: maxSlippage,
            custom_slippage: maxSlippage !== _swaps2.Slippage.default,
            response_time: Date.now() - fetchStartTime,
            best_quote_source: newSelectedQuote.aggregator,
            available_quotes: (_Object$values2 = Object.values(fetchedQuotes)) === null || _Object$values2 === void 0 ? void 0 : _Object$values2.length,
            is_hardware_wallet: hardwareWalletUsed,
            hardware_wallet_type: hardwareWalletType,
            stx_enabled: smartTransactionsEnabled,
            current_stx_enabled: currentSmartTransactionsEnabled,
            stx_user_opt_in: smartTransactionsOptInStatus,
            anonymizedData: true
          }
        });
        dispatch((0, _actions.setInitialGasEstimate)(selectedAggId));
      }
    } catch (e) {
      // A newer swap request is running, so simply bail and let the newer request respond
      if (e.message === _swaps2.SWAPS_FETCH_ORDER_CONFLICT) {
        _loglevel.default.debug(`Swap fetch order conflict detected; ignoring older request`);
        return;
      }
      // TODO: Check for any errors we should expect to occur in production, and report others to Sentry
      _loglevel.default.error(`Error fetching quotes: `, e);
      dispatch((0, _actions.setSwapsErrorKey)(_swaps2.ERROR_FETCHING_QUOTES));
    }
    dispatch(setFetchingQuotes(false));
  };
};
exports.fetchQuotesAndSetQuoteState = fetchQuotesAndSetQuoteState;
const signAndSendSwapsSmartTransaction = ({
  unsignedTransaction,
  trackEvent,
  history,
  additionalTrackingParams
}) => {
  return async (dispatch, getState) => {
    var _getTopQuote, _getQuotes, _getTopQuote2, _getTopQuote3, _usedQuote$savings, _usedQuote$savings2, _usedQuote$savings3, _usedQuote$savings4;
    dispatch(setSwapsSTXSubmitLoading(true));
    const state = getState();
    const fetchParams = getFetchParams(state);
    const {
      metaData,
      value: swapTokenValue,
      slippage
    } = fetchParams;
    const {
      sourceTokenInfo = {},
      destinationTokenInfo = {}
    } = metaData;
    const usedQuote = getUsedQuote(state);
    const swapsNetworkConfig = getSwapsNetworkConfig(state);
    const chainId = (0, _selectors.getCurrentChainId)(state);
    dispatch((0, _actions.setSmartTransactionsRefreshInterval)(swapsNetworkConfig === null || swapsNetworkConfig === void 0 ? void 0 : swapsNetworkConfig.stxBatchStatusRefreshTime));
    const usedTradeTxParams = usedQuote.trade;

    // update stx with data
    const destinationValue = (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote.destinationAmount, destinationTokenInfo.decimals || 18).toPrecision(8);
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const currentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled(state);
    const swapMetaData = {
      token_from: sourceTokenInfo.symbol,
      token_from_amount: String(swapTokenValue),
      token_to: destinationTokenInfo.symbol,
      token_to_amount: destinationValue,
      slippage,
      custom_slippage: slippage !== 2,
      best_quote_source: (_getTopQuote = getTopQuote(state)) === null || _getTopQuote === void 0 ? void 0 : _getTopQuote.aggregator,
      available_quotes: (_getQuotes = getQuotes(state)) === null || _getQuotes === void 0 ? void 0 : _getQuotes.length,
      other_quote_selected: usedQuote.aggregator !== ((_getTopQuote2 = getTopQuote(state)) === null || _getTopQuote2 === void 0 ? void 0 : _getTopQuote2.aggregator),
      other_quote_selected_source: usedQuote.aggregator === ((_getTopQuote3 = getTopQuote(state)) === null || _getTopQuote3 === void 0 ? void 0 : _getTopQuote3.aggregator) ? '' : usedQuote.aggregator,
      average_savings: (_usedQuote$savings = usedQuote.savings) === null || _usedQuote$savings === void 0 ? void 0 : _usedQuote$savings.total,
      performance_savings: (_usedQuote$savings2 = usedQuote.savings) === null || _usedQuote$savings2 === void 0 ? void 0 : _usedQuote$savings2.performance,
      fee_savings: (_usedQuote$savings3 = usedQuote.savings) === null || _usedQuote$savings3 === void 0 ? void 0 : _usedQuote$savings3.fee,
      median_metamask_fee: (_usedQuote$savings4 = usedQuote.savings) === null || _usedQuote$savings4 === void 0 ? void 0 : _usedQuote$savings4.medianMetaMaskFee,
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus,
      ...additionalTrackingParams
    };
    trackEvent({
      event: 'STX Swap Started',
      category: _metametrics.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: swapMetaData
    });
    if (!(0, _swaps.isContractAddressValid)(usedTradeTxParams.to, chainId)) {
      (0, _browser.captureMessage)('Invalid contract address', {
        extra: {
          token_from: swapMetaData.token_from,
          token_to: swapMetaData.token_to,
          contract_address: usedTradeTxParams.to
        }
      });
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }
    const approveTxParams = getApproveTxParams(state);
    let approvalTxUuid;
    let updatedApproveTxParams;
    try {
      var _fees$tradeTxFees;
      if (approveTxParams) {
        updatedApproveTxParams = {
          ...approveTxParams,
          value: '0x0'
        };
      }
      const fees = await dispatch(fetchSwapsSmartTransactionFees({
        unsignedTransaction,
        approveTxParams: updatedApproveTxParams,
        fallbackOnNotEnoughFunds: true
      }));
      if (!fees) {
        _loglevel.default.error('"fetchSwapsSmartTransactionFees" failed');
        dispatch(setSwapsSTXSubmitLoading(false));
        dispatch(setCurrentSmartTransactionsError(_swaps.StxErrorTypes.UNAVAILABLE));
        return;
      }
      if (approveTxParams) {
        var _fees$approvalTxFees;
        updatedApproveTxParams.gas = `0x${(0, _conversion.decimalToHex)(((_fees$approvalTxFees = fees.approvalTxFees) === null || _fees$approvalTxFees === void 0 ? void 0 : _fees$approvalTxFees.gasLimit) || 0)}`;
        approvalTxUuid = await dispatch((0, _actions.signAndSendSmartTransaction)({
          unsignedTransaction: updatedApproveTxParams,
          smartTransactionFees: fees.approvalTxFees
        }));
      }
      unsignedTransaction.gas = `0x${(0, _conversion.decimalToHex)(((_fees$tradeTxFees = fees.tradeTxFees) === null || _fees$tradeTxFees === void 0 ? void 0 : _fees$tradeTxFees.gasLimit) || 0)}`;
      const uuid = await dispatch((0, _actions.signAndSendSmartTransaction)({
        unsignedTransaction,
        smartTransactionFees: fees.tradeTxFees
      }));
      const destinationTokenAddress = destinationTokenInfo.address;
      const destinationTokenDecimals = destinationTokenInfo.decimals;
      const destinationTokenSymbol = destinationTokenInfo.symbol;
      const sourceTokenSymbol = sourceTokenInfo.symbol;
      await dispatch((0, _actions.updateSmartTransaction)(uuid, {
        origin: _app.ORIGIN_METAMASK,
        destinationTokenAddress,
        destinationTokenDecimals,
        destinationTokenSymbol,
        sourceTokenSymbol,
        swapMetaData,
        swapTokenValue,
        type: _transaction.TransactionType.swap
      }));
      if (approvalTxUuid) {
        await dispatch((0, _actions.updateSmartTransaction)(approvalTxUuid, {
          origin: _app.ORIGIN_METAMASK,
          type: _transaction.TransactionType.swapApproval,
          sourceTokenSymbol
        }));
      }
      history.push(_routes.SMART_TRANSACTION_STATUS_ROUTE);
      dispatch(setSwapsSTXSubmitLoading(false));
    } catch (e) {
      console.log('signAndSendSwapsSmartTransaction error', e);
      const {
        swaps: {
          isFeatureFlagLoaded
        }
      } = getState();
      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.error));
      }
    }
  };
};
exports.signAndSendSwapsSmartTransaction = signAndSendSwapsSmartTransaction;
const signAndSendTransactions = (history, trackEvent, additionalTrackingParams) => {
  return async (dispatch, getState) => {
    var _usedQuote$approvalNe, _getTopQuote4, _getQuotes2, _getTopQuote5, _getTopQuote6, _usedQuote$savings5, _usedQuote$savings6, _usedQuote$savings7, _usedQuote$savings8, _finalApproveTxMeta;
    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
    const networkAndAccountSupports1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };
    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(chainId, swapsFeatureFlags);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps liveness, defaulting to false.', error);
    }
    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));
    if (!swapsLivenessForNetwork.swapsFeatureIsLive) {
      await history.push(_routes.SWAPS_MAINTENANCE_ROUTE);
      return;
    }
    const customSwapsGas = getCustomSwapsGas(state);
    const customMaxFeePerGas = getCustomMaxFeePerGas(state);
    const customMaxPriorityFeePerGas = getCustomMaxPriorityFeePerGas(state);
    const fetchParams = getFetchParams(state);
    const {
      metaData,
      value: swapTokenValue,
      slippage
    } = fetchParams;
    const {
      sourceTokenInfo = {},
      destinationTokenInfo = {}
    } = metaData;
    await dispatch((0, _actions.setBackgroundSwapRouteState)('awaiting'));
    await dispatch((0, _actions.stopPollingForQuotes)());
    if (!hardwareWalletUsed) {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }
    const {
      fast: fastGasEstimate
    } = getSwapGasPriceEstimateData(state);
    let maxFeePerGas;
    let maxPriorityFeePerGas;
    let baseAndPriorityFeePerGas;
    let decEstimatedBaseFee;
    if (networkAndAccountSupports1559) {
      const {
        high: {
          suggestedMaxFeePerGas,
          suggestedMaxPriorityFeePerGas
        },
        estimatedBaseFee = '0'
      } = (0, _metamask.getGasFeeEstimates)(state);
      decEstimatedBaseFee = (0, _conversion.decGWEIToHexWEI)(estimatedBaseFee);
      maxFeePerGas = customMaxFeePerGas || (0, _conversion.decGWEIToHexWEI)(suggestedMaxFeePerGas);
      maxPriorityFeePerGas = customMaxPriorityFeePerGas || (0, _conversion.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas);
      baseAndPriorityFeePerGas = (0, _conversion.addHexes)(decEstimatedBaseFee, maxPriorityFeePerGas);
    }
    const usedQuote = getUsedQuote(state);
    const usedTradeTxParams = usedQuote.trade;
    const estimatedGasLimit = new _bignumber.default((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimate) || `0x0`, 16);
    const estimatedGasLimitWithMultiplier = estimatedGasLimit.times((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasMultiplier) || FALLBACK_GAS_MULTIPLIER, 10).round(0).toString(16);
    const maxGasLimit = customSwapsGas || (usedQuote !== null && usedQuote !== void 0 && usedQuote.gasEstimate ? estimatedGasLimitWithMultiplier : `0x${(0, _conversion.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.maxGas) || 0)}`);
    const usedGasPrice = getUsedSwapsGasPrice(state);
    usedTradeTxParams.gas = maxGasLimit;
    if (networkAndAccountSupports1559) {
      usedTradeTxParams.maxFeePerGas = maxFeePerGas;
      usedTradeTxParams.maxPriorityFeePerGas = maxPriorityFeePerGas;
      delete usedTradeTxParams.gasPrice;
    } else {
      usedTradeTxParams.gasPrice = usedGasPrice;
    }
    const usdConversionRate = (0, _selectors.getUSDConversionRate)(state);
    const destinationValue = (0, _transactionsControllerUtils.calcTokenAmount)(usedQuote.destinationAmount, destinationTokenInfo.decimals || 18).toPrecision(8);
    const usedGasLimitEstimate = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimateWithRefund) || `0x${(0, _conversion.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.averageGas) || 0)}`;
    const totalGasLimitEstimate = new _bignumber.default(usedGasLimitEstimate, 16).plus(((_usedQuote$approvalNe = usedQuote.approvalNeeded) === null || _usedQuote$approvalNe === void 0 ? void 0 : _usedQuote$approvalNe.gas) || '0x0', 16).toString(16);
    const gasEstimateTotalInUSD = (0, _conversion.getValueFromWeiHex)({
      value: (0, _transactionsControllerUtils.calcGasTotal)(totalGasLimitEstimate, networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : usedGasPrice),
      toCurrency: 'usd',
      conversionRate: usdConversionRate,
      numberOfDecimals: 6
    });
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const currentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled(state);
    const swapMetaData = {
      token_from: sourceTokenInfo.symbol,
      token_from_amount: String(swapTokenValue),
      token_to: destinationTokenInfo.symbol,
      token_to_amount: destinationValue,
      slippage,
      custom_slippage: slippage !== 2,
      best_quote_source: (_getTopQuote4 = getTopQuote(state)) === null || _getTopQuote4 === void 0 ? void 0 : _getTopQuote4.aggregator,
      available_quotes: (_getQuotes2 = getQuotes(state)) === null || _getQuotes2 === void 0 ? void 0 : _getQuotes2.length,
      other_quote_selected: usedQuote.aggregator !== ((_getTopQuote5 = getTopQuote(state)) === null || _getTopQuote5 === void 0 ? void 0 : _getTopQuote5.aggregator),
      other_quote_selected_source: usedQuote.aggregator === ((_getTopQuote6 = getTopQuote(state)) === null || _getTopQuote6 === void 0 ? void 0 : _getTopQuote6.aggregator) ? '' : usedQuote.aggregator,
      gas_fees: gasEstimateTotalInUSD,
      estimated_gas: estimatedGasLimit.toString(10),
      suggested_gas_price: fastGasEstimate,
      used_gas_price: (0, _conversion.hexWEIToDecGWEI)(usedGasPrice),
      average_savings: (_usedQuote$savings5 = usedQuote.savings) === null || _usedQuote$savings5 === void 0 ? void 0 : _usedQuote$savings5.total,
      performance_savings: (_usedQuote$savings6 = usedQuote.savings) === null || _usedQuote$savings6 === void 0 ? void 0 : _usedQuote$savings6.performance,
      fee_savings: (_usedQuote$savings7 = usedQuote.savings) === null || _usedQuote$savings7 === void 0 ? void 0 : _usedQuote$savings7.fee,
      median_metamask_fee: (_usedQuote$savings8 = usedQuote.savings) === null || _usedQuote$savings8 === void 0 ? void 0 : _usedQuote$savings8.medianMetaMaskFee,
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: (0, _selectors.getHardwareWalletType)(state),
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus,
      ...additionalTrackingParams
    };
    if (networkAndAccountSupports1559) {
      swapMetaData.max_fee_per_gas = maxFeePerGas;
      swapMetaData.max_priority_fee_per_gas = maxPriorityFeePerGas;
      swapMetaData.base_and_priority_fee_per_gas = baseAndPriorityFeePerGas;
    }
    trackEvent({
      event: 'Swap Started',
      category: _metametrics.MetaMetricsEventCategory.Swaps,
      sensitiveProperties: swapMetaData
    });
    if (!(0, _swaps.isContractAddressValid)(usedTradeTxParams.to, chainId)) {
      (0, _browser.captureMessage)('Invalid contract address', {
        extra: {
          token_from: swapMetaData.token_from,
          token_to: swapMetaData.token_to,
          contract_address: usedTradeTxParams.to
        }
      });
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }
    let finalApproveTxMeta;
    const approveTxParams = getApproveTxParams(state);

    // For hardware wallets we go to the Awaiting Signatures page first and only after a user
    // completes 1 or 2 confirmations, we redirect to the Awaiting Swap page.
    if (hardwareWalletUsed) {
      history.push(_routes.AWAITING_SIGNATURES_ROUTE);
    }
    if (approveTxParams) {
      if (networkAndAccountSupports1559) {
        approveTxParams.maxFeePerGas = maxFeePerGas;
        approveTxParams.maxPriorityFeePerGas = maxPriorityFeePerGas;
        delete approveTxParams.gasPrice;
      }
      const approveTxMeta = await (0, _actions.addUnapprovedTransaction)(undefined, {
        ...approveTxParams,
        amount: '0x0'
      }, _transaction.TransactionType.swapApproval);
      await dispatch((0, _actions.setApproveTxId)(approveTxMeta.id));
      finalApproveTxMeta = await dispatch((0, _actions.updateSwapApprovalTransaction)(approveTxMeta.id, {
        type: _transaction.TransactionType.swapApproval,
        sourceTokenSymbol: sourceTokenInfo.symbol
      }));
      try {
        await dispatch((0, _actions.updateAndApproveTx)(finalApproveTxMeta, true));
      } catch (e) {
        await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
        history.push(_routes.SWAPS_ERROR_ROUTE);
        return;
      }
    }
    const tradeTxMeta = await (0, _actions.addUnapprovedTransaction)(undefined, usedTradeTxParams, _transaction.TransactionType.swap);
    dispatch((0, _actions.setTradeTxId)(tradeTxMeta.id));

    // The simulationFails property is added during the transaction controllers
    // addUnapprovedTransaction call if the estimateGas call fails. In cases
    // when no approval is required, this indicates that the swap will likely
    // fail. There was an earlier estimateGas call made by the swaps controller,
    // but it is possible that external conditions have change since then, and
    // a previously succeeding estimate gas call could now fail. By checking for
    // the `simulationFails` property here, we can reduce the number of swap
    // transactions that get published to the blockchain only to fail and thereby
    // waste the user's funds on gas.
    if (!approveTxParams && tradeTxMeta.simulationFails) {
      await dispatch((0, _actions.cancelTx)(tradeTxMeta, false));
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }
    const finalTradeTxMeta = await dispatch((0, _actions.updateSwapTransaction)(tradeTxMeta.id, {
      estimatedBaseFee: decEstimatedBaseFee,
      sourceTokenSymbol: sourceTokenInfo.symbol,
      destinationTokenSymbol: destinationTokenInfo.symbol,
      type: _transaction.TransactionType.swap,
      destinationTokenDecimals: destinationTokenInfo.decimals,
      destinationTokenAddress: destinationTokenInfo.address,
      swapMetaData,
      swapTokenValue,
      approvalTxId: (_finalApproveTxMeta = finalApproveTxMeta) === null || _finalApproveTxMeta === void 0 ? void 0 : _finalApproveTxMeta.id
    }));
    try {
      await dispatch((0, _actions.updateAndApproveTx)(finalTradeTxMeta, true));
    } catch (e) {
      const errorKey = e.message.includes('EthAppPleaseEnableContractData') ? _swaps2.CONTRACT_DATA_DISABLED_ERROR : _swaps2.SWAP_FAILED_ERROR;
      await dispatch((0, _actions.setSwapsErrorKey)(errorKey));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }

    // Only after a user confirms swapping on a hardware wallet (second `updateAndApproveTx` call above),
    // we redirect to the Awaiting Swap page.
    if (hardwareWalletUsed) {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }
    await (0, _actions.forceUpdateMetamaskState)(dispatch);
  };
};
exports.signAndSendTransactions = signAndSendTransactions;
function fetchMetaSwapsGasPriceEstimates() {
  return async (dispatch, getState) => {
    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    dispatch(swapGasPriceEstimatesFetchStarted());
    let priceEstimates;
    try {
      priceEstimates = await (0, _swaps.fetchSwapsGasPrices)(chainId);
    } catch (e) {
      var _e$message;
      _loglevel.default.warn('Fetching swaps gas prices failed:', e);
      if (!((_e$message = e.message) !== null && _e$message !== void 0 && _e$message.match(/NetworkError|Fetch failed with status:/u))) {
        throw e;
      }
      dispatch(swapGasPriceEstimatesFetchFailed());
      try {
        const gasPrice = await global.ethQuery.gasPrice();
        const gasPriceInDecGWEI = (0, _conversion.hexWEIToDecGWEI)(gasPrice.toString(10));
        dispatch(retrievedFallbackSwapsGasPrice(gasPriceInDecGWEI));
        return null;
      } catch (networkGasPriceError) {
        console.error(`Failed to retrieve fallback gas price: `, networkGasPriceError);
        return null;
      }
    }
    dispatch(swapGasPriceEstimatesFetchCompleted({
      priceEstimates
    }));
    return priceEstimates;
  };
}
function fetchSwapsSmartTransactionFees({
  unsignedTransaction,
  approveTxParams,
  fallbackOnNotEnoughFunds = false
}) {
  return async (dispatch, getState) => {
    const {
      swaps: {
        isFeatureFlagLoaded
      }
    } = getState();
    try {
      return await dispatch((0, _actions.fetchSmartTransactionFees)(unsignedTransaction, approveTxParams));
    } catch (e) {
      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        if (fallbackOnNotEnoughFunds || (errorObj === null || errorObj === void 0 ? void 0 : errorObj.error) !== _swaps.StxErrorTypes.NOT_ENOUGH_FUNDS) {
          dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.error));
        }
      }
    }
    return null;
  };
}
function cancelSwapsSmartTransaction(uuid) {
  return async (dispatch, getState) => {
    try {
      await dispatch((0, _actions.cancelSmartTransaction)(uuid));
    } catch (e) {
      const {
        swaps: {
          isFeatureFlagLoaded
        }
      } = getState();
      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.error));
      }
    }
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\ducks\\swaps\\swaps.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\available-conversions.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Cavailable-conversions.json
      return function (require, module, exports) {
module.exports=[
  {
    "code": "aud",
    "name": "Australian Dollar"
  },
  {
    "code": "hkd",
    "name": "Hong Kong Dollar"
  },
  {
    "code": "sgd",
    "name": "Singapore Dollar"
  },
  {
    "code": "idr",
    "name": "Indonesian Rupiah"
  },
  {
    "code": "inr",
    "name": "Indian Rupee"
  },
  {
    "code": "nzd",
    "name": "New Zealand Dollar"
  },
  {
    "code": "php",
    "name": "Philippine Peso"
  },
  {
    "code": "1st",
    "name": "FirstBlood"
  },
  {
    "code": "adt",
    "name": "adToken"
  },
  {
    "code": "adx",
    "name": "AdEx"
  },
  {
    "code": "ant",
    "name": "Aragon"
  },
  {
    "code": "bat",
    "name": "Basic Attention Token"
  },
  {
    "code": "bnt",
    "name": "Bancor"
  },
  {
    "code": "btc",
    "name": "Bitcoin"
  },
  {
    "code": "cad",
    "name": "Canadian Dollar"
  },
  {
    "code": "cfi",
    "name": "Cofound.it"
  },
  {
    "code": "crb",
    "name": "CreditBit"
  },
  {
    "code": "cvc",
    "name": "Civic"
  },
  {
    "code": "dash",
    "name": "Dash"
  },
  {
    "code": "dgd",
    "name": "DigixDAO"
  },
  {
    "code": "etc",
    "name": "Ethereum Classic"
  },
  {
    "code": "eur",
    "name": "Euro"
  },
  {
    "code": "fun",
    "name": "FunFair"
  },
  {
    "code": "gbp",
    "name": "Pound Sterling"
  },
  {
    "code": "gno",
    "name": "Gnosis"
  },
  {
    "code": "gnt",
    "name": "Golem"
  },
  {
    "code": "gup",
    "name": "Matchpool"
  },
  {
    "code": "hmq",
    "name": "Humaniq"
  },
  {
    "code": "jpy",
    "name": "Japanese Yen"
  },
  {
    "code": "lgd",
    "name": "Legends Room"
  },
  {
    "code": "lsk",
    "name": "Lisk"
  },
  {
    "code": "ltc",
    "name": "Litecoin"
  },
  {
    "code": "lun",
    "name": "Lunyr"
  },
  {
    "code": "mco",
    "name": "Monaco"
  },
  {
    "code": "mtl",
    "name": "Metal"
  },
  {
    "code": "myst",
    "name": "Mysterium"
  },
  {
    "code": "nmr",
    "name": "Numeraire"
  },
  {
    "code": "omg",
    "name": "OmiseGO"
  },
  {
    "code": "pay",
    "name": "TenX"
  },
  {
    "code": "ptoy",
    "name": "Patientory"
  },
  {
    "code": "qrl",
    "name": "Quantum-Resistant Ledger"
  },
  {
    "code": "qtum",
    "name": "Qtum"
  },
  {
    "code": "rep",
    "name": "Augur"
  },
  {
    "code": "rlc",
    "name": "iEx.ec"
  },
  {
    "code": "rub",
    "name": "Russian Ruble"
  },
  {
    "code": "sc",
    "name": "Siacoin"
  },
  {
    "code": "sngls",
    "name": "SingularDTV"
  },
  {
    "code": "snt",
    "name": "Status"
  },
  {
    "code": "steem",
    "name": "Steem"
  },
  {
    "code": "storj",
    "name": "Storj"
  },
  {
    "code": "time",
    "name": "ChronoBank"
  },
  {
    "code": "tkn",
    "name": "TokenCard"
  },
  {
    "code": "trst",
    "name": "WeTrust"
  },
  {
    "code": "uah",
    "name": "Ukrainian Hryvnia"
  },
  {
    "code": "usd",
    "name": "United States Dollar"
  },
  {
    "code": "wings",
    "name": "Wings"
  },
  {
    "code": "xem",
    "name": "NEM"
  },
  {
    "code": "xlm",
    "name": "Stellar Lumen"
  },
  {
    "code": "xmr",
    "name": "Monero"
  },
  {
    "code": "xrp",
    "name": "Ripple"
  },
  {
    "code": "zec",
    "name": "Zcash"
  },
  {
    "code": "dai",
    "name": "DAI"
  },
  {
    "code": "sai",
    "name": "SAI"
  }
]

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\available-conversions.json",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\connected-sites.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Cconnected-sites.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STATUS_NOT_CONNECTED = exports.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = exports.STATUS_CONNECTED = void 0;
const STATUS_CONNECTED = 'STATUS_CONNECTED';
exports.STATUS_CONNECTED = STATUS_CONNECTED;
const STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = 'STATUS_CONNECTED_TO_ANOTHER_ACCOUNT';
exports.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = STATUS_CONNECTED_TO_ANOTHER_ACCOUNT;
const STATUS_NOT_CONNECTED = 'STATUS_NOT_CONNECTED';
exports.STATUS_NOT_CONNECTED = STATUS_NOT_CONNECTED;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\connected-sites.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Cdesign-system.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypographyVariant = exports.TextVariant = exports.TextTransform = exports.TextColor = exports.TextAlign = exports.TEXT_TRANSFORM = exports.TEXT_ALIGN = exports.Size = exports.SEVERITIES = exports.RESIZE = exports.OverflowWrap = exports.OVERFLOW_WRAP = exports.JustifyContent = exports.IconColor = exports.FontWeight = exports.FontStyle = exports.FRACTIONS = exports.FONT_WEIGHT = exports.FONT_STYLE = exports.FLEX_WRAP = exports.FLEX_DIRECTION = exports.DISPLAY = exports.Color = exports.BorderStyle = exports.BorderRadius = exports.BorderColor = exports.BackgroundColor = exports.BREAKPOINTS = exports.BLOCK_SIZES = exports.AlignItems = void 0;
/**
 * A note about the existence of both singular and plural variable names here:
 * When dealing with a literal property name, e.g. AlignItems, the constant
 * should match the property. When detailing a collection of things, it should
 * match the plural form of the thing. e.g. Color, TypographyVariant
 */
let Color;
exports.Color = Color;
(function (Color) {
  Color["backgroundDefault"] = "background-default";
  Color["backgroundAlternative"] = "background-alternative";
  Color["textDefault"] = "text-default";
  Color["textAlternative"] = "text-alternative";
  Color["textMuted"] = "text-muted";
  Color["iconDefault"] = "icon-default";
  Color["iconAlternative"] = "icon-alternative";
  Color["iconMuted"] = "icon-muted";
  Color["borderDefault"] = "border-default";
  Color["borderMuted"] = "border-muted";
  Color["overlayDefault"] = "overlay-default";
  Color["overlayInverse"] = "overlay-inverse";
  Color["primaryDefault"] = "primary-default";
  Color["primaryAlternative"] = "primary-alternative";
  Color["primaryMuted"] = "primary-muted";
  Color["primaryInverse"] = "primary-inverse";
  Color["primaryDisabled"] = "primary-disabled";
  Color["errorDefault"] = "error-default";
  Color["errorAlternative"] = "error-alternative";
  Color["errorMuted"] = "error-muted";
  Color["errorInverse"] = "error-inverse";
  Color["errorDisabled"] = "error-disabled";
  Color["warningDefault"] = "warning-default";
  Color["warningAlternative"] = "warning-alternative";
  Color["warningMuted"] = "warning-muted";
  Color["warningInverse"] = "warning-inverse";
  Color["warningDisabled"] = "warning-disabled";
  Color["successDefault"] = "success-default";
  Color["successAlternative"] = "success-alternative";
  Color["successMuted"] = "success-muted";
  Color["successInverse"] = "success-inverse";
  Color["successDisabled"] = "success-disabled";
  Color["infoDefault"] = "info-default";
  Color["infoAlternative"] = "info-alternative";
  Color["infoMuted"] = "info-muted";
  Color["infoInverse"] = "info-inverse";
  Color["infoDisabled"] = "info-disabled";
  Color["mainnet"] = "mainnet";
  Color["goerli"] = "goerli";
  Color["sepolia"] = "sepolia";
  Color["lineaTestnet"] = "lineatestnet";
  Color["lineaTestnetInverse"] = "lineatestnet-inverse";
  Color["transparent"] = "transparent";
  Color["localhost"] = "localhost";
  Color["inherit"] = "inherit";
  Color["goerliInverse"] = "goerli-inverse";
  Color["sepoliaInverse"] = "sepolia-inverse";
})(Color || (exports.Color = Color = {}));
let BackgroundColor;
exports.BackgroundColor = BackgroundColor;
(function (BackgroundColor) {
  BackgroundColor["backgroundDefault"] = "background-default";
  BackgroundColor["backgroundAlternative"] = "background-alternative";
  BackgroundColor["overlayDefault"] = "overlay-default";
  BackgroundColor["primaryDefault"] = "primary-default";
  BackgroundColor["primaryAlternative"] = "primary-alternative";
  BackgroundColor["primaryMuted"] = "primary-muted";
  BackgroundColor["errorDefault"] = "error-default";
  BackgroundColor["errorAlternative"] = "error-alternative";
  BackgroundColor["errorMuted"] = "error-muted";
  BackgroundColor["warningDefault"] = "warning-default";
  BackgroundColor["warningAlternative"] = "warning-alternative";
  BackgroundColor["warningMuted"] = "warning-muted";
  BackgroundColor["successDefault"] = "success-default";
  BackgroundColor["successAlternative"] = "success-alternative";
  BackgroundColor["successMuted"] = "success-muted";
  BackgroundColor["infoDefault"] = "info-default";
  BackgroundColor["infoAlternative"] = "info-alternative";
  BackgroundColor["infoMuted"] = "info-muted";
  BackgroundColor["mainnet"] = "mainnet";
  BackgroundColor["goerli"] = "goerli";
  BackgroundColor["sepolia"] = "sepolia";
  BackgroundColor["lineaTestnet"] = "lineatestnet";
  BackgroundColor["transparent"] = "transparent";
  BackgroundColor["localhost"] = "localhost";
})(BackgroundColor || (exports.BackgroundColor = BackgroundColor = {}));
let BorderColor;
exports.BorderColor = BorderColor;
(function (BorderColor) {
  BorderColor["borderDefault"] = "border-default";
  BorderColor["borderMuted"] = "border-muted";
  BorderColor["primaryDefault"] = "primary-default";
  BorderColor["primaryAlternative"] = "primary-alternative";
  BorderColor["primaryMuted"] = "primary-muted";
  BorderColor["errorDefault"] = "error-default";
  BorderColor["errorAlternative"] = "error-alternative";
  BorderColor["errorMuted"] = "error-muted";
  BorderColor["warningDefault"] = "warning-default";
  BorderColor["warningAlternative"] = "warning-alternative";
  BorderColor["warningMuted"] = "warning-muted";
  BorderColor["successDefault"] = "success-default";
  BorderColor["successAlternative"] = "success-alternative";
  BorderColor["successMuted"] = "success-muted";
  BorderColor["infoDefault"] = "info-default";
  BorderColor["infoAlternative"] = "info-alternative";
  BorderColor["infoMuted"] = "info-muted";
  BorderColor["mainnet"] = "mainnet";
  BorderColor["goerli"] = "goerli";
  BorderColor["sepolia"] = "sepolia";
  BorderColor["lineaTestnet"] = "lineatestnet";
  BorderColor["transparent"] = "transparent";
  BorderColor["localhost"] = "localhost";
})(BorderColor || (exports.BorderColor = BorderColor = {}));
let TextColor;
exports.TextColor = TextColor;
(function (TextColor) {
  TextColor["textDefault"] = "text-default";
  TextColor["textAlternative"] = "text-alternative";
  TextColor["textMuted"] = "text-muted";
  TextColor["overlayInverse"] = "overlay-inverse";
  TextColor["primaryDefault"] = "primary-default";
  TextColor["primaryInverse"] = "primary-inverse";
  TextColor["errorDefault"] = "error-default";
  TextColor["errorInverse"] = "error-inverse";
  TextColor["successDefault"] = "success-default";
  TextColor["successInverse"] = "success-inverse";
  TextColor["warningDefault"] = "warning-default";
  TextColor["warningInverse"] = "warning-inverse";
  TextColor["infoDefault"] = "info-default";
  TextColor["infoInverse"] = "info-inverse";
  TextColor["inherit"] = "inherit";
  TextColor["goerli"] = "goerli";
  TextColor["sepolia"] = "sepolia";
  TextColor["lineaTestnet"] = "lineatestnet";
  TextColor["lineaTestnetInverse"] = "lineatestnet-inverse";
  TextColor["goerliInverse"] = "goerli-inverse";
  TextColor["sepoliaInverse"] = "sepolia-inverse";
  TextColor["transparent"] = "transparent";
})(TextColor || (exports.TextColor = TextColor = {}));
let IconColor;
exports.IconColor = IconColor;
(function (IconColor) {
  IconColor["iconDefault"] = "icon-default";
  IconColor["iconAlternative"] = "icon-alternative";
  IconColor["iconMuted"] = "icon-muted";
  IconColor["overlayInverse"] = "overlay-inverse";
  IconColor["primaryDefault"] = "primary-default";
  IconColor["primaryInverse"] = "primary-inverse";
  IconColor["errorDefault"] = "error-default";
  IconColor["errorInverse"] = "error-inverse";
  IconColor["successDefault"] = "success-default";
  IconColor["successInverse"] = "success-inverse";
  IconColor["warningDefault"] = "warning-default";
  IconColor["warningInverse"] = "warning-inverse";
  IconColor["infoDefault"] = "info-default";
  IconColor["infoInverse"] = "info-inverse";
  IconColor["inherit"] = "inherit";
  IconColor["goerli"] = "goerli";
  IconColor["sepolia"] = "sepolia";
  IconColor["lineaTestnet"] = "lineatestnet";
  IconColor["lineaTestnetInverse"] = "lineatestnet-inverse";
  IconColor["goerliInverse"] = "goerli-inverse";
  IconColor["sepoliaInverse"] = "sepolia-inverse";
})(IconColor || (exports.IconColor = IconColor = {}));
let TypographyVariant;
exports.TypographyVariant = TypographyVariant;
(function (TypographyVariant) {
  TypographyVariant["H1"] = "h1";
  TypographyVariant["H2"] = "h2";
  TypographyVariant["H3"] = "h3";
  TypographyVariant["H4"] = "h4";
  TypographyVariant["H5"] = "h5";
  TypographyVariant["H6"] = "h6";
  TypographyVariant["H7"] = "h7";
  TypographyVariant["H8"] = "h8";
  TypographyVariant["H9"] = "h9";
  TypographyVariant["paragraph"] = "p";
  TypographyVariant["span"] = "span";
})(TypographyVariant || (exports.TypographyVariant = TypographyVariant = {}));
let TextVariant;
exports.TextVariant = TextVariant;
(function (TextVariant) {
  TextVariant["displayMd"] = "display-md";
  TextVariant["headingLg"] = "heading-lg";
  TextVariant["headingMd"] = "heading-md";
  TextVariant["headingSm"] = "heading-sm";
  TextVariant["bodyLgMedium"] = "body-lg-medium";
  TextVariant["bodyMd"] = "body-md";
  TextVariant["bodyMdBold"] = "body-md-bold";
  TextVariant["bodySm"] = "body-sm";
  TextVariant["bodySmBold"] = "body-sm-bold";
  TextVariant["bodyXs"] = "body-xs";
  TextVariant["inherit"] = "inherit";
})(TextVariant || (exports.TextVariant = TextVariant = {}));
let Size;
exports.Size = Size;
(function (Size) {
  Size["XXS"] = "xxs";
  Size["XS"] = "xs";
  Size["SM"] = "sm";
  Size["MD"] = "md";
  Size["LG"] = "lg";
  Size["XL"] = "xl";
  Size["inherit"] = "inherit";
  Size["auto"] = "auto";
  Size["none"] = "none";
})(Size || (exports.Size = Size = {}));
let BorderStyle;
exports.BorderStyle = BorderStyle;
(function (BorderStyle) {
  BorderStyle["dashed"] = "dashed";
  BorderStyle["solid"] = "solid";
  BorderStyle["dotted"] = "dotted";
  BorderStyle["double"] = "double";
  BorderStyle["none"] = "none";
})(BorderStyle || (exports.BorderStyle = BorderStyle = {}));
let BorderRadius; // NOTE: The name of this enum is plural due to the name of property in css is `align-items`,
// which is for aligning all items not one
exports.BorderRadius = BorderRadius;
(function (BorderRadius) {
  BorderRadius["XS"] = "xs";
  BorderRadius["SM"] = "sm";
  BorderRadius["MD"] = "md";
  BorderRadius["LG"] = "lg";
  BorderRadius["XL"] = "xl";
  BorderRadius["none"] = "none";
  BorderRadius["pill"] = "pill";
  BorderRadius["full"] = "full";
})(BorderRadius || (exports.BorderRadius = BorderRadius = {}));
let AlignItems;
exports.AlignItems = AlignItems;
(function (AlignItems) {
  AlignItems["flexStart"] = "flex-start";
  AlignItems["flexEnd"] = "flex-end";
  AlignItems["center"] = "center";
  AlignItems["baseline"] = "baseline";
  AlignItems["stretch"] = "stretch";
})(AlignItems || (exports.AlignItems = AlignItems = {}));
let JustifyContent;
exports.JustifyContent = JustifyContent;
(function (JustifyContent) {
  JustifyContent["flexStart"] = "flex-start";
  JustifyContent["flexEnd"] = "flex-end";
  JustifyContent["center"] = "center";
  JustifyContent["spaceAround"] = "space-around";
  JustifyContent["spaceBetween"] = "space-between";
  JustifyContent["spaceEvenly"] = "space-evenly";
})(JustifyContent || (exports.JustifyContent = JustifyContent = {}));
const FLEX_DIRECTION = {
  ROW: 'row',
  ROW_REVERSE: 'row-reverse',
  COLUMN: 'column',
  COLUMN_REVERSE: 'column-reverse'
};
exports.FLEX_DIRECTION = FLEX_DIRECTION;
const FLEX_WRAP = {
  WRAP: 'wrap',
  WRAP_REVERSE: 'wrap-reverse',
  NO_WRAP: 'nowrap'
};
exports.FLEX_WRAP = FLEX_WRAP;
const DISPLAY = {
  BLOCK: 'block',
  FLEX: 'flex',
  GRID: 'grid',
  INLINE_BLOCK: 'inline-block',
  INLINE: 'inline',
  INLINE_FLEX: 'inline-flex',
  INLINE_GRID: 'inline-grid',
  LIST_ITEM: 'list-item',
  NONE: 'none'
};
exports.DISPLAY = DISPLAY;
const FRACTIONS = {
  HALF: '1/2',
  ONE_THIRD: '1/3',
  TWO_THIRDS: '2/3',
  ONE_FOURTH: '1/4',
  TWO_FOURTHS: '2/4',
  THREE_FOURTHS: '3/4',
  ONE_FIFTH: '1/5',
  TWO_FIFTHS: '2/5',
  THREE_FIFTHS: '3/5',
  FOUR_FIFTHS: '4/5',
  ONE_SIXTH: '1/6',
  TWO_SIXTHS: '2/6',
  THREE_SIXTHS: '3/6',
  FOUR_SIXTHS: '4/6',
  FIVE_SIXTHS: '5/6',
  ONE_TWELFTH: '1/12',
  TWO_TWELFTHS: '2/12',
  THREE_TWELFTHS: '3/12',
  FOUR_TWELFTHS: '4/12',
  FIVE_TWELFTHS: '5/12',
  SIX_TWELFTHS: '6/12',
  SEVEN_TWELFTHS: '7/12',
  EIGHT_TWELFTHS: '8/12',
  NINE_TWELFTHS: '9/12',
  TEN_TWELFTHS: '10/12',
  ELEVEN_TWELFTHS: '11/12'
};
exports.FRACTIONS = FRACTIONS;
const BLOCK_SIZES = {
  ...FRACTIONS,
  SCREEN: 'screen',
  MAX: 'max',
  MIN: 'min',
  FULL: 'full'
};
exports.BLOCK_SIZES = BLOCK_SIZES;
let TextAlign;
/**
 * @deprecated `TEXT_ALIGN` const has been deprecated in favour of the `TextAlign` enum which can still be imported from `ui/helpers/constants/design-system.ts`
 *
 * Help to replace `TEXT_ALIGN` with `TextAlign` by submitting PRs against https://github.com/MetaMask/metamask-extension/issues/18714
 */
exports.TextAlign = TextAlign;
(function (TextAlign) {
  TextAlign["Left"] = "left";
  TextAlign["Center"] = "center";
  TextAlign["Right"] = "right";
  TextAlign["Justify"] = "justify";
  TextAlign["End"] = "end";
  TextAlign["Start"] = "start";
})(TextAlign || (exports.TextAlign = TextAlign = {}));
const TEXT_ALIGN = {
  LEFT: 'left',
  CENTER: 'center',
  RIGHT: 'right',
  JUSTIFY: 'justify',
  END: 'end',
  START: 'start'
};
exports.TEXT_ALIGN = TEXT_ALIGN;
let TextTransform;
/**
 * @deprecated `TEXT_TRANSFORM` const has been deprecated in favour of the `TextTransform` enum which can still be imported from `ui/helpers/constants/design-system.ts`
 *
 * Help to replace `TEXT_TRANSFORM` with `TextTransform` by submitting PRs against https://github.com/MetaMask/metamask-extension/issues/18714
 */
exports.TextTransform = TextTransform;
(function (TextTransform) {
  TextTransform["Uppercase"] = "uppercase";
  TextTransform["Lowercase"] = "lowercase";
  TextTransform["Capitalize"] = "capitalize";
})(TextTransform || (exports.TextTransform = TextTransform = {}));
const TEXT_TRANSFORM = {
  UPPERCASE: 'uppercase',
  LOWERCASE: 'lowercase',
  CAPITALIZE: 'capitalize'
};
exports.TEXT_TRANSFORM = TEXT_TRANSFORM;
let FontWeight;
/**
 * @deprecated `FONT_WEIGHT` const has been deprecated in favour of the `FontWeight` enum which can still be imported from `ui/helpers/constants/design-system.ts`
 *
 * Help to replace `FONT_WEIGHT` with `FontWeight` by submitting PRs against https://github.com/MetaMask/metamask-extension/issues/18714
 */
exports.FontWeight = FontWeight;
(function (FontWeight) {
  FontWeight["Bold"] = "bold";
  FontWeight["Medium"] = "medium";
  FontWeight["Normal"] = "normal";
})(FontWeight || (exports.FontWeight = FontWeight = {}));
const FONT_WEIGHT = {
  BOLD: 'bold',
  MEDIUM: 'medium',
  NORMAL: 'normal'
};
exports.FONT_WEIGHT = FONT_WEIGHT;
let OverflowWrap;
/**
 * @deprecated `OVERFLOW_WRAP` const has been deprecated in favour of the `OverflowWrap` enum which can still be imported from `ui/helpers/constants/design-system.ts`
 *
 * Help to replace `OVERFLOW_WRAP` with `OverflowWrap` by submitting PRs against https://github.com/MetaMask/metamask-extension/issues/18714
 */
exports.OverflowWrap = OverflowWrap;
(function (OverflowWrap) {
  OverflowWrap["BreakWord"] = "break-word";
  OverflowWrap["Anywhere"] = "anywhere";
  OverflowWrap["Normal"] = "normal";
})(OverflowWrap || (exports.OverflowWrap = OverflowWrap = {}));
const OVERFLOW_WRAP = {
  BREAK_WORD: 'break-word',
  ANYWHERE: 'anywhere',
  NORMAL: 'normal'
};
exports.OVERFLOW_WRAP = OVERFLOW_WRAP;
let FontStyle;
/**
 * @deprecated `FONT_STYLE` const has been deprecated in favour of the `FontStyle` enum which can still be imported from `ui/helpers/constants/design-system.ts`
 *
 * Help to replace `FONT_STYLE` with `FontStyle` by submitting PRs against https://github.com/MetaMask/metamask-extension/issues/18714
 */
exports.FontStyle = FontStyle;
(function (FontStyle) {
  FontStyle["Italic"] = "italic";
  FontStyle["Normal"] = "normal";
})(FontStyle || (exports.FontStyle = FontStyle = {}));
const FONT_STYLE = {
  ITALIC: 'italic',
  NORMAL: 'normal'
};
exports.FONT_STYLE = FONT_STYLE;
const SEVERITIES = {
  DANGER: 'danger',
  WARNING: 'warning',
  INFO: 'info',
  SUCCESS: 'success'
};
exports.SEVERITIES = SEVERITIES;
const RESIZE = {
  NONE: 'none',
  BOTH: 'both',
  HORIZONTAL: 'horizontal',
  VERTICAL: 'vertical',
  INITIAL: 'initial',
  INHERIT: 'inherit'
};
exports.RESIZE = RESIZE;
const BREAKPOINTS = ['base', 'sm', 'md', 'lg'];
exports.BREAKPOINTS = BREAKPOINTS;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\design-system.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\error-keys.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Cerror-keys.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNSENDABLE_ASSET_ERROR_KEY = exports.TRANSACTION_ERROR_KEY = exports.INVALID_ASSET_TYPE = exports.INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY = exports.INSUFFICIENT_FUNDS_ERROR_KEY = exports.GAS_PRICE_FETCH_FAILURE_ERROR_KEY = exports.GAS_PRICE_EXCESSIVE_ERROR_KEY = exports.GAS_LIMIT_TOO_LOW_ERROR_KEY = exports.ETH_GAS_PRICE_FETCH_WARNING_KEY = void 0;
const INSUFFICIENT_FUNDS_ERROR_KEY = 'insufficientFunds';
exports.INSUFFICIENT_FUNDS_ERROR_KEY = INSUFFICIENT_FUNDS_ERROR_KEY;
const GAS_LIMIT_TOO_LOW_ERROR_KEY = 'gasLimitTooLow';
exports.GAS_LIMIT_TOO_LOW_ERROR_KEY = GAS_LIMIT_TOO_LOW_ERROR_KEY;
const TRANSACTION_ERROR_KEY = 'transactionError';
exports.TRANSACTION_ERROR_KEY = TRANSACTION_ERROR_KEY;
const ETH_GAS_PRICE_FETCH_WARNING_KEY = 'ethGasPriceFetchWarning';
exports.ETH_GAS_PRICE_FETCH_WARNING_KEY = ETH_GAS_PRICE_FETCH_WARNING_KEY;
const GAS_PRICE_FETCH_FAILURE_ERROR_KEY = 'gasPriceFetchFailed';
exports.GAS_PRICE_FETCH_FAILURE_ERROR_KEY = GAS_PRICE_FETCH_FAILURE_ERROR_KEY;
const GAS_PRICE_EXCESSIVE_ERROR_KEY = 'gasPriceExcessive';
exports.GAS_PRICE_EXCESSIVE_ERROR_KEY = GAS_PRICE_EXCESSIVE_ERROR_KEY;
const UNSENDABLE_ASSET_ERROR_KEY = 'unsendableAsset';
exports.UNSENDABLE_ASSET_ERROR_KEY = UNSENDABLE_ASSET_ERROR_KEY;
const INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY = 'insufficientFundsForGas';
exports.INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY = INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY;
const INVALID_ASSET_TYPE = 'invalidAssetType';
exports.INVALID_ASSET_TYPE = INVALID_ASSET_TYPE;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\error-keys.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\gas.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Cgas.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PRIORITY_LEVEL_ICON_MAP = exports.GAS_FORM_ERRORS = void 0;
exports.getGasFormErrorText = getGasFormErrorText;
const GAS_FORM_ERRORS = {
  GAS_LIMIT_OUT_OF_BOUNDS: 'editGasLimitOutOfBounds',
  MAX_PRIORITY_FEE_TOO_LOW: 'editGasMaxPriorityFeeLow',
  MAX_FEE_TOO_LOW: 'editGasMaxFeeLow',
  MAX_PRIORITY_FEE_BELOW_MINIMUM: 'editGasMaxPriorityFeeBelowMinimum',
  MAX_PRIORITY_FEE_HIGH_WARNING: 'editGasMaxPriorityFeeHigh',
  MAX_FEE_HIGH_WARNING: 'editGasMaxFeeHigh',
  MAX_FEE_IMBALANCE: 'editGasMaxFeeImbalance',
  GAS_PRICE_TOO_LOW: 'editGasPriceTooLow'
};
exports.GAS_FORM_ERRORS = GAS_FORM_ERRORS;
function getGasFormErrorText(type, t, {
  minimumGasLimit
} = {}) {
  switch (type) {
    case GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS:
      return t('editGasLimitOutOfBounds', [minimumGasLimit]);
    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW:
      return t('editGasMaxPriorityFeeLow');
    case GAS_FORM_ERRORS.MAX_FEE_TOO_LOW:
      return t('editGasMaxFeeLow');
    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_BELOW_MINIMUM:
      return t('editGasMaxPriorityFeeBelowMinimum');
    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_HIGH_WARNING:
      return t('editGasMaxPriorityFeeHigh');
    case GAS_FORM_ERRORS.MAX_FEE_HIGH_WARNING:
      return t('editGasMaxFeeHigh');
    case GAS_FORM_ERRORS.MAX_FEE_IMBALANCE:
      return t('editGasMaxFeePriorityImbalance');
    case GAS_FORM_ERRORS.GAS_PRICE_TOO_LOW:
      return t('editGasPriceTooLow');
    default:
      return '';
  }
}
const PRIORITY_LEVEL_ICON_MAP = {
  low: '🐢',
  medium: '🦊',
  high: '🦍',
  dappSuggested: '🌐',
  swapSuggested: '🔄',
  custom: '⚙️'
};
exports.PRIORITY_LEVEL_ICON_MAP = PRIORITY_LEVEL_ICON_MAP;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\gas.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\onboarding.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Conboarding.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FIRST_TIME_FLOW_TYPES = void 0;
const FIRST_TIME_FLOW_TYPES = {
  IMPORT: 'import',
  CREATE: 'create'
};
exports.FIRST_TIME_FLOW_TYPES = FIRST_TIME_FLOW_TYPES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\onboarding.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Croutes.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VIEW_QUOTE_ROUTE = exports.UNLOCK_ROUTE = exports.TOKEN_DETAILS = exports.SWAPS_ROUTE = exports.SWAPS_MAINTENANCE_ROUTE = exports.SWAPS_ERROR_ROUTE = exports.SNAPS_VIEW_ROUTE = exports.SNAPS_LIST_ROUTE = exports.SMART_TRANSACTION_STATUS_ROUTE = exports.SIGNATURE_REQUEST_PATH = exports.SETTINGS_ROUTE = exports.SEND_ROUTE = exports.SECURITY_ROUTE = exports.REVEAL_SEED_ROUTE = exports.RESTORE_VAULT_ROUTE = exports.PATH_NAME_MAP = exports.ONBOARDING_WELCOME_ROUTE = exports.ONBOARDING_UNLOCK_ROUTE = exports.ONBOARDING_SECURE_YOUR_WALLET_ROUTE = exports.ONBOARDING_ROUTE = exports.ONBOARDING_REVIEW_SRP_ROUTE = exports.ONBOARDING_PRIVACY_SETTINGS_ROUTE = exports.ONBOARDING_PIN_EXTENSION_ROUTE = exports.ONBOARDING_METAMETRICS = exports.ONBOARDING_IMPORT_WITH_SRP_ROUTE = exports.ONBOARDING_HELP_US_IMPROVE_ROUTE = exports.ONBOARDING_CREATE_PASSWORD_ROUTE = exports.ONBOARDING_CONFIRM_SRP_ROUTE = exports.ONBOARDING_COMPLETION_ROUTE = exports.NEW_ACCOUNT_ROUTE = exports.NETWORKS_ROUTE = exports.NETWORKS_FORM_ROUTE = exports.LOCK_ROUTE = exports.LOADING_QUOTES_ROUTE = exports.IMPORT_TOKEN_ROUTE = exports.IMPORT_ACCOUNT_ROUTE = exports.GENERAL_ROUTE = exports.EXPERIMENTAL_ROUTE = exports.ENCRYPTION_PUBLIC_KEY_REQUEST_PATH = exports.DEFAULT_ROUTE = exports.DECRYPT_MESSAGE_REQUEST_PATH = exports.CONTACT_VIEW_ROUTE = exports.CONTACT_LIST_ROUTE = exports.CONTACT_EDIT_ROUTE = exports.CONTACT_ADD_ROUTE = exports.CONNECT_ROUTE = exports.CONNECT_HARDWARE_ROUTE = exports.CONNECT_CONFIRM_PERMISSIONS_ROUTE = exports.CONNECTED_ROUTE = exports.CONNECTED_ACCOUNTS_ROUTE = exports.CONFIRM_TRANSFER_FROM_PATH = exports.CONFIRM_TRANSACTION_ROUTE = exports.CONFIRM_TOKEN_METHOD_PATH = exports.CONFIRM_SET_APPROVAL_FOR_ALL_PATH = exports.CONFIRM_SEND_TOKEN_PATH = exports.CONFIRM_SEND_ETHER_PATH = exports.CONFIRM_SAFE_TRANSFER_FROM_PATH = exports.CONFIRM_IMPORT_TOKEN_ROUTE = exports.CONFIRM_DEPLOY_CONTRACT_PATH = exports.CONFIRM_APPROVE_PATH = exports.CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE = exports.CONFIRMATION_V_NEXT_ROUTE = exports.BUILD_QUOTE_ROUTE = exports.AWAITING_SWAP_ROUTE = exports.AWAITING_SIGNATURES_ROUTE = exports.ASSET_ROUTE = exports.ALERTS_ROUTE = exports.ADVANCED_ROUTE = exports.ADD_POPULAR_CUSTOM_NETWORK = exports.ADD_NFT_ROUTE = exports.ADD_NETWORK_ROUTE = exports.ABOUT_US_ROUTE = void 0;
const DEFAULT_ROUTE = '/';
exports.DEFAULT_ROUTE = DEFAULT_ROUTE;
const UNLOCK_ROUTE = '/unlock';
exports.UNLOCK_ROUTE = UNLOCK_ROUTE;
const LOCK_ROUTE = '/lock';
exports.LOCK_ROUTE = LOCK_ROUTE;
const ASSET_ROUTE = '/asset';
exports.ASSET_ROUTE = ASSET_ROUTE;
const SETTINGS_ROUTE = '/settings';
exports.SETTINGS_ROUTE = SETTINGS_ROUTE;
const GENERAL_ROUTE = '/settings/general';
exports.GENERAL_ROUTE = GENERAL_ROUTE;
const ADVANCED_ROUTE = '/settings/advanced';
exports.ADVANCED_ROUTE = ADVANCED_ROUTE;
const EXPERIMENTAL_ROUTE = '/settings/experimental';
exports.EXPERIMENTAL_ROUTE = EXPERIMENTAL_ROUTE;
const SECURITY_ROUTE = '/settings/security';
exports.SECURITY_ROUTE = SECURITY_ROUTE;
const ABOUT_US_ROUTE = '/settings/about-us';
exports.ABOUT_US_ROUTE = ABOUT_US_ROUTE;
const ALERTS_ROUTE = '/settings/alerts';
exports.ALERTS_ROUTE = ALERTS_ROUTE;
const NETWORKS_ROUTE = '/settings/networks';
exports.NETWORKS_ROUTE = NETWORKS_ROUTE;
const NETWORKS_FORM_ROUTE = '/settings/networks/form';
exports.NETWORKS_FORM_ROUTE = NETWORKS_FORM_ROUTE;
const ADD_NETWORK_ROUTE = '/settings/networks/add-network';
exports.ADD_NETWORK_ROUTE = ADD_NETWORK_ROUTE;
const ADD_POPULAR_CUSTOM_NETWORK = '/settings/networks/add-popular-custom-network';
exports.ADD_POPULAR_CUSTOM_NETWORK = ADD_POPULAR_CUSTOM_NETWORK;
const SNAPS_LIST_ROUTE = '/settings/snaps-list';
exports.SNAPS_LIST_ROUTE = SNAPS_LIST_ROUTE;
const SNAPS_VIEW_ROUTE = '/settings/snaps-view';
exports.SNAPS_VIEW_ROUTE = SNAPS_VIEW_ROUTE;
const CONTACT_LIST_ROUTE = '/settings/contact-list';
exports.CONTACT_LIST_ROUTE = CONTACT_LIST_ROUTE;
const CONTACT_EDIT_ROUTE = '/settings/contact-list/edit-contact';
exports.CONTACT_EDIT_ROUTE = CONTACT_EDIT_ROUTE;
const CONTACT_ADD_ROUTE = '/settings/contact-list/add-contact';
exports.CONTACT_ADD_ROUTE = CONTACT_ADD_ROUTE;
const CONTACT_VIEW_ROUTE = '/settings/contact-list/view-contact';
exports.CONTACT_VIEW_ROUTE = CONTACT_VIEW_ROUTE;
const REVEAL_SEED_ROUTE = '/seed';
exports.REVEAL_SEED_ROUTE = REVEAL_SEED_ROUTE;
const RESTORE_VAULT_ROUTE = '/restore-vault';
exports.RESTORE_VAULT_ROUTE = RESTORE_VAULT_ROUTE;
const IMPORT_TOKEN_ROUTE = '/import-token';
exports.IMPORT_TOKEN_ROUTE = IMPORT_TOKEN_ROUTE;
const CONFIRM_IMPORT_TOKEN_ROUTE = '/confirm-import-token';
exports.CONFIRM_IMPORT_TOKEN_ROUTE = CONFIRM_IMPORT_TOKEN_ROUTE;
const CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE = '/confirm-add-suggested-token';
exports.CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE = CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE;
const NEW_ACCOUNT_ROUTE = '/new-account';
exports.NEW_ACCOUNT_ROUTE = NEW_ACCOUNT_ROUTE;
const IMPORT_ACCOUNT_ROUTE = '/new-account/import';
exports.IMPORT_ACCOUNT_ROUTE = IMPORT_ACCOUNT_ROUTE;
const CONNECT_HARDWARE_ROUTE = '/new-account/connect';
exports.CONNECT_HARDWARE_ROUTE = CONNECT_HARDWARE_ROUTE;
const SEND_ROUTE = '/send';
exports.SEND_ROUTE = SEND_ROUTE;
const TOKEN_DETAILS = '/token-details';
exports.TOKEN_DETAILS = TOKEN_DETAILS;
const CONNECT_ROUTE = '/connect';
exports.CONNECT_ROUTE = CONNECT_ROUTE;
const CONNECT_CONFIRM_PERMISSIONS_ROUTE = '/confirm-permissions';
exports.CONNECT_CONFIRM_PERMISSIONS_ROUTE = CONNECT_CONFIRM_PERMISSIONS_ROUTE;
const CONNECTED_ROUTE = '/connected';
exports.CONNECTED_ROUTE = CONNECTED_ROUTE;
const CONNECTED_ACCOUNTS_ROUTE = '/connected/accounts';
exports.CONNECTED_ACCOUNTS_ROUTE = CONNECTED_ACCOUNTS_ROUTE;
const SWAPS_ROUTE = '/swaps';
exports.SWAPS_ROUTE = SWAPS_ROUTE;
const BUILD_QUOTE_ROUTE = '/swaps/build-quote';
exports.BUILD_QUOTE_ROUTE = BUILD_QUOTE_ROUTE;
const VIEW_QUOTE_ROUTE = '/swaps/view-quote';
exports.VIEW_QUOTE_ROUTE = VIEW_QUOTE_ROUTE;
const LOADING_QUOTES_ROUTE = '/swaps/loading-quotes';
exports.LOADING_QUOTES_ROUTE = LOADING_QUOTES_ROUTE;
const AWAITING_SIGNATURES_ROUTE = '/swaps/awaiting-signatures';
exports.AWAITING_SIGNATURES_ROUTE = AWAITING_SIGNATURES_ROUTE;
const SMART_TRANSACTION_STATUS_ROUTE = '/swaps/smart-transaction-status';
exports.SMART_TRANSACTION_STATUS_ROUTE = SMART_TRANSACTION_STATUS_ROUTE;
const AWAITING_SWAP_ROUTE = '/swaps/awaiting-swap';
exports.AWAITING_SWAP_ROUTE = AWAITING_SWAP_ROUTE;
const SWAPS_ERROR_ROUTE = '/swaps/swaps-error';
exports.SWAPS_ERROR_ROUTE = SWAPS_ERROR_ROUTE;
const SWAPS_MAINTENANCE_ROUTE = '/swaps/maintenance';
exports.SWAPS_MAINTENANCE_ROUTE = SWAPS_MAINTENANCE_ROUTE;
const ADD_NFT_ROUTE = '/add-nft';
exports.ADD_NFT_ROUTE = ADD_NFT_ROUTE;
const ONBOARDING_ROUTE = '/onboarding';
exports.ONBOARDING_ROUTE = ONBOARDING_ROUTE;
const ONBOARDING_REVIEW_SRP_ROUTE = '/onboarding/review-recovery-phrase';
exports.ONBOARDING_REVIEW_SRP_ROUTE = ONBOARDING_REVIEW_SRP_ROUTE;
const ONBOARDING_CONFIRM_SRP_ROUTE = '/onboarding/confirm-recovery-phrase';
exports.ONBOARDING_CONFIRM_SRP_ROUTE = ONBOARDING_CONFIRM_SRP_ROUTE;
const ONBOARDING_CREATE_PASSWORD_ROUTE = '/onboarding/create-password';
exports.ONBOARDING_CREATE_PASSWORD_ROUTE = ONBOARDING_CREATE_PASSWORD_ROUTE;
const ONBOARDING_COMPLETION_ROUTE = '/onboarding/completion';
exports.ONBOARDING_COMPLETION_ROUTE = ONBOARDING_COMPLETION_ROUTE;
const ONBOARDING_UNLOCK_ROUTE = '/onboarding/unlock';
exports.ONBOARDING_UNLOCK_ROUTE = ONBOARDING_UNLOCK_ROUTE;
const ONBOARDING_HELP_US_IMPROVE_ROUTE = '/onboarding/help-us-improve';
exports.ONBOARDING_HELP_US_IMPROVE_ROUTE = ONBOARDING_HELP_US_IMPROVE_ROUTE;
const ONBOARDING_IMPORT_WITH_SRP_ROUTE = '/onboarding/import-with-recovery-phrase';
exports.ONBOARDING_IMPORT_WITH_SRP_ROUTE = ONBOARDING_IMPORT_WITH_SRP_ROUTE;
const ONBOARDING_SECURE_YOUR_WALLET_ROUTE = '/onboarding/secure-your-wallet';
exports.ONBOARDING_SECURE_YOUR_WALLET_ROUTE = ONBOARDING_SECURE_YOUR_WALLET_ROUTE;
const ONBOARDING_PRIVACY_SETTINGS_ROUTE = '/onboarding/privacy-settings';
exports.ONBOARDING_PRIVACY_SETTINGS_ROUTE = ONBOARDING_PRIVACY_SETTINGS_ROUTE;
const ONBOARDING_PIN_EXTENSION_ROUTE = '/onboarding/pin-extension';
exports.ONBOARDING_PIN_EXTENSION_ROUTE = ONBOARDING_PIN_EXTENSION_ROUTE;
const ONBOARDING_WELCOME_ROUTE = '/onboarding/welcome';
exports.ONBOARDING_WELCOME_ROUTE = ONBOARDING_WELCOME_ROUTE;
const ONBOARDING_METAMETRICS = '/onboarding/metametrics';
exports.ONBOARDING_METAMETRICS = ONBOARDING_METAMETRICS;
const CONFIRM_TRANSACTION_ROUTE = '/confirm-transaction';
exports.CONFIRM_TRANSACTION_ROUTE = CONFIRM_TRANSACTION_ROUTE;
const CONFIRM_SEND_ETHER_PATH = '/send-ether';
exports.CONFIRM_SEND_ETHER_PATH = CONFIRM_SEND_ETHER_PATH;
const CONFIRM_SEND_TOKEN_PATH = '/send-token';
exports.CONFIRM_SEND_TOKEN_PATH = CONFIRM_SEND_TOKEN_PATH;
const CONFIRM_DEPLOY_CONTRACT_PATH = '/deploy-contract';
exports.CONFIRM_DEPLOY_CONTRACT_PATH = CONFIRM_DEPLOY_CONTRACT_PATH;
const CONFIRM_APPROVE_PATH = '/approve';
exports.CONFIRM_APPROVE_PATH = CONFIRM_APPROVE_PATH;
const CONFIRM_SET_APPROVAL_FOR_ALL_PATH = '/set-approval-for-all';
exports.CONFIRM_SET_APPROVAL_FOR_ALL_PATH = CONFIRM_SET_APPROVAL_FOR_ALL_PATH;
const CONFIRM_TRANSFER_FROM_PATH = '/transfer-from';
exports.CONFIRM_TRANSFER_FROM_PATH = CONFIRM_TRANSFER_FROM_PATH;
const CONFIRM_SAFE_TRANSFER_FROM_PATH = '/safe-transfer-from';
exports.CONFIRM_SAFE_TRANSFER_FROM_PATH = CONFIRM_SAFE_TRANSFER_FROM_PATH;
const CONFIRM_TOKEN_METHOD_PATH = '/token-method';
exports.CONFIRM_TOKEN_METHOD_PATH = CONFIRM_TOKEN_METHOD_PATH;
const SIGNATURE_REQUEST_PATH = '/signature-request';
exports.SIGNATURE_REQUEST_PATH = SIGNATURE_REQUEST_PATH;
const DECRYPT_MESSAGE_REQUEST_PATH = '/decrypt-message-request';
exports.DECRYPT_MESSAGE_REQUEST_PATH = DECRYPT_MESSAGE_REQUEST_PATH;
const ENCRYPTION_PUBLIC_KEY_REQUEST_PATH = '/encryption-public-key-request';
exports.ENCRYPTION_PUBLIC_KEY_REQUEST_PATH = ENCRYPTION_PUBLIC_KEY_REQUEST_PATH;
const CONFIRMATION_V_NEXT_ROUTE = '/confirmation';

// Used to pull a convenient name for analytics tracking events. The key must
// be react-router ready path, and can include params such as :id for popup windows
exports.CONFIRMATION_V_NEXT_ROUTE = CONFIRMATION_V_NEXT_ROUTE;
const PATH_NAME_MAP = {
  [DEFAULT_ROUTE]: 'Home',
  [UNLOCK_ROUTE]: 'Unlock Page',
  [LOCK_ROUTE]: 'Lock Page',
  [`${ASSET_ROUTE}/:asset/:id`]: `Asset Page`,
  [SETTINGS_ROUTE]: 'Settings Page',
  [GENERAL_ROUTE]: 'General Settings Page',
  [ADVANCED_ROUTE]: 'Advanced Settings Page',
  [EXPERIMENTAL_ROUTE]: 'Experimental Settings Page',
  [SECURITY_ROUTE]: 'Security Settings Page',
  [ABOUT_US_ROUTE]: 'About Us Page',
  [ALERTS_ROUTE]: 'Alerts Settings Page',
  [NETWORKS_ROUTE]: 'Network Settings Page',
  [NETWORKS_FORM_ROUTE]: 'Network Settings Page Form',
  [ADD_NETWORK_ROUTE]: 'Add Network From Settings Page Form',
  [ADD_POPULAR_CUSTOM_NETWORK]: 'Add Network From A List Of Popular Custom Networks',
  [CONTACT_LIST_ROUTE]: 'Contact List Settings Page',
  [`${CONTACT_EDIT_ROUTE}/:address`]: 'Edit Contact Settings Page',
  [CONTACT_ADD_ROUTE]: 'Add Contact Settings Page',
  [`${CONTACT_VIEW_ROUTE}/:address`]: 'View Contact Settings Page',
  [REVEAL_SEED_ROUTE]: 'Reveal Secret Recovery Phrase Page',
  [RESTORE_VAULT_ROUTE]: 'Restore Vault Page',
  [IMPORT_TOKEN_ROUTE]: 'Import Token Page',
  [CONFIRM_IMPORT_TOKEN_ROUTE]: 'Confirm Import Token Page',
  [CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE]: 'Confirm Add Suggested Token Page',
  [NEW_ACCOUNT_ROUTE]: 'New Account Page',
  [IMPORT_ACCOUNT_ROUTE]: 'Import Account Page',
  [CONNECT_HARDWARE_ROUTE]: 'Connect Hardware Wallet Page',
  [SEND_ROUTE]: 'Send Page',
  [`${TOKEN_DETAILS}/:address`]: 'Token Details Page',
  [`${CONNECT_ROUTE}/:id`]: 'Connect To Site Confirmation Page',
  [`${CONNECT_ROUTE}/:id${CONNECT_CONFIRM_PERMISSIONS_ROUTE}`]: 'Grant Connected Site Permissions Confirmation Page',
  [CONNECTED_ROUTE]: 'Sites Connected To This Account Page',
  [CONNECTED_ACCOUNTS_ROUTE]: 'Accounts Connected To This Site Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id`]: 'Confirmation Root Page',
  [CONFIRM_TRANSACTION_ROUTE]: 'Confirmation Root Page',
  // TODO: rename when this is the only confirmation page
  [CONFIRMATION_V_NEXT_ROUTE]: 'New Confirmation Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_TOKEN_METHOD_PATH}`]: 'Confirm Token Method Transaction Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_SEND_ETHER_PATH}`]: 'Confirm Send Ether Transaction Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_SEND_TOKEN_PATH}`]: 'Confirm Send Token Transaction Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_DEPLOY_CONTRACT_PATH}`]: 'Confirm Deploy Contract Transaction Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_APPROVE_PATH}`]: 'Confirm Approve Transaction Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_SET_APPROVAL_FOR_ALL_PATH}`]: 'Confirm Set Approval For All Transaction Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_TRANSFER_FROM_PATH}`]: 'Confirm Transfer From Transaction Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${CONFIRM_SAFE_TRANSFER_FROM_PATH}`]: 'Confirm Safe Transfer From Transaction Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${SIGNATURE_REQUEST_PATH}`]: 'Signature Request Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${DECRYPT_MESSAGE_REQUEST_PATH}`]: 'Decrypt Message Request Page',
  [`${CONFIRM_TRANSACTION_ROUTE}/:id${ENCRYPTION_PUBLIC_KEY_REQUEST_PATH}`]: 'Encryption Public Key Request Page',
  [BUILD_QUOTE_ROUTE]: 'Swaps Build Quote Page',
  [VIEW_QUOTE_ROUTE]: 'Swaps View Quotes Page',
  [LOADING_QUOTES_ROUTE]: 'Swaps Loading Quotes Page',
  [AWAITING_SWAP_ROUTE]: 'Swaps Awaiting Swaps Page',
  [SWAPS_ERROR_ROUTE]: 'Swaps Error Page'
};
exports.PATH_NAME_MAP = PATH_NAME_MAP;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\routes.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\settings.js", {"../../components/component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/component-library/icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\index.js","./routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Csettings.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SETTINGS_CONSTANTS = void 0;
var _componentLibrary = require("../../components/component-library");
var _deprecated = require("../../components/component-library/icon/deprecated");
var _routes = require("./routes");
const SETTINGS_CONSTANTS = [{
  tabMessage: t => t('general'),
  sectionMessage: t => t('currencyConversion'),
  descriptionMessage: t => t('currencyConversion'),
  route: `${_routes.GENERAL_ROUTE}#currency-conversion`,
  iconName: _deprecated.ICON_NAMES.SETTING
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('primaryCurrencySetting'),
  descriptionMessage: t => t('primaryCurrencySettingDescription'),
  route: `${_routes.GENERAL_ROUTE}#primary-currency`,
  iconName: _deprecated.ICON_NAMES.SETTING
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('currentLanguage'),
  descriptionMessage: t => t('currentLanguage'),
  route: `${_routes.GENERAL_ROUTE}#current-language`,
  iconName: _deprecated.ICON_NAMES.SETTING
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('theme'),
  descriptionMessage: t => t('themeDescription'),
  route: `${_routes.GENERAL_ROUTE}#theme`,
  icon: 'fa fa-flask'
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('accountIdenticon'),
  descriptionMessage: t => t('accountIdenticon'),
  route: `${_routes.GENERAL_ROUTE}#account-identicon`,
  iconName: _deprecated.ICON_NAMES.SETTING
}, {
  tabMessage: t => t('general'),
  sectionMessage: t => t('hideZeroBalanceTokens'),
  descriptionMessage: t => t('hideZeroBalanceTokens'),
  route: `${_routes.GENERAL_ROUTE}#zero-balancetokens`,
  iconName: _deprecated.ICON_NAMES.SETTING
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('stateLogs'),
  descriptionMessage: t => t('stateLogsDescription'),
  route: `${_routes.ADVANCED_ROUTE}#state-logs`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('clearActivity'),
  descriptionMessage: t => t('clearActivityDescription'),
  route: `${_routes.ADVANCED_ROUTE}#clear-activity`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('showHexData'),
  descriptionMessage: t => t('showHexDataDescription'),
  route: `${_routes.ADVANCED_ROUTE}#show-hexdata`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('showFiatConversionInTestnets'),
  descriptionMessage: t => t('showFiatConversionInTestnetsDescription'),
  route: `${_routes.ADVANCED_ROUTE}#conversion-testnetworks`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('showTestnetNetworks'),
  descriptionMessage: t => t('showTestnetNetworksDescription'),
  route: `${_routes.ADVANCED_ROUTE}#show-testnets`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('nonceField'),
  descriptionMessage: t => t('nonceFieldDescription'),
  route: `${_routes.ADVANCED_ROUTE}#customize-nonce`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('autoLockTimeLimit'),
  descriptionMessage: t => t('autoLockTimeLimitDescription'),
  route: `${_routes.ADVANCED_ROUTE}#autolock-timer`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('preferredLedgerConnectionType'),
  descriptionMessage: t => t('preferredLedgerConnectionType'),
  route: `${_routes.ADVANCED_ROUTE}#ledger-connection`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('dismissReminderField'),
  descriptionMessage: t => t('dismissReminderDescriptionField'),
  route: `${_routes.ADVANCED_ROUTE}#dimiss-secretrecovery`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('toggleEthSignField'),
  descriptionMessage: t => t('toggleEthSignDescriptionField'),
  route: `${_routes.ADVANCED_ROUTE}#toggle-ethsign`,
  icon: 'fas fa-sliders-h'
}, {
  tabMessage: t => t('contacts'),
  sectionMessage: t => t('contacts'),
  descriptionMessage: t => t('contacts'),
  route: _routes.CONTACT_LIST_ROUTE,
  iconName: _deprecated.ICON_NAMES.BOOK
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('revealSeedWords'),
  descriptionMessage: t => t('revealSeedWords'),
  route: `${_routes.SECURITY_ROUTE}#reveal-secretrecovery`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('showIncomingTransactions'),
  descriptionMessage: t => t('showIncomingTransactionsDescription'),
  route: `${_routes.SECURITY_ROUTE}#incoming-transaction`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('usePhishingDetection'),
  descriptionMessage: t => t('usePhishingDetectionDescription'),
  route: `${_routes.SECURITY_ROUTE}#phishing-detection`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('participateInMetaMetrics'),
  descriptionMessage: t => t('participateInMetaMetricsDescription'),
  route: `${_routes.SECURITY_ROUTE}#metrametrics`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('chooseYourNetwork'),
  descriptionMessage: t => t('chooseYourNetworkDescription'),
  route: `${_routes.SECURITY_ROUTE}#-chose-your-network`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('addCustomIPFSGateway'),
  descriptionMessage: t => t('addCustomIPFSGatewayDescription'),
  route: `${_routes.SECURITY_ROUTE}#-add-custom-ipfs-gateway`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('autoDetectTokens'),
  descriptionMessage: t => t('autoDetectTokensDescription'),
  route: `${_routes.SECURITY_ROUTE}#-auto-detect-tokens`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('useMultiAccountBalanceChecker'),
  descriptionMessage: t => t('useMultiAccountBalanceCheckerDescription'),
  route: `${_routes.SECURITY_ROUTE}#-use-milti-account-balance-checker`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('securityAndPrivacy'),
  sectionMessage: t => t('currencyRateCheckToggle'),
  descriptionMessage: t => t('currencyRateCheckToggleDescription'),
  route: `${_routes.SECURITY_ROUTE}#price-checker`,
  icon: 'fa fa-lock'
}, {
  tabMessage: t => t('alerts'),
  sectionMessage: t => t('alertSettingsUnconnectedAccount'),
  descriptionMessage: t => t('alertSettingsUnconnectedAccount'),
  route: `${_routes.ALERTS_ROUTE}#unconnected-account`,
  iconName: _deprecated.ICON_NAMES.NOTIFICATION
}, {
  tabMessage: t => t('alerts'),
  sectionMessage: t => t('alertSettingsWeb3ShimUsage'),
  descriptionMessage: t => t('alertSettingsWeb3ShimUsage'),
  route: `${_routes.ALERTS_ROUTE}#web3-shimusage`,
  icon: 'fa fa-bell'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('mainnet'),
  descriptionMessage: t => t('mainnet'),
  route: `${_routes.NETWORKS_ROUTE}#networks-mainnet`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('goerli'),
  descriptionMessage: t => t('goerli'),
  route: `${_routes.NETWORKS_ROUTE}#networks-goerli`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('sepolia'),
  descriptionMessage: t => t('sepolia'),
  route: `${_routes.NETWORKS_ROUTE}#networks-sepolia`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('lineatestnet'),
  descriptionMessage: t => t('lineatestnet'),
  route: `${_routes.NETWORKS_ROUTE}#networks-lineatestnet`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('networks'),
  sectionMessage: t => t('localhost'),
  descriptionMessage: t => t('localhost'),
  route: `${_routes.NETWORKS_ROUTE}#networks-localhost`,
  icon: 'fa fa-plug'
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('metamaskVersion'),
  descriptionMessage: t => t('builtAroundTheWorld'),
  route: `${_routes.ABOUT_US_ROUTE}#version`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('links'),
  descriptionMessage: t => t('links'),
  route: `${_routes.ABOUT_US_ROUTE}#links`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('privacyMsg'),
  descriptionMessage: t => t('privacyMsg'),
  route: `${_routes.ABOUT_US_ROUTE}#privacy-policy`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('terms'),
  descriptionMessage: t => t('terms'),
  route: `${_routes.ABOUT_US_ROUTE}#terms`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('attributions'),
  descriptionMessage: t => t('attributions'),
  route: `${_routes.ABOUT_US_ROUTE}#attributions`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('supportCenter'),
  descriptionMessage: t => t('supportCenter'),
  route: `${_routes.ABOUT_US_ROUTE}#supportcenter`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('visitWebSite'),
  descriptionMessage: t => t('visitWebSite'),
  route: `${_routes.ABOUT_US_ROUTE}#visitwebsite`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('contactUs'),
  descriptionMessage: t => t('contactUs'),
  route: `${_routes.ABOUT_US_ROUTE}#contactus`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('about'),
  sectionMessage: t => t('betaTerms'),
  descriptionMessage: t => t('betaTerms'),
  route: `${_routes.ABOUT_US_ROUTE}#beta-terms`,
  iconName: _componentLibrary.IconName.Info
}, {
  tabMessage: t => t('experimental'),
  sectionMessage: t => t('enableOpenSeaAPI'),
  descriptionMessage: t => t('enableOpenSeaAPIDescription'),
  route: `${_routes.EXPERIMENTAL_ROUTE}#opensea-api`,
  icon: 'fa fa-flask'
}, {
  tabMessage: t => t('experimental'),
  sectionMessage: t => t('useNftDetection'),
  descriptionMessage: t => t('useNftDetectionDescription'),
  route: `${_routes.EXPERIMENTAL_ROUTE}#autodetect-nfts`,
  icon: 'fa fa-flask'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('backupUserData'),
  descriptionMessage: t => t('backupUserDataDescription'),
  route: `${_routes.ADVANCED_ROUTE}#backup-userdata`,
  icon: 'fas fa-download'
}, {
  tabMessage: t => t('advanced'),
  sectionMessage: t => t('restoreUserData'),
  descriptionMessage: t => t('restoreUserDataDescription'),
  route: `${_routes.ADVANCED_ROUTE}#restore-userdata`,
  icon: 'fas fa-upload'
}, {
  tabMessage: t => t('experimental'),
  sectionMessage: t => t('transactionSecurityCheck'),
  descriptionMessage: t => t('transactionSecurityCheckDescription'),
  route: `${_routes.EXPERIMENTAL_ROUTE}#transaction-security-check`,
  icon: 'fa fa-flask'
}];
exports.SETTINGS_CONSTANTS = SETTINGS_CONSTANTS;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\settings.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\transactions.js", {"../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Ctransactions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TOKEN_CATEGORY_HASH = exports.PRIORITY_STATUS_HASH = exports.PENDING_STATUS_HASH = void 0;
var _transaction = require("../../../shared/constants/transaction");
const PENDING_STATUS_HASH = {
  [_transaction.TransactionStatus.unapproved]: true,
  [_transaction.TransactionStatus.approved]: true,
  [_transaction.TransactionStatus.submitted]: true,
  [_transaction.TransactionStatus.pending]: true
};
exports.PENDING_STATUS_HASH = PENDING_STATUS_HASH;
const PRIORITY_STATUS_HASH = {
  ...PENDING_STATUS_HASH,
  [_transaction.TransactionStatus.confirmed]: true
};
exports.PRIORITY_STATUS_HASH = PRIORITY_STATUS_HASH;
const TOKEN_CATEGORY_HASH = {
  [_transaction.TransactionType.tokenMethodApprove]: true,
  [_transaction.TransactionType.tokenMethodSetApprovalForAll]: true,
  [_transaction.TransactionType.tokenMethodTransfer]: true,
  [_transaction.TransactionType.tokenMethodTransferFrom]: true
};
exports.TOKEN_CATEGORY_HASH = TOKEN_CATEGORY_HASH;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\transactions.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cconstants%5Czendesk-url.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const ZENDESK_URLS = {
  ADD_CUSTOM_TOKENS: 'https://metamask.zendesk.com/hc/en-us/articles/360015489031',
  ADD_MISSING_ACCOUNTS: 'https://metamask.zendesk.com/hc/en-us/articles/360015489271',
  BASIC_SAFETY: 'https://metamask.zendesk.com/hc/en-us/articles/360015489591-Basic-Safety-Tips',
  CUSTOMIZE_NONCE: 'https://metamask.zendesk.com/hc/en-us/articles/7417499333531-How-to-customize-a-transaction-nonce',
  HARDWARE_CONNECTION: 'https://metamask.zendesk.com/hc/en-us/articles/360020394612-How-to-connect-a-Trezor-or-Ledger-Hardware-Wallet',
  IMPORT_ACCOUNTS: 'https://metamask.zendesk.com/hc/en-us/articles/360015489331',
  IMPORTED_ACCOUNTS: 'https://metamask.zendesk.com/hc/en-us/articles/360015289932',
  INFURA_BLOCKAGE: 'https://metamask.zendesk.com/hc/en-us/articles/360059386712',
  LEDGER_FIREFOX_U2F_GUIDE: 'https://support.ledger.com/hc/en-us/articles/10371387758493-MetaMask-Firefox-Ledger-Integration-Issue?support=true',
  LEGACY_WEB3: 'https://metamask.zendesk.com/hc/en-us/articles/360053147012',
  NFT_TOKENS: 'https://metamask.zendesk.com/hc/en-us/articles/360058238591-NFT-tokens-in-MetaMask-wallet',
  PASSWORD_ARTICLE: 'https://metamask.zendesk.com/hc/en-us/articles/4404722782107',
  SECRET_RECOVERY_PHRASE: 'https://metamask.zendesk.com/hc/en-us/articles/360060826432-What-is-a-Secret-Recovery-Phrase-and-how-to-keep-your-crypto-wallet-secure',
  SECRET_RECOVERY_PHRASE_USER_GUIDE: 'https://metamask.zendesk.com/hc/en-us/articles/4404722782107-User-guide-Secret-Recovery-Phrase-password-and-private-keys',
  NON_CUSTODIAL_WALLET: 'https://metamask.zendesk.com/hc/en-us/articles/360059952212-MetaMask-is-a-non-custodial-wallet',
  SPEEDUP_CANCEL: 'https://metamask.zendesk.com/hc/en-us/articles/360015489251-How-to-speed-up-or-cancel-a-pending-transaction',
  TOKEN_SAFETY_PRACTICES: 'https://metamask.zendesk.com/hc/en-us/articles/4403988839451',
  UNKNOWN_NETWORK: 'https://metamask.zendesk.com/hc/en-us/articles/4417500466971',
  USER_GUIDE_CUSTOM_NETWORKS: 'https://metamask.zendesk.com/hc/en-us/articles/4404424659995',
  USER_GUIDE_DAPPS: 'https://metamask.zendesk.com/hc/en-us/articles/4405506066331-User-guide-Dapps',
  USER_GUIDE_GAS: 'https://metamask.zendesk.com/hc/en-us/articles/4404600179227-User-Guide-Gas',
  VERIFY_CUSTOM_NETWORK: 'https://metamask.zendesk.com/hc/en-us/articles/360057142392'
};
var _default = ZENDESK_URLS;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\constants\\zendesk-url.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.component.js", {"../../constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cauthenticated%5Cauthenticated.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Authenticated;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _routes = require("../../constants/routes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function Authenticated(props) {
  const {
    isUnlocked,
    completedOnboarding
  } = props;
  switch (true) {
    case isUnlocked && completedOnboarding:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props);
    case !completedOnboarding:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.ONBOARDING_ROUTE
        }
      });
    default:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.UNLOCK_ROUTE
        }
      });
  }
}
Authenticated.propTypes = {
  isUnlocked: _propTypes.default.bool,
  completedOnboarding: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\authenticated\\authenticated.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.container.js", {"./authenticated.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cauthenticated%5Cauthenticated.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _authenticated = _interopRequireDefault(require("./authenticated.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const {
    metamask: {
      isUnlocked,
      completedOnboarding
    }
  } = state;
  return {
    isUnlocked,
    completedOnboarding
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps)(_authenticated.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\authenticated\\authenticated.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\index.js", {"./authenticated.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cauthenticated%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _authenticated.default;
  }
});
var _authenticated = _interopRequireDefault(require("./authenticated.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\authenticated\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\feature-toggled-route.js", {"prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cfeature-toggled-route.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FeatureToggledRoute;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function FeatureToggledRoute({
  flag,
  redirectRoute,
  ...props
}) {
  if (flag) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props);
  }
  return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
    to: {
      pathname: redirectRoute
    }
  });
}
FeatureToggledRoute.propTypes = {
  flag: _propTypes.default.bool.isRequired,
  redirectRoute: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\feature-toggled-route.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\index.js", {"./initialized.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\initialized.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cinitialized%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _initialized.default;
  }
});
var _initialized = _interopRequireDefault(require("./initialized.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\initialized\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\initialized.component.js", {"../../constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cinitialized%5Cinitialized.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Initialized;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _routes = require("../../constants/routes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function Initialized(props) {
  return props.completedOnboarding ? /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
    to: {
      pathname: _routes.ONBOARDING_ROUTE
    }
  });
}
Initialized.propTypes = {
  completedOnboarding: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\initialized\\initialized.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\initialized.container.js", {"./initialized.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\initialized\\initialized.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cinitialized%5Cinitialized.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _initialized = _interopRequireDefault(require("./initialized.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const {
    metamask: {
      completedOnboarding
    }
  } = state;
  return {
    completedOnboarding
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps)(_initialized.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\initialized\\initialized.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js", {"./with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\with-modal-props.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cwith-modal-props%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _withModalProps.default;
  }
});
var _withModalProps = _interopRequireDefault(require("./with-modal-props"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\with-modal-props\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\with-modal-props.js", {"../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Chigher-order-components%5Cwith-modal-props%5Cwith-modal-props.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withModalProps;
var _reactRedux = require("react-redux");
var _actions = require("../../../store/actions");
const mapStateToProps = state => {
  const {
    appState
  } = state;
  const {
    props: modalProps
  } = appState.modal.modalState;
  return {
    ...modalProps
  };
};
const mapDispatchToProps = dispatch => {
  return {
    hideModal: () => dispatch((0, _actions.hideModal)())
  };
};
function withModalProps(Component) {
  return (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\higher-order-components\\with-modal-props\\with-modal-props.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\accounts.js", {"../../components/component-library/text/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\deprecated\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Caccounts.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAccountNameErrorMessage = getAccountNameErrorMessage;
var _deprecated = require("../../components/component-library/text/deprecated");
function getAccountNameErrorMessage(accounts, context, newAccountName, defaultAccountName) {
  const isDuplicateAccountName = accounts.some(item => item.name === newAccountName);
  const isEmptyAccountName = newAccountName === '';
  const localizedWordForAccount = context.t('newAccountNumberName').replace(' $1', '');

  // Match strings starting with ${localizedWordForAccount} and then any numeral, case insensitive
  // Trim spaces before and after
  const reservedRegEx = new RegExp(`^\\s*${localizedWordForAccount} \\d+\\s*$`, 'iu');
  const isReservedAccountName = reservedRegEx.test(newAccountName);
  const isValidAccountName = newAccountName === defaultAccountName ||
  // What is written in the text field is the same as the placeholder
  !isDuplicateAccountName && !isReservedAccountName && !isEmptyAccountName;
  let errorMessage;
  if (isValidAccountName) {
    errorMessage = _deprecated.INVISIBLE_CHARACTER; // Using an invisible character, so the spacing stays constant
  } else if (isDuplicateAccountName) {
    errorMessage = context.t('accountNameDuplicate');
  } else if (isReservedAccountName) {
    errorMessage = context.t('accountNameReserved');
  } else if (isEmptyAccountName) {
    errorMessage = context.t('required');
  }
  return {
    isValidAccountName,
    errorMessage
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\accounts.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\common.util.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Ccommon.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.camelCaseToCapitalize = camelCaseToCapitalize;
function camelCaseToCapitalize(str = '') {
  return str.replace(/([A-Z])/gu, ' $1').replace(/^./u, s => s.toUpperCase());
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\common.util.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts", {"../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","currency-formatter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\currency-formatter\\index.js","currency-formatter/currencies":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\currency-formatter\\currencies.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cconfirm-tx.util.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addEth = addEth;
exports.addFiat = addFiat;
exports.areDappSuggestedAndTxParamGasFeesTheSame = areDappSuggestedAndTxParamGasFeesTheSame;
exports.convertTokenToFiat = convertTokenToFiat;
exports.formatCurrency = formatCurrency;
exports.getHexGasTotal = getHexGasTotal;
exports.getTransactionFee = getTransactionFee;
exports.roundExponential = roundExponential;
var _currencyFormatter = _interopRequireDefault(require("currency-formatter"));
var _currencies = _interopRequireDefault(require("currency-formatter/currencies"));
var _bignumber = require("bignumber.js");
var _Numeric = require("../../../shared/modules/Numeric");
var _common = require("../../../shared/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function getHexGasTotal({
  gasLimit = '0x0',
  gasPrice = '0x0'
}) {
  return new _Numeric.Numeric(gasLimit, 16).times(new _Numeric.Numeric(gasPrice, 16)).toPrefixedHexString();
}
function addEth(firstValue, ...otherValues) {
  return otherValues.reduce((numericAcc, ethAmount) => {
    return numericAcc.add(new _Numeric.Numeric(ethAmount, 10)).round(6);
  }, new _Numeric.Numeric(firstValue, 10)).toString();
}
function addFiat(firstValue, ...otherValues) {
  return otherValues.reduce((numericAcc, fiatAmount) => {
    return numericAcc.add(new _Numeric.Numeric(fiatAmount, 10)).round(2);
  }, new _Numeric.Numeric(firstValue, 10)).toString();
}
function getTransactionFee({
  value,
  fromCurrency = _common.EtherDenomination.ETH,
  toCurrency,
  conversionRate,
  numberOfDecimals
}) {
  let fee = new _Numeric.Numeric(value, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.ETH).toBase(10);
  if (fromCurrency !== toCurrency && conversionRate) {
    fee = fee.applyConversionRate(conversionRate);
  }
  return fee.round(numberOfDecimals).toString();
}
function formatCurrency(value, currencyCode) {
  const upperCaseCurrencyCode = currencyCode.toUpperCase();
  return _currencies.default.find(currency => currency.code === upperCaseCurrencyCode) ? _currencyFormatter.default.format(Number(value), {
    code: upperCaseCurrencyCode
  }) : value;
}
function convertTokenToFiat({
  value,
  fromCurrency = _common.EtherDenomination.ETH,
  toCurrency,
  conversionRate,
  contractExchangeRate
}) {
  const totalExchangeRate = conversionRate * contractExchangeRate;
  let tokenInFiat = new _Numeric.Numeric(value, 10);
  if (fromCurrency !== toCurrency && totalExchangeRate) {
    tokenInFiat = tokenInFiat.applyConversionRate(totalExchangeRate);
  }
  return tokenInFiat.round(2).toString();
}

/**
 * Rounds the given decimal string to 4 significant digits.
 *
 * @param decimalString - The base-ten number to round.
 * @returns The rounded number, or the original number if no
 * rounding was necessary.
 */
function roundExponential(decimalString) {
  const PRECISION = 4;
  const bigNumberValue = new _bignumber.BigNumber(decimalString);

  // In JS, numbers with exponentials greater than 20 get displayed as an exponential.
  return bigNumberValue.e > 20 ? bigNumberValue.toPrecision(PRECISION) : decimalString;
}
function areDappSuggestedAndTxParamGasFeesTheSame(txData) {
  const {
    txParams,
    dappSuggestedGasFees
  } = txData ?? {};
  const {
    gasPrice: txParamsGasPrice,
    maxFeePerGas: txParamsMaxFeePerGas,
    maxPriorityFeePerGas: txParamsMaxPriorityFeePerGas
  } = txParams || {};
  const {
    gasPrice: dappGasPrice,
    maxFeePerGas: dappMaxFeePerGas,
    maxPriorityFeePerGas: dappMaxPriorityFeePerGas
  } = dappSuggestedGasFees || {};
  const txParamsDoesNotHaveFeeProperties = !txParamsGasPrice && !txParamsMaxFeePerGas && !txParamsMaxPriorityFeePerGas;
  const dappDidNotSuggestFeeProperties = !dappGasPrice && !dappMaxFeePerGas && !dappMaxPriorityFeePerGas;
  if (txParamsDoesNotHaveFeeProperties || dappDidNotSuggestFeeProperties) {
    return false;
  }
  const txParamsGasPriceMatchesDappSuggestedGasPrice = txParamsGasPrice && txParamsGasPrice === dappGasPrice;
  const txParamsEIP1559FeesMatchDappSuggestedGasPrice = [txParamsMaxFeePerGas, txParamsMaxPriorityFeePerGas].every(fee => fee === dappGasPrice);
  const txParamsEIP1559FeesMatchDappSuggestedEIP1559Fees = txParamsMaxFeePerGas && txParamsMaxFeePerGas === dappMaxFeePerGas && txParamsMaxPriorityFeePerGas === dappMaxPriorityFeePerGas;
  return Boolean(txParamsGasPriceMatchesDappSuggestedGasPrice || txParamsEIP1559FeesMatchDappSuggestedGasPrice || txParamsEIP1559FeesMatchDappSuggestedEIP1559Fees);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\confirm-tx.util.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\export-utils.js", {"./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cexport-utils.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exportAsFile = exportAsFile;
var _util = require("./util");
function exportAsFile(filename, data, type = 'text/csv') {
  const b64 = Buffer.from(data, 'utf8').toString('base64');
  // eslint-disable-next-line no-param-reassign
  filename = filename || (0, _util.getRandomFileName)();
  const elem = window.document.createElement('a');
  elem.href = `data:${type};Base64,${b64}`;
  elem.download = filename;
  document.body.appendChild(elem);
  elem.click();
  document.body.removeChild(elem);
}

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\export-utils.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\formatters.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cformatters.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatETHFee = formatETHFee;
// TODO: Rename to reflect that this function is used for more cases than ETH, and update all uses.
function formatETHFee(ethFee, currencySymbol = 'ETH') {
  return `${ethFee} ${currencySymbol}`;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\formatters.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\gas.js", {"../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cgas.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addTenPercentAndRound = addTenPercentAndRound;
exports.editGasModeIsSpeedUpOrCancel = editGasModeIsSpeedUpOrCancel;
exports.formatGasFeeOrFeeRange = formatGasFeeOrFeeRange;
exports.gasEstimateGreaterThanGasUsedPlusTenPercent = void 0;
exports.isMetamaskSuggestedGasEstimate = isMetamaskSuggestedGasEstimate;
var _lodash = require("lodash");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _gas = require("../../../shared/constants/gas");
var _conversion = require("../../../shared/modules/conversion.utils");
var _Numeric = require("../../../shared/modules/Numeric");
var _util = require("./util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const TEN_PERCENT_NUMERIC = new _Numeric.Numeric(1.1, 10);
const gasEstimateGreaterThanGasUsedPlusTenPercent = (gasUsed, gasFeeEstimates, estimate) => {
  var _gasFeeEstimates$esti;
  let {
    maxFeePerGas: maxFeePerGasInTransaction
  } = gasUsed;
  maxFeePerGasInTransaction = new _bignumber.default((0, _conversion.hexWEIToDecGWEI)(addTenPercentAndRound(maxFeePerGasInTransaction)));
  const maxFeePerGasFromEstimate = (_gasFeeEstimates$esti = gasFeeEstimates[estimate]) === null || _gasFeeEstimates$esti === void 0 ? void 0 : _gasFeeEstimates$esti.suggestedMaxFeePerGas;
  return (0, _util.bnGreaterThan)(maxFeePerGasFromEstimate, maxFeePerGasInTransaction);
};

/**
 * Simple helper to save on duplication to multiply the supplied wei hex string
 * by 1.10 to get bare minimum new gas fee.
 *
 * @param {string | undefined} hexStringValue - hex value in wei to be incremented
 * @returns {string | undefined} hex value in WEI 10% higher than the param.
 */
exports.gasEstimateGreaterThanGasUsedPlusTenPercent = gasEstimateGreaterThanGasUsedPlusTenPercent;
function addTenPercentAndRound(hexStringValue) {
  if (hexStringValue === undefined) {
    return undefined;
  }
  return new _Numeric.Numeric(hexStringValue, 16).times(TEN_PERCENT_NUMERIC).round(0).toPrefixedHexString();
}
function isMetamaskSuggestedGasEstimate(estimate) {
  return [_gas.GasRecommendations.high, _gas.GasRecommendations.medium, _gas.GasRecommendations.low].includes(estimate);
}

/**
 * Formats a singular gas fee or a range of gas fees by rounding them to the
 * given precisions and then arranging them as a string.
 *
 * @param {string | [string, string] | null | undefined} feeOrFeeRange - The fee
 * in GWEI or range of fees in GWEI.
 * @param {object} options - The options.
 * @param {number | [number, number]} options.precision - The precision(s) to
 * use when formatting the fee(s).
 * @returns A string which represents the formatted version of the fee or fee
 * range.
 */
function formatGasFeeOrFeeRange(feeOrFeeRange, {
  precision: precisionOrPrecisions = 2
} = {}) {
  if ((0, _util.isNullish)(feeOrFeeRange) || Array.isArray(feeOrFeeRange) && feeOrFeeRange.length === 0) {
    return null;
  }
  const range = Array.isArray(feeOrFeeRange) ? feeOrFeeRange.slice(0, 2) : [feeOrFeeRange];
  const precisions = Array.isArray(precisionOrPrecisions) ? precisionOrPrecisions.slice(0, 2) : (0, _lodash.times)(range.length, (0, _lodash.constant)(precisionOrPrecisions));
  const formattedRange = (0, _lodash.uniq)((0, _lodash.zip)(range, precisions).map(([fee, precision]) => {
    return precision === undefined ? fee : (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(fee, precision);
  })).join(' - ');
  return `${formattedRange} GWEI`;
}

/**
 * Helper method for determining whether an edit gas mode is either a speed up or cancel transaction
 *
 * @param {string | undefined} editGasMode - One of 'speed-up', 'cancel', 'modify-in-place', or 'swaps'
 * @returns boolean
 */
function editGasModeIsSpeedUpOrCancel(editGasMode) {
  return editGasMode === _gas.EditGasModes.cancel || editGasMode === _gas.EditGasModes.speedUp;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\gas.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\hardware.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Chardware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isHardwareKeyring = isHardwareKeyring;
function isHardwareKeyring(keyringType = '') {
  return keyringType.includes('Hardware');
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\hardware.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\i18n-helper.tsx", {"../../../shared/modules/fetch-with-timeout":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\fetch-with-timeout.ts","@sentry/browser":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Ci18n-helper.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchLocale = fetchLocale;
exports.getMessage = void 0;
exports.loadRelativeTimeFormatLocaleData = loadRelativeTimeFormatLocaleData;
var _react = _interopRequireDefault(require("react"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var Sentry = _interopRequireWildcard(require("@sentry/browser"));
var _fetchWithTimeout = _interopRequireDefault(require("../../../shared/modules/fetch-with-timeout"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// cross-browser connection to extension i18n API

const fetchWithTimeout = (0, _fetchWithTimeout.default)();

// From app/_locales folders there is a messages.json file such as app/_locales/en, comes with key and translated results
// and we use as t('reject') to get the translated message in the codebase
// and in i18n lib, the translated message is an object (I18NMessage) with message & description -
// message is the string that will replace the translationKey, and that message may contain replacement variables such as $1, $2, etc.
// Description is key describing the usage of the message.
// The overall translation file is made of same entries
// translationKey (string) and the I18NMessage as the value.
// A parameterized type (or generic type) of maps that use the same structure (translationKey) key
const warned = {};
const missingMessageErrors = {};
const missingSubstitutionErrors = {};
function getHasSubstitutions(substitutions) {
  return ((substitutions === null || substitutions === void 0 ? void 0 : substitutions.length) ?? 0) > 0;
}

/**
 * Returns a localized message for the given key
 *
 * @param localeCode - The code for the current locale
 * @param localeMessages - The map of messages for the current locale
 * @param key - The message key
 * @param substitutions - A list of message substitution replacements can replace $n in given message
 * @returns The localized message
 */
const getMessage = (localeCode, localeMessages, key, substitutions) => {
  if (!localeMessages) {
    return null;
  }
  if (!localeMessages[key]) {
    if (localeCode === 'en') {
      if (!missingMessageErrors[key]) {
        missingMessageErrors[key] = new Error(`Unable to find value of key "${key}" for locale "${localeCode}"`);
        Sentry.captureException(missingMessageErrors[key]);
        _loglevel.default.error(missingMessageErrors[key]);
        if (false) {
          throw missingMessageErrors[key];
        }
      }
    } else if (!warned[localeCode] || !warned[localeCode][key]) {
      if (!warned[localeCode]) {
        warned[localeCode] = {};
      }
      warned[localeCode][key] = true;
      _loglevel.default.warn(`Translator - Unable to find value of key "${key}" for locale "${localeCode}"`);
    }
    return null;
  }
  const hasSubstitutions = getHasSubstitutions(substitutions);
  const hasReactSubstitutions = hasSubstitutions && (substitutions === null || substitutions === void 0 ? void 0 : substitutions.some(element => element !== null && (typeof element === 'function' || typeof element === 'object')));
  const entry = localeMessages[key];
  const phrase = entry.message;
  // perform substitutions
  if (hasSubstitutions) {
    const parts = phrase.split(/(\$\d)/gu);
    const substitutedParts = parts.map(part => {
      var _missingSubstitutionE;
      const subMatch = part.match(/\$(\d)/u);
      if (!subMatch) {
        return part;
      }
      const substituteIndex = Number(subMatch[1]) - 1;
      if ((substitutions[substituteIndex] === null || substitutions[substituteIndex] === undefined) && !((_missingSubstitutionE = missingSubstitutionErrors[localeCode]) !== null && _missingSubstitutionE !== void 0 && _missingSubstitutionE[key])) {
        if (!missingSubstitutionErrors[localeCode]) {
          missingSubstitutionErrors[localeCode] = {};
        }
        missingSubstitutionErrors[localeCode][key] = true;
        const error = new Error(`Insufficient number of substitutions for key "${key}" with locale "${localeCode}"`);
        _loglevel.default.error(error);
        Sentry.captureException(error);
      }
      return substitutions === null || substitutions === void 0 ? void 0 : substitutions[substituteIndex];
    });
    return hasReactSubstitutions ? /*#__PURE__*/_react.default.createElement("span", null, " ", substitutedParts, " ") : substitutedParts.join('');
  }
  return phrase;
};
exports.getMessage = getMessage;
async function fetchLocale(localeCode) {
  try {
    const response = await fetchWithTimeout(`./_locales/${localeCode}/messages.json`);
    return await response.json();
  } catch (error) {
    _loglevel.default.error(`failed to fetch ${localeCode} locale because of ${error}`);
    return {};
  }
}
const relativeTimeFormatLocaleData = new Set();
async function loadRelativeTimeFormatLocaleData(localeCode) {
  const languageTag = localeCode.split('_')[0];
  if (Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat.__addLocaleData === 'function' && !relativeTimeFormatLocaleData.has(languageTag)) {
    const localeData = await fetchRelativeTimeFormatData(languageTag);
    Intl.RelativeTimeFormat.__addLocaleData(localeData);
  }
}
async function fetchRelativeTimeFormatData(languageTag) {
  const response = await fetchWithTimeout(`./intl/${languageTag}/relative-time-format-data.json`);
  return await response.json();
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\i18n-helper.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\icon-factory.js", {"../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cicon-factory.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = iconFactoryGenerator;
var _hexstringUtils = require("../../../shared/modules/hexstring-utils");
let iconFactory;
function iconFactoryGenerator(jazzicon) {
  if (!iconFactory) {
    iconFactory = new IconFactory(jazzicon);
  }
  return iconFactory;
}
function IconFactory(jazzicon) {
  this.jazzicon = jazzicon;
  this.cache = {};
}
IconFactory.prototype.iconForAddress = function (address, diameter, tokenMetadata) {
  if (iconExistsFor(address, tokenMetadata)) {
    return imageElFor(tokenMetadata);
  }
  return this.generateIdenticonSvg(address, diameter);
};

// returns svg dom element
IconFactory.prototype.generateIdenticonSvg = function (address, diameter) {
  const cacheId = `${address}:${diameter}`;
  // check cache, lazily generate and populate cache
  const identicon = this.cache[cacheId] || (this.cache[cacheId] = this.generateNewIdenticon(address, diameter));
  // create a clean copy so you can modify it
  const cleanCopy = identicon.cloneNode(true);
  return cleanCopy;
};

// creates a new identicon
IconFactory.prototype.generateNewIdenticon = function (address, diameter) {
  const numericRepresentation = jsNumberForAddress(address);
  const identicon = this.jazzicon(diameter, numericRepresentation);
  return identicon;
};

// util

function iconExistsFor(address, tokenMetadata) {
  return (0, _hexstringUtils.isValidHexAddress)(address, {
    allowNonPrefixed: false
  }) && tokenMetadata && tokenMetadata.iconUrl;
}
function imageElFor(tokenMetadata = {}) {
  const img = document.createElement('img');
  img.src = tokenMetadata === null || tokenMetadata === void 0 ? void 0 : tokenMetadata.iconUrl;
  img.style.width = '100%';
  return img;
}
function jsNumberForAddress(address) {
  const addr = address.slice(2, 10);
  const seed = parseInt(addr, 16);
  return seed;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\icon-factory.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\ipfs.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cipfs.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addUrlProtocolPrefix = addUrlProtocolPrefix;
function addUrlProtocolPrefix(urlString) {
  return urlString.match(/^https?:\/\//u) ? urlString : `https://${urlString}`;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\ipfs.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\is-mobile-view.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cis-mobile-view.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Checks if viewport at invoke time fits mobile dimensions
// isMobileView :: () => Bool
const isMobileView = () => window.matchMedia('screen and (max-width: 575px)').matches;
var _default = isMobileView;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\is-mobile-view.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\metrics.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cmetrics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatAccountType = formatAccountType;
exports.getMethodName = getMethodName;
function getMethodName(camelCase) {
  if (!camelCase || typeof camelCase !== 'string') {
    return '';
  }
  return camelCase.replace(/([a-z])([A-Z])/gu, '$1 $2').replace(/([A-Z])([a-z])/gu, ' $1$2').replace(/ +/gu, ' ');
}
function formatAccountType(accountType) {
  if (accountType === 'default') {
    return 'metamask';
  }
  return accountType;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\metrics.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\nfts.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cnfts.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNftImageAlt = void 0;
const getNftImageAlt = ({
  name,
  tokenId,
  description
}) => {
  return description ?? `${name} ${tokenId}`;
};
exports.getNftImageAlt = getNftImageAlt;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\nfts.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\permission.js", {"../../../shared/constants/permissions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\permissions.ts","../../components/component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","deep-freeze-strict":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\deep-freeze-strict\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cpermission.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPermissionDescription = exports.PERMISSION_DESCRIPTIONS = void 0;
exports.getRightIcon = getRightIcon;
exports.getWeightedPermissions = getWeightedPermissions;
var _deepFreezeStrict = _interopRequireDefault(require("deep-freeze-strict"));
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _permissions = require("../../../shared/constants/permissions");
var _tooltip = _interopRequireDefault(require("../../components/ui/tooltip"));
var _componentLibrary = require("../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const UNKNOWN_PERMISSION = Symbol('unknown');
function getLeftIcon(iconName) {
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarIcon, {
    iconName: iconName,
    size: _componentLibrary.IconSize.Sm,
    iconProps: {
      size: _componentLibrary.IconSize.Xs
    }
  });
}
const PERMISSION_DESCRIPTIONS = (0, _deepFreezeStrict.default)({
  [_permissions.RestrictedMethods.eth_accounts]: ({
    t
  }) => ({
    label: t('permission_ethereumAccounts'),
    leftIcon: getLeftIcon(_componentLibrary.IconName.Eye),
    rightIcon: null,
    weight: 2
  }),
  [UNKNOWN_PERMISSION]: ({
    t,
    permissionName
  }) => ({
    label: t('permission_unknown', [permissionName ?? 'undefined']),
    leftIcon: getLeftIcon(_componentLibrary.IconName.Question),
    rightIcon: null,
    weight: 4
  })
});

/**
 * @typedef {object} PermissionLabelObject
 * @property {string} label - The text label.
 * @property {string} [description] - An optional description, shown when the
 * `rightIcon` is hovered.
 * @property {string} leftIcon - The left icon.
 * @property {string} rightIcon - The right icon.
 * @property {number} weight - The weight of the permission.
 * @property {string} permissionName - The name of the permission.
 * @property {string} permissionValue - The raw value of the permission.
 */

/**
 * @typedef {object} PermissionDescriptionParamsObject
 * @property {Function} t - The translation function.
 * @property {string} permissionName - The name of the permission.
 * @property {object} permissionValue - The permission object.
 * @property {object} targetSubjectMetadata - Subject metadata.
 */

/**
 * @param {PermissionDescriptionParamsObject} params - The permission description params object.
 * @param {Function} params.t - The translation function.
 * @param {string} params.permissionName - The name of the permission to request
 * @param {object} params.permissionValue - The value of the permission to request
 * @returns {PermissionLabelObject[]}
 */
exports.PERMISSION_DESCRIPTIONS = PERMISSION_DESCRIPTIONS;
const getPermissionDescription = ({
  t,
  permissionName,
  permissionValue,
  targetSubjectMetadata
}) => {
  let value = PERMISSION_DESCRIPTIONS[UNKNOWN_PERMISSION];
  if (Object.hasOwnProperty.call(PERMISSION_DESCRIPTIONS, permissionName)) {
    value = PERMISSION_DESCRIPTIONS[permissionName];
  }
  const result = value({
    t,
    permissionName,
    permissionValue,
    targetSubjectMetadata
  });
  if (!Array.isArray(result)) {
    return [{
      ...result,
      permissionName,
      permissionValue
    }];
  }
  return result.map(item => ({
    ...item,
    permissionName,
    permissionValue
  }));
};

/**
 * Get the weighted permissions from a permissions object. The weight is used to
 * sort the permissions in the UI.
 *
 * @param {Function} t - The translation function
 * @param {object} permissions - The permissions object.
 * @param {object} targetSubjectMetadata - The subject metadata.
 * @returns {PermissionLabelObject[]}
 */
exports.getPermissionDescription = getPermissionDescription;
function getWeightedPermissions(t, permissions, targetSubjectMetadata) {
  return Object.entries(permissions).reduce((target, [permissionName, permissionValue]) => target.concat(getPermissionDescription({
    t,
    permissionName,
    permissionValue,
    targetSubjectMetadata
  })), []).sort((left, right) => left.weight - right.weight);
}

/**
 * Get the right icon for a permission. If a description is provided, the icon
 * will be wrapped in a tooltip. Otherwise, the icon will be rendered as-is. If
 * there's no right icon, this function will return null.
 *
 * If the weight is 1, the icon will be rendered with a warning color.
 *
 * @param {PermissionLabelObject} permission - The permission object.
 * @param {JSX.Element | string} permission.rightIcon - The right icon.
 * @param {string} permission.description - The description.
 * @param {number} permission.weight - The weight.
 * @returns {JSX.Element | null} The right icon, or null if there's no
 * right icon.
 */
function getRightIcon({
  rightIcon,
  description,
  weight
}) {
  if (rightIcon && description) {
    return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      wrapperClassName: (0, _classnames.default)('permission__tooltip-icon', weight === 1 && 'permission__tooltip-icon__warning'),
      html: /*#__PURE__*/_react.default.createElement("div", null, description),
      position: "bottom"
    }, typeof rightIcon === 'string' ? /*#__PURE__*/_react.default.createElement("i", {
      className: rightIcon
    }) : rightIcon);
  }
  if (rightIcon) {
    if (typeof rightIcon === 'string') {
      return /*#__PURE__*/_react.default.createElement("i", {
        className: (0, _classnames.default)(rightIcon, 'permission__tooltip-icon')
      });
    }
    return rightIcon;
  }
  return null;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\permission.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\portfolio.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cportfolio.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPortfolioUrl = getPortfolioUrl;
function getPortfolioUrl(endpoint = '', metamaskEntry = '', metaMetricsId = '') {
  const portfolioUrl = "https://portfolio.metamask.io" || '';
  return `${portfolioUrl}/${endpoint}?metamaskEntry=${metamaskEntry}&metametricsId=${metaMetricsId}`;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\portfolio.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\settings-search.js", {"../constants/settings":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\settings.js","_process":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\process\\browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Csettings-search.js
      return function (require, module, exports) {
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNumberOfSettingsInSection = getNumberOfSettingsInSection;
exports.getSettingsRoutes = getSettingsRoutes;
exports.handleSettingsRefs = handleSettingsRefs;
exports.highlightSearchedText = highlightSearchedText;
var _settings = require("../constants/settings");
/* eslint-disable require-unicode-regexp */

let settingsRoutes;
function getSettingsRoutes() {
  if (settingsRoutes) {
    return settingsRoutes;
  }
  settingsRoutes = _settings.SETTINGS_CONSTANTS.filter(routeObject => routeObject.featureFlag ? process.env[routeObject.featureFlag] : true);
  return settingsRoutes;
}
function getFilteredSettingsRoutes(t, tabMessage) {
  return getSettingsRoutes().filter(routeObject => {
    return routeObject.tabMessage(t) === tabMessage;
  });
}
function getNumberOfSettingsInSection(t, tabMessage) {
  return getFilteredSettingsRoutes(t, tabMessage).length;
}
function handleSettingsRefs(t, tabMessage, settingsRefs) {
  const settingsSearchJsonFiltered = getFilteredSettingsRoutes(t, tabMessage);
  const settingsRefsIndex = settingsSearchJsonFiltered.findIndex(routeObject => routeObject.route.substring(1) === window.location.hash.substring(1));
  if (settingsRefsIndex === -1) {
    return;
  }
  const settingsRef = settingsSearchJsonFiltered.length === 1 ? settingsRefs : settingsRefs[settingsRefsIndex];
  if (settingsRef !== null && settingsRef !== void 0 && settingsRef.current) {
    settingsRef.current.scrollIntoView({
      behavior: 'smooth'
    });
    settingsRef.current.focus();
    const historySettingsUrl = window.location.hash.split('#')[1];
    window.location.hash = historySettingsUrl;
  }
}
function colorText(menuElement, regex) {
  if (menuElement !== null) {
    let elemText = menuElement.innerHTML;
    elemText = elemText.replace('&amp;', '&');
    elemText = elemText.replace(/(<span style="background:#ffd33d">|<\/span>)/gim, '');
    menuElement.innerHTML = elemText.replace(regex, '<span style="background:#ffd33d">$&</span>');
  }
}
function highlightSearchedText() {
  const searchElem = document.getElementById('search-settings');
  const searchRegex = new RegExp(searchElem.value, 'gi');
  const results = document.querySelectorAll('.settings-page__header__search__list__item');
  [...results].forEach(element => {
    const menuTabElement = element.querySelector('.settings-page__header__search__list__item__tab');
    const menuSectionElement = element.querySelector('.settings-page__header__search__list__item__section');
    colorText(menuTabElement, searchRegex);
    colorText(menuSectionElement, searchRegex);
  });
}


}).call(this)}).call(this,require('_process'))

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\settings-search.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js", {"../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/lib/metamask-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Ctoken-util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAssetDetails = getAssetDetails;
exports.getSymbolAndDecimals = getSymbolAndDecimals;
exports.getTokenAddressParam = getTokenAddressParam;
exports.getTokenApprovedParam = getTokenApprovedParam;
exports.getTokenFiatAmount = getTokenFiatAmount;
exports.getTokenIdParam = getTokenIdParam;
exports.getTokenMetadata = getTokenMetadata;
exports.tokenInfoGetter = tokenInfoGetter;
var _loglevel = _interopRequireDefault(require("loglevel"));
var _actions = require("../../store/actions");
var _stringUtils = require("../../../shared/modules/string-utils");
var _transaction = require("../../../shared/modules/transaction.utils");
var _transaction2 = require("../../../shared/constants/transaction");
var _metamaskControllerUtils = require("../../../shared/lib/metamask-controller-utils");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _Numeric = require("../../../shared/modules/Numeric");
var util = _interopRequireWildcard(require("./util"));
var _confirmTx = require("./confirm-tx.util");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DEFAULT_SYMBOL = '';
async function getSymbolFromContract(tokenAddress) {
  const token = util.getContractAtAddress(tokenAddress);
  try {
    const result = await token.symbol();
    return result[0];
  } catch (error) {
    _loglevel.default.warn(`symbol() call for token at address ${tokenAddress} resulted in error:`, error);
    return undefined;
  }
}
async function getDecimalsFromContract(tokenAddress) {
  const token = util.getContractAtAddress(tokenAddress);
  try {
    const result = await token.decimals();
    const decimalsBN = result[0];
    return decimalsBN === null || decimalsBN === void 0 ? void 0 : decimalsBN.toString();
  } catch (error) {
    _loglevel.default.warn(`decimals() call for token at address ${tokenAddress} resulted in error:`, error);
    return undefined;
  }
}
function getTokenMetadata(tokenAddress, tokenList) {
  return tokenAddress && tokenList[tokenAddress.toLowerCase()];
}
async function getSymbol(tokenAddress, tokenList) {
  let symbol = await getSymbolFromContract(tokenAddress);
  if (!symbol) {
    const contractMetadataInfo = getTokenMetadata(tokenAddress, tokenList);
    if (contractMetadataInfo) {
      symbol = contractMetadataInfo.symbol;
    }
  }
  return symbol;
}
async function getDecimals(tokenAddress, tokenList) {
  let decimals = await getDecimalsFromContract(tokenAddress);
  if (!decimals || decimals === '0') {
    const contractMetadataInfo = getTokenMetadata(tokenAddress, tokenList);
    if (contractMetadataInfo) {
      var _contractMetadataInfo;
      decimals = (_contractMetadataInfo = contractMetadataInfo.decimals) === null || _contractMetadataInfo === void 0 ? void 0 : _contractMetadataInfo.toString();
    }
  }
  return decimals;
}
async function getSymbolAndDecimals(tokenAddress, tokenList) {
  let symbol, decimals;
  try {
    symbol = await getSymbol(tokenAddress, tokenList);
    decimals = await getDecimals(tokenAddress, tokenList);
  } catch (error) {
    _loglevel.default.warn(`symbol() and decimal() calls for token at address ${tokenAddress} resulted in error:`, error);
  }
  return {
    symbol: symbol || DEFAULT_SYMBOL,
    decimals
  };
}
function tokenInfoGetter() {
  const tokens = {};
  return async (address, tokenList) => {
    if (tokens[address]) {
      return tokens[address];
    }
    tokens[address] = await getSymbolAndDecimals(address, tokenList);
    return tokens[address];
  };
}

/**
 * Attempts to get the address parameter of the given token transaction data
 * (i.e. function call) per the Human Standard Token ABI, in the following
 * order:
 *   - The '_to' parameter, if present
 *   - The first parameter, if present
 *
 * @param {object} tokenData - ethers Interface token data.
 * @returns {string | undefined} A lowercase address string.
 */
function getTokenAddressParam(tokenData = {}) {
  var _tokenData$args, _tokenData$args2, _tokenData$args3;
  const value = (tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args = tokenData.args) === null || _tokenData$args === void 0 ? void 0 : _tokenData$args._to) || (tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args2 = tokenData.args) === null || _tokenData$args2 === void 0 ? void 0 : _tokenData$args2.to) || (tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args3 = tokenData.args) === null || _tokenData$args3 === void 0 ? void 0 : _tokenData$args3[0]);
  return value === null || value === void 0 ? void 0 : value.toString().toLowerCase();
}

/**
 * Gets the '_value' parameter of the given token transaction data
 * (i.e function call) per the Human Standard Token ABI, if present.
 *
 * @param {object} tokenData - ethers Interface token data.
 * @returns {string | undefined} A decimal string value.
 */
/**
 * Gets either the '_tokenId' parameter or the 'id' param of the passed token transaction data.,
 * These are the parsed tokenId values returned by `parseStandardTokenTransactionData` as defined
 * in the ERC721 and ERC1155 ABIs from metamask-eth-abis (https://github.com/MetaMask/metamask-eth-abis/tree/main/src/abis)
 *
 * @param {object} tokenData - ethers Interface token data.
 * @returns {string | undefined} A decimal string value.
 */
function getTokenIdParam(tokenData = {}) {
  var _tokenData$args4, _tokenData$args4$_tok, _tokenData$args5, _tokenData$args5$id;
  return (tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args4 = tokenData.args) === null || _tokenData$args4 === void 0 ? void 0 : (_tokenData$args4$_tok = _tokenData$args4._tokenId) === null || _tokenData$args4$_tok === void 0 ? void 0 : _tokenData$args4$_tok.toString()) ?? (tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args5 = tokenData.args) === null || _tokenData$args5 === void 0 ? void 0 : (_tokenData$args5$id = _tokenData$args5.id) === null || _tokenData$args5$id === void 0 ? void 0 : _tokenData$args5$id.toString());
}

/**
 * Gets the '_approved' parameter of the given token transaction data
 * (i.e function call) per the Human Standard Token ABI, if present.
 *
 * @param {object} tokenData - ethers Interface token data.
 * @returns {boolean | undefined} A boolean indicating whether the function is being called to approve or revoke access.
 */
function getTokenApprovedParam(tokenData = {}) {
  var _tokenData$args6;
  return tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args6 = tokenData.args) === null || _tokenData$args6 === void 0 ? void 0 : _tokenData$args6._approved;
}

/**
 * Get the token balance converted to fiat and optionally formatted for display
 *
 * @param {number} [contractExchangeRate] - The exchange rate between the current token and the native currency
 * @param {number} conversionRate - The exchange rate between the current fiat currency and the native currency
 * @param {string} currentCurrency - The currency code for the user's chosen fiat currency
 * @param {string} [tokenAmount] - The current token balance
 * @param {string} [tokenSymbol] - The token symbol
 * @param {boolean} [formatted] - Whether the return value should be formatted or not
 * @param {boolean} [hideCurrencySymbol] - excludes the currency symbol in the result if true
 * @returns {string|undefined} The token amount in the user's chosen fiat currency, optionally formatted and localize
 */
function getTokenFiatAmount(contractExchangeRate, conversionRate, currentCurrency, tokenAmount, tokenSymbol, formatted = true, hideCurrencySymbol = false) {
  // If the conversionRate is 0 (i.e. unknown) or the contract exchange rate
  // is currently unknown, the fiat amount cannot be calculated so it is not
  // shown to the user
  if (conversionRate <= 0 || !contractExchangeRate || tokenAmount === undefined) {
    return undefined;
  }
  const currentTokenToFiatRate = new _Numeric.Numeric(contractExchangeRate, 10).times(new _Numeric.Numeric(conversionRate, 10)).toString();
  let currentTokenInFiat = new _Numeric.Numeric(tokenAmount, 10);
  if (tokenSymbol !== currentCurrency.toUpperCase() && currentTokenToFiatRate) {
    currentTokenInFiat = currentTokenInFiat.applyConversionRate(currentTokenToFiatRate);
  }
  currentTokenInFiat = currentTokenInFiat.round(2).toString();
  let result;
  if (hideCurrencySymbol) {
    result = (0, _confirmTx.formatCurrency)(currentTokenInFiat, currentCurrency);
  } else if (formatted) {
    result = `${(0, _confirmTx.formatCurrency)(currentTokenInFiat, currentCurrency)} ${currentCurrency.toUpperCase()}`;
  } else {
    result = currentTokenInFiat;
  }
  return result;
}
async function getAssetDetails(tokenAddress, currentUserAddress, transactionData, existingNfts) {
  var _getTokenIdParam, _tokenDetails, _tokenDetails2;
  const tokenData = (0, _transaction.parseStandardTokenTransactionData)(transactionData);
  if (!tokenData) {
    throw new Error('Unable to detect valid token data');
  }

  // Sometimes the tokenId value is parsed as "_value" param. Not seeing this often any more, but still occasionally:
  // i.e. call approve() on BAYC contract - https://etherscan.io/token/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#writeContract, and tokenId shows up as _value,
  // not sure why since it doesn't match the ERC721 ABI spec we use to parse these transactions - https://github.com/MetaMask/metamask-eth-abis/blob/d0474308a288f9252597b7c93a3a8deaad19e1b2/src/abis/abiERC721.ts#L62.
  let tokenId = ((_getTokenIdParam = getTokenIdParam(tokenData)) === null || _getTokenIdParam === void 0 ? void 0 : _getTokenIdParam.toString()) ?? (0, _metamaskControllerUtils.getTokenValueParam)(tokenData);
  const toAddress = getTokenAddressParam(tokenData);
  let tokenDetails;

  // if a tokenId is present check if there is an NFT in state matching the address/tokenId
  // and avoid unnecessary network requests to query token details we already have
  if (existingNfts !== null && existingNfts !== void 0 && existingNfts.length && tokenId) {
    const existingNft = existingNfts.find(({
      address,
      tokenId: _tokenId
    }) => (0, _stringUtils.isEqualCaseInsensitive)(tokenAddress, address) && _tokenId === tokenId);
    if (existingNft) {
      return {
        toAddress,
        ...existingNft
      };
    }
  }
  try {
    tokenDetails = await (0, _actions.getTokenStandardAndDetails)(tokenAddress, currentUserAddress, tokenId);
  } catch (error) {
    _loglevel.default.warn(error);
    // if we can't determine any token standard or details return the data we can extract purely from the parsed transaction data
    return {
      toAddress,
      tokenId
    };
  }
  const tokenValue = (0, _metamaskControllerUtils.getTokenValueParam)(tokenData);
  const tokenDecimals = (_tokenDetails = tokenDetails) === null || _tokenDetails === void 0 ? void 0 : _tokenDetails.decimals;
  const tokenAmount = tokenData && tokenValue && tokenDecimals && (0, _transactionsControllerUtils.calcTokenAmount)(tokenValue, tokenDecimals).toString(10);
  const decimals = tokenDecimals && Number(tokenDecimals === null || tokenDecimals === void 0 ? void 0 : tokenDecimals.toString(10));
  if (((_tokenDetails2 = tokenDetails) === null || _tokenDetails2 === void 0 ? void 0 : _tokenDetails2.standard) === _transaction2.TokenStandard.ERC20) {
    tokenId = undefined;
  }

  // else if not an NFT already in state or standard === ERC20 return tokenDetails and tokenId
  return {
    tokenAmount,
    toAddress,
    decimals,
    tokenId,
    ...tokenDetails
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\token-util.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js", {"../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/lib/fetch-with-cache":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\fetch-with-cache.js","../../../shared/modules/contract-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\contract-utils.ts","eth-method-registry":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-method-registry\\dist\\index.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Ctransactions.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFourBytePrefix = getFourBytePrefix;
exports.getLatestSubmittedTxWithNonce = getLatestSubmittedTxWithNonce;
exports.getMethodDataAsync = getMethodDataAsync;
exports.getStatusKey = getStatusKey;
exports.getTransactionTypeTitle = getTransactionTypeTitle;
exports.isLegacyTransaction = isLegacyTransaction;
exports.isSmartContractAddress = isSmartContractAddress;
exports.isTokenMethodAction = isTokenMethodAction;
var _ethMethodRegistry = require("eth-method-registry");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _util = require("../../../app/scripts/lib/util");
var _transaction = require("../../../shared/constants/transaction");
var _contractUtils = require("../../../shared/modules/contract-utils");
var _fetchWithCache = _interopRequireDefault(require("../../../shared/lib/fetch-with-cache"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @typedef EthersContractCall
 * @type object
 * @property {any[]} args - The args/params to the function call.
 * An array-like object with numerical and string indices.
 * @property {string} name - The name of the function.
 * @property {string} signature - The function signature.
 * @property {string} sighash - The function signature hash.
 * @property {EthersBigNumber} value - The ETH value associated with the call.
 * @property {FunctionFragment} functionFragment - The Ethers function fragment
 * representation of the function.
 */

async function getMethodFrom4Byte(fourBytePrefix) {
  const fourByteResponse = await (0, _fetchWithCache.default)(`https://www.4byte.directory/api/v1/signatures/?hex_signature=${fourBytePrefix}`, {
    referrerPolicy: 'no-referrer-when-downgrade',
    body: null,
    method: 'GET',
    mode: 'cors'
  });
  fourByteResponse.results.sort((a, b) => {
    return new Date(a.created_at).getTime() < new Date(b.created_at).getTime() ? -1 : 1;
  });
  return fourByteResponse.results[0].text_signature;
}
let registry;

/**
 * Attempts to return the method data from the MethodRegistry library, the message registry library and the token abi, in that order of preference
 *
 * @param {string} fourBytePrefix - The prefix from the method code associated with the data
 * @returns {object}
 */
async function getMethodDataAsync(fourBytePrefix) {
  try {
    const fourByteSig = await getMethodFrom4Byte(fourBytePrefix).catch(e => {
      _loglevel.default.error(e);
      return null;
    });
    if (!registry) {
      registry = new _ethMethodRegistry.MethodRegistry({
        provider: global.ethereumProvider
      });
    }
    if (!fourByteSig) {
      return {};
    }
    const parsedResult = registry.parse(fourByteSig);
    return {
      name: parsedResult.name,
      params: parsedResult.args
    };
  } catch (error) {
    _loglevel.default.error(error);
    return {};
  }
}

/**
 * Returns four-byte method signature from data
 *
 * @param {string} data - The hex data (@code txParams.data) of a transaction
 * @returns {string} The four-byte method signature
 */
function getFourBytePrefix(data = '') {
  const prefixedData = (0, _util.addHexPrefix)(data);
  const fourBytePrefix = prefixedData.slice(0, 10);
  return fourBytePrefix;
}

/**
 * Given an transaction category, returns a boolean which indicates whether the transaction is calling an erc20 token method
 *
 * @param {TRANSACTION_TYPES[keyof TRANSACTION_TYPES]} type - The type of transaction being evaluated
 * @returns {boolean} whether the transaction is calling an erc20 token method
 */
function isTokenMethodAction(type) {
  return [_transaction.TransactionType.tokenMethodTransfer, _transaction.TransactionType.tokenMethodApprove, _transaction.TransactionType.tokenMethodSetApprovalForAll, _transaction.TransactionType.tokenMethodTransferFrom, _transaction.TransactionType.tokenMethodSafeTransferFrom].includes(type);
}
function getLatestSubmittedTxWithNonce(transactions = [], nonce = '0x0') {
  if (!transactions.length) {
    return {};
  }
  return transactions.reduce((acc, current) => {
    const {
      submittedTime,
      txParams: {
        nonce: currentNonce
      } = {}
    } = current;
    if (currentNonce === nonce) {
      if (!acc.submittedTime) {
        return current;
      }
      return submittedTime > acc.submittedTime ? current : acc;
    }
    return acc;
  }, {});
}
async function isSmartContractAddress(address) {
  const {
    isContractAddress
  } = await (0, _contractUtils.readAddressAsContract)(global.eth, address);
  return isContractAddress;
}
function isLegacyTransaction(txParams) {
  return (txParams === null || txParams === void 0 ? void 0 : txParams.type) === _transaction.TransactionEnvelopeType.legacy;
}

/**
 * Returns a status key for a transaction. Requires parsing the txMeta.txReceipt on top of
 * txMeta.status because txMeta.status does not reflect on-chain errors.
 *
 * @param {object} transaction - The txMeta object of a transaction.
 * @param {object} transaction.txReceipt - The transaction receipt.
 * @returns {string}
 */
function getStatusKey(transaction) {
  const {
    txReceipt: {
      status: receiptStatus
    } = {},
    type,
    status
  } = transaction;

  // There was an on-chain failure
  if (receiptStatus === '0x0') {
    return _transaction.TransactionStatus.failed;
  }
  if (status === _transaction.TransactionStatus.confirmed && type === _transaction.TransactionType.cancel) {
    return _transaction.TransactionGroupStatus.cancelled;
  }
  return transaction.status;
}

/**
 * Returns a title for the given transaction category.
 *
 * This will throw an error if the transaction category is unrecognized and no default is provided.
 *
 * @param {Function} t - The translation function
 * @param {TRANSACTION_TYPES[keyof TRANSACTION_TYPES]} type - The transaction type constant
 * @param {string} nativeCurrency - The native currency of the currently selected network
 * @returns {string} The transaction category title
 */
function getTransactionTypeTitle(t, type, nativeCurrency = 'ETH') {
  switch (type) {
    case _transaction.TransactionType.tokenMethodTransfer:
      {
        return t('transfer');
      }
    case _transaction.TransactionType.tokenMethodTransferFrom:
      {
        return t('transferFrom');
      }
    case _transaction.TransactionType.tokenMethodSafeTransferFrom:
      {
        return t('safeTransferFrom');
      }
    case _transaction.TransactionType.tokenMethodApprove:
      {
        return t('approve');
      }
    case _transaction.TransactionType.tokenMethodSetApprovalForAll:
      {
        return t('setApprovalForAll');
      }
    case _transaction.TransactionType.simpleSend:
      {
        return t('sendingNativeAsset', [nativeCurrency]);
      }
    case _transaction.TransactionType.contractInteraction:
      {
        return t('contractInteraction');
      }
    case _transaction.TransactionType.deployContract:
      {
        return t('contractDeployment');
      }
    case _transaction.TransactionType.swap:
      {
        return t('swap');
      }
    case _transaction.TransactionType.swapApproval:
      {
        return t('swapApproval');
      }
    default:
      {
        throw new Error(`Unrecognized transaction type: ${type}`);
      }
  }
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\transactions.util.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\tx-helper.ts", {"../../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Ctx-helper.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = txHelper;
var _loglevel = _interopRequireDefault(require("loglevel"));
var _transaction = require("../../../shared/modules/transaction.utils");
var _util = require("./util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function txHelper(unapprovedTxs, unapprovedMsgs, personalMsgs, decryptMsgs, encryptionPublicKeyMsgs, typedMessages, networkId, chainId) {
  _loglevel.default.debug('tx-helper called with params:');
  _loglevel.default.debug({
    unapprovedTxs,
    unapprovedMsgs,
    personalMsgs,
    decryptMsgs,
    encryptionPublicKeyMsgs,
    typedMessages,
    networkId,
    chainId
  });
  const txValues = networkId ? (0, _util.valuesFor)(unapprovedTxs).filter(txMeta => (0, _transaction.transactionMatchesNetwork)(txMeta, chainId, networkId)) : (0, _util.valuesFor)(unapprovedTxs);
  _loglevel.default.debug(`tx helper found ${txValues.length} unapproved txs`);
  const msgValues = (0, _util.valuesFor)(unapprovedMsgs);
  _loglevel.default.debug(`tx helper found ${msgValues.length} unsigned messages`);
  let allValues = txValues.concat(msgValues);
  const personalValues = (0, _util.valuesFor)(personalMsgs);
  _loglevel.default.debug(`tx helper found ${personalValues.length} unsigned personal messages`);
  allValues = allValues.concat(personalValues);
  const decryptValues = (0, _util.valuesFor)(decryptMsgs);
  _loglevel.default.debug(`tx helper found ${decryptValues.length} decrypt requests`);
  allValues = allValues.concat(decryptValues);
  const encryptionPublicKeyValues = (0, _util.valuesFor)(encryptionPublicKeyMsgs);
  _loglevel.default.debug(`tx helper found ${encryptionPublicKeyValues.length} encryptionPublicKey requests`);
  allValues = allValues.concat(encryptionPublicKeyValues);
  const typedValues = (0, _util.valuesFor)(typedMessages);
  _loglevel.default.debug(`tx helper found ${typedValues.length} unsigned typed messages`);
  allValues = allValues.concat(typedValues);
  allValues = allValues.sort((a, b) => {
    return a.time - b.time;
  });
  return allValues;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\tx-helper.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\webcam-utils.js", {"../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cwebcam-utils.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _app = require("../../../shared/constants/app");
var _util = require("../../../app/scripts/lib/util");
class WebcamUtils {
  static async checkStatus() {
    const isPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;
    const isFirefoxOrBrave = (0, _util.getPlatform)() === (_app.PLATFORM_FIREFOX || _app.PLATFORM_BRAVE);
    const devices = await window.navigator.mediaDevices.enumerateDevices();
    const webcams = devices.filter(device => device.kind === 'videoinput');
    const hasWebcam = webcams.length > 0;
    // A non-empty-string label implies that the webcam has been granted permission, as
    // otherwise the label is kept blank to prevent fingerprinting
    const hasWebcamPermissions = webcams.some(webcam => webcam.label && webcam.label.length > 0);
    if (hasWebcam) {
      let environmentReady = true;
      if (isFirefoxOrBrave && isPopup || isPopup && !hasWebcamPermissions) {
        environmentReady = false;
      }
      return {
        permissions: hasWebcamPermissions,
        environmentReady
      };
    }
    const error = new Error('No webcam found');
    error.type = 'NO_WEBCAM_FOUND';
    throw error;
  }
}
var _default = WebcamUtils;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\webcam-utils.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\window.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chelpers%5Cutils%5Cwindow.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openWindow = void 0;
const openWindow = (url, target) => {
  window.open(url, target || '_blank', 'noopener');
};
exports.openWindow = openWindow;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\helpers\\utils\\window.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\experiences\\useRamps.ts", {"../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5Cexperiences%5CuseRamps.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactRedux = require("react-redux");
var _network = require("../../../shared/constants/network");
var _selectors = require("../../selectors");
const portfolioUrl = "https://portfolio.metamask.io";
const useRamps = () => {
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const getBuyURI = (0, _react.useCallback)(_chainId => {
    switch (_chainId) {
      case _network.CHAIN_IDS.SEPOLIA:
        return 'https://faucet.sepolia.dev/';
      default:
        return `${portfolioUrl}/buy?metamaskEntry=ext_buy_button`;
    }
  }, []);
  const openBuyCryptoInPdapp = (0, _react.useCallback)(() => {
    const buyUrl = getBuyURI(chainId);
    global.platform.openTab({
      url: buyUrl
    });
  }, []);
  return {
    openBuyCryptoInPdapp,
    getBuyURI
  };
};
var _default = useRamps;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\experiences\\useRamps.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasEstimates.js", {"../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../shared/modules/gas.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\gas.utils.js","../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../useCurrencyDisplay":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCurrencyDisplay.js","../useUserPreferencedCurrency":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CgasFeeInput%5CuseGasEstimates.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasEstimates = useGasEstimates;
var _reactRedux = require("react-redux");
var _gas = require("../../../shared/constants/gas");
var _gas2 = require("../../../shared/modules/gas.utils");
var _common = require("../../helpers/constants/common");
var _selectors = require("../../selectors");
var _transactions = require("../../helpers/utils/transactions.util");
var _useCurrencyDisplay = require("../useCurrencyDisplay");
var _useUserPreferencedCurrency = require("../useUserPreferencedCurrency");
var _conversion = require("../../../shared/modules/conversion.utils");
/**
 * @typedef {object} GasEstimatesReturnType
 * @property {string} [estimatedMinimumNative] - the maximum amount estimated to be paid if the
 *  current network transaction volume increases. Expressed in the network's native currency.
 * @property {HexWeiString} [maximumCostInHexWei] - the maximum amount this transaction will cost.
 * @property {HexWeiString} [minimumCostInHexWei] - the minimum amount this transaction will cost.
 */

/**
 * @param options
 * @param options.editGasMode
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.gasLimit
 * @param options.gasPrice
 * @param options.maxFeePerGas
 * @param options.maxPriorityFeePerGas
 * @param options.minimumGasLimit
 * @param options.transaction
 * @returns {GasEstimatesReturnType} The gas estimates.
 */
function useGasEstimates({
  editGasMode,
  gasEstimateType,
  gasFeeEstimates,
  gasLimit,
  gasPrice,
  maxFeePerGas,
  maxPriorityFeePerGas,
  minimumGasLimit,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const {
    currency: primaryCurrency,
    numberOfDecimals: primaryNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.PRIMARY);

  // We have two helper methods that take an object that can have either
  // gasPrice OR the EIP-1559 fields on it, plus gasLimit. This object is
  // conditionally set to the appropriate fields to compute the minimum
  // and maximum cost of a transaction given the current estimates or selected
  // gas fees.
  let gasSettings = {
    gasLimit: (0, _conversion.decimalToHex)(gasLimit)
  };
  if (supportsEIP1559) {
    gasSettings = {
      ...gasSettings,
      maxFeePerGas: (0, _conversion.decGWEIToHexWEI)(maxFeePerGas || gasPrice || '0'),
      maxPriorityFeePerGas: (0, _conversion.decGWEIToHexWEI)(maxPriorityFeePerGas || maxFeePerGas || gasPrice || '0'),
      baseFeePerGas: (0, _conversion.decGWEIToHexWEI)(gasFeeEstimates.estimatedBaseFee ?? '0')
    };
  } else {
    gasSettings = {
      ...gasSettings,
      gasPrice: gasEstimateType === _gas.GasEstimateTypes.none ? '0x0' : (0, _conversion.decGWEIToHexWEI)(gasPrice)
    };
  }

  // The maximum amount this transaction will cost
  const maximumCostInHexWei = (0, _gas2.getMaximumGasTotalInHexWei)(gasSettings);
  if (editGasMode === _gas.EditGasModes.swaps) {
    gasSettings = {
      ...gasSettings,
      gasLimit: minimumGasLimit
    };
  }

  // The minimum amount this transaction will cost
  const minimumCostInHexWei = (0, _gas2.getMinimumGasTotalInHexWei)(gasSettings);
  const [estimatedMinimumNative] = (0, _useCurrencyDisplay.useCurrencyDisplay)(minimumCostInHexWei, {
    numberOfDecimals: primaryNumberOfDecimals,
    currency: primaryCurrency
  });
  return {
    estimatedMinimumNative,
    maximumCostInHexWei,
    minimumCostInHexWei
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\gasFeeInput\\useGasEstimates.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeErrors.js", {"../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../helpers/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CgasFeeInput%5CuseGasFeeErrors.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasFeeErrors = useGasFeeErrors;
var _react = require("react");
var _reactRedux = require("react-redux");
var _gas = require("../../../shared/constants/gas");
var _selectors = require("../../selectors");
var _transactions = require("../../helpers/utils/transactions.util");
var _util = require("../../helpers/utils/util");
var _gas2 = require("../../helpers/constants/gas");
var _Numeric = require("../../../shared/modules/Numeric");
const HIGH_FEE_WARNING_MULTIPLIER = 1.5;
const validateGasLimit = (gasLimit, minimumGasLimit) => {
  const gasLimitTooLow = new _Numeric.Numeric(gasLimit, 10).lessThan(new _Numeric.Numeric(minimumGasLimit || _gas.GAS_LIMITS.SIMPLE, 16));
  if (gasLimitTooLow) {
    return _gas2.GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS;
  }
  return undefined;
};
const validateMaxPriorityFee = (maxPriorityFeePerGas, supportsEIP1559) => {
  if (!supportsEIP1559) {
    return undefined;
  }
  if ((0, _util.bnLessThan)(maxPriorityFeePerGas, 0)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_BELOW_MINIMUM;
  }
  return undefined;
};
const validateMaxFee = (maxFeePerGas, maxPriorityFeeError, maxPriorityFeePerGas, supportsEIP1559) => {
  if (maxPriorityFeeError || !supportsEIP1559) {
    return undefined;
  }
  if ((0, _util.bnGreaterThan)(maxPriorityFeePerGas, maxFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_IMBALANCE;
  }
  return undefined;
};
const validateGasPrice = (isFeeMarketGasEstimate, gasPrice, supportsEIP1559, transaction) => {
  var _transaction$txParams;
  if (supportsEIP1559 && isFeeMarketGasEstimate) {
    return undefined;
  }
  if ((!supportsEIP1559 || transaction !== null && transaction !== void 0 && (_transaction$txParams = transaction.txParams) !== null && _transaction$txParams !== void 0 && _transaction$txParams.gasPrice) && (0, _util.bnLessThan)(gasPrice, 0)) {
    return _gas2.GAS_FORM_ERRORS.GAS_PRICE_TOO_LOW;
  }
  return undefined;
};
const getMaxPriorityFeeWarning = (gasFeeEstimates, isFeeMarketGasEstimate, isGasEstimatesLoading, maxPriorityFeePerGas, supportsEIP1559) => {
  var _gasFeeEstimates$low;
  if (!supportsEIP1559 || !isFeeMarketGasEstimate || isGasEstimatesLoading) {
    return undefined;
  }
  if ((0, _util.bnLessThan)(maxPriorityFeePerGas, gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$low = gasFeeEstimates.low) === null || _gasFeeEstimates$low === void 0 ? void 0 : _gasFeeEstimates$low.suggestedMaxPriorityFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW;
  }
  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.high && (0, _util.bnGreaterThan)(maxPriorityFeePerGas, gasFeeEstimates.high.suggestedMaxPriorityFeePerGas * HIGH_FEE_WARNING_MULTIPLIER)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_HIGH_WARNING;
  }
  return undefined;
};
const getMaxFeeWarning = (gasFeeEstimates, isGasEstimatesLoading, isFeeMarketGasEstimate, maxFeeError, maxPriorityFeeError, maxFeePerGas, supportsEIP1559) => {
  var _gasFeeEstimates$low2;
  if (maxPriorityFeeError || maxFeeError || !isFeeMarketGasEstimate || !supportsEIP1559 || isGasEstimatesLoading) {
    return undefined;
  }
  if ((0, _util.bnLessThan)(maxFeePerGas, gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$low2 = gasFeeEstimates.low) === null || _gasFeeEstimates$low2 === void 0 ? void 0 : _gasFeeEstimates$low2.suggestedMaxFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_TOO_LOW;
  }
  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.high && (0, _util.bnGreaterThan)(maxFeePerGas, gasFeeEstimates.high.suggestedMaxFeePerGas * HIGH_FEE_WARNING_MULTIPLIER)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_HIGH_WARNING;
  }
  return undefined;
};
const hasBalanceError = (minimumCostInHexWei, transaction, ethBalance) => {
  var _transaction$txParams2;
  if (minimumCostInHexWei === undefined || ethBalance === undefined) {
    return false;
  }
  const minimumTxCostInHexWei = new _Numeric.Numeric(minimumCostInHexWei, 16).add(new _Numeric.Numeric((transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams2 = transaction.txParams) === null || _transaction$txParams2 === void 0 ? void 0 : _transaction$txParams2.value) || '0x0', 16));
  const ethBalanceInHexWei = new _Numeric.Numeric(ethBalance, 16);
  return minimumTxCostInHexWei.greaterThan(ethBalanceInHexWei);
};

/**
 * @typedef {object} GasFeeErrorsReturnType
 * @property {object} [gasErrors] - combined map of errors and warnings.
 * @property {boolean} [hasGasErrors] - true if there are errors that can block submission.
 * @property {boolean} [balanceError] - true if user balance is less than transaction value.
 * @property {boolean} [hasSimulationError] - true if simulation error exists.
 */

/**
 * @param options
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.isGasEstimatesLoading
 * @param options.gasLimit
 * @param options.gasPrice
 * @param options.maxPriorityFeePerGas
 * @param options.maxFeePerGas
 * @param options.minimumCostInHexWei
 * @param options.minimumGasLimit
 * @param options.transaction
 * @returns {GasFeeErrorsReturnType}
 */
function useGasFeeErrors({
  gasEstimateType,
  gasFeeEstimates,
  isGasEstimatesLoading,
  gasLimit,
  gasPrice,
  maxPriorityFeePerGas,
  maxFeePerGas,
  minimumCostInHexWei,
  minimumGasLimit,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const isFeeMarketGasEstimate = gasEstimateType === _gas.GasEstimateTypes.feeMarket;

  // Get all errors
  const gasLimitError = validateGasLimit(gasLimit, minimumGasLimit);
  const maxPriorityFeeError = validateMaxPriorityFee(maxPriorityFeePerGas, supportsEIP1559);
  const maxFeeError = validateMaxFee(maxFeePerGas, maxPriorityFeeError, maxPriorityFeePerGas, supportsEIP1559);
  const gasPriceError = validateGasPrice(isFeeMarketGasEstimate, gasPrice, supportsEIP1559, transaction);

  // Get all warnings
  const maxPriorityFeeWarning = getMaxPriorityFeeWarning(gasFeeEstimates, isFeeMarketGasEstimate, isGasEstimatesLoading, maxPriorityFeePerGas, supportsEIP1559);
  const maxFeeWarning = getMaxFeeWarning(gasFeeEstimates, isGasEstimatesLoading, isFeeMarketGasEstimate, maxFeeError, maxPriorityFeeError, maxFeePerGas, supportsEIP1559);

  // Separating errors from warnings so we can know which value problems
  // are blocking or simply useful information for the users

  const gasErrors = (0, _react.useMemo)(() => {
    const errors = {};
    if (gasLimitError) {
      errors.gasLimit = gasLimitError;
    }
    if (maxPriorityFeeError) {
      errors.maxPriorityFee = maxPriorityFeeError;
    }
    if (maxFeeError) {
      errors.maxFee = maxFeeError;
    }
    if (gasPriceError) {
      errors.gasPrice = gasPriceError;
    }
    return errors;
  }, [gasLimitError, maxPriorityFeeError, maxFeeError, gasPriceError]);
  const gasWarnings = (0, _react.useMemo)(() => {
    const warnings = {};
    if (maxPriorityFeeWarning) {
      warnings.maxPriorityFee = maxPriorityFeeWarning;
    }
    if (maxFeeWarning) {
      warnings.maxFee = maxFeeWarning;
    }
    return warnings;
  }, [maxPriorityFeeWarning, maxFeeWarning]);

  // Determine if we have any errors which should block submission
  const hasGasErrors = Boolean(Object.keys(gasErrors).length);

  // Combine the warnings and errors into one object for easier use within the UI.
  // This object should have no effect on whether or not the user can submit the form
  const errorsAndWarnings = (0, _react.useMemo)(() => ({
    ...gasWarnings,
    ...gasErrors
  }), [gasErrors, gasWarnings]);
  const {
    balance: ethBalance
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount, _reactRedux.shallowEqual);
  const balanceError = hasBalanceError(minimumCostInHexWei, transaction, ethBalance);
  return {
    gasErrors: errorsAndWarnings,
    hasGasErrors,
    balanceError,
    hasSimulationError: Boolean(transaction === null || transaction === void 0 ? void 0 : transaction.simulationFails)
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\gasFeeInput\\useGasFeeErrors.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js", {"../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../helpers/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../helpers/utils/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../useGasFeeEstimates":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js","./useGasEstimates":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasEstimates.js","./useGasFeeErrors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeErrors.js","./useGasPriceInput":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasPriceInput.js","./useMaxFeePerGasInput":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useMaxFeePerGasInput.js","./useMaxPriorityFeePerGasInput":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useMaxPriorityFeePerGasInput.js","./useTransactionFunctions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useTransactionFunctions.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CgasFeeInput%5CuseGasFeeInputs.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasFeeInputs = useGasFeeInputs;
var _react = require("react");
var _reactRedux = require("react-redux");
var _gas = require("../../../shared/constants/gas");
var _gas2 = require("../../helpers/constants/gas");
var _selectors = require("../../selectors");
var _transactions = require("../../helpers/utils/transactions.util");
var _useGasFeeEstimates = require("../useGasFeeEstimates");
var _gas3 = require("../../helpers/utils/gas");
var _conversion = require("../../../shared/modules/conversion.utils");
var _useGasFeeErrors = require("./useGasFeeErrors");
var _useGasPriceInput = require("./useGasPriceInput");
var _useMaxFeePerGasInput = require("./useMaxFeePerGasInput");
var _useMaxPriorityFeePerGasInput = require("./useMaxPriorityFeePerGasInput");
var _useGasEstimates = require("./useGasEstimates");
var _useTransactionFunctions = require("./useTransactionFunctions");
/**
 * In EIP_1559_V2 implementation as used by useGasfeeInputContext() the use of this hook is evolved.
 * It is no longer used to keep transient state of advance gas fee inputs.
 * Transient state of inputs is maintained locally in /ui/components/app/advance-gas-fee-popover component.
 *
 * This hook is used now as source of shared data about transaction, it shares details of gas fee in transaction,
 * estimate used, is EIP-1559 supported and other details. It also  have methods to update transaction.
 *
 * Transaction is used as single source of truth and as transaction is updated the fields shared by hook are
 * also updated using useEffect hook.
 *
 * It will be useful to plan a task to create a new hook of this shared information from this hook.
 * Methods like setEstimateToUse, onManualChange are deprecated in context of EIP_1559_V2 implementation.
 */

/**
 * @typedef {object} GasFeeInputReturnType
 * @property {object} [transaction] - .
 * @property {DecGweiString} [maxFeePerGas] - the maxFeePerGas input value.
 * @property {DecGweiString} [maxPriorityFeePerGas] - the maxPriorityFeePerGas
 *  input value.
 * @property {DecGweiString} [gasPrice] - the gasPrice input value.
 * @property {(DecGweiString) => void} setGasPrice - state setter method to
 *  update the gasPrice.
 * @property {DecGweiString} gasLimit - the gasLimit input value.
 * @property {(DecGweiString) => void} setGasLimit - state setter method to
 *  update the gasLimit.
 * @property {DecGweiString} [properGasLimit] - proper gas limit.
 * @property {string} [editGasMode] - one of CANCEL, SPEED-UP, MODIFY_IN_PLACE, SWAPS.
 * @property {EstimateLevel} [estimateToUse] - the estimate level currently
 *  selected. This will be null if the user has ejected from using the estimates.
 * @property {boolean} [isGasEstimatesLoading] - true if gas estimate is loading.
 * @property {DecGweiString} [maximumCostInHexWei] - maximum cost of transaction in HexWei.
 * @property {DecGweiString} [minimumCostInHexWei] - minimum cost of transaction in HexWei.
 * @property {string} [estimateUsed] - estimate used in the transaction.
 * @property {boolean} [isNetworkBusy] - true if network is busy.
 * @property {() => void} [onManualChange] - function to call when transaciton is manually changed.
 * @property {boolean} [balanceError] - true if user balance is less than transaction value.
 * @property {object} [gasErrors] - object of gas errors.
 * @property {boolean} [hasGasErrors] - true if there are gas errors.
 * @property {boolean} [hasSimulationError] - true if simulation error exists.
 * @property {number} [minimumGasLimitDec] - minimum gas limit in decimals.
 * @property {boolean} [supportsEIP1559] - true if EIP1559 is cupported.
 * @property {() => void} cancelTransaction - cancel the transaction.
 * @property {() => void} speedUpTransaction - speed up the transaction.
 * @property {(string, number, number, number, string) => void} updateTransaction - update the transaction.
 * @property {(boolean) => void} updateTransactionToTenPercentIncreasedGasFee - update the cancel / speed transaction to
 * gas fee which is equal to current gas fee +10 percent.
 * @property {(string) => void} updateTransactionUsingDAPPSuggestedValues - update the transaction to DAPP suggested gas value.
 * @property {(string) => void} updateTransactionUsingEstimate - update the transaction using the estimate passed.
 */

/**
 * Uses gasFeeEstimates and state to keep track of user gas fee inputs.
 * Will update the gas fee state when estimates update if the user has not yet
 * modified the fields.
 *
 * @param {GasRecommendations} [defaultEstimateToUse] - which estimate
 *  level to default the 'estimateToUse' state variable to.
 * @param {object} [_transaction]
 * @param {string} [minimumGasLimit]
 * @param {EditGasModes[keyof EditGasModes]} editGasMode
 * @returns {GasFeeInputReturnType & __import__(
 *  './useGasFeeEstimates'
 * ).GasEstimates} gas fee input state and the GasFeeEstimates object
 */
function useGasFeeInputs(defaultEstimateToUse = _gas.GasRecommendations.medium, _transaction, minimumGasLimit = '0x5208', editGasMode = _gas.EditGasModes.modifyInPlace) {
  const initialRetryTxMeta = {
    txParams: _transaction === null || _transaction === void 0 ? void 0 : _transaction.txParams,
    id: _transaction === null || _transaction === void 0 ? void 0 : _transaction.id,
    userFeeLevel: _transaction === null || _transaction === void 0 ? void 0 : _transaction.userFeeLevel,
    originalGasEstimate: _transaction === null || _transaction === void 0 ? void 0 : _transaction.originalGasEstimate,
    userEditedGasLimit: _transaction === null || _transaction === void 0 ? void 0 : _transaction.userEditedGasLimit
  };
  if (_transaction !== null && _transaction !== void 0 && _transaction.previousGas) {
    initialRetryTxMeta.previousGas = _transaction === null || _transaction === void 0 ? void 0 : _transaction.previousGas;
  }
  const [retryTxMeta, setRetryTxMeta] = (0, _react.useState)(initialRetryTxMeta);
  const transaction = (0, _gas3.editGasModeIsSpeedUpOrCancel)(editGasMode) ? retryTxMeta : _transaction;
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);

  // We need the gas estimates from the GasFeeController in the background.
  // Calling this hooks initiates polling for new gas estimates and returns the
  // current estimate.
  const {
    gasEstimateType,
    gasFeeEstimates,
    isGasEstimatesLoading,
    isNetworkBusy
  } = (0, _useGasFeeEstimates.useGasFeeEstimates)();
  const userPrefersAdvancedGas = (0, _reactRedux.useSelector)(_selectors.getAdvancedInlineGasShown);
  const [estimateToUse, setInternalEstimateToUse] = (0, _react.useState)(() => {
    var _transaction$txParams, _transaction$txParams2;
    if (userPrefersAdvancedGas && transaction !== null && transaction !== void 0 && (_transaction$txParams = transaction.txParams) !== null && _transaction$txParams !== void 0 && _transaction$txParams.maxPriorityFeePerGas && transaction !== null && transaction !== void 0 && (_transaction$txParams2 = transaction.txParams) !== null && _transaction$txParams2 !== void 0 && _transaction$txParams2.maxFeePerGas) {
      return null;
    }
    if (transaction) {
      return (transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel) || null;
    }
    return defaultEstimateToUse;
  });
  const [estimateUsed, setEstimateUsed] = (0, _react.useState)(() => {
    if (estimateToUse) {
      return estimateToUse;
    }
    return _gas.PriorityLevels.custom;
  });
  const [gasLimit, setGasLimit] = (0, _react.useState)(() => {
    var _transaction$txParams3;
    return Number((0, _conversion.hexToDecimal)((transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams3 = transaction.txParams) === null || _transaction$txParams3 === void 0 ? void 0 : _transaction$txParams3.gas) ?? '0x0'));
  });
  const properGasLimit = Number((0, _conversion.hexToDecimal)(transaction === null || transaction === void 0 ? void 0 : transaction.originalGasEstimate));

  /**
   * In EIP-1559 V2 designs change to gas estimate is always updated to transaction
   * Thus callback setEstimateToUse can be deprecate in favour of this useEffect
   * so that transaction is source of truth whenever possible.
   */
  (0, _react.useEffect)(() => {
    if (supportsEIP1559) {
      var _transaction$txParams4;
      if (transaction !== null && transaction !== void 0 && transaction.userFeeLevel) {
        setEstimateUsed(transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel);
        setInternalEstimateToUse(transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel);
      }
      setGasLimit(Number((0, _conversion.hexToDecimal)((transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams4 = transaction.txParams) === null || _transaction$txParams4 === void 0 ? void 0 : _transaction$txParams4.gas) ?? '0x0')));
    }
  }, [setEstimateUsed, setGasLimit, setInternalEstimateToUse, supportsEIP1559, transaction]);
  const {
    gasPrice,
    setGasPrice,
    setGasPriceHasBeenManuallySet
  } = (0, _useGasPriceInput.useGasPriceInput)({
    estimateToUse,
    gasEstimateType,
    gasFeeEstimates,
    transaction
  });
  const {
    maxFeePerGas,
    setMaxFeePerGas
  } = (0, _useMaxFeePerGasInput.useMaxFeePerGasInput)({
    estimateToUse,
    gasEstimateType,
    gasFeeEstimates,
    transaction
  });
  const {
    maxPriorityFeePerGas,
    setMaxPriorityFeePerGas
  } = (0, _useMaxPriorityFeePerGasInput.useMaxPriorityFeePerGasInput)({
    estimateToUse,
    gasEstimateType,
    gasFeeEstimates,
    transaction
  });
  const {
    estimatedMinimumNative,
    maximumCostInHexWei,
    minimumCostInHexWei
  } = (0, _useGasEstimates.useGasEstimates)({
    editGasMode,
    gasEstimateType,
    gasFeeEstimates,
    gasLimit,
    gasPrice,
    maxFeePerGas,
    maxPriorityFeePerGas,
    minimumGasLimit,
    transaction
  });
  const {
    balanceError,
    gasErrors,
    hasGasErrors,
    hasSimulationError
  } = (0, _useGasFeeErrors.useGasFeeErrors)({
    gasEstimateType,
    gasFeeEstimates,
    isGasEstimatesLoading,
    gasLimit,
    gasPrice,
    maxPriorityFeePerGas,
    maxFeePerGas,
    minimumCostInHexWei,
    minimumGasLimit,
    transaction
  });
  const handleGasLimitOutOfBoundError = (0, _react.useCallback)(() => {
    if (gasErrors.gasLimit === _gas2.GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS) {
      var _transaction$txParams5;
      const transactionGasLimitDec = (0, _conversion.hexToDecimal)(transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams5 = transaction.txParams) === null || _transaction$txParams5 === void 0 ? void 0 : _transaction$txParams5.gas);
      const minimumGasLimitDec = (0, _conversion.hexToDecimal)(minimumGasLimit);
      setGasLimit(transactionGasLimitDec > minimumGasLimitDec ? transactionGasLimitDec : minimumGasLimitDec);
    }
  }, [minimumGasLimit, gasErrors.gasLimit, transaction]);
  const {
    cancelTransaction,
    speedUpTransaction,
    updateTransaction,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate
  } = (0, _useTransactionFunctions.useTransactionFunctions)({
    defaultEstimateToUse,
    editGasMode,
    gasFeeEstimates,
    gasLimit,
    maxPriorityFeePerGas,
    minimumGasLimit,
    transaction,
    setRetryTxMeta
  });
  const onManualChange = (0, _react.useCallback)(() => {
    setInternalEstimateToUse(_gas.CUSTOM_GAS_ESTIMATE);
    handleGasLimitOutOfBoundError();
    // Restore existing values
    setGasPrice(gasPrice);
    setGasLimit(gasLimit);
    setMaxFeePerGas(maxFeePerGas);
    setMaxPriorityFeePerGas(maxPriorityFeePerGas);
    setGasPriceHasBeenManuallySet(true);
    setEstimateUsed('custom');
  }, [setInternalEstimateToUse, handleGasLimitOutOfBoundError, setGasPrice, gasPrice, setGasLimit, gasLimit, setMaxFeePerGas, maxFeePerGas, setMaxPriorityFeePerGas, maxPriorityFeePerGas, setGasPriceHasBeenManuallySet]);
  return {
    transaction,
    maxFeePerGas,
    maxPriorityFeePerGas,
    gasPrice,
    setGasPrice,
    gasLimit,
    setGasLimit,
    properGasLimit,
    editGasMode,
    estimateToUse,
    estimatedMinimumNative,
    maximumCostInHexWei,
    minimumCostInHexWei,
    estimateUsed,
    gasFeeEstimates,
    isNetworkBusy,
    onManualChange,
    // error and warnings
    balanceError,
    gasErrors,
    hasGasErrors,
    hasSimulationError,
    minimumGasLimitDec: (0, _conversion.hexToDecimal)(minimumGasLimit),
    supportsEIP1559,
    cancelTransaction,
    speedUpTransaction,
    updateTransaction,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\gasFeeInput\\useGasFeeInputs.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasPriceInput.js", {"../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","./utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\utils.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CgasFeeInput%5CuseGasPriceInput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasPriceInput = useGasPriceInput;
var _react = require("react");
var _lodash = require("lodash");
var _gas = require("../../../shared/constants/gas");
var _transactions = require("../../helpers/utils/transactions.util");
var _conversion = require("../../../shared/modules/conversion.utils");
var _utils = require("./utils");
function getGasPriceEstimate(gasFeeEstimates, gasEstimateType, estimateToUse) {
  if (gasEstimateType === _gas.GasEstimateTypes.legacy) {
    return (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates[estimateToUse]) ?? '0';
  } else if (gasEstimateType === _gas.GasEstimateTypes.ethGasPrice) {
    return (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.gasPrice) ?? '0';
  }
  return '0';
}

/**
 * @typedef {object} GasPriceInputsReturnType
 * @property {DecGweiString} [gasPrice] - the gasPrice input value.
 * @property {(DecGweiString) => void} setGasPrice - state setter method to update the gasPrice.
 * @property {(boolean) => true} setGasPriceHasBeenManuallySet - state setter method to update gasPriceHasBeenManuallySet
 * field gasPriceHasBeenManuallySet is used in gasPrice calculations.
 */

/**
 * @param options
 * @param options.estimateToUse
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.transaction
 * @returns {GasPriceInputsReturnType}
 */
function useGasPriceInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  transaction
}) {
  const [gasPriceHasBeenManuallySet, setGasPriceHasBeenManuallySet] = (0, _react.useState)((transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel) === _gas.CUSTOM_GAS_ESTIMATE);
  const [gasPrice, setGasPrice] = (0, _react.useState)(() => {
    const {
      gasPrice: txGasPrice
    } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
    return txGasPrice && (0, _utils.feeParamsAreCustom)(transaction) ? Number((0, _conversion.hexWEIToDecGWEI)(txGasPrice)) : null;
  });
  const [initialGasPriceEstimates] = (0, _react.useState)(gasFeeEstimates);
  const gasPriceEstimatesHaveNotChanged = (0, _lodash.isEqual)(initialGasPriceEstimates, gasFeeEstimates);
  const gasPriceToUse = gasPrice !== null && (gasPriceHasBeenManuallySet || gasPriceEstimatesHaveNotChanged || (0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams)) ? gasPrice : getGasPriceEstimate(gasFeeEstimates, gasEstimateType, estimateToUse);
  return {
    gasPrice: gasPriceToUse,
    setGasPrice,
    setGasPriceHasBeenManuallySet
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\gasFeeInput\\useGasPriceInput.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useMaxFeePerGasInput.js", {"../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\utils.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CgasFeeInput%5CuseMaxFeePerGasInput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMaxFeePerGasInput = useMaxFeePerGasInput;
var _react = require("react");
var _reactRedux = require("react-redux");
var _selectors = require("../../selectors");
var _transactions = require("../../helpers/utils/transactions.util");
var _conversion = require("../../../shared/modules/conversion.utils");
var _utils = require("./utils");
const getMaxFeePerGasFromTransaction = (transaction, gasFeeEstimates) => {
  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates[transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel]) {
    return gasFeeEstimates[transaction.userFeeLevel].suggestedMaxFeePerGas;
  }
  const {
    maxFeePerGas,
    gasPrice
  } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
  return Number((0, _conversion.hexWEIToDecGWEI)(maxFeePerGas || gasPrice));
};

/**
 * @typedef {object} MaxFeePerGasInputReturnType
 * @property {(DecGweiString) => void} setMaxFeePerGas - state setter method to update the maxFeePerGas.
 * @property {string} [maxFeePerGas] - getter method for maxFeePerGas.
 */

/**
 * @param options
 * @param options.estimateToUse
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.transaction
 * @returns {MaxFeePerGasInputReturnType}
 */
function useMaxFeePerGasInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const initialMaxFeePerGas = supportsEIP1559 ? getMaxFeePerGasFromTransaction(transaction, gasFeeEstimates) : 0;

  // This hook keeps track of a few pieces of transitional state. It is
  // transitional because it is only used to modify a transaction in the
  // metamask (background) state tree.
  const [maxFeePerGas, setMaxFeePerGas] = (0, _react.useState)(() => {
    if (initialMaxFeePerGas && (0, _utils.feeParamsAreCustom)(transaction)) {
      return initialMaxFeePerGas;
    }
    return null;
  });
  (0, _react.useEffect)(() => {
    if (supportsEIP1559 && initialMaxFeePerGas) {
      setMaxFeePerGas(initialMaxFeePerGas);
    }
  }, [initialMaxFeePerGas, setMaxFeePerGas, supportsEIP1559]);

  // We specify whether to use the estimate value by checking if the state
  // value has been set. The state value is only set by user input and is wiped
  // when the user selects an estimate. Default here is '0' to avoid bignumber
  // errors in later calculations for nullish values.
  const maxFeePerGasToUse = maxFeePerGas ?? (0, _utils.getGasFeeEstimate)('suggestedMaxFeePerGas', gasFeeEstimates, gasEstimateType, estimateToUse, initialMaxFeePerGas || 0);
  return {
    maxFeePerGas: maxFeePerGasToUse,
    setMaxFeePerGas
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\gasFeeInput\\useMaxFeePerGasInput.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useMaxPriorityFeePerGasInput.js", {"../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\utils.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CgasFeeInput%5CuseMaxPriorityFeePerGasInput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMaxPriorityFeePerGasInput = useMaxPriorityFeePerGasInput;
var _reactRedux = require("react-redux");
var _react = require("react");
var _selectors = require("../../selectors");
var _transactions = require("../../helpers/utils/transactions.util");
var _conversion = require("../../../shared/modules/conversion.utils");
var _utils = require("./utils");
const isNullOrUndefined = value => value === null || value === undefined;
const getMaxPriorityFeePerGasFromTransaction = (transaction, gasFeeEstimates) => {
  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates[transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel]) {
    return gasFeeEstimates[transaction.userFeeLevel].suggestedMaxPriorityFeePerGas;
  }
  const {
    maxPriorityFeePerGas,
    maxFeePerGas,
    gasPrice
  } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
  const feeInHexWei = maxPriorityFeePerGas || maxFeePerGas || gasPrice;
  return feeInHexWei ? Number((0, _conversion.hexWEIToDecGWEI)(feeInHexWei)) : null;
};

/**
 * @typedef {object} MaxPriorityFeePerGasInputReturnType
 * @property {DecGweiString} [maxPriorityFeePerGas] - the maxPriorityFeePerGas
 *  input value.
 * @property {(DecGweiString) => void} setMaxPriorityFeePerGas - state setter
 *  method to update the maxPriorityFeePerGas.
 */

/**
 * @param options
 * @param options.estimateToUse
 * @param options.gasEstimateType
 * @param options.gasFeeEstimates
 * @param options.transaction
 * @returns {MaxPriorityFeePerGasInputReturnType}
 */
function useMaxPriorityFeePerGasInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const initialMaxPriorityFeePerGas = supportsEIP1559 ? getMaxPriorityFeePerGasFromTransaction(transaction, gasFeeEstimates) : null;
  const [maxPriorityFeePerGas, setMaxPriorityFeePerGas] = (0, _react.useState)(() => {
    if (!isNullOrUndefined(initialMaxPriorityFeePerGas) && (0, _utils.feeParamsAreCustom)(transaction)) {
      return initialMaxPriorityFeePerGas;
    }
    return null;
  });
  (0, _react.useEffect)(() => {
    if (supportsEIP1559 && !isNullOrUndefined(initialMaxPriorityFeePerGas)) {
      setMaxPriorityFeePerGas(initialMaxPriorityFeePerGas);
    }
  }, [initialMaxPriorityFeePerGas, setMaxPriorityFeePerGas, supportsEIP1559]);
  const maxPriorityFeePerGasToUse = maxPriorityFeePerGas ?? (0, _utils.getGasFeeEstimate)('suggestedMaxPriorityFeePerGas', gasFeeEstimates, gasEstimateType, estimateToUse, initialMaxPriorityFeePerGas || 0);
  return {
    maxPriorityFeePerGas: maxPriorityFeePerGasToUse,
    setMaxPriorityFeePerGas
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\gasFeeInput\\useMaxPriorityFeePerGasInput.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useTransactionFunctions.js", {"../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../helpers/utils/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CgasFeeInput%5CuseTransactionFunctions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionFunctions = void 0;
var _react = require("react");
var _reactRedux = require("react-redux");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _gas = require("../../../shared/constants/gas");
var _gas2 = require("../../helpers/utils/gas");
var _actions = require("../../store/actions");
var _conversion = require("../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @typedef {object} TransactionFunctionsReturnType
 * @property {() => void} cancelTransaction - cancel the transaction.
 * @property {() => void} speedUpTransaction - speed up the transaction.
 * @property {(string, number, number, number, string) => void} updateTransaction - update the transaction.
 * @property {(boolean) => void} updateTransactionToTenPercentIncreasedGasFee - update the cancel / speed transaction to
 * gas fee which is equal to current gas fee +10 percent.
 * @property {(string) => void} updateTransactionUsingDAPPSuggestedValues - update the transaction to DAPP suggested gas value.
 * @property {(string) => void} updateTransactionUsingEstimate - update the transaction using the estimate passed.
 */

/**
 * @param options
 * @param options.defaultEstimateToUse
 * @param options.editGasMode
 * @param options.estimatedBaseFee
 * @param options.gasFeeEstimates
 * @param options.gasLimit
 * @param options.maxPriorityFeePerGas
 * @param options.transaction
 * @param options.setRetryTxMeta
 * @returns {TransactionFunctionsReturnType}
 */
const useTransactionFunctions = ({
  defaultEstimateToUse,
  editGasMode,
  estimatedBaseFee,
  gasFeeEstimates,
  gasLimit: gasLimitValue,
  maxPriorityFeePerGas: maxPriorityFeePerGasValue,
  transaction,
  setRetryTxMeta
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const getTxMeta = (0, _react.useCallback)(() => {
    if (editGasMode !== _gas.EditGasModes.cancel && editGasMode !== _gas.EditGasModes.speedUp || transaction.previousGas) {
      return {};
    }
    const {
      maxFeePerGas,
      maxPriorityFeePerGas,
      gasLimit
    } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) ?? {};
    return {
      previousGas: {
        maxFeePerGas,
        maxPriorityFeePerGas,
        gasLimit
      }
    };
  }, [editGasMode, transaction === null || transaction === void 0 ? void 0 : transaction.previousGas, transaction === null || transaction === void 0 ? void 0 : transaction.txParams]);
  const updateTransaction = (0, _react.useCallback)(async ({
    estimateUsed,
    gasLimit,
    maxFeePerGas,
    maxPriorityFeePerGas,
    estimateSuggested
  }) => {
    const newGasSettings = {
      gas: (0, _conversion.decimalToHex)(gasLimit || gasLimitValue),
      gasLimit: (0, _conversion.decimalToHex)(gasLimit || gasLimitValue),
      estimateSuggested: estimateSuggested || defaultEstimateToUse,
      estimateUsed
    };
    if (maxFeePerGas) {
      newGasSettings.maxFeePerGas = maxFeePerGas;
    }
    if (maxPriorityFeePerGas) {
      newGasSettings.maxPriorityFeePerGas = maxPriorityFeePerGas || (0, _conversion.decGWEIToHexWEI)(maxPriorityFeePerGasValue);
    }
    const txMeta = getTxMeta();
    const updatedTxMeta = {
      ...transaction,
      userFeeLevel: estimateUsed || _gas.PriorityLevels.custom,
      txParams: {
        ...transaction.txParams,
        ...newGasSettings
      },
      ...txMeta
    };
    if (editGasMode === _gas.EditGasModes.swaps) {
      dispatch((0, _actions.updateSwapsUserFeeLevel)(estimateUsed || _gas.PriorityLevels.custom));
      dispatch((0, _actions.updateCustomSwapsEIP1559GasParams)(newGasSettings));
    } else if ((0, _gas2.editGasModeIsSpeedUpOrCancel)(editGasMode)) {
      setRetryTxMeta(updatedTxMeta);
    } else {
      newGasSettings.userEditedGasLimit = updatedTxMeta.userEditedGasLimit;
      newGasSettings.userFeeLevel = updatedTxMeta.userFeeLevel;
      if (txMeta && txMeta.previousGas) {
        await dispatch((0, _actions.updatePreviousGasParams)(updatedTxMeta.id, txMeta.previousGas));
      }
      await dispatch((0, _actions.updateTransactionGasFees)(updatedTxMeta.id, newGasSettings));
    }
  }, [defaultEstimateToUse, dispatch, editGasMode, gasLimitValue, getTxMeta, maxPriorityFeePerGasValue, transaction, setRetryTxMeta]);
  const cancelTransaction = (0, _react.useCallback)(() => {
    dispatch((0, _actions.createCancelTransaction)(transaction.id, transaction.txParams, {
      estimatedBaseFee
    }));
  }, [dispatch, estimatedBaseFee, transaction]);
  const speedUpTransaction = (0, _react.useCallback)(() => {
    dispatch((0, _actions.createSpeedUpTransaction)(transaction.id, transaction.txParams, {
      estimatedBaseFee
    }));
  }, [dispatch, estimatedBaseFee, transaction]);
  const updateTransactionToTenPercentIncreasedGasFee = (0, _react.useCallback)((initTransaction = false) => {
    const {
      gas: gasLimit,
      maxFeePerGas,
      maxPriorityFeePerGas
    } = transaction.previousGas || transaction.txParams;
    const newMaxPriorityFeePerGas = new _bignumber.default(maxPriorityFeePerGas, 16).isZero() ? (0, _conversion.decGWEIToHexWEI)(gasFeeEstimates[defaultEstimateToUse].suggestedMaxPriorityFeePerGas) : maxPriorityFeePerGas;
    const estimateUsed = maxPriorityFeePerGas === '0x0' ? _gas.CUSTOM_GAS_ESTIMATE : _gas.PriorityLevels.tenPercentIncreased;
    updateTransaction({
      estimateSuggested: initTransaction ? defaultEstimateToUse : _gas.PriorityLevels.tenPercentIncreased,
      estimateUsed,
      gasLimit,
      maxFeePerGas: (0, _gas2.addTenPercentAndRound)(maxFeePerGas),
      maxPriorityFeePerGas: (0, _gas2.addTenPercentAndRound)(newMaxPriorityFeePerGas)
    });
  }, [defaultEstimateToUse, gasFeeEstimates, transaction, updateTransaction]);
  const updateTransactionUsingEstimate = (0, _react.useCallback)(gasFeeEstimateToUse => {
    if (!gasFeeEstimates[gasFeeEstimateToUse]) {
      return;
    }
    const {
      suggestedMaxFeePerGas,
      suggestedMaxPriorityFeePerGas
    } = gasFeeEstimates[gasFeeEstimateToUse];
    updateTransaction({
      estimateUsed: gasFeeEstimateToUse,
      maxFeePerGas: (0, _conversion.decGWEIToHexWEI)(suggestedMaxFeePerGas),
      maxPriorityFeePerGas: (0, _conversion.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas)
    });
  }, [gasFeeEstimates, updateTransaction]);
  const updateTransactionUsingDAPPSuggestedValues = (0, _react.useCallback)(() => {
    const {
      maxFeePerGas,
      maxPriorityFeePerGas
    } = (transaction === null || transaction === void 0 ? void 0 : transaction.dappSuggestedGasFees) ?? {};
    updateTransaction({
      estimateUsed: _gas.PriorityLevels.dAppSuggested,
      maxFeePerGas,
      maxPriorityFeePerGas
    });
  }, [transaction, updateTransaction]);
  return {
    cancelTransaction,
    speedUpTransaction,
    updateTransaction,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate
  };
};
exports.useTransactionFunctions = useTransactionFunctions;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\gasFeeInput\\useTransactionFunctions.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\utils.js", {"../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CgasFeeInput%5Cutils.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.feeParamsAreCustom = void 0;
exports.getGasFeeEstimate = getGasFeeEstimate;
var _gas = require("../../../shared/constants/gas");
function getGasFeeEstimate(field, gasFeeEstimates, gasEstimateType, estimateToUse, fallback = '0') {
  if (gasEstimateType === _gas.GasEstimateTypes.feeMarket) {
    var _gasFeeEstimates$esti;
    return (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$esti = gasFeeEstimates[estimateToUse]) === null || _gasFeeEstimates$esti === void 0 ? void 0 : _gasFeeEstimates$esti[field]) ?? String(fallback);
  }
  return String(fallback);
}
const feeParamsAreCustom = transaction => !(transaction !== null && transaction !== void 0 && transaction.userFeeLevel) || (transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel) === _gas.CUSTOM_GAS_ESTIMATE;
exports.feeParamsAreCustom = feeParamsAreCustom;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\gasFeeInput\\utils.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useAddressDetails.js", {"../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseAddressDetails.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _hexstringUtils = require("../../shared/modules/hexstring-utils");
var _selectors = require("../selectors");
var _util = require("../helpers/utils/util");
const useAddressDetails = toAddress => {
  var _identities$toAddress, _tokenList$toAddress$;
  const addressBook = (0, _reactRedux.useSelector)(_selectors.getAddressBook);
  const identities = (0, _reactRedux.useSelector)(_selectors.getMetaMaskIdentities);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(toAddress);
  if (!toAddress) {
    return {};
  }
  const addressBookEntryObject = addressBook.find(entry => entry.address === checksummedAddress);
  if (addressBookEntryObject !== null && addressBookEntryObject !== void 0 && addressBookEntryObject.name) {
    return {
      toName: addressBookEntryObject.name,
      isTrusted: true
    };
  }
  if ((_identities$toAddress = identities[toAddress]) !== null && _identities$toAddress !== void 0 && _identities$toAddress.name) {
    return {
      toName: identities[toAddress].name,
      isTrusted: true
    };
  }
  if ((_tokenList$toAddress$ = tokenList[toAddress === null || toAddress === void 0 ? void 0 : toAddress.toLowerCase()]) !== null && _tokenList$toAddress$ !== void 0 && _tokenList$toAddress$.name) {
    return {
      toName: tokenList[toAddress === null || toAddress === void 0 ? void 0 : toAddress.toLowerCase()].name,
      isTrusted: true
    };
  }
  return {
    toName: (0, _util.shortenAddress)(checksummedAddress),
    isTrusted: false
  };
};
var _default = useAddressDetails;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useAddressDetails.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useApproveTransaction.js", {"react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseApproveTransaction.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useApproveTransaction = useApproveTransaction;
var _react = require("react");
/**
 * Determine whether a transaction can be approved and provide a method to
 * kick off the approval process.
 *
 * Provides a reusable hook that, given a transactionGroup, will manage
 * the process of editing gas for approvals
 *
 * @returns {[boolean, Function]}
 */
function useApproveTransaction() {
  const [showCustomizeGasPopover, setShowCustomizeGasPopover] = (0, _react.useState)(false);
  const closeCustomizeGasPopover = () => setShowCustomizeGasPopover(false);
  const approveTransaction = (0, _react.useCallback)(() => {
    return setShowCustomizeGasPopover(true);
  }, []);
  return {
    approveTransaction,
    showCustomizeGasPopover,
    closeCustomizeGasPopover
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useApproveTransaction.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useAssetDetails.js", {"../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/token-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./usePrevious":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\usePrevious.js","./useTokenTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenTracker.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseAssetDetails.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAssetDetails = useAssetDetails;
var _lodash = require("lodash");
var _react = require("react");
var _reactRedux = require("react-redux");
var _metamask = require("../ducks/metamask/metamask");
var _tokenUtil = require("../helpers/utils/token-util");
var _actions = require("../store/actions");
var _stringUtils = require("../../shared/modules/string-utils");
var _usePrevious = require("./usePrevious");
var _useTokenTracker = require("./useTokenTracker");
function useAssetDetails(tokenAddress, userAddress, transactionData) {
  const dispatch = (0, _reactRedux.useDispatch)();
  // state selectors
  const nfts = (0, _reactRedux.useSelector)(_metamask.getNfts);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const currentToken = tokens.find(token => (0, _stringUtils.isEqualCaseInsensitive)(token.address, tokenAddress));

  // in-hook state
  const [currentAsset, setCurrentAsset] = (0, _react.useState)(null);
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(currentToken ? [currentToken] : []);

  // previous state checkers
  const prevTokenAddress = (0, _usePrevious.usePrevious)(tokenAddress);
  const prevUserAddress = (0, _usePrevious.usePrevious)(userAddress);
  const prevTransactionData = (0, _usePrevious.usePrevious)(transactionData);
  const prevTokenBalance = (0, _usePrevious.usePrevious)(tokensWithBalances);
  (0, _react.useEffect)(() => {
    async function getAndSetAssetDetails() {
      dispatch((0, _actions.showLoadingIndication)());
      const assetDetails = await (0, _tokenUtil.getAssetDetails)(tokenAddress, userAddress, transactionData, nfts);
      setCurrentAsset(assetDetails);
      dispatch((0, _actions.hideLoadingIndication)());
    }
    if (tokenAddress !== prevTokenAddress || userAddress !== prevUserAddress || transactionData !== prevTransactionData || prevTokenBalance && prevTokenBalance !== tokensWithBalances) {
      getAndSetAssetDetails();
    }
  }, [dispatch, prevTokenAddress, prevTransactionData, prevUserAddress, tokenAddress, userAddress, transactionData, nfts, tokensWithBalances, prevTokenBalance]);
  if (currentAsset) {
    const {
      standard,
      symbol,
      image,
      name,
      balance,
      tokenId,
      toAddress,
      tokenAmount,
      decimals
    } = currentAsset;
    return {
      toAddress,
      tokenId,
      decimals,
      tokenAmount,
      assetAddress: tokenAddress,
      assetStandard: standard,
      tokenSymbol: symbol ?? '',
      tokenImage: image,
      userBalance: balance,
      assetName: name
    };
  }
  return {};
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useAssetDetails.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js", {"../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","./useTimeout":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTimeout.js","copy-to-clipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseCopyToClipboard.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCopyToClipboard = useCopyToClipboard;
var _react = require("react");
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _time = require("../../shared/constants/time");
var _useTimeout = require("./useTimeout");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * useCopyToClipboard
 *
 * @param {number} [delay=3000] - delay in ms
 * @returns {[boolean, Function]}
 */
const DEFAULT_DELAY = _time.SECOND * 3;
function useCopyToClipboard(delay = DEFAULT_DELAY) {
  const [copied, setCopied] = (0, _react.useState)(false);
  const startTimeout = (0, _useTimeout.useTimeout)(() => {
    (0, _copyToClipboard.default)(' ');
    setCopied(false);
  }, delay, false);
  const handleCopy = (0, _react.useCallback)(text => {
    setCopied(true);
    startTimeout();
    (0, _copyToClipboard.default)(text);
  }, [startTimeout]);
  return [copied, handleCopy];
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useCopyToClipboard.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCurrencyDisplay.js", {"../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseCurrencyDisplay.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCurrencyDisplay = useCurrencyDisplay;
var _react = require("react");
var _reactRedux = require("react-redux");
var _confirmTx = require("../helpers/utils/confirm-tx.util");
var _selectors = require("../selectors");
var _metamask = require("../ducks/metamask/metamask");
var _conversion = require("../../shared/modules/conversion.utils");
var _network = require("../../shared/constants/network");
var _Numeric = require("../../shared/modules/Numeric");
var _common = require("../../shared/constants/common");
/**
 * Defines the shape of the options parameter for useCurrencyDisplay
 *
 * @typedef {object} UseCurrencyOptions
 * @property {string} [displayValue] - When present is used in lieu of formatting the inputValue
 * @property {string} [prefix] - String to prepend to the final result
 * @property {number} [numberOfDecimals] - Number of significant decimals to display
 * @property {string} [denomination] - Denomination (wei, gwei) to convert to for display
 * @property {string} [currency] - Currency type to convert to. Will override nativeCurrency
 */

/**
 * Defines the return shape of the second value in the tuple
 *
 * @typedef {object} CurrencyDisplayParts
 * @property {string} [prefix] - string to prepend to the value for display
 * @property {string} value - string representing the value, formatted for display
 * @property {string} [suffix] - string to append to the value for display
 */

/**
 * useCurrencyDisplay hook
 *
 * Given a hexadecimal encoded value string and an object of parameters used for formatting the
 * display, produce both a fully formed string and the pieces of that string used for displaying
 * the currency to the user
 *
 * @param {string} inputValue - The value to format for display
 * @param {UseCurrencyOptions} opts - An object for options to format the inputValue
 * @returns {[string, CurrencyDisplayParts]}
 */
function useCurrencyDisplay(inputValue, {
  displayValue,
  prefix,
  numberOfDecimals,
  denomination,
  currency,
  ...opts
}) {
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const isUserPreferredCurrency = currency === currentCurrency;
  const value = (0, _react.useMemo)(() => {
    if (displayValue) {
      return displayValue;
    }
    if (currency === nativeCurrency || !isUserPreferredCurrency && !nativeCurrency) {
      return new _Numeric.Numeric(inputValue, 16, _common.EtherDenomination.WEI).toDenomination(denomination || _common.EtherDenomination.ETH).round(numberOfDecimals || 2).toBase(10).toString();
    } else if (isUserPreferredCurrency && conversionRate) {
      return (0, _confirmTx.formatCurrency)((0, _conversion.getValueFromWeiHex)({
        value: inputValue,
        fromCurrency: nativeCurrency,
        toCurrency: currency,
        conversionRate,
        numberOfDecimals: numberOfDecimals || 2,
        toDenomination: denomination
      }), currency);
    }
    return null;
  }, [inputValue, nativeCurrency, conversionRate, displayValue, numberOfDecimals, denomination, currency, isUserPreferredCurrency]);
  let suffix;
  if (!opts.hideLabel) {
    // if the currency we are displaying is the native currency of one of our preloaded test-nets (goerli, sepolia etc.)
    // then we allow lowercase characters, otherwise we force to uppercase any suffix passed as a currency
    const currencyTickerSymbol = Object.values(_network.TEST_NETWORK_TICKER_MAP).includes(currency) ? currency : currency === null || currency === void 0 ? void 0 : currency.toUpperCase();
    suffix = opts.suffix || currencyTickerSymbol;
  }
  return [`${prefix || ''}${value}${suffix ? ` ${suffix}` : ''}`, {
    prefix,
    value,
    suffix
  }];
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useCurrencyDisplay.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCurrentAsset.js", {"../../shared/constants/swaps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\swaps.ts","../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseCurrentAsset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCurrentAsset = useCurrentAsset;
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _metamask = require("../ducks/metamask/metamask");
var _selectors = require("../selectors");
var _routes = require("../helpers/constants/routes");
var _swaps = require("../../shared/constants/swaps");
var _stringUtils = require("../../shared/modules/string-utils");
/**
 * Returns a token object for the asset that is currently being viewed.
 * Will return the default token object for the current chain when the
 * user is viewing either the primary, unfiltered, activity list or the
 * default token asset page.
 *
 * @returns {__import__('./useTokenDisplayValue').Token}
 */
function useCurrentAsset() {
  var _match$params;
  // To determine which primary currency to display for swaps transactions we need to be aware
  // of which asset, if any, we are viewing at present
  const match = (0, _reactRouterDom.useRouteMatch)({
    path: `${_routes.ASSET_ROUTE}/:asset`,
    exact: true,
    strict: true
  });
  const tokenAddress = match === null || match === void 0 ? void 0 : (_match$params = match.params) === null || _match$params === void 0 ? void 0 : _match$params.asset;
  const knownTokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const token = tokenAddress && knownTokens.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress));
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  return token ?? (_swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId] || _swaps.ETH_SWAPS_TOKEN_OBJECT);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useCurrentAsset.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useDraftTransactionWithTxParams.js", {"../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseDraftTransactionWithTxParams.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDraftTransactionWithTxParams = void 0;
var _reactRedux = require("react-redux");
var _send = require("../ducks/send");
var _selectors = require("../selectors");
/**
 * Returns an object that resembles the txData.txParams from the Transactions state.
 * While processing gas details for send transaction and edit transaction,
 * the gas data from draftTransaction and unapprovedTx has to be reorganized
 * to mimic the txdata.txParam from a confirmTransaction
 *
 * @returns {object} The transaction data
 */
const useDraftTransactionWithTxParams = () => {
  const draftTransaction = (0, _reactRedux.useSelector)(_send.getCurrentDraftTransaction);
  const unapprovedTxs = (0, _reactRedux.useSelector)(_selectors.getUnapprovedTransactions);
  let transactionData = {};
  if (Object.keys(draftTransaction).length !== 0) {
    var _draftTransaction$gas, _editingTransaction$t, _draftTransaction$gas2, _editingTransaction$t2, _editingTransaction$t3, _draftTransaction$gas3, _editingTransaction$t4, _editingTransaction$t5, _draftTransaction$gas4, _draftTransaction$amo;
    const editingTransaction = unapprovedTxs[draftTransaction.id];
    transactionData = {
      txParams: {
        gasPrice: (_draftTransaction$gas = draftTransaction.gas) === null || _draftTransaction$gas === void 0 ? void 0 : _draftTransaction$gas.gasPrice,
        gas: editingTransaction !== null && editingTransaction !== void 0 && editingTransaction.userEditedGasLimit ? editingTransaction === null || editingTransaction === void 0 ? void 0 : (_editingTransaction$t = editingTransaction.txParams) === null || _editingTransaction$t === void 0 ? void 0 : _editingTransaction$t.gas : (_draftTransaction$gas2 = draftTransaction.gas) === null || _draftTransaction$gas2 === void 0 ? void 0 : _draftTransaction$gas2.gasLimit,
        maxFeePerGas: editingTransaction !== null && editingTransaction !== void 0 && (_editingTransaction$t2 = editingTransaction.txParams) !== null && _editingTransaction$t2 !== void 0 && _editingTransaction$t2.maxFeePerGas ? editingTransaction === null || editingTransaction === void 0 ? void 0 : (_editingTransaction$t3 = editingTransaction.txParams) === null || _editingTransaction$t3 === void 0 ? void 0 : _editingTransaction$t3.maxFeePerGas : (_draftTransaction$gas3 = draftTransaction.gas) === null || _draftTransaction$gas3 === void 0 ? void 0 : _draftTransaction$gas3.maxFeePerGas,
        maxPriorityFeePerGas: editingTransaction !== null && editingTransaction !== void 0 && (_editingTransaction$t4 = editingTransaction.txParams) !== null && _editingTransaction$t4 !== void 0 && _editingTransaction$t4.maxPriorityFeePerGas ? editingTransaction === null || editingTransaction === void 0 ? void 0 : (_editingTransaction$t5 = editingTransaction.txParams) === null || _editingTransaction$t5 === void 0 ? void 0 : _editingTransaction$t5.maxPriorityFeePerGas : (_draftTransaction$gas4 = draftTransaction.gas) === null || _draftTransaction$gas4 === void 0 ? void 0 : _draftTransaction$gas4.maxPriorityFeePerGas,
        value: (_draftTransaction$amo = draftTransaction.amount) === null || _draftTransaction$amo === void 0 ? void 0 : _draftTransaction$amo.value,
        type: draftTransaction.transactionType
      },
      userFeeLevel: editingTransaction === null || editingTransaction === void 0 ? void 0 : editingTransaction.userFeeLevel
    };
  }
  return transactionData;
};
exports.useDraftTransactionWithTxParams = useDraftTransactionWithTxParams;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useDraftTransactionWithTxParams.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useEqualityCheck.js", {"lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseEqualityCheck.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEqualityCheck = useEqualityCheck;
var _react = require("react");
var _lodash = require("lodash");
/**
 * Given a value and a function to determine equality, return a
 * referentially equal value if the equality function returns true.
 * This hook is helpful in avoiding re-renders and effects running
 * based on an object or value that always changes references but
 * infrequently changes it's value. By default, uses isEqual from
 * lodash. This is typically only useful with objects and arrays.
 *
 * @param {T} value - any value to check equality of
 * @param {(T, T) => boolean} equalityFn - A function to determine equality
 * @returns {T}
 */
function useEqualityCheck(value, equalityFn = _lodash.isEqual) {
  const [computedValue, setComputedValue] = (0, _react.useState)(value);
  (0, _react.useLayoutEffect)(() => {
    if (!equalityFn(value, computedValue)) {
      setComputedValue(value);
    }
  }, [value, equalityFn, computedValue]);
  return computedValue;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useEqualityCheck.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useEthFiatAmount.js", {"../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseEthFiatAmount.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEthFiatAmount = useEthFiatAmount;
var _react = require("react");
var _reactRedux = require("react-redux");
var _selectors = require("../selectors");
var _confirmTx = require("../helpers/utils/confirm-tx.util");
var _metamask = require("../ducks/metamask/metamask");
var _conversion = require("../../shared/modules/conversion.utils");
/**
 * Get an Eth amount converted to fiat and formatted for display
 *
 * @param {string} [ethAmount] - The eth amount to convert
 * @param {object} [overrides] - A configuration object that allows the called to explicitly
 *                              ensure fiat is shown even if the property is not set in state.
 * @param {boolean} [overrides.showFiat] - If truthy, ensures the fiat value is shown even if the showFiat value from state is falsey
 * @param {boolean} hideCurrencySymbol - Indicates whether the returned formatted amount should include the trailing currency symbol
 * @returns {string} The formatted token amount in the user's chosen fiat currency
 */
function useEthFiatAmount(ethAmount, overrides = {}, hideCurrencySymbol) {
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const userPrefersShownFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const showFiat = overrides.showFiat ?? userPrefersShownFiat;
  const formattedFiat = (0, _react.useMemo)(() => (0, _conversion.decEthToConvertedCurrency)(ethAmount, currentCurrency, conversionRate), [conversionRate, currentCurrency, ethAmount]);
  if (!showFiat || currentCurrency.toUpperCase() === 'ETH' || conversionRate <= 0 || ethAmount === undefined) {
    return undefined;
  }
  return hideCurrencySymbol ? (0, _confirmTx.formatCurrency)(formattedFiat, currentCurrency) : `${(0, _confirmTx.formatCurrency)(formattedFiat, currentCurrency)} ${currentCurrency.toUpperCase()}`;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useEthFiatAmount.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js", {"../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","./useSafeGasEstimatePolling":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useSafeGasEstimatePolling.js","lodash/isEqual":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\isEqual.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseGasFeeEstimates.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasFeeEstimates = useGasFeeEstimates;
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _reactRedux = require("react-redux");
var _metamask = require("../ducks/metamask/metamask");
var _useSafeGasEstimatePolling = require("./useSafeGasEstimatePolling");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @typedef {object} GasEstimates
 * @property {__import__(
 *   '@metamask/gas-fee-controller'
 * ).GasFeeState['gasFeeEstimates']} gasFeeEstimates - The estimate object
 * @property {object} gasEstimateType - The type of estimate provided
 * @property {boolean} isGasEstimateLoading - indicates whether the gas
 *  estimates are currently loading.
 * @property {boolean} isNetworkBusy - indicates whether the network is busy.
 */

/**
 * Gets the current gasFeeEstimates from state and begins polling for new
 * estimates. When this hook is removed from the tree it will signal to the
 * GasFeeController that it is done requiring new gas estimates. Also checks
 * the returned gas estimate for validity on the current network.
 *
 * @returns {GasEstimates} GasEstimates object
 */
function useGasFeeEstimates() {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const gasFeeEstimates = (0, _reactRedux.useSelector)(_metamask.getGasFeeEstimates, _isEqual.default);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const isNetworkBusy = (0, _reactRedux.useSelector)(_metamask.getIsNetworkBusy);
  (0, _useSafeGasEstimatePolling.useSafeGasEstimatePolling)();
  return {
    gasFeeEstimates,
    gasEstimateType,
    isGasEstimatesLoading,
    isNetworkBusy
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useGasFeeEstimates.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js", {"../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseI18nContext.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useI18nContext = useI18nContext;
var _react = require("react");
var _i18n = require("../contexts/i18n");
/**
 * useI18ncContext
 *
 * A time saving shortcut to using useContext + I18ncontext in many
 * different places.
 *
 * @returns {Function} I18n function from contexts/I18n.js
 */
function useI18nContext() {
  return (0, _react.useContext)(_i18n.I18nContext);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useI18nContext.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useIncrementedGasFees.js", {"../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","../helpers/utils/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\gas.js","./useGasFeeEstimates":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseIncrementedGasFees.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIncrementedGasFees = useIncrementedGasFees;
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _react = require("react");
var _conversion = require("../../shared/modules/conversion.utils");
var _transaction = require("../../shared/modules/transaction.utils");
var _gas = require("../helpers/utils/gas");
var _useGasFeeEstimates = require("./useGasFeeEstimates");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Helper that returns the higher of two options for a new gas fee:
 * The original fee + 10% or
 * the current medium suggested fee from our gas estimation api
 *
 * @param {string} originalFee - hexWei vale of the original fee (maxFee or maxPriority)
 * @param {string} currentEstimate - decGwei value of the current medium gasFee estimate (maxFee or maxPriorityfee)
 * @returns {string} hexWei value of the higher of the two inputs.
 */
function getHighestIncrementedFee(originalFee, currentEstimate) {
  const buffedOriginalHexWei = (0, _gas.addTenPercentAndRound)(originalFee);
  const currentEstimateHexWei = (0, _conversion.decGWEIToHexWEI)(currentEstimate);
  return new _bignumber.default(buffedOriginalHexWei, 16).greaterThan(new _bignumber.default(currentEstimateHexWei, 16)) ? buffedOriginalHexWei : currentEstimateHexWei;
}

/**
 * When initializing cancellations or speed ups we need to set the baseline
 * gas fees to be 10% higher, which is the bare minimum that the network will
 * accept for transactions of the same nonce. Anything lower than this will be
 * discarded by the network to avoid DoS attacks. This hook returns an object
 * that either has gasPrice or maxFeePerGas/maxPriorityFeePerGas specified. In
 * addition the gasLimit will also be included.
 *
 * @param {} transaction
 * @returns {__import__(
 *   '../../app/scripts/controllers/transactions'
 * ).CustomGasSettings} Gas settings for cancellations/speed ups
 */
function useIncrementedGasFees(transaction) {
  const {
    gasFeeEstimates = {}
  } = (0, _useGasFeeEstimates.useGasFeeEstimates)();

  // We memoize this value so that it can be relied upon in other hooks.
  const customGasSettings = (0, _react.useMemo)(() => {
    var _transaction$txParams, _transaction$txParams2, _gasFeeEstimates$medi, _gasFeeEstimates$medi2;
    // This hook is called indiscriminantly on all transactions appearing in
    // the activity list. This includes transitional items such as signature
    // requests. These types of "transactions" are not really transactions and
    // do not have txParams. This is why we use optional chaining on the
    // txParams object in this hook.
    const temporaryGasSettings = {
      gasLimit: (_transaction$txParams = transaction.txParams) === null || _transaction$txParams === void 0 ? void 0 : _transaction$txParams.gas,
      gas: (_transaction$txParams2 = transaction.txParams) === null || _transaction$txParams2 === void 0 ? void 0 : _transaction$txParams2.gas
    };
    const suggestedMaxFeePerGas = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$medi = gasFeeEstimates.medium) === null || _gasFeeEstimates$medi === void 0 ? void 0 : _gasFeeEstimates$medi.suggestedMaxFeePerGas) ?? '0';
    const suggestedMaxPriorityFeePerGas = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$medi2 = gasFeeEstimates.medium) === null || _gasFeeEstimates$medi2 === void 0 ? void 0 : _gasFeeEstimates$medi2.suggestedMaxPriorityFeePerGas) ?? '0';
    if ((0, _transaction.isEIP1559Transaction)(transaction)) {
      var _transaction$txParams3, _transaction$txParams4;
      const transactionMaxFeePerGas = (_transaction$txParams3 = transaction.txParams) === null || _transaction$txParams3 === void 0 ? void 0 : _transaction$txParams3.maxFeePerGas;
      const transactionMaxPriorityFeePerGas = (_transaction$txParams4 = transaction.txParams) === null || _transaction$txParams4 === void 0 ? void 0 : _transaction$txParams4.maxPriorityFeePerGas;
      temporaryGasSettings.maxFeePerGas = transactionMaxFeePerGas === undefined || transactionMaxFeePerGas.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionMaxFeePerGas, suggestedMaxFeePerGas);
      temporaryGasSettings.maxPriorityFeePerGas = transactionMaxPriorityFeePerGas === undefined || transactionMaxPriorityFeePerGas.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionMaxPriorityFeePerGas, suggestedMaxPriorityFeePerGas);
    } else {
      var _transaction$txParams5;
      const transactionGasPrice = (_transaction$txParams5 = transaction.txParams) === null || _transaction$txParams5 === void 0 ? void 0 : _transaction$txParams5.gasPrice;
      temporaryGasSettings.gasPrice = transactionGasPrice === undefined || transactionGasPrice.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionGasPrice, suggestedMaxFeePerGas);
    }
    return temporaryGasSettings;
  }, [transaction, gasFeeEstimates]);
  return customGasSettings;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useIncrementedGasFees.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useNftsCollections.js", {"../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","./usePrevious":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\usePrevious.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseNftsCollections.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNftsCollections = useNftsCollections;
var _react = require("react");
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _metamask = require("../ducks/metamask/metamask");
var _selectors = require("../selectors");
var _usePrevious = require("./usePrevious");
var _useI18nContext = require("./useI18nContext");
function useNftsCollections() {
  const t = (0, _useI18nContext.useI18nContext)();
  const previouslyOwnedText = t('nftsPreviouslyOwned');
  const unknownCollectionText = t('unknownCollection');
  const [collections, setCollections] = (0, _react.useState)({});
  const [previouslyOwnedCollection, setPreviouslyOwnedCollection] = (0, _react.useState)({
    collectionName: previouslyOwnedText,
    nfts: []
  });
  const nfts = (0, _reactRedux.useSelector)(_metamask.getNfts);
  const [nftsLoading, setNftsLoading] = (0, _react.useState)(() => (nfts === null || nfts === void 0 ? void 0 : nfts.length) >= 0);
  const selectedAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const nftContracts = (0, _reactRedux.useSelector)(_metamask.getNftContracts);
  const prevNfts = (0, _usePrevious.usePrevious)(nfts);
  const prevChainId = (0, _usePrevious.usePrevious)(chainId);
  const prevSelectedAddress = (0, _usePrevious.usePrevious)(selectedAddress);
  (0, _react.useEffect)(() => {
    const getCollections = () => {
      setNftsLoading(true);
      if (selectedAddress === undefined || chainId === undefined) {
        return;
      }
      const newCollections = {};
      const newPreviouslyOwnedCollections = {
        collectionName: previouslyOwnedText,
        nfts: []
      };
      nfts.forEach(nft => {
        if ((nft === null || nft === void 0 ? void 0 : nft.isCurrentlyOwned) === false) {
          newPreviouslyOwnedCollections.nfts.push(nft);
        } else if (newCollections[nft.address]) {
          newCollections[nft.address].nfts.push(nft);
        } else {
          const collectionContract = nftContracts.find(({
            address
          }) => address === nft.address);
          newCollections[nft.address] = {
            collectionName: (collectionContract === null || collectionContract === void 0 ? void 0 : collectionContract.name) || unknownCollectionText,
            collectionImage: (collectionContract === null || collectionContract === void 0 ? void 0 : collectionContract.logo) || nft.image,
            nfts: [nft]
          };
        }
      });
      setCollections(newCollections);
      setPreviouslyOwnedCollection(newPreviouslyOwnedCollections);
      setNftsLoading(false);
    };
    if (!(0, _lodash.isEqual)(prevNfts, nfts) || !(0, _lodash.isEqual)(prevSelectedAddress, selectedAddress) || !(0, _lodash.isEqual)(prevChainId, chainId)) {
      getCollections();
    }
  }, [nfts, prevNfts, nftContracts, setNftsLoading, chainId, prevChainId, selectedAddress, prevSelectedAddress]);
  return {
    nftsLoading,
    collections,
    previouslyOwnedCollection
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useNftsCollections.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useOriginMetadata.js", {"../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","@metamask/subject-metadata-controller":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\subject-metadata-controller\\dist\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseOriginMetadata.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOriginMetadata = useOriginMetadata;
var _subjectMetadataController = require("@metamask/subject-metadata-controller");
var _reactRedux = require("react-redux");
var _selectors = require("../selectors");
/**
 * @typedef {object} OriginMetadata
 * @property {string} hostname - The hostname of the origin (host + port)
 * @property {string} origin - The original origin string itself
 * @property {string} [iconUrl] - The origin's site icon URL, if available
 * @property {string} [name] - The registered name of the origin if available
 */

/**
 * Gets origin metadata from redux and formats it appropriately.
 *
 * @param {string} origin - The fully formed url of the site interacting with
 * MetaMask
 * @returns {OriginMetadata | null} The origin metadata available for the
 * current origin
 */
function useOriginMetadata(origin) {
  const targetSubjectMetadata = (0, _reactRedux.useSelector)(state => (0, _selectors.getTargetSubjectMetadata)(state, origin));
  if (!origin) {
    return null;
  }
  let minimumOriginMetadata = null;
  try {
    const url = new URL(origin);
    minimumOriginMetadata = {
      host: url.host,
      hostname: url.hostname,
      origin,
      subjectType: _subjectMetadataController.SubjectType.Unknown
    };
  } catch (_) {
    // do nothing
  }
  if (targetSubjectMetadata && minimumOriginMetadata) {
    return {
      ...minimumOriginMetadata,
      ...targetSubjectMetadata
    };
  } else if (targetSubjectMetadata) {
    return targetSubjectMetadata;
  }
  return minimumOriginMetadata;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useOriginMetadata.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\usePrevious.js", {"react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CusePrevious.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePrevious = usePrevious;
var _react = require("react");
function usePrevious(value) {
  const ref = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\usePrevious.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useRouting.js", {"../ducks/history/history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\history\\history.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseRouting.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRouting = useRouting;
var _react = require("react");
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _history = require("../ducks/history/history");
/**
 * useRouting - hook for re-uable reoting related code.
 */

function useRouting() {
  const history = (0, _reactRouterDom.useHistory)();
  const mostRecentOverviewPage = (0, _reactRedux.useSelector)(_history.getMostRecentOverviewPage);
  const navigateToMostRecentOverviewPage = (0, _react.useCallback)(() => {
    history.push(mostRecentOverviewPage);
  }, [history, mostRecentOverviewPage]);
  return {
    navigateToMostRecentOverviewPage
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useRouting.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useSafeGasEstimatePolling.js", {"../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseSafeGasEstimatePolling.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSafeGasEstimatePolling = useSafeGasEstimatePolling;
var _react = require("react");
var _actions = require("../store/actions");
/**
 * Provides a reusable hook that can be used for safely updating the polling
 * data in the gas fee controller. It makes a request to get estimates and
 * begin polling, keeping track of the poll token for the lifetime of the hook.
 * It then disconnects polling upon unmount. If the hook is unmounted while waiting
 * for `getGasFeeEstimatesAndStartPolling` to resolve, the `active` flag ensures
 * that a call to disconnect happens after promise resolution.
 */
function useSafeGasEstimatePolling() {
  (0, _react.useEffect)(() => {
    let active = true;
    let pollToken;
    const cleanup = () => {
      active = false;
      if (pollToken) {
        (0, _actions.disconnectGasFeeEstimatePoller)(pollToken);
        (0, _actions.removePollingTokenFromAppState)(pollToken);
      }
    };
    (0, _actions.getGasFeeEstimatesAndStartPolling)().then(newPollToken => {
      if (active) {
        pollToken = newPollToken;
        (0, _actions.addPollingTokenToAppState)(pollToken);
      } else {
        (0, _actions.disconnectGasFeeEstimatePoller)(newPollToken);
        (0, _actions.removePollingTokenFromAppState)(pollToken);
      }
    });
    window.addEventListener('beforeunload', cleanup);
    return () => {
      cleanup();
      window.removeEventListener('beforeunload', cleanup);
    };
  }, []);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useSafeGasEstimatePolling.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useSegmentContext.js", {"../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseSegmentContext.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSegmentContext = useSegmentContext;
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _routes = require("../helpers/constants/routes");
var _selectors = require("../selectors");
const PATHS_TO_CHECK = Object.keys(_routes.PATH_NAME_MAP);

/**
 * Returns the current page if it matches our route map, as well as the origin
 * if there is a confirmation that was triggered by a dapp. These values are
 * not required but add valuable context to events, and should be included in
 * the context object on the event payload.
 *
 * @returns {{
 *  page?: MetaMetricsPageObject
 *  referrer?: MetaMetricsReferrerObject
 * }}
 */
function useSegmentContext() {
  const match = (0, _reactRouterDom.useRouteMatch)({
    path: PATHS_TO_CHECK,
    exact: true,
    strict: true
  });
  const txData = (0, _reactRedux.useSelector)(_selectors.txDataSelector) || {};
  const confirmTransactionOrigin = txData.origin;
  const referrer = confirmTransactionOrigin ? {
    url: confirmTransactionOrigin
  } : undefined;
  const page = match ? {
    path: match.path,
    title: _routes.PATH_NAME_MAP[match.path],
    url: match.path
  } : undefined;
  return {
    page,
    referrer
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useSegmentContext.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useShouldAnimateGasEstimations.js", {"../ducks/app/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\app\\app.ts","./useGasFeeEstimates":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useGasFeeEstimates.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseShouldAnimateGasEstimations.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useShouldAnimateGasEstimations = useShouldAnimateGasEstimations;
var _react = require("react");
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _app = require("../ducks/app/app");
var _useGasFeeEstimates = require("./useGasFeeEstimates");
function useShouldAnimateGasEstimations() {
  const {
    isGasEstimatesLoading,
    gasFeeEstimates
  } = (0, _useGasFeeEstimates.useGasFeeEstimates)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const isGasLoadingAnimationActive = (0, _reactRedux.useSelector)(_app.getGasLoadingAnimationIsShowing);

  // Do the animation only when gas prices have changed...
  const lastGasEstimates = (0, _react.useRef)(gasFeeEstimates);
  const gasEstimatesChanged = !(0, _lodash.isEqual)(lastGasEstimates.current, gasFeeEstimates);

  // ... and only if gas didn't just load
  // Removing this line will cause the initial loading screen to stay empty
  const gasJustLoaded = (0, _lodash.isEqual)(lastGasEstimates.current, {});
  if (gasEstimatesChanged) {
    lastGasEstimates.current = gasFeeEstimates;
  }
  const showLoadingAnimation = isGasEstimatesLoading || gasEstimatesChanged && !gasJustLoaded;
  (0, _react.useEffect)(() => {
    if (isGasLoadingAnimationActive === false && showLoadingAnimation === true) {
      dispatch((0, _app.toggleGasLoadingAnimation)(true));
    }
  }, [dispatch, isGasLoadingAnimationActive, showLoadingAnimation]);
  (0, _react.useEffect)(() => {
    let timer;
    if (isGasLoadingAnimationActive && !showLoadingAnimation) {
      timer = setTimeout(() => {
        dispatch((0, _app.toggleGasLoadingAnimation)(false));
      }, 2000);
    }
    return () => {
      if (timer) {
        clearTimeout(timer);
      }
    };
  }, [dispatch, isGasLoadingAnimationActive, showLoadingAnimation]);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useShouldAnimateGasEstimations.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useShouldShowSpeedUp.js", {"../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseShouldShowSpeedUp.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useShouldShowSpeedUp = useShouldShowSpeedUp;
var _react = require("react");
var _time = require("../../shared/constants/time");
/**
 * Evaluates whether the transaction is eligible to be sped up, and registers
 * an effect to check the logic again after the transaction has surpassed 5 seconds
 * of queue time.
 *
 * @param {object} transactionGroup - the transaction group to check against
 * @param {boolean} isEarliestNonce - Whether this group is currently the earliest nonce
 */
function useShouldShowSpeedUp(transactionGroup, isEarliestNonce) {
  const {
    transactions,
    hasRetried
  } = transactionGroup;
  const [earliestTransaction = {}] = transactions;
  const {
    submittedTime
  } = earliestTransaction;
  const [speedUpEnabled, setSpeedUpEnabled] = (0, _react.useState)(() => {
    return Date.now() - submittedTime > 5000 && isEarliestNonce && !hasRetried;
  });
  (0, _react.useEffect)(() => {
    // because this hook is optimized to only run on changes we have to
    // key into the changing time delta between submittedTime and now()
    // and if the status of the transaction changes based on that difference
    // trigger a setState call to tell react to re-render. This effect will
    // also immediately set retryEnabled and not create a timeout if the
    // condition is already met. This effect will run anytime the variables
    // for determining enabled status change
    let timeoutId;
    if (!hasRetried && isEarliestNonce && !speedUpEnabled) {
      if (Date.now() - submittedTime > _time.SECOND * 5) {
        setSpeedUpEnabled(true);
      } else {
        timeoutId = setTimeout(() => {
          setSpeedUpEnabled(true);
          clearTimeout(timeoutId);
        }, 5001 - (Date.now() - submittedTime));
      }
    }
    // Anytime the effect is re-ran, make sure to remove a previously set timeout
    // so as to avoid multiple timers potentially overlapping
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [submittedTime, speedUpEnabled, hasRetried, isEarliestNonce]);
  return speedUpEnabled;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useShouldShowSpeedUp.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useSimulationFailureWarning.js", {"../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseSimulationFailureWarning.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSimulationFailureWarning = useSimulationFailureWarning;
var _reactRedux = require("react-redux");
var _selectors = require("../selectors");
/**
 * Returns the simulation failure warning if a simulaiton error
 * is present and user didn't acknowledge gas missing
 *
 * @param {boolean} userAcknowledgedGasMissing - Whether the user acknowledge gas missing
 * @returns {boolean} simulation failure warning
 */

function useSimulationFailureWarning(userAcknowledgedGasMissing) {
  const txData = (0, _reactRedux.useSelector)(_selectors.txDataSelector) || {};
  const hasSimulationError = Boolean(txData.simulationFails);
  const renderSimulationFailureWarning = hasSimulationError && !userAcknowledgedGasMissing;
  return renderSimulationFailureWarning;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useSimulationFailureWarning.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useSwappedTokenValue.js", {"../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../shared/modules/swaps.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\swaps.utils.js","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./useTokenFiatAmount":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseSwappedTokenValue.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSwappedTokenValue = useSwappedTokenValue;
var _reactRedux = require("react-redux");
var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");
var _transaction = require("../../shared/constants/transaction");
var _swaps = require("../../shared/modules/swaps.utils");
var _selectors = require("../selectors");
var _useTokenFiatAmount = require("./useTokenFiatAmount");
/**
 * @typedef {object} SwappedTokenValue
 * @property {string} swapTokenValue - a primary currency string formatted for display
 * @property {string} swapTokenFiatAmount - a secondary currency string formatted for display
 * @property {boolean} isViewingReceivedTokenFromSwap - true if user is on the asset page for the
 *                                                      destination/received asset in a swap.
 */

/**
 * A Swap transaction group's primaryTransaction contains details of the swap,
 * including the source (from) and destination (to) token type (ETH, DAI, etc..)
 * When viewing an asset page that is not for the current chain's default token, we
 * need to determine if that asset is the token that was received (destination) from
 * the swap. In that circumstance we would want to show the primaryCurrency in the
 * activity list that is most relevant for that token (- 1000 DAI, for example, when
 * swapping DAI for ETH).
 *
 * @param {__import__('../selectors').transactionGroup} transactionGroup - Group of transactions by nonce
 * @param {__import__('./useTokenDisplayValue').Token} currentAsset - The current asset the user is looking at
 * @returns {SwappedTokenValue}
 */
function useSwappedTokenValue(transactionGroup, currentAsset) {
  const {
    symbol,
    decimals,
    address
  } = currentAsset;
  const {
    primaryTransaction,
    initialTransaction
  } = transactionGroup;
  const {
    type
  } = initialTransaction;
  const {
    from: senderAddress
  } = initialTransaction.txParams || {};
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const isViewingReceivedTokenFromSwap = (currentAsset === null || currentAsset === void 0 ? void 0 : currentAsset.symbol) === primaryTransaction.destinationTokenSymbol || (0, _swaps.isSwapsDefaultTokenAddress)(currentAsset.address, chainId) && (0, _swaps.isSwapsDefaultTokenSymbol)(primaryTransaction.destinationTokenSymbol, chainId);
  const swapTokenValue = type === _transaction.TransactionType.swap && isViewingReceivedTokenFromSwap ? (0, _transactionsControllerUtils.getSwapsTokensReceivedFromTxMeta)(primaryTransaction.destinationTokenSymbol, initialTransaction, address, senderAddress, decimals, null, chainId) : type === _transaction.TransactionType.swap && primaryTransaction.swapTokenValue;
  const isNegative = typeof swapTokenValue === 'string' ? Math.sign(swapTokenValue) === -1 : false;
  const _swapTokenFiatAmount = (0, _useTokenFiatAmount.useTokenFiatAmount)(address, swapTokenValue || '', symbol);
  const swapTokenFiatAmount = swapTokenValue && isViewingReceivedTokenFromSwap && _swapTokenFiatAmount;
  return {
    swapTokenValue,
    swapTokenFiatAmount,
    isViewingReceivedTokenFromSwap,
    isNegative
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useSwappedTokenValue.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTimeout.js", {"react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTimeout.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTimeout = useTimeout;
var _react = require("react");
/**
 * useTimeout
 *
 * @param {Function} cb - callback function inside setTimeout
 * @param {number} delay - delay in ms
 * @param {boolean} [immediate] - determines whether the timeout is invoked immediately
 * @returns {Function|undefined}
 */
function useTimeout(cb, delay, immediate = true) {
  const saveCb = (0, _react.useRef)();
  const [timeoutId, setTimeoutId] = (0, _react.useState)(null);
  (0, _react.useEffect)(() => {
    saveCb.current = cb;
  }, [cb]);
  (0, _react.useEffect)(() => {
    if (timeoutId !== 'start') {
      return undefined;
    }
    const id = setTimeout(() => {
      saveCb.current();
    }, delay);
    setTimeoutId(id);
    return () => {
      clearTimeout(timeoutId);
    };
  }, [delay, timeoutId]);
  const startTimeout = (0, _react.useCallback)(() => {
    clearTimeout(timeoutId);
    setTimeoutId('start');
  }, [timeoutId]);
  if (immediate) {
    startTimeout();
  }
  return startTimeout;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTimeout.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenData.js", {"../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTokenData.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenData = useTokenData;
var _react = require("react");
var _transaction = require("../../shared/modules/transaction.utils");
/**
 * useTokenData
 * Given the data string from txParams return a decoded object of the details of the
 * transaction data.
 *
 * @param {string} [transactionData] - Raw data string from token transaction
 * @param {boolean} [isTokenTransaction] - Due to the nature of hooks, it isn't possible
 *                                         to conditionally call this hook. This flag will
 *                                         force this hook to return null if it set as false
 *                                         which indicates the transaction is not associated
 *                                         with a token.
 * @returns {object} Decoded token data
 */
function useTokenData(transactionData, isTokenTransaction = true) {
  return (0, _react.useMemo)(() => {
    if (!isTokenTransaction || !transactionData) {
      return null;
    }
    return (0, _transaction.parseStandardTokenTransactionData)(transactionData);
  }, [isTokenTransaction, transactionData]);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTokenData.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenDisplayValue.js", {"../../shared/lib/metamask-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","./useTokenData":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenData.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTokenDisplayValue.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenDisplayValue = useTokenDisplayValue;
var _react = require("react");
var _metamaskControllerUtils = require("../../shared/lib/metamask-controller-utils");
var _transactionsControllerUtils = require("../../shared/lib/transactions-controller-utils");
var _useTokenData = require("./useTokenData");
/**
 * Defines the shape for the Token input parameter for useTokenDisplayValue
 *
 * @typedef {object} Token
 * @property {string} symbol - The string to use as a suffix for the token (eg. DAI)
 * @property {number} decimals - The number of decimals to show when displaying this type of token
 */

/**
 * useTokenDisplayValue
 * Given the data string from txParams and a token object with symbol and decimals, return
 * a displayValue that represents a string representing that token amount as a string. Also
 * return a tokenData object for downstream usage and the suffix for the token to use as props
 * for other hooks and/or components
 *
 * @param {string} [transactionData] - Raw data string from token transaction
 * @param {Token} [token] - The token associated with this transaction
 * @param {boolean} [isTokenTransaction] - Due to the nature of hooks, it isn't possible
 *                                         to conditionally call this hook. This flag will
 *                                         force this hook to return null if it set as false
 *                                         which indicates the transaction is not associated
 *                                         with a token.
 * @returns {string} The computed displayValue of the provided transactionData and token
 */
function useTokenDisplayValue(transactionData, token, isTokenTransaction = true) {
  const tokenData = (0, _useTokenData.useTokenData)(transactionData, isTokenTransaction);
  const tokenValue = (0, _metamaskControllerUtils.getTokenValueParam)(tokenData);
  const shouldCalculateTokenValue = Boolean(
  // If we are currently processing a token transaction
  isTokenTransaction &&
  // and raw transaction data string is provided
  transactionData &&
  // and a token object has been provided
  token &&
  // and the provided token object contains a defined decimal value we need to calculate amount
  token.decimals &&
  // and we are able to parse the token detail we to calculate amount from the raw data
  tokenValue);
  const displayValue = (0, _react.useMemo)(() => {
    if (!shouldCalculateTokenValue) {
      return null;
    }
    return (0, _transactionsControllerUtils.calcTokenAmount)(tokenValue, token.decimals).toString(10);
  }, [shouldCalculateTokenValue, tokenValue, token]);
  return displayValue;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTokenDisplayValue.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js", {"../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/token-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTokenFiatAmount.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenFiatAmount = useTokenFiatAmount;
var _react = require("react");
var _reactRedux = require("react-redux");
var _selectors = require("../selectors");
var _tokenUtil = require("../helpers/utils/token-util");
var _metamask = require("../ducks/metamask/metamask");
var _stringUtils = require("../../shared/modules/string-utils");
/**
 * Get the token balance converted to fiat and formatted for display
 *
 * @param {string} [tokenAddress] - The token address
 * @param {string} [tokenAmount] - The token balance
 * @param {string} [tokenSymbol] - The token symbol
 * @param {object} [overrides] - A configuration object that allows the caller to explicitly pass an exchange rate or
 *                              ensure fiat is shown even if the property is not set in state.
 * @param {number} [overrides.exchangeRate] -  An exhchange rate to use instead of the one selected from state
 * @param {boolean} [overrides.showFiat] - If truthy, ensures the fiat value is shown even if the showFiat value from state is falsey
 * @param {boolean} hideCurrencySymbol - Indicates whether the returned formatted amount should include the trailing currency symbol
 * @returns {string} The formatted token amount in the user's chosen fiat currency
 */
function useTokenFiatAmount(tokenAddress, tokenAmount, tokenSymbol, overrides = {}, hideCurrencySymbol) {
  const contractExchangeRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _reactRedux.shallowEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const userPrefersShownFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const showFiat = overrides.showFiat ?? userPrefersShownFiat;
  const contractExchangeTokenKey = Object.keys(contractExchangeRates).find(key => (0, _stringUtils.isEqualCaseInsensitive)(key, tokenAddress));
  const tokenExchangeRate = overrides.exchangeRate ?? (contractExchangeTokenKey && contractExchangeRates[contractExchangeTokenKey]);
  const formattedFiat = (0, _react.useMemo)(() => (0, _tokenUtil.getTokenFiatAmount)(tokenExchangeRate, conversionRate, currentCurrency, tokenAmount, tokenSymbol, true, hideCurrencySymbol), [tokenExchangeRate, conversionRate, currentCurrency, tokenAmount, tokenSymbol, hideCurrencySymbol]);
  if (!showFiat || currentCurrency.toUpperCase() === tokenSymbol) {
    return undefined;
  }
  return formattedFiat;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTokenFiatAmount.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenTracker.js", {"../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./useEqualityCheck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","@metamask/eth-token-tracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\eth-token-tracker\\dist\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTokenTracker.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenTracker = useTokenTracker;
var _react = require("react");
var _ethTokenTracker = _interopRequireDefault(require("@metamask/eth-token-tracker"));
var _reactRedux = require("react-redux");
var _selectors = require("../selectors");
var _time = require("../../shared/constants/time");
var _stringUtils = require("../../shared/modules/string-utils");
var _useEqualityCheck = require("./useEqualityCheck");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function useTokenTracker(tokens, includeFailedTokens = false, hideZeroBalanceTokens = false) {
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const userAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress, _reactRedux.shallowEqual);
  const [loading, setLoading] = (0, _react.useState)(() => (tokens === null || tokens === void 0 ? void 0 : tokens.length) >= 0);
  const [tokensWithBalances, setTokensWithBalances] = (0, _react.useState)([]);
  const [error, setError] = (0, _react.useState)(null);
  const tokenTracker = (0, _react.useRef)(null);
  const memoizedTokens = (0, _useEqualityCheck.useEqualityCheck)(tokens);
  const updateBalances = (0, _react.useCallback)(tokenWithBalances => {
    const matchingTokens = hideZeroBalanceTokens ? tokenWithBalances.filter(token => Number(token.balance) > 0) : tokenWithBalances;
    // TODO: improve this pattern for adding this field when we improve support for
    // EIP721 tokens.
    const matchingTokensWithIsERC721Flag = matchingTokens.map(token => {
      const additionalTokenData = memoizedTokens.find(t => (0, _stringUtils.isEqualCaseInsensitive)(t.address, token.address));
      return {
        ...token,
        isERC721: additionalTokenData === null || additionalTokenData === void 0 ? void 0 : additionalTokenData.isERC721,
        image: additionalTokenData === null || additionalTokenData === void 0 ? void 0 : additionalTokenData.image
      };
    });
    setTokensWithBalances(matchingTokensWithIsERC721Flag);
    setLoading(false);
    setError(null);
  }, [hideZeroBalanceTokens, memoizedTokens]);
  const showError = (0, _react.useCallback)(err => {
    setError(err);
    setLoading(false);
  }, []);
  const teardownTracker = (0, _react.useCallback)(() => {
    if (tokenTracker.current) {
      tokenTracker.current.stop();
      tokenTracker.current.removeAllListeners('update');
      tokenTracker.current.removeAllListeners('error');
      tokenTracker.current = null;
    }
  }, []);
  const buildTracker = (0, _react.useCallback)((address, tokenList) => {
    // clear out previous tracker, if it exists.
    teardownTracker();
    tokenTracker.current = new _ethTokenTracker.default({
      userAddress: address,
      provider: global.ethereumProvider,
      tokens: tokenList,
      includeFailedTokens,
      pollingInterval: _time.SECOND * 8,
      balanceDecimals: 5
    });
    tokenTracker.current.on('update', updateBalances);
    tokenTracker.current.on('error', showError);
    tokenTracker.current.updateBalances();
  }, [updateBalances, includeFailedTokens, showError, teardownTracker]);

  // Effect to remove the tracker when the component is removed from DOM
  // Do not overload this effect with additional dependencies. teardownTracker
  // is the only dependency here, which itself has no dependencies and will
  // never update. The lack of dependencies that change is what confirms
  // that this effect only runs on mount/unmount
  (0, _react.useEffect)(() => {
    return teardownTracker;
  }, [teardownTracker]);

  // Effect to set loading state and initialize tracker when values change
  (0, _react.useEffect)(() => {
    // This effect will only run initially and when:
    // 1. chainId is updated,
    // 2. userAddress is changed,
    // 3. token list is updated and not equal to previous list
    // in any of these scenarios, we should indicate to the user that their token
    // values are in the process of updating by setting loading state.
    setLoading(true);
    if (!userAddress || chainId === undefined || !global.ethereumProvider) {
      // If we do not have enough information to build a TokenTracker, we exit early
      // When the values above change, the effect will be restarted. We also teardown
      // tracker because inevitably this effect will run again momentarily.
      teardownTracker();
      return;
    }
    if (memoizedTokens.length === 0) {
      // sets loading state to false and token list to empty
      updateBalances([]);
    }
    buildTracker(userAddress, memoizedTokens);
  }, [userAddress, teardownTracker, chainId, memoizedTokens, updateBalances, buildTracker]);
  return {
    loading,
    tokensWithBalances,
    error
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTokenTracker.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokensToSearch.js", {"../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../shared/constants/swaps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\swaps.ts","../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../shared/modules/swaps.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\swaps.utils.js","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../ducks/swaps/swaps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../helpers/utils/token-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./useEqualityCheck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","@metamask/assets-controllers":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\assets-controllers\\dist\\index.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTokensToSearch.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRenderableTokenData = getRenderableTokenData;
exports.useTokensToSearch = useTokensToSearch;
var _react = require("react");
var _reactRedux = require("react-redux");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _lodash = require("lodash");
var _assetsControllers = require("@metamask/assets-controllers");
var _tokenUtil = require("../helpers/utils/token-util");
var _selectors = require("../selectors");
var _metamask = require("../ducks/metamask/metamask");
var _swaps = require("../ducks/swaps/swaps");
var _swaps2 = require("../../shared/modules/swaps.utils");
var _hexstringUtils = require("../../shared/modules/hexstring-utils");
var _swaps3 = require("../../shared/constants/swaps");
var _network = require("../../shared/constants/network");
var _useEqualityCheck = require("./useEqualityCheck");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function getRenderableTokenData(token, contractExchangeRates, conversionRate, currentCurrency, chainId, tokenList) {
  var _tokenList$address$to, _tokenList$address$to2;
  const {
    symbol,
    name,
    address,
    iconUrl,
    string,
    balance,
    decimals
  } = token;
  let contractExchangeRate;
  if ((0, _swaps2.isSwapsDefaultTokenSymbol)(symbol, chainId)) {
    contractExchangeRate = 1;
  } else if (string && conversionRate > 0) {
    // This condition improves performance significantly, because it only gets a contract exchange rate
    // if a token amount is truthy and conversion rate is higher than 0.
    contractExchangeRate = contractExchangeRates[(0, _hexstringUtils.toChecksumHexAddress)(address)];
  }
  const formattedFiat = (0, _tokenUtil.getTokenFiatAmount)(contractExchangeRate, conversionRate, currentCurrency, string, symbol, true) || '';
  const rawFiat = formattedFiat ? (0, _tokenUtil.getTokenFiatAmount)(contractExchangeRate, conversionRate, currentCurrency, string, symbol, false) : '';
  const chainIdForTokenIcons = chainId === _network.CHAIN_IDS.GOERLI ? _network.CHAIN_IDS.MAINNET : chainId;
  const tokenIconUrl = symbol === _network.CURRENCY_SYMBOLS.ETH && chainId === _network.CHAIN_IDS.MAINNET || symbol === _network.CURRENCY_SYMBOLS.ETH && chainId === _network.CHAIN_IDS.GOERLI || symbol === _network.CURRENCY_SYMBOLS.BNB && chainId === _network.CHAIN_IDS.BSC || symbol === _network.CURRENCY_SYMBOLS.MATIC && chainId === _network.CHAIN_IDS.POLYGON || symbol === _network.CURRENCY_SYMBOLS.AVALANCHE && chainId === _network.CHAIN_IDS.AVALANCHE || symbol === _network.CURRENCY_SYMBOLS.ETH && chainId === _network.CHAIN_IDS.OPTIMISM || symbol === _network.CURRENCY_SYMBOLS.ETH && chainId === _network.CHAIN_IDS.ARBITRUM ? iconUrl : (0, _assetsControllers.formatIconUrlWithProxy)({
    chainId: chainIdForTokenIcons,
    tokenAddress: address || ''
  });
  const usedIconUrl = tokenIconUrl || (token === null || token === void 0 ? void 0 : token.image);
  return {
    ...token,
    primaryLabel: symbol,
    secondaryLabel: name || ((_tokenList$address$to = tokenList[address === null || address === void 0 ? void 0 : address.toLowerCase()]) === null || _tokenList$address$to === void 0 ? void 0 : _tokenList$address$to.name),
    rightPrimaryLabel: string && `${new _bignumber.default(string).round(6).toString()} ${symbol}`,
    rightSecondaryLabel: formattedFiat,
    iconUrl: usedIconUrl,
    identiconAddress: usedIconUrl ? null : address,
    balance,
    decimals,
    name: name || ((_tokenList$address$to2 = tokenList[address === null || address === void 0 ? void 0 : address.toLowerCase()]) === null || _tokenList$address$to2 === void 0 ? void 0 : _tokenList$address$to2.name),
    rawFiat
  };
}
function useTokensToSearch({
  usersTokens = [],
  topTokens = {},
  shuffledTokensList,
  tokenBucketPriority = _swaps3.TokenBucketPriority.owned
}) {
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const tokenConversionRates = (0, _reactRedux.useSelector)(_selectors.getTokenExchangeRates, _lodash.isEqual);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken, _reactRedux.shallowEqual);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList, _lodash.isEqual);
  const memoizedTopTokens = (0, _useEqualityCheck.useEqualityCheck)(topTokens);
  const memoizedUsersToken = (0, _useEqualityCheck.useEqualityCheck)(usersTokens);
  const defaultToken = getRenderableTokenData(defaultSwapsToken, tokenConversionRates, conversionRate, currentCurrency, chainId, tokenList);
  const memoizedDefaultToken = (0, _useEqualityCheck.useEqualityCheck)(defaultToken);
  const swapsTokens = (0, _reactRedux.useSelector)(_swaps.getSwapsTokens, _lodash.isEqual) || [];
  const tokensToSearch = swapsTokens.length ? swapsTokens : [memoizedDefaultToken, ...shuffledTokensList.filter(token => token.symbol !== memoizedDefaultToken.symbol)];
  const memoizedTokensToSearch = (0, _useEqualityCheck.useEqualityCheck)(tokensToSearch);
  return (0, _react.useMemo)(() => {
    const usersTokensAddressMap = memoizedUsersToken.reduce((acc, token) => ({
      ...acc,
      [token.address.toLowerCase()]: token
    }), {});
    const tokensToSearchBuckets = {
      owned: [],
      top: [],
      others: []
    };
    const memoizedSwapsAndUserTokensWithoutDuplicities = (0, _lodash.uniqBy)([memoizedDefaultToken, ...memoizedTokensToSearch, ...memoizedUsersToken], token => token.address.toLowerCase());
    memoizedSwapsAndUserTokensWithoutDuplicities.forEach(token => {
      const renderableDataToken = getRenderableTokenData({
        ...usersTokensAddressMap[token.address.toLowerCase()],
        ...token
      }, tokenConversionRates, conversionRate, currentCurrency, chainId, tokenList);
      if (tokenBucketPriority === _swaps3.TokenBucketPriority.owned) {
        if ((0, _swaps2.isSwapsDefaultTokenSymbol)(renderableDataToken.symbol, chainId) || usersTokensAddressMap[token.address.toLowerCase()]) {
          tokensToSearchBuckets.owned.push(renderableDataToken);
        } else if (memoizedTopTokens[token.address.toLowerCase()]) {
          tokensToSearchBuckets.top[memoizedTopTokens[token.address.toLowerCase()].index] = renderableDataToken;
        } else {
          tokensToSearchBuckets.others.push(renderableDataToken);
        }
      } else if (memoizedTopTokens[token.address.toLowerCase()]) {
        tokensToSearchBuckets.top[memoizedTopTokens[token.address.toLowerCase()].index] = renderableDataToken;
      } else if ((0, _swaps2.isSwapsDefaultTokenSymbol)(renderableDataToken.symbol, chainId) || usersTokensAddressMap[token.address.toLowerCase()]) {
        tokensToSearchBuckets.owned.push(renderableDataToken);
      } else {
        tokensToSearchBuckets.others.push(renderableDataToken);
      }
    });
    tokensToSearchBuckets.owned = tokensToSearchBuckets.owned.sort(({
      rawFiat
    }, {
      rawFiat: secondRawFiat
    }) => {
      return new _bignumber.default(rawFiat || 0).gt(secondRawFiat || 0) ? -1 : 1;
    });
    tokensToSearchBuckets.top = tokensToSearchBuckets.top.filter(Boolean);
    if (tokenBucketPriority === _swaps3.TokenBucketPriority.owned) {
      return [...tokensToSearchBuckets.owned, ...tokensToSearchBuckets.top, ...tokensToSearchBuckets.others];
    }
    return [...tokensToSearchBuckets.top, ...tokensToSearchBuckets.owned, ...tokensToSearchBuckets.others];
  }, [memoizedTokensToSearch, memoizedUsersToken, memoizedTopTokens, tokenConversionRates, conversionRate, currentCurrency, memoizedDefaultToken, chainId, tokenList, tokenBucketPriority]);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTokensToSearch.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionDisplayData.js", {"../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../shared/lib/metamask-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\metamask-controller-utils.js","../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../helpers/constants/transactions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\transactions.js","../helpers/utils/common.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\common.util.js","../helpers/utils/token-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../selectors/selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\selectors.js","../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./useCurrencyDisplay":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCurrencyDisplay.js","./useCurrentAsset":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCurrentAsset.js","./useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","./useSwappedTokenValue":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useSwappedTokenValue.js","./useTokenData":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenData.js","./useTokenDisplayValue":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenDisplayValue.js","./useTokenFiatAmount":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","./useUserPreferencedCurrency":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTransactionDisplayData.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionDisplayData = useTransactionDisplayData;
var _reactRedux = require("react-redux");
var _react = require("react");
var _selectors = require("../selectors/selectors");
var _transactions = require("../helpers/utils/transactions.util");
var _common = require("../helpers/utils/common.util");
var _common2 = require("../helpers/constants/common");
var _tokenUtil = require("../helpers/utils/token-util");
var _util = require("../helpers/utils/util");
var _transactions2 = require("../helpers/constants/transactions");
var _metamask = require("../ducks/metamask/metamask");
var _transaction = require("../../shared/constants/transaction");
var _actions = require("../store/actions");
var _stringUtils = require("../../shared/modules/string-utils");
var _metamaskControllerUtils = require("../../shared/lib/metamask-controller-utils");
var _useI18nContext = require("./useI18nContext");
var _useTokenFiatAmount = require("./useTokenFiatAmount");
var _useUserPreferencedCurrency = require("./useUserPreferencedCurrency");
var _useCurrencyDisplay = require("./useCurrencyDisplay");
var _useTokenDisplayValue = require("./useTokenDisplayValue");
var _useTokenData = require("./useTokenData");
var _useSwappedTokenValue = require("./useSwappedTokenValue");
var _useCurrentAsset = require("./useCurrentAsset");
/**
 *  There are seven types of transaction entries that are currently differentiated in the design:
 *  1. Signature request
 *  2. Send (sendEth sendTokens)
 *  3. Deposit
 *  4. Site interaction
 *  5. Approval
 *  6. Swap
 *  7. Swap Approval
 */
const signatureTypes = [null, undefined, _transaction.TransactionType.sign, _transaction.TransactionType.personalSign, _transaction.TransactionType.signTypedData, _transaction.TransactionType.ethDecrypt, _transaction.TransactionType.ethGetEncryptionPublicKey];

/**
 * @typedef {(__import__('../../selectors/transactions').TransactionGroup} TransactionGroup
 */

/**
 * @typedef {object} TransactionDisplayData
 * @property {string} category - the transaction category that will be used for rendering the icon in the activity list
 * @property {string} primaryCurrency - the currency string to display in the primary position
 * @property {string} recipientAddress - the Ethereum address of the recipient
 * @property {string} senderAddress - the Ethereum address of the sender
 * @property {string} status - the status of the transaction
 * @property {string} subtitle - the supporting text describing the transaction
 * @property {boolean} subtitleContainsOrigin - true if the subtitle includes the origin of the tx
 * @property {string} title - the primary title of the tx that will be displayed in the activity list
 * @property {string} [secondaryCurrency] - the currency string to display in the secondary position
 */

/**
 * Get computed values used for displaying transaction data to a user
 *
 * The goal of this method is to perform all of the necessary computation and
 * state access required to take a transactionGroup and derive from it a shape
 * of data that can power all views related to a transaction. Presently the main
 * case is for shared logic between transaction-list-item and transaction-detail-view
 *
 * @param {TransactionGroup} transactionGroup - group of transactions of the same nonce
 * @returns {TransactionDisplayData}
 */
function useTransactionDisplayData(transactionGroup) {
  var _primaryTransaction$t, _initialTransaction$t3, _initialTransaction$t4, _initialTransaction$t5, _token, _token2, _initialTransaction$m, _token3;
  // To determine which primary currency to display for swaps transactions we need to be aware
  // of which asset, if any, we are viewing at present
  const dispatch = (0, _reactRedux.useDispatch)();
  const currentAsset = (0, _useCurrentAsset.useCurrentAsset)();
  const knownTokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const knownNfts = (0, _reactRedux.useSelector)(_metamask.getNfts);
  const detectedTokens = (0, _reactRedux.useSelector)(_selectors.getDetectedTokensInCurrentNetwork) || [];
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    initialTransaction,
    primaryTransaction
  } = transactionGroup;
  // initialTransaction contains the data we need to derive the primary purpose of this transaction group
  const {
    type
  } = initialTransaction;
  const {
    from: senderAddress,
    to
  } = initialTransaction.txParams || {};

  // for smart contract interactions, methodData can be used to derive the name of the action being taken
  const methodData = (0, _reactRedux.useSelector)(state => {
    var _initialTransaction$t;
    return (0, _selectors.getKnownMethodData)(state, initialTransaction === null || initialTransaction === void 0 ? void 0 : (_initialTransaction$t = initialTransaction.txParams) === null || _initialTransaction$t === void 0 ? void 0 : _initialTransaction$t.data);
  }) || {};
  const displayedStatusKey = (0, _transactions.getStatusKey)(primaryTransaction);
  const isPending = (displayedStatusKey in _transactions2.PENDING_STATUS_HASH);
  const isSubmitted = displayedStatusKey === _transaction.TransactionStatus.submitted;
  const primaryValue = (_primaryTransaction$t = primaryTransaction.txParams) === null || _primaryTransaction$t === void 0 ? void 0 : _primaryTransaction$t.value;
  const date = (0, _util.formatDateWithYearContext)(initialTransaction.time);
  let prefix = '-';
  let subtitle;
  let subtitleContainsOrigin = false;
  let recipientAddress = to;

  // This value is used to determine whether we should look inside txParams.data
  // to pull out and render token related information
  const isTokenCategory = _transactions2.TOKEN_CATEGORY_HASH[type];
  // these values are always instantiated because they are either
  // used by or returned from hooks. Hooks must be called at the top level,
  // so as an additional safeguard against inappropriately associating token
  // transfers, we pass an additional argument to these hooks that will be
  // false for non-token transactions. This additional argument forces the
  // hook to return null
  let token = null;
  const [currentAssetDetails, setCurrentAssetDetails] = (0, _react.useState)(null);
  if (isTokenCategory) {
    token = knownTokens.find(({
      address
    }) => (0, _stringUtils.isEqualCaseInsensitive)(address, recipientAddress)) || detectedTokens.find(({
      address
    }) => (0, _stringUtils.isEqualCaseInsensitive)(address, recipientAddress)) || tokenList[recipientAddress.toLowerCase()];
  }
  (0, _react.useEffect)(() => {
    async function getAndSetAssetDetails() {
      if (isTokenCategory && !token) {
        var _initialTransaction$t2;
        const assetDetails = await (0, _tokenUtil.getAssetDetails)(to, senderAddress, initialTransaction === null || initialTransaction === void 0 ? void 0 : (_initialTransaction$t2 = initialTransaction.txParams) === null || _initialTransaction$t2 === void 0 ? void 0 : _initialTransaction$t2.data, knownNfts);
        setCurrentAssetDetails(assetDetails);
      }
    }
    getAndSetAssetDetails();
  }, [isTokenCategory, token, recipientAddress, senderAddress, initialTransaction === null || initialTransaction === void 0 ? void 0 : (_initialTransaction$t3 = initialTransaction.txParams) === null || _initialTransaction$t3 === void 0 ? void 0 : _initialTransaction$t3.data, knownNfts, to]);
  if (currentAssetDetails) {
    token = {
      address: currentAssetDetails.toAddress,
      symbol: currentAssetDetails.symbol,
      decimals: currentAssetDetails.decimals
    };
  }
  const tokenData = (0, _useTokenData.useTokenData)(initialTransaction === null || initialTransaction === void 0 ? void 0 : (_initialTransaction$t4 = initialTransaction.txParams) === null || _initialTransaction$t4 === void 0 ? void 0 : _initialTransaction$t4.data, isTokenCategory);

  // Sometimes the tokenId value is parsed as "_value" param. Not seeing this often any more, but still occasionally:
  // i.e. call approve() on BAYC contract - https://etherscan.io/token/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#writeContract, and tokenId shows up as _value,
  // not sure why since it doesn't match the ERC721 ABI spec we use to parse these transactions - https://github.com/MetaMask/metamask-eth-abis/blob/d0474308a288f9252597b7c93a3a8deaad19e1b2/src/abis/abiERC721.ts#L62.
  const transactionDataTokenId = (0, _tokenUtil.getTokenIdParam)(tokenData) ?? (0, _metamaskControllerUtils.getTokenValueParam)(tokenData);
  const nft = isTokenCategory && knownNfts.find(({
    address,
    tokenId
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, recipientAddress) && tokenId === transactionDataTokenId);
  const tokenDisplayValue = (0, _useTokenDisplayValue.useTokenDisplayValue)(initialTransaction === null || initialTransaction === void 0 ? void 0 : (_initialTransaction$t5 = initialTransaction.txParams) === null || _initialTransaction$t5 === void 0 ? void 0 : _initialTransaction$t5.data, token, isTokenCategory);
  const tokenFiatAmount = (0, _useTokenFiatAmount.useTokenFiatAmount)((_token = token) === null || _token === void 0 ? void 0 : _token.address, tokenDisplayValue, (_token2 = token) === null || _token2 === void 0 ? void 0 : _token2.symbol);
  const origin = (0, _util.stripHttpSchemes)(initialTransaction.origin || ((_initialTransaction$m = initialTransaction.msgParams) === null || _initialTransaction$m === void 0 ? void 0 : _initialTransaction$m.origin) || '');

  // used to append to the primary display value. initialized to either token.symbol or undefined
  // but can later be modified if dealing with a swap
  let primarySuffix = isTokenCategory ? (_token3 = token) === null || _token3 === void 0 ? void 0 : _token3.symbol : undefined;
  // used to display the primary value of tx. initialized to either tokenDisplayValue or undefined
  // but can later be modified if dealing with a swap
  let primaryDisplayValue = isTokenCategory ? tokenDisplayValue : undefined;
  // used to display fiat amount of tx. initialized to either tokenFiatAmount or undefined
  // but can later be modified if dealing with a swap
  let secondaryDisplayValue = isTokenCategory ? tokenFiatAmount : undefined;
  let category;
  let title;
  const {
    swapTokenValue,
    isNegative,
    swapTokenFiatAmount,
    isViewingReceivedTokenFromSwap
  } = (0, _useSwappedTokenValue.useSwappedTokenValue)(transactionGroup, currentAsset);
  if (signatureTypes.includes(type)) {
    category = _transaction.TransactionGroupCategory.signatureRequest;
    title = t('signatureRequest');
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TransactionType.swap) {
    category = _transaction.TransactionGroupCategory.swap;
    title = t('swapTokenToToken', [initialTransaction.sourceTokenSymbol, initialTransaction.destinationTokenSymbol]);
    subtitle = origin;
    subtitleContainsOrigin = true;
    primarySuffix = isViewingReceivedTokenFromSwap ? currentAsset.symbol : initialTransaction.sourceTokenSymbol;
    primaryDisplayValue = swapTokenValue;
    secondaryDisplayValue = swapTokenFiatAmount;
    if (isNegative) {
      prefix = '';
    } else if (isViewingReceivedTokenFromSwap) {
      prefix = '+';
    } else {
      prefix = '-';
    }
  } else if (type === _transaction.TransactionType.swapApproval) {
    category = _transaction.TransactionGroupCategory.approval;
    title = t('swapApproval', [primaryTransaction.sourceTokenSymbol]);
    subtitle = origin;
    subtitleContainsOrigin = true;
    primarySuffix = primaryTransaction.sourceTokenSymbol;
  } else if (type === _transaction.TransactionType.tokenMethodApprove) {
    var _token4;
    category = _transaction.TransactionGroupCategory.approval;
    prefix = '';
    title = t('approveSpendingCap', [((_token4 = token) === null || _token4 === void 0 ? void 0 : _token4.symbol) || t('token').toLowerCase()]);
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TransactionType.tokenMethodSetApprovalForAll) {
    var _token5;
    category = _transaction.TransactionGroupCategory.approval;
    prefix = '';
    title = t('setApprovalForAllTitle', [((_token5 = token) === null || _token5 === void 0 ? void 0 : _token5.symbol) || t('token')]);
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TransactionType.contractInteraction) {
    category = _transaction.TransactionGroupCategory.interaction;
    const transactionTypeTitle = (0, _transactions.getTransactionTypeTitle)(t, type);
    title = (methodData === null || methodData === void 0 ? void 0 : methodData.name) && (0, _common.camelCaseToCapitalize)(methodData.name) || transactionTypeTitle;
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TransactionType.deployContract) {
    // @todo Should perhaps be a separate group?
    category = _transaction.TransactionGroupCategory.interaction;
    title = (0, _transactions.getTransactionTypeTitle)(t, type);
    subtitle = origin;
    subtitleContainsOrigin = true;
  } else if (type === _transaction.TransactionType.incoming) {
    category = _transaction.TransactionGroupCategory.receive;
    title = t('receive');
    prefix = '';
    subtitle = t('fromAddress', [(0, _util.shortenAddress)(senderAddress)]);
  } else if (type === _transaction.TransactionType.tokenMethodTransferFrom || type === _transaction.TransactionType.tokenMethodTransfer) {
    var _token6;
    category = _transaction.TransactionGroupCategory.send;
    title = t('sendSpecifiedTokens', [((_token6 = token) === null || _token6 === void 0 ? void 0 : _token6.symbol) || (nft === null || nft === void 0 ? void 0 : nft.name) || t('token')]);
    recipientAddress = (0, _tokenUtil.getTokenAddressParam)(tokenData);
    subtitle = t('toAddress', [(0, _util.shortenAddress)(recipientAddress)]);
  } else if (type === _transaction.TransactionType.tokenMethodSafeTransferFrom) {
    category = _transaction.TransactionGroupCategory.send;
    title = t('safeTransferFrom');
    recipientAddress = (0, _tokenUtil.getTokenAddressParam)(tokenData);
    subtitle = t('toAddress', [(0, _util.shortenAddress)(recipientAddress)]);
  } else if (type === _transaction.TransactionType.simpleSend) {
    category = _transaction.TransactionGroupCategory.send;
    title = t('send');
    subtitle = t('toAddress', [(0, _util.shortenAddress)(recipientAddress)]);
  } else {
    dispatch((0, _actions.captureSingleException)(`useTransactionDisplayData does not recognize transaction type. Type received is: ${type}`));
  }
  const primaryCurrencyPreferences = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common2.PRIMARY);
  const secondaryCurrencyPreferences = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common2.SECONDARY);
  const [primaryCurrency] = (0, _useCurrencyDisplay.useCurrencyDisplay)(primaryValue, {
    prefix,
    displayValue: primaryDisplayValue,
    suffix: primarySuffix,
    ...primaryCurrencyPreferences
  });
  const [secondaryCurrency] = (0, _useCurrencyDisplay.useCurrencyDisplay)(primaryValue, {
    prefix,
    displayValue: secondaryDisplayValue,
    hideLabel: isTokenCategory || Boolean(swapTokenValue),
    ...secondaryCurrencyPreferences
  });
  return {
    title,
    category,
    date,
    subtitle,
    subtitleContainsOrigin,
    primaryCurrency: type === _transaction.TransactionType.swap && isPending ? '' : primaryCurrency,
    senderAddress,
    recipientAddress,
    secondaryCurrency: isTokenCategory && !tokenFiatAmount || type === _transaction.TransactionType.swap && !swapTokenFiatAmount ? undefined : secondaryCurrency,
    displayedStatusKey,
    isPending,
    isSubmitted
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTransactionDisplayData.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionEventFragment.js", {"../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTransactionEventFragment.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionEventFragment = void 0;
var _react = require("react");
var _reactRedux = require("react-redux");
var _gasFee = require("../contexts/gasFee");
var _actions = require("../store/actions");
var _selectors = require("../selectors");
var _transaction = require("../../shared/constants/transaction");
const useTransactionEventFragment = () => {
  const {
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const fragment = (0, _reactRedux.useSelector)(state => (0, _selectors.selectMatchingFragment)(state, {
    fragmentOptions: {},
    existingId: `transaction-added-${transaction === null || transaction === void 0 ? void 0 : transaction.id}`
  }));
  const updateTransactionEventFragment = (0, _react.useCallback)(async params => {
    if (!transaction || !transaction.id) {
      return;
    }
    if (!fragment) {
      await (0, _actions.createTransactionEventFragment)(transaction.id, _transaction.TransactionMetaMetricsEvent.approved);
    }
    (0, _actions.updateEventFragment)(`transaction-added-${transaction.id}`, params);
  }, [fragment, transaction]);
  return {
    updateTransactionEventFragment
  };
};
exports.useTransactionEventFragment = useTransactionEventFragment;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTransactionEventFragment.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionFunctionType.js", {"../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/utils/metrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\metrics.js","../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTransactionFunctionType.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionFunctionType = void 0;
var _reactRedux = require("react-redux");
var _app = require("../../shared/constants/app");
var _transaction = require("../../shared/constants/transaction");
var _selectors = require("../selectors");
var _metamask = require("../ducks/metamask/metamask");
var _transactions = require("../helpers/utils/transactions.util");
var _metrics = require("../helpers/utils/metrics");
var _useI18nContext = require("./useI18nContext");
const useTransactionFunctionType = (txData = {}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const {
    txParams
  } = txData;
  const methodData = (0, _reactRedux.useSelector)(state => (0, _selectors.getKnownMethodData)(state, txParams === null || txParams === void 0 ? void 0 : txParams.data) || {});
  if (!txParams) {
    return {};
  }
  const isTokenApproval = txData.type === _transaction.TransactionType.tokenMethodSetApprovalForAll || txData.type === _transaction.TransactionType.tokenMethodApprove;
  const isContractInteraction = txData.type === _transaction.TransactionType.contractInteraction;
  const isTransactionFromDapp = (isTokenApproval || isContractInteraction) && txData.origin !== _app.ORIGIN_METAMASK;
  let functionType = isTransactionFromDapp ? (0, _metrics.getMethodName)(methodData === null || methodData === void 0 ? void 0 : methodData.name) : undefined;
  if (!functionType) {
    functionType = txData.type ? (0, _transactions.getTransactionTypeTitle)(t, txData.type, nativeCurrency) : t('contractInteraction');
  }
  return {
    functionType
  };
};
exports.useTransactionFunctionType = useTransactionFunctionType;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTransactionFunctionType.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionInfo.js", {"../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseTransactionInfo.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionInfo = void 0;
var _reactRedux = require("react-redux");
var _metamask = require("../ducks/metamask/metamask");
var _conversion = require("../../shared/modules/conversion.utils");
var _stringUtils = require("../../shared/modules/string-utils");
const useTransactionInfo = (txData = {}) => {
  var _allNftContracts$sele, _allNftContracts$sele2;
  const {
    allNftContracts,
    selectedAddress
  } = (0, _reactRedux.useSelector)(state => state.metamask);
  const {
    chainId
  } = (0, _reactRedux.useSelector)(_metamask.getProviderConfig);
  const isNftTransfer = Boolean(allNftContracts === null || allNftContracts === void 0 ? void 0 : (_allNftContracts$sele = allNftContracts[selectedAddress]) === null || _allNftContracts$sele === void 0 ? void 0 : (_allNftContracts$sele2 = _allNftContracts$sele[(0, _conversion.hexToDecimal)(chainId)]) === null || _allNftContracts$sele2 === void 0 ? void 0 : _allNftContracts$sele2.find(contract => {
    return (0, _stringUtils.isEqualCaseInsensitive)(contract.address, txData.txParams.to);
  }));
  return {
    isNftTransfer
  };
};
exports.useTransactionInfo = useTransactionInfo;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useTransactionInfo.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js", {"../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Chooks%5CuseUserPreferencedCurrency.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUserPreferencedCurrency = useUserPreferencedCurrency;
var _reactRedux = require("react-redux");
var _selectors = require("../selectors");
var _metamask = require("../ducks/metamask/metamask");
var _common = require("../helpers/constants/common");
var _common2 = require("../../shared/constants/common");
/**
 * Defines the shape of the options parameter for useUserPreferencedCurrency
 *
 * @typedef {object} UseUserPreferencedCurrencyOptions
 * @property {number} [numberOfDecimals] - Number of significant decimals to display
 * @property {number} [ethNumberOfDecimals] - Number of significant decimals to display
 *                                             when using ETH
 * @property {number} [fiatNumberOfDecimals] - Number of significant decimals to display
 *                                            when using fiat
 */

/**
 * Defines the return shape of useUserPreferencedCurrency
 *
 * @typedef {object} UserPreferredCurrency
 * @property {string} currency - the currency type to use (eg: 'ETH', 'usd')
 * @property {number} numberOfDecimals - Number of significant decimals to display
 */

/**
 * useUserPreferencedCurrency
 *
 * returns an object that contains what currency to use for displaying values based
 * on the user's preference settings, as well as the significant number of decimals
 * to display based on the currency
 *
 * @param {"PRIMARY" | "SECONDARY"} type - what display type is being rendered
 * @param {UseUserPreferencedCurrencyOptions} opts - options to override default values
 * @returns {UserPreferredCurrency}
 */
function useUserPreferencedCurrency(type, opts = {}) {
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _reactRedux.useSelector)(_selectors.getPreferences, _reactRedux.shallowEqual);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat) || opts.showFiatOverride;
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  let currency, numberOfDecimals;
  if (!showFiat || type === _common.PRIMARY && useNativeCurrencyAsPrimaryCurrency || type === _common.SECONDARY && !useNativeCurrencyAsPrimaryCurrency) {
    // Display ETH
    currency = nativeCurrency || _common2.EtherDenomination.ETH;
    numberOfDecimals = opts.numberOfDecimals || opts.ethNumberOfDecimals || 8;
  } else if (type === _common.SECONDARY && useNativeCurrencyAsPrimaryCurrency || type === _common.PRIMARY && !useNativeCurrencyAsPrimaryCurrency) {
    // Display Fiat
    currency = currentCurrency;
    numberOfDecimals = opts.numberOfDecimals || opts.fiatNumberOfDecimals || 2;
  }
  return {
    currency,
    numberOfDecimals
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\hooks\\useUserPreferencedCurrency.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\index.js", {"../app/scripts/lib/setupSentry":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\setupSentry.js","../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../shared/constants/alerts":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\alerts.ts","../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../shared/lib/error-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\error-utils.js","../shared/lib/switch-direction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\switch-direction.js","../shared/modules/object.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\object.utils.js","./ducks/alerts":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\alerts\\index.js","./ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","./helpers/utils/tx-helper":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\tx-helper.ts","./pages":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\index.js","./selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./store/action-queue":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\action-queue\\index.ts","./store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./store/store":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\store.ts","copy-to-clipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-dom\\index.js","webextension-polyfill":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = launchMetamaskUi;
exports.updateBackgroundConnection = void 0;
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _lodash = require("lodash");
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _util = require("../app/scripts/lib/util");
var _alerts = require("../shared/constants/alerts");
var _object = require("../shared/modules/object.utils");
var _setupSentry = require("../app/scripts/lib/setupSentry");
var _app = require("../shared/constants/app");
var _switchDirection = _interopRequireDefault(require("../shared/lib/switch-direction"));
var _errorUtils = require("../shared/lib/error-utils");
var actions = _interopRequireWildcard(require("./store/actions"));
var _store = _interopRequireDefault(require("./store/store"));
var _selectors = require("./selectors");
var _alerts2 = require("./ducks/alerts");
var _metamask = require("./ducks/metamask/metamask");
var _pages = _interopRequireDefault(require("./pages"));
var _txHelper = _interopRequireDefault(require("./helpers/utils/tx-helper"));
var _actionQueue = require("./store/action-queue");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_loglevel.default.setLevel(global.METAMASK_DEBUG ? 'debug' : 'warn');
let reduxStore;

/**
 * Method to update backgroundConnection object use by UI
 *
 * @param backgroundConnection - connection object to background
 */
const updateBackgroundConnection = backgroundConnection => {
  (0, _actionQueue._setBackgroundConnection)(backgroundConnection);
  backgroundConnection.onNotification(data => {
    if (data.method === 'sendUpdate') {
      reduxStore.dispatch(actions.updateMetamaskState(data.params[0]));
    } else {
      throw new Error(`Internal JSON-RPC Notification Not Handled:\n\n ${JSON.stringify(data)}`);
    }
  });
};
exports.updateBackgroundConnection = updateBackgroundConnection;
function launchMetamaskUi(opts, cb) {
  const {
    backgroundConnection
  } = opts;

  // check if we are unlocked first
  backgroundConnection.getState(function (err, metamaskState) {
    if (err) {
      cb(err, {
        ...metamaskState
      }, backgroundConnection);
      return;
    }
    startApp(metamaskState, backgroundConnection, opts).then(store => {
      setupDebuggingHelpers(store);
      cb(null, store);
    });
  });
}
async function startApp(metamaskState, backgroundConnection, opts) {
  // parse opts
  if (!metamaskState.featureFlags) {
    metamaskState.featureFlags = {};
  }
  const {
    currentLocaleMessages,
    enLocaleMessages
  } = await (0, _errorUtils.setupLocale)(metamaskState.currentLocale);
  if (metamaskState.textDirection === 'rtl') {
    await (0, _switchDirection.default)('rtl');
  }
  const draftInitialState = {
    activeTab: opts.activeTab,
    // metamaskState represents the cross-tab state
    metamask: metamaskState,
    // appState represents the current tab's popup state
    appState: {},
    localeMessages: {
      currentLocale: metamaskState.currentLocale,
      current: currentLocaleMessages,
      en: enLocaleMessages
    }
  };
  updateBackgroundConnection(backgroundConnection);
  if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP) {
    const {
      origin
    } = draftInitialState.activeTab;
    const permittedAccountsForCurrentTab = (0, _selectors.getPermittedAccountsForCurrentTab)(draftInitialState);
    const selectedAddress = (0, _selectors.getSelectedAddress)(draftInitialState);
    const unconnectedAccountAlertShownOrigins = (0, _metamask.getUnconnectedAccountAlertShown)(draftInitialState);
    const unconnectedAccountAlertIsEnabled = (0, _metamask.getUnconnectedAccountAlertEnabledness)(draftInitialState);
    if (origin && unconnectedAccountAlertIsEnabled && !unconnectedAccountAlertShownOrigins[origin] && permittedAccountsForCurrentTab.length > 0 && !permittedAccountsForCurrentTab.includes(selectedAddress)) {
      draftInitialState[_alerts.AlertTypes.unconnectedAccount] = {
        state: _alerts2.ALERT_STATE.OPEN
      };
      actions.setUnconnectedAccountAlertShown(origin);
    }
  }
  const store = (0, _store.default)(draftInitialState);
  reduxStore = store;

  // if unconfirmed txs, start on txConf page
  const unapprovedTxsAll = (0, _txHelper.default)(metamaskState.unapprovedTxs, metamaskState.unapprovedMsgs, metamaskState.unapprovedPersonalMsgs, metamaskState.unapprovedDecryptMsgs, metamaskState.unapprovedEncryptionPublicKeyMsgs, metamaskState.unapprovedTypedMessages, metamaskState.networkId, metamaskState.providerConfig.chainId);
  const numberOfUnapprovedTx = unapprovedTxsAll.length;
  if (numberOfUnapprovedTx > 0) {
    store.dispatch(actions.showConfTxPage({
      id: unapprovedTxsAll[0].id
    }));
  }

  // global metamask api - used by tooling
  global.metamask = {
    updateCurrentLocale: code => {
      store.dispatch(actions.updateCurrentLocale(code));
    },
    setProviderType: type => {
      store.dispatch(actions.setProviderType(type));
    },
    setFeatureFlag: (key, value) => {
      store.dispatch(actions.setFeatureFlag(key, value));
    }
  };

  // start app
  (0, _reactDom.render)( /*#__PURE__*/_react.default.createElement(_pages.default, {
    store: store
  }), opts.container);
  return store;
}
function setupDebuggingHelpers(store) {
  /**
   * The following stateHook is a method intended to throw an error, used in
   * our E2E test to ensure that errors are attempted to be sent to sentry.
   */
  window.stateHooks.throwTestError = async function () {
    const error = new Error('Test Error');
    error.name = 'TestError';
    throw error;
  };
  window.stateHooks.getCleanAppState = async function () {
    const state = (0, _lodash.clone)(store.getState());
    state.version = global.platform.getVersion();
    state.browser = window.navigator.userAgent;
    state.completeTxList = await actions.getTransactions({
      filterToCurrentNetwork: false
    });
    return state;
  };
  window.stateHooks.getSentryState = function () {
    const fullState = store.getState();
    const debugState = (0, _object.maskObject)(fullState, _setupSentry.SENTRY_STATE);
    return {
      browser: window.navigator.userAgent,
      store: debugState,
      version: global.platform.getVersion()
    };
  };
}
window.logStateString = async function (cb) {
  const state = await window.stateHooks.getCleanAppState();
  _webextensionPolyfill.default.runtime.getPlatformInfo().then(platform => {
    state.platform = platform;
    const stateString = JSON.stringify(state, null, 2);
    cb(null, stateString);
  }).catch(err => {
    cb(err);
  });
};
window.logState = function (toClipboard) {
  return window.logStateString((err, result) => {
    if (err) {
      console.error(err.message);
    } else if (toClipboard) {
      (0, _copyToClipboard.default)(result);
      console.log('State log copied');
    } else {
      console.log(result);
    }
  });
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\add-nft\\add-nft.js", {"../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../components/app/nfts-detection-notice":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-detection-notice\\index.js","../../components/component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/ui/actionable-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\actionable-message\\index.js","../../components/ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../components/ui/form-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\form-field\\index.js","../../components/ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../components/ui/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","@metamask/controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\controller-utils\\dist\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cadd-nft%5Cadd-nft.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AddNft;
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _controllerUtils = require("@metamask/controller-utils");
var _useI18nContext = require("../../hooks/useI18nContext");
var _routes = require("../../helpers/constants/routes");
var _designSystem = require("../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../components/ui/box"));
var _typography = _interopRequireDefault(require("../../components/ui/typography"));
var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message"));
var _pageContainer = _interopRequireDefault(require("../../components/ui/page-container"));
var _actions = require("../../store/actions");
var _formField = _interopRequireDefault(require("../../components/ui/form-field"));
var _selectors = require("../../selectors");
var _metamask = require("../../ducks/metamask/metamask");
var _nftsDetectionNotice = _interopRequireDefault(require("../../components/app/nfts-detection-notice"));
var _metametrics = require("../../contexts/metametrics");
var _transaction = require("../../../shared/constants/transaction");
var _metametrics2 = require("../../../shared/constants/metametrics");
var _componentLibrary = require("../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function AddNft() {
  var _history$location, _history$location$sta, _history$location2, _history$location2$st;
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const useNftDetection = (0, _reactRedux.useSelector)(_selectors.getUseNftDetection);
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  const nftsDropdownState = (0, _reactRedux.useSelector)(_metamask.getNftsDropdownState);
  const selectedAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const addressEnteredOnImportTokensPage = history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : (_history$location$sta = _history$location.state) === null || _history$location$sta === void 0 ? void 0 : _history$location$sta.addressEnteredOnImportTokensPage;
  const contractAddressToConvertFromTokenToNft = history === null || history === void 0 ? void 0 : (_history$location2 = history.location) === null || _history$location2 === void 0 ? void 0 : (_history$location2$st = _history$location2.state) === null || _history$location2$st === void 0 ? void 0 : _history$location2$st.tokenAddress;
  const [nftAddress, setNftAddress] = (0, _react.useState)(addressEnteredOnImportTokensPage ?? contractAddressToConvertFromTokenToNft ?? '');
  const [tokenId, setTokenId] = (0, _react.useState)('');
  const [disabled, setDisabled] = (0, _react.useState)(true);
  const [nftAddFailed, setNftAddFailed] = (0, _react.useState)(false);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const handleAddNft = async () => {
    try {
      var _nftsDropdownState$se;
      await dispatch((0, _actions.addNftVerifyOwnership)(nftAddress, tokenId));
      const newNftDropdownState = {
        ...nftsDropdownState,
        [selectedAddress]: {
          ...(nftsDropdownState === null || nftsDropdownState === void 0 ? void 0 : nftsDropdownState[selectedAddress]),
          [chainId]: {
            ...(nftsDropdownState === null || nftsDropdownState === void 0 ? void 0 : (_nftsDropdownState$se = nftsDropdownState[selectedAddress]) === null || _nftsDropdownState$se === void 0 ? void 0 : _nftsDropdownState$se[chainId]),
            [nftAddress]: true
          }
        }
      };
      dispatch((0, _actions.updateNftDropDownState)(newNftDropdownState));
    } catch (error) {
      const {
        message
      } = error;
      dispatch((0, _actions.setNewNftAddedMessage)(message));
      setNftAddFailed(true);
      return;
    }
    if (contractAddressToConvertFromTokenToNft) {
      await dispatch((0, _actions.ignoreTokens)({
        tokensToIgnore: contractAddressToConvertFromTokenToNft,
        dontShowLoadingIndicator: true
      }));
    }
    dispatch((0, _actions.setNewNftAddedMessage)('success'));
    const tokenDetails = await (0, _actions.getTokenStandardAndDetails)(nftAddress, null, tokenId.toString());
    trackEvent({
      event: _metametrics2.MetaMetricsEventName.TokenAdded,
      category: 'Wallet',
      sensitiveProperties: {
        token_contract_address: nftAddress,
        token_symbol: tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.symbol,
        tokenId: tokenId.toString(),
        asset_type: _transaction.AssetType.NFT,
        token_standard: tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.standard,
        source_connection_method: _metametrics2.MetaMetricsTokenEventSource.Custom
      }
    });
    history.push(_routes.DEFAULT_ROUTE);
  };
  const validateAndSetAddress = val => {
    setDisabled(!(0, _controllerUtils.isValidHexAddress)(val) || !tokenId);
    setNftAddress(val);
  };
  const validateAndSetTokenId = val => {
    setDisabled(!(0, _controllerUtils.isValidHexAddress)(nftAddress) || !val || isNaN(Number(val)));
    setTokenId(val);
  };
  return /*#__PURE__*/_react.default.createElement(_pageContainer.default, {
    title: t('importNFT'),
    onSubmit: () => {
      handleAddNft();
    },
    submitText: t('add'),
    onCancel: () => {
      history.push(_routes.DEFAULT_ROUTE);
    },
    onClose: () => {
      history.push(_routes.DEFAULT_ROUTE);
    },
    disabled: disabled,
    contentComponent: /*#__PURE__*/_react.default.createElement(_box.default, null, isMainnet && !useNftDetection ? /*#__PURE__*/_react.default.createElement(_nftsDetectionNotice.default, null) : null, nftAddFailed && /*#__PURE__*/_react.default.createElement(_box.default, {
      marginLeft: 4,
      marginRight: 4
    }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      type: "danger",
      useIcon: true,
      iconFillColor: "var(--color-error-default)",
      message: /*#__PURE__*/_react.default.createElement(_box.default, {
        display: _designSystem.DISPLAY.INLINE_FLEX
      }, /*#__PURE__*/_react.default.createElement(_typography.default, {
        variant: _designSystem.TypographyVariant.H7,
        fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
        marginTop: 0
      }, t('nftAddFailedMessage')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
        className: "add-nft__close",
        iconName: _componentLibrary.IconName.Close,
        size: _componentLibrary.ButtonIconSize.Sm,
        ariaLabel: t('close'),
        "data-testid": "add-nft-error-close",
        onClick: () => setNftAddFailed(false)
      }))
    })), /*#__PURE__*/_react.default.createElement(_box.default, {
      margin: 4
    }, /*#__PURE__*/_react.default.createElement(_formField.default, {
      dataTestId: "address",
      titleText: t('address'),
      placeholder: "0x...",
      value: nftAddress,
      onChange: val => {
        validateAndSetAddress(val);
        setNftAddFailed(false);
      },
      tooltipText: t('importNFTAddressToolTip'),
      autoFocus: true
    }), /*#__PURE__*/_react.default.createElement(_formField.default, {
      dataTestId: "token-id",
      titleText: t('tokenId'),
      placeholder: t('nftTokenIdPlaceholder'),
      value: tokenId,
      onChange: val => {
        validateAndSetTokenId(val);
        setNftAddFailed(false);
      },
      tooltipText: t('importNFTTokenIdToolTip')
    })))
  });
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\add-nft\\add-nft.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\add-nft\\index.js", {"./add-nft":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\add-nft\\add-nft.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cadd-nft%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _addNft.default;
  }
});
var _addNft = _interopRequireDefault(require("./add-nft"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\add-nft\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\asset.js", {"../../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../../components/app/nft-details/nft-details":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-details\\nft-details.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","./components/native-asset":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\native-asset.js","./components/token-asset":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\token-asset.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Casset%5Casset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _stringUtils = require("../../../shared/modules/string-utils");
var _nftDetails = _interopRequireDefault(require("../../components/app/nft-details/nft-details"));
var _metamask = require("../../ducks/metamask/metamask");
var _routes = require("../../helpers/constants/routes");
var _nativeAsset = _interopRequireDefault(require("./components/native-asset"));
var _tokenAsset = _interopRequireDefault(require("./components/token-asset"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Asset = () => {
  const nativeCurrency = (0, _reactRedux.useSelector)(state => state.metamask.nativeCurrency);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const nfts = (0, _reactRedux.useSelector)(_metamask.getNfts);
  const {
    asset,
    id
  } = (0, _reactRouterDom.useParams)();
  const token = tokens.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, asset));
  const nft = nfts.find(({
    address,
    tokenId
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, asset) && id === tokenId.toString());
  (0, _react.useEffect)(() => {
    const el = document.querySelector('.app');
    el.scroll(0, 0);
  }, []);
  let content;
  if (nft) {
    content = /*#__PURE__*/_react.default.createElement(_nftDetails.default, {
      nft: nft
    });
  } else if (token) {
    content = /*#__PURE__*/_react.default.createElement(_tokenAsset.default, {
      token: token
    });
  } else if (asset === nativeCurrency) {
    content = /*#__PURE__*/_react.default.createElement(_nativeAsset.default, {
      nativeCurrency: nativeCurrency
    });
  } else {
    content = /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "main-container asset__container"
  }, content);
};
var _default = Asset;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\asset\\asset.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-breadcrumb.js", {"../../../components/component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Casset%5Ccomponents%5Casset-breadcrumb.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _componentLibrary = require("../../../components/component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const AssetBreadcrumb = ({
  accountName,
  assetName,
  onBack
}) => {
  return /*#__PURE__*/_react.default.createElement("button", {
    className: "asset-breadcrumb",
    onClick: onBack
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.ArrowLeft,
    "data-testid": "asset__back",
    marginInlineEnd: 3,
    size: _componentLibrary.IconSize.Xs
  }), /*#__PURE__*/_react.default.createElement("span", null, accountName), "\xA0/\xA0", /*#__PURE__*/_react.default.createElement("span", {
    className: "asset-breadcrumb__asset"
  }, assetName));
};
AssetBreadcrumb.propTypes = {
  accountName: _propTypes.default.string.isRequired,
  assetName: _propTypes.default.string.isRequired,
  onBack: _propTypes.default.func.isRequired
};
var _default = AssetBreadcrumb;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\asset\\components\\asset-breadcrumb.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-navigation.js", {"./asset-breadcrumb":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-breadcrumb.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Casset%5Ccomponents%5Casset-navigation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _assetBreadcrumb = _interopRequireDefault(require("./asset-breadcrumb"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const AssetNavigation = ({
  accountName,
  assetName,
  onBack,
  optionsButton
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "asset-navigation"
  }, /*#__PURE__*/_react.default.createElement(_assetBreadcrumb.default, {
    accountName: accountName,
    assetName: assetName,
    onBack: onBack
  }), optionsButton);
};
AssetNavigation.propTypes = {
  accountName: _propTypes.default.string.isRequired,
  assetName: _propTypes.default.string.isRequired,
  onBack: _propTypes.default.func.isRequired,
  optionsButton: _propTypes.default.element
};
AssetNavigation.defaultProps = {
  optionsButton: undefined
};
var _default = AssetNavigation;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\asset\\components\\asset-navigation.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-options.js", {"../../../components/component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\menu\\index.js","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Casset%5Ccomponents%5Casset-options.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _i18n = require("../../../contexts/i18n");
var _menu = require("../../../components/ui/menu");
var _selectors = require("../../../selectors");
var _routes = require("../../../helpers/constants/routes");
var _componentLibrary = require("../../../components/component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const AssetOptions = ({
  onRemove,
  onClickBlockExplorer,
  onViewAccountDetails,
  onViewTokenDetails,
  tokenSymbol,
  isNativeAsset
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [assetOptionsOpen, setAssetOptionsOpen] = (0, _react.useState)(false);
  const history = (0, _reactRouterDom.useHistory)();
  const blockExplorerLinkText = (0, _reactRedux.useSelector)(_selectors.getBlockExplorerLinkText);
  const ref = (0, _react.useRef)(false);
  const routeToAddBlockExplorerUrl = () => {
    history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
  };
  const openBlockExplorer = () => {
    setAssetOptionsOpen(false);
    onClickBlockExplorer();
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    className: "asset-options__button",
    "data-testid": "asset-options__button",
    onClick: () => setAssetOptionsOpen(true),
    ariaLabel: t('assetOptions'),
    iconName: _componentLibrary.IconName.MoreVertical,
    color: _designSystem.Color.textDefault
  }), assetOptionsOpen ? /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: ref.current,
    onHide: () => setAssetOptionsOpen(false)
  }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.ScanBarcode,
    "data-testid": "asset-options__account-details",
    onClick: () => {
      setAssetOptionsOpen(false);
      onViewAccountDetails();
    }
  }, t('accountDetails')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Export,
    "data-testid": "asset-options__etherscan",
    onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer
  }, t(blockExplorerLinkText.firstPart, blockExplorerLinkText.secondPart === '' ? null : [t('blockExplorerAssetAction')])), isNativeAsset ? null : /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Trash,
    "data-testid": "asset-options__hide",
    onClick: () => {
      setAssetOptionsOpen(false);
      onRemove();
    }
  }, t('hideTokenSymbol', [tokenSymbol])), isNativeAsset ? null : /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Info,
    "data-testid": "asset-options__token-details",
    onClick: () => {
      setAssetOptionsOpen(false);
      onViewTokenDetails();
    }
  }, t('tokenDetails'))) : null);
};
const isNotFunc = p => {
  return typeof p !== 'function';
};
AssetOptions.propTypes = {
  isNativeAsset: _propTypes.default.bool,
  onClickBlockExplorer: _propTypes.default.func.isRequired,
  onViewAccountDetails: _propTypes.default.func.isRequired,
  onRemove: props => {
    if (props.isNativeAsset === false && isNotFunc(props.onRemove)) {
      throw new Error('When isNativeAsset is true, onRemove is a required prop');
    }
  },
  onViewTokenDetails: props => {
    if (props.isNativeAsset === false && isNotFunc(props.onViewTokenDetails)) {
      throw new Error('When isNativeAsset is true, onViewTokenDetails is a required prop');
    }
  },
  tokenSymbol: props => {
    if (props.isNativeAsset === false && typeof props.tokenSymbol !== 'string') {
      throw new Error('When isNativeAsset is true, tokenSymbol is a required prop');
    }
  }
};
var _default = AssetOptions;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\asset\\components\\asset-options.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\native-asset.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../components/app/transaction-list":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list\\index.js","../../../components/app/wallet-overview":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\index.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors/selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\selectors.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./asset-navigation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-navigation.js","./asset-options":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-options.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Casset%5Ccomponents%5Cnative-asset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NativeAsset;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _etherscanLink = require("@metamask/etherscan-link");
var _transactionList = _interopRequireDefault(require("../../../components/app/transaction-list"));
var _walletOverview = require("../../../components/app/wallet-overview");
var _selectors = require("../../../selectors/selectors");
var _actions = require("../../../store/actions");
var _routes = require("../../../helpers/constants/routes");
var _util = require("../../../helpers/utils/util");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _assetNavigation = _interopRequireDefault(require("./asset-navigation"));
var _assetOptions = _interopRequireDefault(require("./asset-options"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function NativeAsset({
  nativeCurrency
}) {
  const selectedAccountName = (0, _reactRedux.useSelector)(state => (0, _selectors.getSelectedIdentity)(state).name);
  const dispatch = (0, _reactRedux.useDispatch)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const address = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const history = (0, _reactRouterDom.useHistory)();
  const accountLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const isCustomNetwork = (0, _reactRedux.useSelector)(_selectors.getIsCustomNetwork);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_assetNavigation.default, {
    accountName: selectedAccountName,
    assetName: nativeCurrency,
    onBack: () => history.push(_routes.DEFAULT_ROUTE),
    optionsButton: /*#__PURE__*/_react.default.createElement(_assetOptions.default, {
      isNativeAsset: true,
      onClickBlockExplorer: () => {
        trackEvent({
          event: 'Clicked Block Explorer Link',
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          properties: {
            link_type: 'Account Tracker',
            action: 'Asset Options',
            block_explorer_domain: (0, _util.getURLHostName)(accountLink)
          }
        });
        global.platform.openTab({
          url: accountLink
        });
      },
      onViewAccountDetails: () => {
        dispatch((0, _actions.showModal)({
          name: 'ACCOUNT_DETAILS'
        }));
      },
      isCustomNetwork: isCustomNetwork
    })
  }), /*#__PURE__*/_react.default.createElement(_walletOverview.EthOverview, {
    className: "asset__overview"
  }), /*#__PURE__*/_react.default.createElement(_transactionList.default, {
    hideTokenTransactions: true
  }));
}
NativeAsset.propTypes = {
  nativeCurrency: _propTypes.default.string.isRequired
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\asset\\components\\native-asset.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\token-asset.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../components/app/transaction-list":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list\\index.js","../../../components/app/wallet-overview":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\index.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors/selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\selectors.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./asset-navigation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-navigation.js","./asset-options":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-options.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Casset%5Ccomponents%5Ctoken-asset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenAsset;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _etherscanLink = require("@metamask/etherscan-link");
var _transactionList = _interopRequireDefault(require("../../../components/app/transaction-list"));
var _walletOverview = require("../../../components/app/wallet-overview");
var _selectors = require("../../../selectors/selectors");
var _routes = require("../../../helpers/constants/routes");
var _util = require("../../../helpers/utils/util");
var _actions = require("../../../store/actions");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _assetNavigation = _interopRequireDefault(require("./asset-navigation"));
var _assetOptions = _interopRequireDefault(require("./asset-options"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function TokenAsset({
  token
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const selectedIdentity = (0, _reactRedux.useSelector)(_selectors.getSelectedIdentity);
  const selectedAccountName = selectedIdentity.name;
  const selectedAddress = selectedIdentity.address;
  const history = (0, _reactRouterDom.useHistory)();
  const tokenTrackerLink = (0, _etherscanLink.getTokenTrackerLink)(token.address, chainId, null, selectedAddress, rpcPrefs);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const isCustomNetwork = (0, _reactRedux.useSelector)(_selectors.getIsCustomNetwork);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_assetNavigation.default, {
    accountName: selectedAccountName,
    assetName: token.symbol,
    onBack: () => history.push(_routes.DEFAULT_ROUTE),
    optionsButton: /*#__PURE__*/_react.default.createElement(_assetOptions.default, {
      onRemove: () => dispatch((0, _actions.showModal)({
        name: 'HIDE_TOKEN_CONFIRMATION',
        token,
        history
      })),
      isCustomNetwork: isCustomNetwork,
      onClickBlockExplorer: () => {
        trackEvent({
          event: 'Clicked Block Explorer Link',
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          properties: {
            link_type: 'Token Tracker',
            action: 'Token Options',
            block_explorer_domain: (0, _util.getURLHostName)(tokenTrackerLink)
          }
        });
        global.platform.openTab({
          url: tokenTrackerLink
        });
      },
      onViewAccountDetails: () => {
        dispatch((0, _actions.showModal)({
          name: 'ACCOUNT_DETAILS'
        }));
      },
      onViewTokenDetails: () => {
        history.push(`${_routes.TOKEN_DETAILS}/${token.address}`);
      },
      tokenSymbol: token.symbol
    })
  }), /*#__PURE__*/_react.default.createElement(_walletOverview.TokenOverview, {
    className: "asset__overview",
    token: token
  }), /*#__PURE__*/_react.default.createElement(_transactionList.default, {
    tokenAddress: token.address
  }));
}
TokenAsset.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\asset\\components\\token-asset.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\index.js", {"./asset":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\asset.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Casset%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _asset.default;
  }
});
var _asset = _interopRequireDefault(require("./asset"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\asset\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.js", {"../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../../components/ui/actionable-message/actionable-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../components/ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../components/ui/token-balance":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\token-balance\\index.js","../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../ducks/history/history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-add-suggested-token%5Cconfirm-add-suggested-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message/actionable-message"));
var _button = _interopRequireDefault(require("../../components/ui/button"));
var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));
var _tokenBalance = _interopRequireDefault(require("../../components/ui/token-balance"));
var _pageContainer = require("../../components/ui/page-container");
var _i18n = require("../../contexts/i18n");
var _metametrics = require("../../contexts/metametrics");
var _history = require("../../ducks/history/history");
var _metamask = require("../../ducks/metamask/metamask");
var _zendeskUrl = _interopRequireDefault(require("../../helpers/constants/zendesk-url"));
var _stringUtils = require("../../../shared/modules/string-utils");
var _selectors = require("../../selectors");
var _actions = require("../../store/actions");
var _metametrics2 = require("../../../shared/constants/metametrics");
var _transaction = require("../../../shared/constants/transaction");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function getTokenName(name, symbol) {
  return name === undefined ? symbol : `${name} (${symbol})`;
}

/**
 * @param {Array} suggestedAssets - an array of assets suggested to add to the user's wallet
 * via the RPC method `wallet_watchAsset`
 * @param {Array} tokens - the list of tokens currently tracked in state
 * @returns {boolean} Returns true when the list of suggestedAssets contains an entry with
 *          an address that matches an existing token.
 */
function hasDuplicateAddress(suggestedAssets, tokens) {
  const duplicate = suggestedAssets.find(({
    asset
  }) => {
    const dupe = tokens.find(({
      address
    }) => {
      return (0, _stringUtils.isEqualCaseInsensitive)(address, asset.address);
    });
    return Boolean(dupe);
  });
  return Boolean(duplicate);
}

/**
 * @param {Array} suggestedAssets - a list of assets suggested to add to the user's wallet
 * via RPC method `wallet_watchAsset`
 * @param {Array} tokens - the list of tokens currently tracked in state
 * @returns {boolean} Returns true when the list of suggestedAssets contains an entry with both
 *          1. a symbol that matches an existing token
 *          2. an address that does not match an existing token
 */
function hasDuplicateSymbolAndDiffAddress(suggestedAssets, tokens) {
  const duplicate = suggestedAssets.find(({
    asset
  }) => {
    const dupe = tokens.find(token => {
      return (0, _stringUtils.isEqualCaseInsensitive)(token.symbol, asset.symbol) && !(0, _stringUtils.isEqualCaseInsensitive)(token.address, asset.address);
    });
    return Boolean(dupe);
  });
  return Boolean(duplicate);
}
const ConfirmAddSuggestedToken = () => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const mostRecentOverviewPage = (0, _reactRedux.useSelector)(_history.getMostRecentOverviewPage);
  const suggestedAssets = (0, _reactRedux.useSelector)(_selectors.getSuggestedAssets);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const knownTokenActionableMessage = (0, _react.useMemo)(() => {
    return hasDuplicateAddress(suggestedAssets, tokens) && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('knownTokenWarning', [/*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        key: "confirm-add-suggested-token-duplicate-warning",
        className: "confirm-add-suggested-token__link",
        rel: "noopener noreferrer",
        target: "_blank",
        href: _zendeskUrl.default.TOKEN_SAFETY_PRACTICES
      }, t('learnScamRisk'))]),
      type: "warning",
      withRightButton: true,
      useIcon: true,
      iconFillColor: "#f8c000"
    });
  }, [suggestedAssets, tokens, t]);
  const reusedTokenNameActionableMessage = (0, _react.useMemo)(() => {
    return hasDuplicateSymbolAndDiffAddress(suggestedAssets, tokens) && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('reusedTokenNameWarning'),
      type: "warning",
      withRightButton: true,
      useIcon: true,
      iconFillColor: "#f8c000"
    });
  }, [suggestedAssets, tokens, t]);
  const handleAddTokensClick = (0, _react.useCallback)(async () => {
    await Promise.all(suggestedAssets.map(async ({
      asset,
      id
    }) => {
      await dispatch((0, _actions.acceptWatchAsset)(id));
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.TokenAdded,
        category: _metametrics2.MetaMetricsEventCategory.Wallet,
        sensitiveProperties: {
          token_symbol: asset.symbol,
          token_contract_address: asset.address,
          token_decimal_precision: asset.decimals,
          unlisted: asset.unlisted,
          source_connection_method: _metametrics2.MetaMetricsTokenEventSource.Dapp,
          token_standard: _transaction.TokenStandard.ERC20,
          asset_type: _transaction.AssetType.token
        }
      });
    }));
    history.push(mostRecentOverviewPage);
  }, [dispatch, history, trackEvent, mostRecentOverviewPage, suggestedAssets]);
  const goBackIfNoSuggestedAssetsOnFirstRender = () => {
    if (!suggestedAssets.length) {
      history.push(mostRecentOverviewPage);
    }
  };
  (0, _react.useEffect)(() => {
    goBackIfNoSuggestedAssetsOnFirstRender();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__title"
  }, t('addSuggestedTokens')), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__subtitle"
  }, t('likeToImportTokens')), knownTokenActionableMessage, reusedTokenNameActionableMessage), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token__token"
  }, t('token')), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token__balance"
  }, t('balance'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-add-suggested-token__token-list"
  }, suggestedAssets.map(({
    asset
  }) => {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-add-suggested-token__token-list-item",
      key: asset.address
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-add-suggested-token__token confirm-add-suggested-token__data"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "confirm-add-suggested-token__token-icon",
      diameter: 48,
      address: asset.address,
      image: asset.image
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-add-suggested-token__name"
    }, getTokenName(asset.name, asset.symbol))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-add-suggested-token__balance"
    }, /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: asset
    })));
  })))), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    cancelText: t('cancel'),
    submitText: t('addToken'),
    onCancel: async () => {
      await Promise.all(suggestedAssets.map(({
        id
      }) => dispatch((0, _actions.rejectWatchAsset)(id))));
      history.push(mostRecentOverviewPage);
    },
    onSubmit: handleAddTokensClick,
    disabled: suggestedAssets.length === 0
  }));
};
var _default = ConfirmAddSuggestedToken;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-add-suggested-token\\index.js", {"./confirm-add-suggested-token":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-add-suggested-token%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmAddSuggestedToken.default;
  }
});
var _confirmAddSuggestedToken = _interopRequireDefault(require("./confirm-add-suggested-token"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-add-suggested-token\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve-content\\confirm-approve-content.component.js", {"../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../components/app/confirm-gas-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-gas-display\\index.js","../../../components/app/confirm-page-container/confirm-page-container-content":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container-content\\index.js","../../../components/app/edit-gas-fee-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\index.js","../../../components/app/ledger-instruction-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","../../../components/app/modals/contract-details-modal/contract-details-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js","../../../components/app/multilayer-fee-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\index.js","../../../components/app/security-provider-banner-message/security-provider-banner-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js","../../../components/app/security-provider-banner-message/security-provider-banner-message.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js","../../../components/app/transaction-detail-item/transaction-detail-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../../../components/app/user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../../../components/component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../components/ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../components/ui/simulation-error-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\simulation-error-message\\index.js","../../../components/ui/url-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","copy-to-clipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-approve%5Cconfirm-approve-content%5Cconfirm-approve-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _etherscanLink = require("@metamask/etherscan-link");
var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));
var _util = require("../../../helpers/utils/util");
var _confirmTx = require("../../../helpers/utils/confirm-tx.util");
var _box = _interopRequireDefault(require("../../../components/ui/box"));
var _button = _interopRequireDefault(require("../../../components/ui/button"));
var _simulationErrorMessage = _interopRequireDefault(require("../../../components/ui/simulation-error-message"));
var _editGasFeeButton = _interopRequireDefault(require("../../../components/app/edit-gas-fee-button"));
var _multilayerFeeMessage = _interopRequireDefault(require("../../../components/app/multilayer-fee-message"));
var _securityProviderBannerMessage = _interopRequireDefault(require("../../../components/app/security-provider-banner-message/security-provider-banner-message"));
var _securityProviderBannerMessage2 = require("../../../components/app/security-provider-banner-message/security-provider-banner-message.constants");
var _designSystem = require("../../../helpers/constants/design-system");
var _confirmPageContainerContent = require("../../../components/app/confirm-page-container/confirm-page-container-content");
var _ledgerInstructionField = _interopRequireDefault(require("../../../components/app/ledger-instruction-field"));
var _transaction = require("../../../../shared/constants/transaction");
var _network = require("../../../../shared/constants/network");
var _contractDetailsModal = _interopRequireDefault(require("../../../components/app/modals/contract-details-modal/contract-details-modal"));
var _componentLibrary = require("../../../components/component-library");
var _transactionDetailItem = _interopRequireDefault(require("../../../components/app/transaction-detail-item/transaction-detail-item.component"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../../components/app/user-preferenced-currency-display"));
var _common = require("../../../helpers/constants/common");
var _confirmGasDisplay = require("../../../components/app/confirm-gas-display");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmApproveContent extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showFullTxDetails: false,
      copied: false,
      setShowContractDetails: false
    });
  }
  renderApproveContentCard({
    showHeader = true,
    symbol,
    title,
    showEdit,
    showAdvanceGasFeeOptions = false,
    onEditClick,
    content,
    footer,
    noBorder
  }) {
    const {
      supportsEIP1559,
      renderSimulationFailureWarning,
      userAcknowledgedGasMissing
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'confirm-approve-content__card': !noBorder,
        'confirm-approve-content__card--no-border': noBorder
      })
    }, showHeader && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-header"
    }, supportsEIP1559 && title === t('transactionFee') ? null : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-header__symbol"
    }, symbol), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-header__title"
    }, title)), showEdit && (!showAdvanceGasFeeOptions || !supportsEIP1559) && /*#__PURE__*/_react.default.createElement(_box.default, {
      width: _designSystem.BLOCK_SIZES.ONE_SIXTH
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__small-blue-text",
      onClick: () => onEditClick()
    }, t('edit'))), showEdit && showAdvanceGasFeeOptions && supportsEIP1559 && !renderSimulationFailureWarning && /*#__PURE__*/_react.default.createElement(_editGasFeeButton.default, {
      userAcknowledgedGasMissing: userAcknowledgedGasMissing
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-content"
    }, content), footer);
  }

  // TODO: Add "Learn Why" with link to the feeAssociatedRequest text
  renderTransactionDetailsContent() {
    const {
      t
    } = this.context;
    const {
      currentCurrency,
      nativeCurrency,
      ethTransactionTotal,
      fiatTransactionTotal,
      hexTransactionTotal,
      hexMinimumTransactionFee,
      txData,
      isMultiLayerFeeNetwork,
      supportsEIP1559,
      userAcknowledgedGasMissing,
      renderSimulationFailureWarning,
      useCurrencyRateCheck,
      useNativeCurrencyAsPrimaryCurrency
    } = this.props;
    if (!isMultiLayerFeeNetwork && supportsEIP1559 && !renderSimulationFailureWarning) {
      return /*#__PURE__*/_react.default.createElement(_confirmGasDisplay.ConfirmGasDisplay, {
        userAcknowledgedGasMissing: userAcknowledgedGasMissing
      });
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content"
    }, isMultiLayerFeeNetwork ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-extra-content"
    }, /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
      key: "confirm-approve-content-min-tx-fee",
      detailTitle: t('transactionDetailLayer2GasHeading'),
      detailTotal: /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
        type: _common.PRIMARY,
        value: hexMinimumTransactionFee,
        hideLabel: !useNativeCurrencyAsPrimaryCurrency,
        numberOfDecimals: 18
      }),
      detailText: /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
        type: _common.SECONDARY,
        value: hexMinimumTransactionFee,
        hideLabel: Boolean(useNativeCurrencyAsPrimaryCurrency)
      }),
      noBold: true,
      flexWidthValues: true
    }), /*#__PURE__*/_react.default.createElement(_multilayerFeeMessage.default, {
      transaction: txData,
      layer2fee: hexTransactionTotal,
      nativeCurrency: nativeCurrency,
      plainStyle: true
    })) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, t('feeAssociatedRequest')), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content__fee"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content__primary-fee"
    }, useCurrencyRateCheck && (0, _confirmTx.formatCurrency)(fiatTransactionTotal, currentCurrency)), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__transaction-details-content__secondary-fee"
    }, `${ethTransactionTotal} ${nativeCurrency}`))));
  }
  renderERC721OrERC1155PermissionContent() {
    const {
      t
    } = this.context;
    const {
      origin,
      toAddress,
      isContract,
      isSetApproveForAll,
      tokenSymbol
    } = this.props;
    const titleTokenDescription = this.getTitleTokenDescription();
    const approvedAssetText = tokenSymbol ? t('allOfYour', [titleTokenDescription]) : t('allYourNFTsOf', [titleTokenDescription]);
    const displayedAddress = isContract ? `${t('contract')} (${(0, _util.addressSummary)(toAddress)})` : (0, _util.addressSummary)(toAddress);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-column"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, t('accessAndSpendNoticeNFT', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__label"
    }, t('approvedAsset'), ":"), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, isSetApproveForAll ? approvedAssetText : titleTokenDescription)), /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__label"
    }, t('grantedToWithColon')), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, displayedAddress), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__medium-text"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      ariaLabel: "copy",
      onClick: () => (0, _copyToClipboard.default)(toAddress),
      color: _designSystem.IconColor.iconDefault,
      iconName: this.state.copied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
      title: this.state.copied ? t('copiedExclamation') : t('copyToClipboard')
    }))));
  }
  renderDataContent() {
    const {
      t
    } = this.context;
    const {
      data,
      isSetApproveForAll,
      isApprovalOrRejection
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "flex-column"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, isSetApproveForAll ? t('functionSetApprovalForAll') : t('functionApprove')), isSetApproveForAll && isApprovalOrRejection !== undefined ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text"
    }, `${t('parameters')}: ${isApprovalOrRejection}`) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__small-text confirm-approve-content__data__data-block"
    }, data));
  }
  renderFullDetails() {
    const {
      t
    } = this.context;
    const {
      assetStandard
    } = this.props;
    if (assetStandard === _transaction.TokenStandard.ERC721 || assetStandard === _transaction.TokenStandard.ERC1155) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__full-tx-content"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__permission"
      }, this.renderApproveContentCard({
        symbol: /*#__PURE__*/_react.default.createElement("i", {
          className: "fas fa-user-check"
        }),
        title: t('permissionRequest'),
        content: this.renderERC721OrERC1155PermissionContent(),
        showEdit: false
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__data"
      }, this.renderApproveContentCard({
        symbol: /*#__PURE__*/_react.default.createElement("i", {
          className: "fa fa-file"
        }),
        title: t('data'),
        content: this.renderDataContent(),
        noBorder: true
      })));
    }
    return null;
  }
  renderCustomNonceContent() {
    const {
      t
    } = this.context;
    const {
      useNonceField,
      customNonceValue,
      updateCustomNonce,
      getNextNonce,
      nextNonce,
      showCustomizeNonceModal
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, useNonceField && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__custom-nonce-content"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "confirm-approve-content__custom-nonce-header",
      justifyContent: _designSystem.JustifyContent.flexStart
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, t('nonce')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__custom-nonce-edit",
      onClick: () => showCustomizeNonceModal({
        nextNonce,
        customNonceValue,
        updateCustomNonce,
        getNextNonce
      })
    }, t('edit'))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      className: "confirm-approve-content__custom-nonce-value",
      variant: _designSystem.TextVariant.bodySmBold,
      as: "h6"
    }, customNonceValue || nextNonce)));
  }
  getTokenName() {
    const {
      tokenId,
      assetName,
      assetStandard,
      tokenSymbol
    } = this.props;
    const {
      t
    } = this.context;
    let titleTokenDescription = t('token');
    if (assetStandard === _transaction.TokenStandard.ERC721 || assetStandard === _transaction.TokenStandard.ERC1155 ||
    // if we don't have an asset standard but we do have either both an assetname and a tokenID or both a tokenSymbol and tokenId we assume its an NFT
    assetName && tokenId || tokenSymbol && tokenId) {
      if (assetName || tokenSymbol) {
        titleTokenDescription = `${assetName ?? tokenSymbol}`;
      } else {
        titleTokenDescription = t('thisCollection');
      }
    }
    return titleTokenDescription;
  }
  getTitleTokenDescription() {
    const {
      tokenId,
      tokenAddress,
      rpcPrefs,
      chainId,
      userAddress
    } = this.props;
    const useBlockExplorer = (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) || [..._network.TEST_CHAINS, _network.CHAIN_IDS.MAINNET].includes(chainId);
    const titleTokenDescription = this.getTokenName();
    const tokenIdWrapped = tokenId ? ` (#${tokenId})` : '';
    if (useBlockExplorer) {
      const blockExplorerLink = (0, _etherscanLink.getTokenTrackerLink)(tokenAddress, chainId, null, userAddress, {
        blockExplorerUrl: (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) ?? null
      });
      const blockExplorerElement = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("a", {
        href: blockExplorerLink,
        target: "_blank",
        rel: "noopener noreferrer",
        title: tokenAddress,
        className: "confirm-approve-content__approval-asset-link"
      }, titleTokenDescription), tokenIdWrapped && /*#__PURE__*/_react.default.createElement("span", null, tokenIdWrapped));
      return blockExplorerElement;
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-approve-content__approval-asset-title",
      onClick: () => {
        (0, _copyToClipboard.default)(tokenAddress);
      },
      title: tokenAddress
    }, titleTokenDescription), tokenIdWrapped && /*#__PURE__*/_react.default.createElement("span", null, tokenIdWrapped));
  }
  renderTitle() {
    const {
      t
    } = this.context;
    const {
      assetName,
      tokenId,
      tokenSymbol,
      assetStandard,
      isSetApproveForAll,
      isApprovalOrRejection
    } = this.props;
    const titleTokenDescription = this.getTitleTokenDescription();
    let title;
    if (isSetApproveForAll) {
      if (tokenSymbol) {
        title = t('approveAllTokensTitle', [titleTokenDescription]);
        if (isApprovalOrRejection === false) {
          title = t('revokeAllTokensTitle', [titleTokenDescription]);
        }
      } else {
        title = t('approveAllTokensTitleWithoutSymbol', [titleTokenDescription]);
        if (isApprovalOrRejection === false) {
          title = t('revokeAllTokensTitleWithoutSymbol', [titleTokenDescription]);
        }
      }
    } else if (assetStandard === _transaction.TokenStandard.ERC721 || assetStandard === _transaction.TokenStandard.ERC1155 ||
    // if we don't have an asset standard but we do have either both an assetname and a tokenID or both a tokenSymbol and tokenId we assume its an NFT
    assetName && tokenId || tokenSymbol && tokenId) {
      title = t('approveTokenTitle', [titleTokenDescription]);
    }
    return title || t('allowSpendToken', [titleTokenDescription]);
  }
  renderDescription() {
    const {
      t
    } = this.context;
    const {
      assetStandard,
      assetName,
      tokenId,
      tokenSymbol,
      isContract,
      isSetApproveForAll,
      isApprovalOrRejection
    } = this.props;
    const grantee = isContract ? t('contract').toLowerCase() : t('account').toLowerCase();
    let description = t('trustSiteApprovePermission', [grantee]);
    if (isSetApproveForAll && isApprovalOrRejection === false) {
      if (tokenSymbol) {
        description = t('revokeApproveForAllDescription', [this.getTitleTokenDescription()]);
      } else {
        description = t('revokeApproveForAllDescriptionWithoutSymbol', [this.getTitleTokenDescription()]);
      }
    } else if (isSetApproveForAll || assetStandard === _transaction.TokenStandard.ERC721 || assetStandard === _transaction.TokenStandard.ERC1155 ||
    // if we don't have an asset standard but we do have either both an assetname and a tokenID or both a tokenSymbol and tokenId we assume its an NFT
    assetName && tokenId || tokenSymbol && tokenId) {
      if (tokenSymbol) {
        description = t('approveTokenDescription');
      } else {
        description = t('approveTokenDescriptionWithoutSymbol', [this.getTitleTokenDescription()]);
      }
    }
    return description;
  }
  render() {
    var _txData$securityProvi, _txData$securityProvi2, _txData$txParams;
    const {
      t
    } = this.context;
    const {
      siteImage,
      origin,
      tokenSymbol,
      showCustomizeGasModal,
      useNonceField,
      warning,
      txData,
      fromAddressIsLedger,
      toAddress,
      chainId,
      rpcPrefs,
      assetStandard,
      tokenId,
      tokenAddress,
      assetName,
      userAcknowledgedGasMissing,
      setUserAcknowledgedGasMissing,
      renderSimulationFailureWarning
    } = this.props;
    const {
      showFullTxDetails,
      setShowContractDetails
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('confirm-approve-content', {
        'confirm-approve-content--full': showFullTxDetails
      })
    }, (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi = txData.securityProviderResponse) === null || _txData$securityProvi === void 0 ? void 0 : _txData$securityProvi.flagAsDangerous) !== undefined && (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi2 = txData.securityProviderResponse) === null || _txData$securityProvi2 === void 0 ? void 0 : _txData$securityProvi2.flagAsDangerous) !== _securityProviderBannerMessage2.SECURITY_PROVIDER_MESSAGE_SEVERITIES.NOT_MALICIOUS || txData !== null && txData !== void 0 && txData.securityProviderResponse && Object.keys(txData.securityProviderResponse).length === 0 ? /*#__PURE__*/_react.default.createElement(_securityProviderBannerMessage.default, {
      securityProviderResponse: txData.securityProviderResponse
    }) : null, warning && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__custom-nonce-warning"
    }, /*#__PURE__*/_react.default.createElement(_confirmPageContainerContent.ConfirmPageContainerWarning, {
      warning: warning
    })), /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      className: "confirm-approve-content__icon-display-content"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      alignItems: _designSystem.AlignItems.center
    }, /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
      className: "confirm-approve-content__siteimage-identicon",
      fallbackClassName: "confirm-approve-content__siteimage-identicon",
      name: origin,
      url: siteImage
    }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6",
      color: _designSystem.TextColor.textAlternative,
      marginLeft: 1
    }, origin))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__title",
      "data-testid": "confirm-approve-title"
    }, this.renderTitle()), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__description"
    }, this.renderDescription()), /*#__PURE__*/_react.default.createElement(_box.default, {
      marginBottom: 4,
      marginTop: 2
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "confirm-approve-content__verify-contract-details",
      onClick: () => this.setState({
        setShowContractDetails: true
      })
    }, t('verifyContractDetails')), setShowContractDetails && /*#__PURE__*/_react.default.createElement(_contractDetailsModal.default, {
      onClose: () => this.setState({
        setShowContractDetails: false
      }),
      tokenName: tokenSymbol,
      tokenAddress: tokenAddress,
      toAddress: toAddress,
      chainId: chainId,
      rpcPrefs: rpcPrefs,
      tokenId: tokenId,
      assetName: assetName,
      assetStandard: assetStandard
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__card-wrapper"
    }, renderSimulationFailureWarning && /*#__PURE__*/_react.default.createElement(_box.default, {
      paddingTop: 0,
      paddingRight: 6,
      paddingBottom: 4,
      paddingLeft: 6
    }, /*#__PURE__*/_react.default.createElement(_simulationErrorMessage.default, {
      userAcknowledgedGasMissing: userAcknowledgedGasMissing,
      setUserAcknowledgedGasMissing: () => setUserAcknowledgedGasMissing(true)
    })), this.renderApproveContentCard({
      symbol: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Tag
      }),
      title: t('transactionFee'),
      showEdit: true,
      showAdvanceGasFeeOptions: true,
      onEditClick: showCustomizeGasModal,
      content: this.renderTransactionDetailsContent(),
      noBorder: useNonceField || !showFullTxDetails,
      footer: !useNonceField && /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__view-full-tx-button-wrapper",
        onClick: () => this.setState({
          showFullTxDetails: !this.state.showFullTxDetails
        })
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__view-full-tx-button cursor-pointer"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__small-blue-text"
      }, this.state.showFullTxDetails ? t('hideFullTransactionDetails') : t('viewFullTransactionDetails')), /*#__PURE__*/_react.default.createElement("i", {
        className: (0, _classnames.default)({
          'fa fa-caret-up': showFullTxDetails,
          'fa fa-caret-down': !showFullTxDetails
        })
      })))
    }), useNonceField && this.renderApproveContentCard({
      showHeader: false,
      content: this.renderCustomNonceContent(),
      useNonceField,
      noBorder: !showFullTxDetails,
      footer: /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__view-full-tx-button-wrapper",
        onClick: () => this.setState({
          showFullTxDetails: !this.state.showFullTxDetails
        })
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__view-full-tx-button cursor-pointer"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__small-blue-text"
      }, this.state.showFullTxDetails ? t('hideFullTransactionDetails') : t('viewFullTransactionDetails')), /*#__PURE__*/_react.default.createElement("i", {
        className: (0, _classnames.default)({
          'fa fa-caret-up': showFullTxDetails,
          'fa fa-caret-down': !showFullTxDetails
        })
      })))
    })), fromAddressIsLedger ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__ledger-instruction-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
      showDataInstruction: Boolean((_txData$txParams = txData.txParams) === null || _txData$txParams === void 0 ? void 0 : _txData$txParams.data)
    })) : null, showFullTxDetails ? this.renderFullDetails() : null);
  }
}
exports.default = ConfirmApproveContent;
_defineProperty(ConfirmApproveContent, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(ConfirmApproveContent, "propTypes", {
  tokenSymbol: _propTypes.default.string,
  siteImage: _propTypes.default.string,
  showCustomizeGasModal: _propTypes.default.func,
  origin: _propTypes.default.string,
  data: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  currentCurrency: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  ethTransactionTotal: _propTypes.default.string,
  useNonceField: _propTypes.default.bool,
  customNonceValue: _propTypes.default.string,
  updateCustomNonce: _propTypes.default.func,
  getNextNonce: _propTypes.default.func,
  nextNonce: _propTypes.default.number,
  showCustomizeNonceModal: _propTypes.default.func,
  warning: _propTypes.default.string,
  txData: _propTypes.default.object,
  fromAddressIsLedger: _propTypes.default.bool,
  chainId: _propTypes.default.string,
  tokenAddress: _propTypes.default.string,
  rpcPrefs: _propTypes.default.object,
  isContract: _propTypes.default.bool,
  hexTransactionTotal: _propTypes.default.string,
  hexMinimumTransactionFee: _propTypes.default.string,
  isMultiLayerFeeNetwork: _propTypes.default.bool,
  supportsEIP1559: _propTypes.default.bool,
  assetName: _propTypes.default.string,
  tokenId: _propTypes.default.string,
  assetStandard: _propTypes.default.string,
  isSetApproveForAll: _propTypes.default.bool,
  isApprovalOrRejection: _propTypes.default.bool,
  userAddress: _propTypes.default.string,
  userAcknowledgedGasMissing: _propTypes.default.bool,
  setUserAcknowledgedGasMissing: _propTypes.default.func,
  renderSimulationFailureWarning: _propTypes.default.bool,
  useCurrencyRateCheck: _propTypes.default.bool,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-approve\\confirm-approve-content\\confirm-approve-content.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve-content\\index.js", {"./confirm-approve-content.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve-content\\confirm-approve-content.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-approve%5Cconfirm-approve-content%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmApproveContent.default;
  }
});
var _confirmApproveContent = _interopRequireDefault(require("./confirm-approve-content.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-approve\\confirm-approve-content\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.js", {"../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/contract-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\contract-utils.ts","../../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","../../components/app/advanced-gas-fee-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\advanced-gas-fee-popover\\index.js","../../components/app/edit-gas-fee-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\index.js","../../components/app/edit-gas-popover/edit-gas-popover.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js","../../components/ui/loading-screen":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../contexts/transaction-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/utils/token-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../../hooks/useApproveTransaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useApproveTransaction.js","../../hooks/useSimulationFailureWarning":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useSimulationFailureWarning.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../confirm-contract-interaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-contract-interaction\\index.js","../confirm-transaction-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","../token-allowance/token-allowance":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\token-allowance\\token-allowance.js","./confirm-approve-content":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve-content\\index.js","./confirm-approve.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-approve%5Cconfirm-approve.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmApprove;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));
var _gas = require("../../../shared/constants/gas");
var _actions = require("../../store/actions");
var _tokenUtil = require("../../helpers/utils/token-util");
var _contractUtils = require("../../../shared/modules/contract-utils");
var _gasFee = require("../../contexts/gasFee");
var _transactionModal = require("../../contexts/transaction-modal");
var _metamask = require("../../ducks/metamask/metamask");
var _confirmContractInteraction = _interopRequireDefault(require("../confirm-contract-interaction"));
var _selectors = require("../../selectors");
var _useApproveTransaction = require("../../hooks/useApproveTransaction");
var _useSimulationFailureWarning = require("../../hooks/useSimulationFailureWarning");
var _advancedGasFeePopover = _interopRequireDefault(require("../../components/app/advanced-gas-fee-popover"));
var _editGasFeePopover = _interopRequireDefault(require("../../components/app/edit-gas-fee-popover"));
var _editGasPopover = _interopRequireDefault(require("../../components/app/edit-gas-popover/edit-gas-popover.component"));
var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));
var _transaction = require("../../../shared/modules/transaction.utils");
var _transaction2 = require("../../../shared/constants/transaction");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _tokenAllowance = _interopRequireDefault(require("../token-allowance/token-allowance"));
var _confirmApprove = require("./confirm-approve.util");
var _confirmApproveContent = _interopRequireDefault(require("./confirm-approve-content"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const isAddressLedgerByFromAddress = address => state => {
  return (0, _metamask.isAddressLedger)(state, address);
};
function ConfirmApprove({
  assetStandard,
  assetName,
  userBalance,
  tokenSymbol,
  decimals,
  tokenImage,
  tokenAmount,
  tokenId,
  userAddress,
  toAddress,
  tokenAddress,
  transaction,
  ethTransactionTotal,
  fiatTransactionTotal,
  hexTransactionTotal,
  hexMinimumTransactionFee,
  isSetApproveForAll
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    txParams: {
      data: transactionData
    } = {}
  } = transaction;
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const subjectMetadata = (0, _reactRedux.useSelector)(_selectors.getSubjectMetadata);
  const useNonceField = (0, _reactRedux.useSelector)(_selectors.getUseNonceField);
  const nextNonce = (0, _reactRedux.useSelector)(_selectors.getNextSuggestedNonce);
  const customNonceValue = (0, _reactRedux.useSelector)(_selectors.getCustomNonceValue);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const isMultiLayerFeeNetwork = (0, _reactRedux.useSelector)(_selectors.getIsMultiLayerFeeNetwork);
  const networkAndAccountSupports1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559);
  const fromAddressIsLedger = (0, _reactRedux.useSelector)(isAddressLedgerByFromAddress(userAddress));
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _reactRedux.useSelector)(_selectors.getPreferences);
  const [customPermissionAmount, setCustomPermissionAmount] = (0, _react.useState)('');
  const [submitWarning, setSubmitWarning] = (0, _react.useState)('');
  const [isContract, setIsContract] = (0, _react.useState)(false);
  const [userAcknowledgedGasMissing, setUserAcknowledgedGasMissing] = (0, _react.useState)(false);
  const supportsEIP1559 = networkAndAccountSupports1559;
  const previousTokenAmount = (0, _react.useRef)(tokenAmount);
  const {
    approveTransaction,
    showCustomizeGasPopover,
    closeCustomizeGasPopover
  } = (0, _useApproveTransaction.useApproveTransaction)();
  const renderSimulationFailureWarning = (0, _useSimulationFailureWarning.useSimulationFailureWarning)(userAcknowledgedGasMissing);
  (0, _react.useEffect)(() => {
    if (customPermissionAmount && previousTokenAmount.current !== tokenAmount) {
      setCustomPermissionAmount(tokenAmount);
    }
    previousTokenAmount.current = tokenAmount;
  }, [customPermissionAmount, tokenAmount]);
  const prevNonce = (0, _react.useRef)(nextNonce);
  const prevCustomNonce = (0, _react.useRef)(customNonceValue);
  (0, _react.useEffect)(() => {
    if (prevNonce.current !== nextNonce || prevCustomNonce.current !== customNonceValue) {
      if (nextNonce !== null && customNonceValue > nextNonce) {
        setSubmitWarning(`Nonce is higher than suggested nonce of ${nextNonce}`);
      } else {
        setSubmitWarning('');
      }
    }
    prevCustomNonce.current = customNonceValue;
    prevNonce.current = nextNonce;
  }, [customNonceValue, nextNonce]);
  const checkIfContract = (0, _react.useCallback)(async () => {
    const {
      isContractAddress
    } = await (0, _contractUtils.readAddressAsContract)(global.eth, toAddress);
    setIsContract(isContractAddress);
  }, [setIsContract, toAddress]);
  (0, _react.useEffect)(() => {
    checkIfContract();
  }, [checkIfContract]);
  const {
    origin
  } = transaction;
  const formattedOrigin = origin || '';
  const {
    iconUrl: siteImage = ''
  } = subjectMetadata[origin] || {};

  // Code below may need a additional look as ERC1155 tokens do not have a name
  let tokensText;
  if (assetStandard === _transaction2.TokenStandard.ERC721 || assetStandard === _transaction2.TokenStandard.ERC1155) {
    tokensText = assetName;
  }
  const tokenBalance = userBalance ? (0, _transactionsControllerUtils.calcTokenAmount)(userBalance, decimals).toString(10) : '';
  const customData = customPermissionAmount ? (0, _confirmApprove.getCustomTxParamsData)(transactionData, {
    customPermissionAmount,
    decimals
  }) : null;
  const parsedTransactionData = (0, _transaction.parseStandardTokenTransactionData)(transactionData);
  const isApprovalOrRejection = (0, _tokenUtil.getTokenApprovedParam)(parsedTransactionData);
  if (tokenSymbol === undefined && assetName === undefined) {
    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null);
  }
  if (assetStandard === undefined) {
    return /*#__PURE__*/_react.default.createElement(_confirmContractInteraction.default, null);
  }
  if (assetStandard === _transaction2.TokenStandard.ERC20) {
    return /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
      transaction: transaction
    }, /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, null, /*#__PURE__*/_react.default.createElement(_tokenAllowance.default, {
      origin: formattedOrigin,
      siteImage: siteImage,
      showCustomizeGasModal: approveTransaction,
      useNonceField: useNonceField,
      currentCurrency: currentCurrency,
      nativeCurrency: nativeCurrency,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexTransactionTotal: hexTransactionTotal,
      hexMinimumTransactionFee: hexMinimumTransactionFee,
      txData: transaction,
      isMultiLayerFeeNetwork: isMultiLayerFeeNetwork,
      supportsEIP1559: supportsEIP1559,
      userAddress: userAddress,
      tokenAddress: tokenAddress,
      data: transactionData,
      isSetApproveForAll: isSetApproveForAll,
      isApprovalOrRejection: isApprovalOrRejection,
      dappProposedTokenAmount: tokenAmount,
      currentTokenBalance: tokenBalance,
      toAddress: toAddress,
      tokenSymbol: tokenSymbol,
      decimals: decimals,
      fromAddressIsLedger: fromAddressIsLedger
    }), showCustomizeGasPopover && !supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
      onClose: closeCustomizeGasPopover,
      mode: _gas.EditGasModes.modifyInPlace,
      transaction: transaction
    }), supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))));
  }
  return /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
    transaction: transaction
  }, /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    toAddress: toAddress,
    identiconAddress: toAddress,
    showAccountInHeader: true,
    title: tokensText,
    tokenAddress: tokenAddress,
    customTokenAmount: String(customPermissionAmount),
    dappProposedTokenAmount: tokenAmount,
    currentTokenBalance: tokenBalance,
    isApprovalOrRejection: isApprovalOrRejection,
    contentComponent: /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, null, /*#__PURE__*/_react.default.createElement(_confirmApproveContent.default, {
      userAddress: userAddress,
      isSetApproveForAll: isSetApproveForAll,
      isApprovalOrRejection: isApprovalOrRejection,
      siteImage: siteImage,
      origin: formattedOrigin,
      tokenSymbol: tokenSymbol,
      tokenImage: tokenImage,
      tokenId: tokenId,
      assetName: assetName,
      assetStandard: assetStandard,
      tokenAddress: tokenAddress,
      showCustomizeGasModal: approveTransaction,
      data: customData || transactionData,
      toAddress: toAddress,
      currentCurrency: currentCurrency,
      nativeCurrency: nativeCurrency,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexTransactionTotal: hexTransactionTotal,
      hexMinimumTransactionFee: hexMinimumTransactionFee,
      useNonceField: useNonceField,
      nextNonce: nextNonce,
      customNonceValue: customNonceValue,
      userAcknowledgedGasMissing: userAcknowledgedGasMissing,
      setUserAcknowledgedGasMissing: setUserAcknowledgedGasMissing,
      renderSimulationFailureWarning: renderSimulationFailureWarning,
      updateCustomNonce: value => {
        dispatch((0, _actions.updateCustomNonce)(value));
      },
      getNextNonce: () => dispatch((0, _actions.getNextNonce)()),
      showCustomizeNonceModal: ({
        /* eslint-disable no-shadow */
        useNonceField,
        nextNonce,
        customNonceValue,
        updateCustomNonce,
        getNextNonce
        /* eslint-disable no-shadow */
      }) => dispatch((0, _actions.showModal)({
        name: 'CUSTOMIZE_NONCE',
        useNonceField,
        nextNonce,
        customNonceValue,
        updateCustomNonce,
        getNextNonce
      })),
      warning: submitWarning,
      txData: transaction,
      fromAddressIsLedger: fromAddressIsLedger,
      chainId: chainId,
      rpcPrefs: rpcPrefs,
      isContract: isContract,
      isMultiLayerFeeNetwork: isMultiLayerFeeNetwork,
      supportsEIP1559: supportsEIP1559,
      useCurrencyRateCheck: useCurrencyRateCheck,
      useNativeCurrencyAsPrimaryCurrency: useNativeCurrencyAsPrimaryCurrency
    }), showCustomizeGasPopover && !supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
      onClose: closeCustomizeGasPopover,
      mode: _gas.EditGasModes.modifyInPlace,
      transaction: transaction
    }), supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))),
    hideSenderToRecipient: true,
    customTxParamsData: customData,
    assetStandard: assetStandard
  }));
}
ConfirmApprove.propTypes = {
  assetStandard: _propTypes.default.string,
  assetName: _propTypes.default.string,
  tokenAddress: _propTypes.default.string,
  userBalance: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  decimals: _propTypes.default.string,
  tokenImage: _propTypes.default.string,
  tokenAmount: _propTypes.default.string,
  tokenId: _propTypes.default.string,
  userAddress: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  transaction: _propTypes.default.shape({
    origin: _propTypes.default.string,
    txParams: _propTypes.default.shape({
      data: _propTypes.default.string,
      to: _propTypes.default.string,
      from: _propTypes.default.string
    })
  }),
  ethTransactionTotal: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  hexTransactionTotal: _propTypes.default.string,
  hexMinimumTransactionFee: _propTypes.default.string,
  isSetApproveForAll: _propTypes.default.bool
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-approve\\confirm-approve.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js", {"../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/lib/swaps-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\swaps-utils.js","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","../../helpers/utils/token-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-approve%5Cconfirm-approve.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCustomTxParamsData = getCustomTxParamsData;
var _swapsUtils = require("../../../shared/lib/swaps-utils");
var _transaction = require("../../../shared/constants/transaction");
var _transaction2 = require("../../../shared/modules/transaction.utils");
var _tokenUtil = require("../../helpers/utils/token-util");
var _conversion = require("../../../shared/modules/conversion.utils");
function getCustomTxParamsData(data, {
  customPermissionAmount,
  decimals
}) {
  const tokenData = (0, _transaction2.parseStandardTokenTransactionData)(data);
  if (!tokenData) {
    throw new Error('Invalid data');
  } else if (tokenData.name !== _transaction.TransactionType.tokenMethodApprove) {
    throw new Error(`Invalid data; should be 'approve' method, but instead is '${tokenData.name}'`);
  }
  let spender = (0, _tokenUtil.getTokenAddressParam)(tokenData);
  if (spender.startsWith('0x')) {
    spender = spender.substring(2);
  }
  const [signature, tokenValue] = data.split(spender);
  if (!signature || !tokenValue) {
    throw new Error('Invalid data');
  } else if (tokenValue.length !== 64) {
    throw new Error('Invalid token value; should be exactly 64 hex digits long (u256)');
  }
  let customPermissionValue = (0, _conversion.decimalToHex)((0, _swapsUtils.calcTokenValue)(customPermissionAmount, decimals));
  if (customPermissionValue.length > 64) {
    throw new Error('Custom value is larger than u256');
  }
  customPermissionValue = customPermissionValue.padStart(tokenValue.length, '0');
  const customTxParamsData = `${signature}${spender}${customPermissionValue}`;
  return customTxParamsData;
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-approve\\confirm-approve.util.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\index.js", {"./confirm-approve":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-approve%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmApprove.default;
  }
});
var _confirmApprove = _interopRequireDefault(require("./confirm-approve"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-approve\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-contract-interaction\\confirm-contract-interaction.js", {"../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../confirm-transaction-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-contract-interaction%5Cconfirm-contract-interaction.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmContractInteraction;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));
var _routes = require("../../helpers/constants/routes");
var _send = require("../../ducks/send");
var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");
var _transaction = require("../../../shared/constants/transaction");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConfirmContractInteraction() {
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const handleEditTransaction = async ({
    txData
  }) => {
    const {
      id
    } = txData;
    await dispatch((0, _send.editExistingTransaction)(_transaction.AssetType.native, id.toString()));
    dispatch((0, _confirmTransaction.clearConfirmTransaction)());
  };
  const handleEdit = confirmTransactionData => {
    handleEditTransaction(confirmTransactionData).then(() => {
      history.push(_routes.SEND_ROUTE);
    });
  };
  return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    actionKey: "confirm",
    onEdit: confirmTransactionData => handleEdit(confirmTransactionData)
  });
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-contract-interaction\\confirm-contract-interaction.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-contract-interaction\\index.js", {"./confirm-contract-interaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-contract-interaction\\confirm-contract-interaction.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-contract-interaction%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmContractInteraction.default;
  }
});
var _confirmContractInteraction = _interopRequireDefault(require("./confirm-contract-interaction"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-contract-interaction\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.component.js", {"../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../components/app/account-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\account-list-item\\index.js","../../components/component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../components/ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","copy-to-clipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-decrypt-message%5Cconfirm-decrypt-message.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _classnames = _interopRequireDefault(require("classnames"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _accountListItem = _interopRequireDefault(require("../../components/app/account-list-item"));
var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));
var _tooltip = _interopRequireDefault(require("../../components/ui/tooltip"));
var _pageContainer = require("../../components/ui/page-container");
var _metametrics = require("../../../shared/constants/metametrics");
var _time = require("../../../shared/constants/time");
var _Numeric = require("../../../shared/modules/Numeric");
var _common = require("../../../shared/constants/common");
var _componentLibrary = require("../../components/component-library");
var _designSystem = require("../../helpers/constants/design-system");
var _confirmTx = require("../../helpers/utils/confirm-tx.util");
var _conversion = require("../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmDecryptMessage extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      copyToClipboardPressed: false,
      hasCopied: false
    });
    _defineProperty(this, "copyMessage", () => {
      (0, _copyToClipboard.default)(this.state.rawMessage);
      this.context.trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Messages,
        event: 'Copy',
        properties: {
          action: 'Decrypt Message Copy',
          legacy_event: true
        }
      });
      this.setState({
        hasCopied: true
      });
      setTimeout(() => this.setState({
        hasCopied: false
      }), _time.SECOND * 3);
    });
    _defineProperty(this, "renderHeader", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header-background"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header__text"
      }, this.context.t('decryptRequest')), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header__tip-container"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__header__tip"
      })));
    });
    _defineProperty(this, "renderAccount", () => {
      const {
        fromAccount
      } = this.props;
      const {
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__account"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__account-text"
      }, `${t('account')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__account-item"
      }, /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
        account: fromAccount
      })));
    });
    _defineProperty(this, "renderBalance", () => {
      const {
        conversionRate,
        nativeCurrency,
        currentCurrency,
        fromAccount: {
          balance
        }
      } = this.props;
      const {
        t
      } = this.context;
      const nativeCurrencyBalance = conversionRate ? (0, _confirmTx.formatCurrency)((0, _conversion.getValueFromWeiHex)({
        value: balance,
        fromCurrency: nativeCurrency,
        toCurrency: currentCurrency,
        conversionRate,
        numberOfDecimals: 6,
        toDenomination: _common.EtherDenomination.ETH
      }), currentCurrency) : new _Numeric.Numeric(balance, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.ETH).round(6).toBase(10).toString();
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__balance"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__balance-text"
      }, `${t('balance')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__balance-value"
      }, `${nativeCurrencyBalance} ${conversionRate ? currentCurrency === null || currentCurrency === void 0 ? void 0 : currentCurrency.toUpperCase() : nativeCurrency}`));
    });
    _defineProperty(this, "renderRequestIcon", () => {
      const {
        requesterAddress
      } = this.props;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__request-icon"
      }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
        diameter: 40,
        address: requesterAddress
      }));
    });
    _defineProperty(this, "renderAccountInfo", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__account-info"
      }, this.renderAccount(), this.renderRequestIcon(), this.renderBalance());
    });
    _defineProperty(this, "renderBody", () => {
      const {
        decryptMessageInline,
        subjectMetadata,
        txData
      } = this.props;
      const {
        t
      } = this.context;
      const targetSubjectMetadata = subjectMetadata[txData.msgParams.origin];
      const name = (targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.name) || txData.msgParams.origin;
      const notice = t('decryptMessageNotice', [txData.msgParams.origin]);
      const {
        hasCopied,
        hasDecrypted,
        hasError,
        rawMessage,
        errorMessage,
        copyToClipboardPressed
      } = this.state;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__body"
      }, this.renderAccountInfo(), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__visual"
      }, /*#__PURE__*/_react.default.createElement("section", null, targetSubjectMetadata !== null && targetSubjectMetadata !== void 0 && targetSubjectMetadata.iconUrl ? /*#__PURE__*/_react.default.createElement("img", {
        className: "request-decrypt-message__visual-identicon",
        src: targetSubjectMetadata.iconUrl,
        alt: ""
      }) : /*#__PURE__*/_react.default.createElement("i", {
        className: "request-decrypt-message__visual-identicon--default"
      }, name.charAt(0).toUpperCase()), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__notice"
      }, notice))), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message-text"
      }, !hasDecrypted && !hasError ? txData.msgParams.data : rawMessage, hasError ? errorMessage : ''), /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('request-decrypt-message__message-cover', {
          'request-decrypt-message__message-lock--pressed': hasDecrypted || hasError
        })
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('request-decrypt-message__message-lock', {
          'request-decrypt-message__message-lock--pressed': hasDecrypted || hasError
        }),
        onClick: event => {
          decryptMessageInline(txData, event).then(result => {
            if (result.error) {
              this.setState({
                hasError: true,
                errorMessage: this.context.t('decryptInlineError', [result.error])
              });
            } else {
              this.setState({
                hasDecrypted: true,
                rawMessage: result.rawSig
              });
            }
          });
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message-lock__container"
      }, /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-lock fa-lg request-decrypt-message__message-lock__container__icon"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message-lock__container__text"
      }, t('decryptMetamask'))))), hasDecrypted ? /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)({
          'request-decrypt-message__message-copy': true,
          'request-decrypt-message__message-copy--pressed': copyToClipboardPressed
        }),
        onClick: () => this.copyMessage(),
        onMouseDown: () => this.setState({
          copyToClipboardPressed: true
        }),
        onMouseUp: () => this.setState({
          copyToClipboardPressed: false
        })
      }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        position: "bottom",
        title: hasCopied ? t('copiedExclamation') : t('copyToClipboard'),
        wrapperClassName: "request-decrypt-message__message-copy-tooltip",
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__message-copy-text"
      }, t('decryptCopy')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: hasCopied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
        color: _designSystem.IconColor.primaryDefault
      }))) : /*#__PURE__*/_react.default.createElement("div", null));
    });
    _defineProperty(this, "renderFooter", () => {
      const {
        cancelDecryptMessage,
        clearConfirmTransaction,
        decryptMessage,
        history,
        mostRecentOverviewPage,
        txData
      } = this.props;
      const {
        trackEvent,
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
        cancelText: t('cancel'),
        submitText: t('decrypt'),
        onCancel: async event => {
          await cancelDecryptMessage(txData, event);
          trackEvent({
            category: _metametrics.MetaMetricsEventCategory.Messages,
            event: 'Cancel',
            properties: {
              action: 'Decrypt Message Request',
              legacy_event: true
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        },
        onSubmit: async event => {
          await decryptMessage(txData, event);
          trackEvent({
            category: _metametrics.MetaMetricsEventCategory.Messages,
            event: 'Confirm',
            properties: {
              action: 'Decrypt Message Request',
              legacy_event: true
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      });
    });
    _defineProperty(this, "render", () => {
      if (!this.props.txData) {
        _loglevel.default.warn('ConfirmDecryptMessage Page: Missing txData prop.');
        return null;
      }
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-decrypt-message__container"
      }, this.renderHeader(), this.renderBody(), this.renderFooter());
    });
  }
}
exports.default = ConfirmDecryptMessage;
_defineProperty(ConfirmDecryptMessage, "contextTypes", {
  t: _propTypes.default.func.isRequired,
  trackEvent: _propTypes.default.func.isRequired
});
_defineProperty(ConfirmDecryptMessage, "propTypes", {
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,
  clearConfirmTransaction: _propTypes.default.func.isRequired,
  cancelDecryptMessage: _propTypes.default.func.isRequired,
  decryptMessage: _propTypes.default.func.isRequired,
  decryptMessageInline: _propTypes.default.func.isRequired,
  history: _propTypes.default.object.isRequired,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  requesterAddress: _propTypes.default.string,
  txData: _propTypes.default.object,
  subjectMetadata: _propTypes.default.object,
  nativeCurrency: _propTypes.default.string.isRequired,
  currentCurrency: _propTypes.default.string.isRequired,
  conversionRate: _propTypes.default.number
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./confirm-decrypt-message.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.component.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-decrypt-message%5Cconfirm-decrypt-message.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reactRouterDom = require("react-router-dom");
var _lodash = require("lodash");
var _actions = require("../../store/actions");
var _selectors = require("../../selectors");
var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");
var _history = require("../../ducks/history/history");
var _metamask = require("../../ducks/metamask/metamask");
var _confirmDecryptMessage = _interopRequireDefault(require("./confirm-decrypt-message.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToProps(state) {
  var _txData$msgParams;
  const {
    metamask: {
      subjectMetadata = {}
    }
  } = state;
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const txData = (0, _lodash.cloneDeep)(unconfirmedTransactions[0]);
  const fromAccount = (0, _selectors.getTargetAccountWithSendEtherInfo)(state, txData === null || txData === void 0 ? void 0 : (_txData$msgParams = txData.msgParams) === null || _txData$msgParams === void 0 ? void 0 : _txData$msgParams.from);
  return {
    txData,
    subjectMetadata,
    fromAccount,
    requester: null,
    requesterAddress: null,
    conversionRate: useNativeCurrencyAsPrimaryCurrency ? null : (0, _selectors.conversionRateSelector)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    currentCurrency: (0, _selectors.getCurrentCurrency)(state)
  };
}
function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    decryptMessage: (msgData, event) => {
      const params = msgData.msgParams;
      params.metamaskId = msgData.id;
      event.stopPropagation(event);
      return dispatch((0, _actions.decryptMsg)(params));
    },
    cancelDecryptMessage: (msgData, event) => {
      event.stopPropagation(event);
      return dispatch((0, _actions.cancelDecryptMsg)(msgData));
    },
    decryptMessageInline: (msgData, event) => {
      const params = msgData.msgParams;
      params.metamaskId = msgData.id;
      event.stopPropagation(event);
      return dispatch((0, _actions.decryptMsgInline)(params));
    }
  };
}
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmDecryptMessage.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\index.js", {"./confirm-decrypt-message.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-decrypt-message\\confirm-decrypt-message.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-decrypt-message%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmDecryptMessage.default;
  }
});
var _confirmDecryptMessage = _interopRequireDefault(require("./confirm-decrypt-message.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-decrypt-message\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.component.js", {"../../../shared/modules/buffer-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\buffer-utils.js","../../components/component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../components/ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../confirm-transaction-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-deploy-contract%5Cconfirm-deploy-contract.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));
var _bufferUtils = require("../../../shared/modules/buffer-utils");
var _box = _interopRequireDefault(require("../../components/ui/box"));
var _componentLibrary = require("../../components/component-library");
var _designSystem = require("../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmDeployContract extends _react.Component {
  renderData() {
    const {
      t
    } = this.context;
    const {
      txData: {
        origin,
        txParams: {
          data
        } = {}
      } = {}
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      color: _designSystem.Color.textAlternative,
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      backgroundColor: _designSystem.Color.backgroundAlternative,
      padding: 4,
      variant: _designSystem.TextVariant.bodySm
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      backgroundColor: _designSystem.Color.backgroundAlternative,
      marginBottom: 1,
      paddingRight: 4,
      variant: _designSystem.TextVariant.bodySmBold
    }, `${t('origin')}:`), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      overflowWrap: _designSystem.OVERFLOW_WRAP.BREAK_WORD,
      variant: _designSystem.TextVariant.bodySm
    }, origin)), /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      backgroundColor: _designSystem.Color.backgroundAlternative,
      paddingRight: 4,
      variant: _designSystem.TextVariant.bodySmBold
    }, `${t('bytes')}:`), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm
    }, (0, _bufferUtils.toBuffer)(data).length))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      as: "h3",
      paddingBottom: 3,
      paddingTop: 2,
      textTransform: _designSystem.TEXT_TRANSFORM.UPPERCASE,
      variant: _designSystem.TextVariant.bodySm
    }, `${t('hexData')}:`), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      backgroundColor: _designSystem.Color.backgroundAlternative,
      overflowWrap: _designSystem.OVERFLOW_WRAP.BREAK_WORD,
      padding: 4,
      variant: _designSystem.TextVariant.bodySm
    }, data));
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
      actionKey: "contractDeployment",
      dataComponent: this.renderData()
    });
  }
}
exports.default = ConfirmDeployContract;
_defineProperty(ConfirmDeployContract, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(ConfirmDeployContract, "propTypes", {
  txData: _propTypes.default.object
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.container.js", {"./confirm-deploy-contract.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-deploy-contract%5Cconfirm-deploy-contract.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _confirmDeployContract = _interopRequireDefault(require("./confirm-deploy-contract.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const {
    confirmTransaction: {
      txData
    } = {}
  } = state;
  return {
    txData
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps)(_confirmDeployContract.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\index.js", {"./confirm-deploy-contract.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-deploy-contract\\confirm-deploy-contract.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-deploy-contract%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmDeployContract.default;
  }
});
var _confirmDeployContract = _interopRequireDefault(require("./confirm-deploy-contract.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-deploy-contract\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.component.js", {"../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../components/app/account-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\account-list-item\\index.js","../../components/ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../components/ui/site-origin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-encryption-public-key%5Cconfirm-encryption-public-key.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _accountListItem = _interopRequireDefault(require("../../components/app/account-list-item"));
var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));
var _pageContainer = require("../../components/ui/page-container");
var _metametrics = require("../../../shared/constants/metametrics");
var _siteOrigin = _interopRequireDefault(require("../../components/ui/site-origin"));
var _Numeric = require("../../../shared/modules/Numeric");
var _common = require("../../../shared/constants/common");
var _confirmTx = require("../../helpers/utils/confirm-tx.util");
var _conversion = require("../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmEncryptionPublicKey extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "renderHeader", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header-background"
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header__text"
      }, this.context.t('encryptionPublicKeyRequest')), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header__tip-container"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__header__tip"
      })));
    });
    _defineProperty(this, "renderAccount", () => {
      const {
        fromAccount
      } = this.props;
      const {
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__account"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__account-text"
      }, `${t('account')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__account-item"
      }, /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
        account: fromAccount
      })));
    });
    _defineProperty(this, "renderBalance", () => {
      const {
        conversionRate,
        nativeCurrency,
        currentCurrency,
        fromAccount: {
          balance
        }
      } = this.props;
      const {
        t
      } = this.context;
      const nativeCurrencyBalance = conversionRate ? (0, _confirmTx.formatCurrency)((0, _conversion.getValueFromWeiHex)({
        value: balance,
        fromCurrency: nativeCurrency,
        toCurrency: currentCurrency,
        conversionRate,
        numberOfDecimals: 6,
        toDenomination: _common.EtherDenomination.ETH
      }), currentCurrency) : new _Numeric.Numeric(balance, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.ETH).round(6).toBase(10).toString();
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__balance"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__balance-text"
      }, `${t('balance')}:`), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__balance-value"
      }, `${nativeCurrencyBalance} ${conversionRate ? currentCurrency === null || currentCurrency === void 0 ? void 0 : currentCurrency.toUpperCase() : nativeCurrency}`));
    });
    _defineProperty(this, "renderRequestIcon", () => {
      const {
        requesterAddress
      } = this.props;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__request-icon"
      }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
        diameter: 40,
        address: requesterAddress
      }));
    });
    _defineProperty(this, "renderAccountInfo", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__account-info"
      }, this.renderAccount(), this.renderRequestIcon(), this.renderBalance());
    });
    _defineProperty(this, "renderBody", () => {
      const {
        subjectMetadata,
        txData
      } = this.props;
      const {
        t
      } = this.context;
      const targetSubjectMetadata = subjectMetadata[txData.origin];
      const notice = t('encryptionPublicKeyNotice', [/*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
        siteOrigin: txData.origin,
        key: txData.origin
      })]);
      const name = (targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.hostname) || txData.origin;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__body"
      }, this.renderAccountInfo(), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__visual"
      }, /*#__PURE__*/_react.default.createElement("section", null, targetSubjectMetadata !== null && targetSubjectMetadata !== void 0 && targetSubjectMetadata.iconUrl ? /*#__PURE__*/_react.default.createElement("img", {
        className: "request-encryption-public-key__visual-identicon",
        src: targetSubjectMetadata.iconUrl,
        alt: ""
      }) : /*#__PURE__*/_react.default.createElement("i", {
        className: "request-encryption-public-key__visual-identicon--default"
      }, name.charAt(0).toUpperCase()), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__notice"
      }, notice))));
    });
    _defineProperty(this, "renderFooter", () => {
      const {
        cancelEncryptionPublicKey,
        clearConfirmTransaction,
        encryptionPublicKey,
        history,
        mostRecentOverviewPage,
        txData
      } = this.props;
      const {
        t,
        trackEvent
      } = this.context;
      return /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
        cancelText: t('cancel'),
        submitText: t('provide'),
        onCancel: async event => {
          await cancelEncryptionPublicKey(txData, event);
          trackEvent({
            category: _metametrics.MetaMetricsEventCategory.Messages,
            event: 'Cancel',
            properties: {
              action: 'Encryption public key Request',
              legacy_event: true
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        },
        onSubmit: async event => {
          await encryptionPublicKey(txData, event);
          this.context.trackEvent({
            category: _metametrics.MetaMetricsEventCategory.Messages,
            event: 'Confirm',
            properties: {
              action: 'Encryption public key Request',
              legacy_event: true
            }
          });
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      });
    });
    _defineProperty(this, "render", () => {
      if (!this.props.txData) {
        _loglevel.default.warn('ConfirmEncryptionPublicKey Page: Missing txData prop.');
        return null;
      }
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-encryption-public-key__container"
      }, this.renderHeader(), this.renderBody(), this.renderFooter());
    });
  }
}
exports.default = ConfirmEncryptionPublicKey;
_defineProperty(ConfirmEncryptionPublicKey, "contextTypes", {
  t: _propTypes.default.func.isRequired,
  trackEvent: _propTypes.default.func.isRequired
});
_defineProperty(ConfirmEncryptionPublicKey, "propTypes", {
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,
  clearConfirmTransaction: _propTypes.default.func.isRequired,
  cancelEncryptionPublicKey: _propTypes.default.func.isRequired,
  encryptionPublicKey: _propTypes.default.func.isRequired,
  history: _propTypes.default.object.isRequired,
  requesterAddress: _propTypes.default.string,
  txData: _propTypes.default.object,
  subjectMetadata: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  nativeCurrency: _propTypes.default.string.isRequired,
  currentCurrency: _propTypes.default.string.isRequired,
  conversionRate: _propTypes.default.number
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./confirm-encryption-public-key.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-encryption-public-key%5Cconfirm-encryption-public-key.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reactRouterDom = require("react-router-dom");
var _actions = require("../../store/actions");
var _selectors = require("../../selectors");
var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");
var _history = require("../../ducks/history/history");
var _metamask = require("../../ducks/metamask/metamask");
var _confirmEncryptionPublicKey = _interopRequireDefault(require("./confirm-encryption-public-key.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToProps(state) {
  const {
    metamask: {
      subjectMetadata = {}
    }
  } = state;
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const txData = unconfirmedTransactions[0];
  const fromAccount = (0, _selectors.getTargetAccountWithSendEtherInfo)(state, txData === null || txData === void 0 ? void 0 : txData.msgParams);
  return {
    txData,
    subjectMetadata,
    fromAccount,
    requester: null,
    requesterAddress: null,
    conversionRate: useNativeCurrencyAsPrimaryCurrency ? null : (0, _selectors.conversionRateSelector)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    currentCurrency: (0, _selectors.getCurrentCurrency)(state)
  };
}
function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    encryptionPublicKey: (msgData, event) => {
      const params = {
        data: msgData.msgParams,
        metamaskId: msgData.id
      };
      event.stopPropagation();
      return dispatch((0, _actions.encryptionPublicKeyMsg)(params));
    },
    cancelEncryptionPublicKey: (msgData, event) => {
      event.stopPropagation();
      return dispatch((0, _actions.cancelEncryptionPublicKeyMsg)(msgData));
    }
  };
}
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmEncryptionPublicKey.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\index.js", {"./confirm-encryption-public-key.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-encryption-public-key\\confirm-encryption-public-key.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-encryption-public-key%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmEncryptionPublicKey.default;
  }
});
var _confirmEncryptionPublicKey = _interopRequireDefault(require("./confirm-encryption-public-key.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-encryption-public-key\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-import-token\\confirm-import-token.js", {"../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../components/ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../components/ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../components/ui/token-balance":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\token-balance\\index.js","../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../ducks/history/history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-import-token%5Cconfirm-import-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _routes = require("../../helpers/constants/routes");
var _button = _interopRequireDefault(require("../../components/ui/button"));
var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));
var _tokenBalance = _interopRequireDefault(require("../../components/ui/token-balance"));
var _i18n = require("../../contexts/i18n");
var _metametrics = require("../../contexts/metametrics");
var _history = require("../../ducks/history/history");
var _metamask = require("../../ducks/metamask/metamask");
var _actions = require("../../store/actions");
var _metametrics2 = require("../../../shared/constants/metametrics");
var _transaction = require("../../../shared/constants/transaction");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const getTokenName = (name, symbol) => {
  return name === undefined ? symbol : `${name} (${symbol})`;
};
const ConfirmImportToken = () => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const mostRecentOverviewPage = (0, _reactRedux.useSelector)(_history.getMostRecentOverviewPage);
  const pendingTokens = (0, _reactRedux.useSelector)(_metamask.getPendingTokens);
  const handleAddTokens = (0, _react.useCallback)(async () => {
    var _addedTokenValues$0$a;
    await dispatch((0, _actions.addTokens)(pendingTokens));
    const addedTokenValues = Object.values(pendingTokens);
    const firstTokenAddress = addedTokenValues === null || addedTokenValues === void 0 ? void 0 : (_addedTokenValues$0$a = addedTokenValues[0].address) === null || _addedTokenValues$0$a === void 0 ? void 0 : _addedTokenValues$0$a.toLowerCase();
    addedTokenValues.forEach(pendingToken => {
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.TokenAdded,
        category: _metametrics2.MetaMetricsEventCategory.Wallet,
        sensitiveProperties: {
          token_symbol: pendingToken.symbol,
          token_contract_address: pendingToken.address,
          token_decimal_precision: pendingToken.decimals,
          unlisted: pendingToken.unlisted,
          source_connection_method: pendingToken.isCustom ? _metametrics2.MetaMetricsTokenEventSource.Custom : _metametrics2.MetaMetricsTokenEventSource.List,
          token_standard: _transaction.TokenStandard.ERC20,
          asset_type: _transaction.AssetType.token
        }
      });
    });
    dispatch((0, _actions.clearPendingTokens)());
    if (firstTokenAddress) {
      history.push(`${_routes.ASSET_ROUTE}/${firstTokenAddress}`);
    } else {
      history.push(mostRecentOverviewPage);
    }
  }, [dispatch, history, mostRecentOverviewPage, pendingTokens, trackEvent]);
  (0, _react.useEffect)(() => {
    if (Object.keys(pendingTokens).length === 0) {
      history.push(mostRecentOverviewPage);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__title"
  }, t('importTokensCamelCase')), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__subtitle"
  }, t('likeToImportTokens'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__token"
  }, t('token')), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__balance"
  }, t('balance'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__token-list"
  }, Object.entries(pendingTokens).map(([address, token]) => {
    const {
      name,
      symbol
    } = token;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__token-list-item",
      key: address
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__token confirm-import-token__data"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "confirm-import-token__token-icon",
      diameter: 48,
      address: address
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__name"
    }, getTokenName(name, symbol))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__balance"
    }, /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: token
    })));
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__footer"
  }, /*#__PURE__*/_react.default.createElement("footer", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    large: true,
    className: "page-container__footer-button",
    onClick: () => {
      dispatch((0, _actions.clearPendingTokens)());
      history.push(_routes.IMPORT_TOKEN_ROUTE);
    }
  }, t('back')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    large: true,
    className: "page-container__footer-button",
    onClick: handleAddTokens
  }, t('importTokensCamelCase')))));
};
var _default = ConfirmImportToken;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-import-token\\confirm-import-token.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-import-token\\index.js", {"./confirm-import-token":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-import-token\\confirm-import-token.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-import-token%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _confirmImportToken = _interopRequireDefault(require("./confirm-import-token"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _confirmImportToken.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-import-token\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-send-ether\\confirm-send-ether.js", {"../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../confirm-transaction-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-send-ether%5Cconfirm-send-ether.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _transaction = require("../../../shared/constants/transaction");
var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");
var _send = require("../../ducks/send");
var _routes = require("../../helpers/constants/routes");
var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConfirmSendEther = () => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const editTransaction = async txData => {
    const {
      id
    } = txData;
    await dispatch((0, _send.editExistingTransaction)(_transaction.AssetType.native, id.toString()));
    dispatch((0, _confirmTransaction.clearConfirmTransaction)());
  };
  const handleEdit = ({
    txData
  }) => {
    editTransaction(txData).then(() => {
      history.push(_routes.SEND_ROUTE);
    });
  };
  return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    actionKey: "confirm",
    onEdit: confirmTransactionData => handleEdit(confirmTransactionData)
  });
};
var _default = ConfirmSendEther;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-send-ether\\confirm-send-ether.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-send-ether\\index.js", {"./confirm-send-ether":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-send-ether\\confirm-send-ether.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-send-ether%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmSendEther.default;
  }
});
var _confirmSendEther = _interopRequireDefault(require("./confirm-send-ether"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-send-ether\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-send-token\\confirm-send-token.js", {"../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../confirm-token-transaction-base/confirm-token-transaction-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\confirm-token-transaction-base.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-send-token%5Cconfirm-send-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmSendToken;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _confirmTokenTransactionBase = _interopRequireDefault(require("../confirm-token-transaction-base/confirm-token-transaction-base"));
var _routes = require("../../helpers/constants/routes");
var _send = require("../../ducks/send");
var _selectors = require("../../selectors");
var _metamask = require("../../ducks/metamask/metamask");
var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");
var _actions = require("../../store/actions");
var _transaction = require("../../../shared/constants/transaction");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConfirmSendToken({
  assetStandard,
  toAddress,
  tokenAddress,
  assetName,
  tokenSymbol,
  tokenAmount,
  tokenId,
  transaction,
  image,
  ethTransactionTotal,
  fiatTransactionTotal,
  hexMaximumTransactionFee
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const handleEditTransaction = async ({
    txData
  }) => {
    const {
      id
    } = txData;
    await dispatch((0, _send.editExistingTransaction)(_transaction.AssetType.token, id.toString()));
    dispatch((0, _confirmTransaction.clearConfirmTransaction)());
    dispatch((0, _actions.showSendTokenPage)());
  };
  const handleEdit = confirmTransactionData => {
    handleEditTransaction(confirmTransactionData).then(() => {
      history.push(_routes.SEND_ROUTE);
    });
  };
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const contractExchangeRate = (0, _reactRedux.useSelector)(_selectors.contractExchangeRateSelector);
  let title, subtitle;
  if (assetStandard === _transaction.TokenStandard.ERC721) {
    title = assetName;
    subtitle = `#${tokenId}`;
  } else if (assetStandard === _transaction.TokenStandard.ERC20) {
    title = `${tokenAmount} ${tokenSymbol}`;
  }
  return /*#__PURE__*/_react.default.createElement(_confirmTokenTransactionBase.default, {
    onEdit: handleEdit,
    conversionRate: conversionRate,
    currentCurrency: currentCurrency,
    nativeCurrency: nativeCurrency,
    contractExchangeRate: contractExchangeRate,
    title: title,
    subtitle: subtitle,
    assetStandard: assetStandard,
    assetName: assetName,
    tokenSymbol: tokenSymbol,
    tokenAmount: tokenAmount,
    tokenId: tokenId,
    transaction: transaction,
    image: image,
    toAddress: toAddress,
    tokenAddress: tokenAddress,
    ethTransactionTotal: ethTransactionTotal,
    fiatTransactionTotal: fiatTransactionTotal,
    hexMaximumTransactionFee: hexMaximumTransactionFee
  });
}
ConfirmSendToken.propTypes = {
  tokenAmount: _propTypes.default.string,
  assetStandard: _propTypes.default.string,
  assetName: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  image: _propTypes.default.string,
  tokenId: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  tokenAddress: _propTypes.default.string,
  transaction: _propTypes.default.shape({
    origin: _propTypes.default.string,
    txParams: _propTypes.default.shape({
      data: _propTypes.default.string,
      to: _propTypes.default.string,
      from: _propTypes.default.string
    })
  }),
  ethTransactionTotal: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  hexMaximumTransactionFee: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-send-token\\confirm-send-token.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-send-token\\index.js", {"./confirm-send-token":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-send-token\\confirm-send-token.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-send-token%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmSendToken.default;
  }
});
var _confirmSendToken = _interopRequireDefault(require("./confirm-send-token"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-send-token\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-signature-request\\index.js", {"../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../components/app/signature-request":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\index.js","../../components/app/signature-request-original":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\index.js","../../components/app/signature-request-siwe":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\index.js","../../components/ui/loading-screen":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../helpers/utils/tx-helper":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\tx-helper.ts","../../hooks/useRouting":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useRouting.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-signature-request%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _loglevel = _interopRequireDefault(require("loglevel"));
var actions = _interopRequireWildcard(require("../../store/actions"));
var _txHelper = _interopRequireDefault(require("../../helpers/utils/tx-helper"));
var _signatureRequest = _interopRequireDefault(require("../../components/app/signature-request"));
var _signatureRequestSiwe = _interopRequireDefault(require("../../components/app/signature-request-siwe"));
var _signatureRequestOriginal = _interopRequireDefault(require("../../components/app/signature-request-original"));
var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));
var _useRouting = require("../../hooks/useRouting");
var _selectors = require("../../selectors");
var _app = require("../../../shared/constants/app");
var _transaction = require("../../../shared/constants/transaction");
var _send = require("../../ducks/send");
var _metamask = require("../../ducks/metamask/metamask");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SIGN_MESSAGE_TYPE = {
  MESSAGE: 'message',
  PERSONAL: 'personal',
  TYPED: 'typed'
};
const signatureSelect = txData => {
  const {
    type,
    msgParams: {
      version,
      siwe
    }
  } = txData;

  // Temporarily direct only v3 and v4 requests to new code.
  if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA && (version === 'V3' || version === 'V4')) {
    return _signatureRequest.default;
  }
  if (siwe !== null && siwe !== void 0 && siwe.isSIWEMessage) {
    return _signatureRequestSiwe.default;
  }
  return _signatureRequestOriginal.default;
};
const stopPropagation = event => {
  if (event !== null && event !== void 0 && event.stopPropagation) {
    event.stopPropagation();
  }
};
const ConfirmTxScreen = ({
  match
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    navigateToMostRecentOverviewPage
  } = (0, _useRouting.useRouting)();
  const unapprovedMessagesTotal = (0, _reactRedux.useSelector)(_selectors.getTotalUnapprovedSignatureRequestCount);
  const sendTo = (0, _reactRedux.useSelector)(_send.getSendTo);
  const {
    unapprovedTxs,
    identities,
    currentNetworkTxList,
    currentCurrency,
    unapprovedMsgs,
    unapprovedPersonalMsgs,
    unapprovedTypedMessages,
    networkId,
    blockGasLimit
  } = (0, _reactRedux.useSelector)(state => state.metamask);
  const {
    chainId
  } = (0, _reactRedux.useSelector)(_metamask.getProviderConfig);
  const {
    txId: index
  } = (0, _reactRedux.useSelector)(state => state.appState);
  const [prevValue, setPrevValues] = (0, _react.useState)();
  (0, _react.useEffect)(() => {
    const unconfTxList = (0, _txHelper.default)(unapprovedTxs || {}, {}, {}, {}, networkId, chainId);
    if (unconfTxList.length === 0 && !sendTo && unapprovedMessagesTotal === 0) {
      navigateToMostRecentOverviewPage();
    }
  }, []);
  (0, _react.useEffect)(() => {
    if (!prevValue) {
      setPrevValues({
        index,
        unapprovedTxs
      });
      return;
    }
    let prevTx;
    const {
      params: {
        id: transactionId
      } = {}
    } = match;
    if (transactionId) {
      prevTx = currentNetworkTxList.find(({
        id
      }) => `${id}` === transactionId);
    } else {
      const {
        index: prevIndex,
        unapprovedTxs: prevUnapprovedTxs
      } = prevValue;
      const prevUnconfTxList = (0, _txHelper.default)(prevUnapprovedTxs, {}, {}, {}, networkId, chainId);
      const prevTxData = prevUnconfTxList[prevIndex] || {};
      prevTx = currentNetworkTxList.find(({
        id
      }) => id === prevTxData.id) || {};
    }
    const unconfTxList = (0, _txHelper.default)(unapprovedTxs || {}, {}, {}, {}, networkId, chainId);
    if (prevTx && prevTx.status === _transaction.TransactionStatus.dropped) {
      dispatch(actions.showModal({
        name: 'TRANSACTION_CONFIRMED',
        onSubmit: () => navigateToMostRecentOverviewPage()
      }));
      return;
    }
    if (unconfTxList.length === 0 && !sendTo && unapprovedMessagesTotal === 0) {
      navigateToMostRecentOverviewPage();
    }
    setPrevValues({
      index,
      unapprovedTxs
    });
  }, [chainId, currentNetworkTxList, match, networkId, sendTo, unapprovedMessagesTotal, unapprovedTxs]);
  const getTxData = () => {
    const {
      params: {
        id: transactionId
      } = {}
    } = match;
    const unconfTxList = (0, _txHelper.default)(unapprovedTxs || {}, unapprovedMsgs, unapprovedPersonalMsgs, unapprovedTypedMessages, networkId, chainId);
    _loglevel.default.info(`rendering a combined ${unconfTxList.length} unconf msgs & txs`);
    return transactionId ? unconfTxList.find(({
      id
    }) => `${id}` === transactionId) : unconfTxList[index];
  };
  const txData = getTxData() || {};
  const {
    msgParams
  } = txData;
  if (!msgParams) {
    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null);
  }
  const signMessage = type => event => {
    var _action;
    stopPropagation(event);
    const params = txData.msgParams;
    params.metamaskId = txData.id;
    let action;
    if (type === SIGN_MESSAGE_TYPE.MESSAGE) {
      action = actions.signMsg;
    } else if (type === SIGN_MESSAGE_TYPE.PERSONAL) {
      action = actions.signPersonalMsg;
    } else {
      action = actions.signTypedMsg;
    }
    return dispatch((_action = action) === null || _action === void 0 ? void 0 : _action(params));
  };
  const cancelMessage = type => event => {
    stopPropagation(event);
    let action;
    if (type === SIGN_MESSAGE_TYPE.MESSAGE) {
      action = actions.cancelMsg;
    } else if (type === SIGN_MESSAGE_TYPE.PERSONAL) {
      action = actions.cancelPersonalMsg;
    } else {
      action = actions.cancelTypedMsg;
    }
    return dispatch(action(txData));
  };
  const SigComponent = signatureSelect(txData);
  return /*#__PURE__*/_react.default.createElement(SigComponent, {
    txData: txData,
    key: txData.id,
    identities: identities,
    currentCurrency: currentCurrency,
    blockGasLimit: blockGasLimit,
    signMessage: signMessage(SIGN_MESSAGE_TYPE.MESSAGE),
    signPersonalMessage: signMessage(SIGN_MESSAGE_TYPE.PERSONAL),
    signTypedMessage: signMessage(SIGN_MESSAGE_TYPE.TYPED),
    cancelMessage: cancelMessage(SIGN_MESSAGE_TYPE.MESSAGE),
    cancelPersonalMessage: cancelMessage(SIGN_MESSAGE_TYPE.PERSONAL),
    cancelTypedMessage: cancelMessage(SIGN_MESSAGE_TYPE.TYPED)
  });
};
ConfirmTxScreen.propTypes = {
  match: _propTypes.default.shape({
    params: _propTypes.default.shape({
      id: _propTypes.default.string
    })
  })
};
var _default = (0, _reactRouterDom.withRouter)(ConfirmTxScreen);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-signature-request\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\confirm-token-transaction-base.js", {"../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../components/app/user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../confirm-transaction-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-token-transaction-base%5Cconfirm-token-transaction-base.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmTokenTransactionBase;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _reactRedux = require("react-redux");
var _etherscanLink = require("@metamask/etherscan-link");
var _i18n = require("../../contexts/i18n");
var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../components/app/user-preferenced-currency-display"));
var _confirmTx = require("../../helpers/utils/confirm-tx.util");
var _common = require("../../helpers/constants/common");
var _selectors = require("../../selectors");
var _metamask = require("../../ducks/metamask/metamask");
var _transaction = require("../../../shared/constants/transaction");
var _conversion = require("../../../shared/modules/conversion.utils");
var _common2 = require("../../../shared/constants/common");
var _network = require("../../../shared/constants/network");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ConfirmTokenTransactionBase({
  image = '',
  assetName,
  toAddress,
  tokenAddress,
  tokenAmount = '0',
  tokenSymbol,
  tokenId,
  assetStandard,
  onEdit,
  ethTransactionTotal,
  fiatTransactionTotal,
  hexMaximumTransactionFee
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const contractExchangeRate = (0, _reactRedux.useSelector)(_selectors.contractExchangeRateSelector);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const userAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const nftCollections = (0, _reactRedux.useSelector)(_metamask.getNftContracts);
  const ethTransactionTotalMaxAmount = Number((0, _conversion.hexWEIToDecETH)(hexMaximumTransactionFee));
  const getTitleTokenDescription = renderType => {
    const useBlockExplorer = (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) || [..._network.TEST_CHAINS, _network.CHAIN_IDS.MAINNET].includes(chainId);
    const nftCollection = nftCollections.find(collection => collection.address.toLowerCase() === tokenAddress.toLowerCase());
    const titleTokenDescription = tokenSymbol || (nftCollection === null || nftCollection === void 0 ? void 0 : nftCollection.name) || t('unknownCollection');
    if (renderType === 'text') {
      return titleTokenDescription;
    }
    if (useBlockExplorer) {
      const blockExplorerLink = (0, _etherscanLink.getTokenTrackerLink)(tokenAddress, chainId, null, userAddress, {
        blockExplorerUrl: (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) ?? null
      });
      const blockExplorerElement = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("a", {
        href: blockExplorerLink,
        target: "_blank",
        rel: "noopener noreferrer",
        title: tokenAddress,
        className: "confirm-approve-content__approval-asset-link"
      }, titleTokenDescription));
      return blockExplorerElement;
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-approve-content__approval-asset-title",
      title: tokenAddress
    }, titleTokenDescription));
  };
  const assetImage = image;
  let title, subtitle, subtotalDisplay;
  if (assetStandard === _transaction.TokenStandard.ERC721 || assetStandard === _transaction.TokenStandard.ERC1155) {
    title = assetName || getTitleTokenDescription();
    subtitle = `#${tokenId}`;
    subtotalDisplay = assetName || `${getTitleTokenDescription('text')} #${tokenId}`;
  } else if (assetStandard === _transaction.TokenStandard.ERC20) {
    title = `${tokenAmount} ${tokenSymbol}`;
    subtotalDisplay = `${tokenAmount} ${tokenSymbol}`;
  }
  const hexWeiValue = (0, _react.useMemo)(() => {
    if (tokenAmount === '0' || !contractExchangeRate) {
      return '0';
    }
    const decimalEthValue = new _bignumber.default(tokenAmount).times(new _bignumber.default(contractExchangeRate ? String(contractExchangeRate) : 0)).toFixed();
    return (0, _conversion.getWeiHexFromDecimalValue)({
      value: decimalEthValue,
      fromCurrency: _common2.EtherDenomination.ETH,
      fromDenomination: _common2.EtherDenomination.ETH
    });
  }, [tokenAmount, contractExchangeRate]);
  const secondaryTotalTextOverride = (0, _react.useMemo)(() => {
    if (typeof contractExchangeRate === 'undefined') {
      return (0, _confirmTx.formatCurrency)(fiatTransactionTotal, currentCurrency);
    }
    const fiatTransactionAmount = (0, _confirmTx.convertTokenToFiat)({
      value: tokenAmount,
      toCurrency: currentCurrency,
      conversionRate,
      contractExchangeRate
    });
    const fiatTotal = (0, _confirmTx.addFiat)(fiatTransactionAmount, fiatTransactionTotal);
    const roundedFiatTotal = (0, _confirmTx.roundExponential)(fiatTotal);
    return (0, _confirmTx.formatCurrency)(roundedFiatTotal, currentCurrency);
  }, [currentCurrency, conversionRate, contractExchangeRate, fiatTransactionTotal, tokenAmount]);
  const subtitleComponent = () => {
    if (contractExchangeRate === undefined && subtitle === undefined) {
      return /*#__PURE__*/_react.default.createElement("span", null, t('noConversionRateAvailable'));
    }
    if (subtitle) {
      return /*#__PURE__*/_react.default.createElement("span", null, subtitle);
    }
    return /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      value: hexWeiValue,
      type: _common.PRIMARY,
      showEthLogo: true,
      hideLabel: true
    });
  };
  return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    toAddress: toAddress,
    image: assetImage,
    onEdit: onEdit,
    tokenAddress: tokenAddress,
    title: title,
    subtitleComponent: subtitleComponent(),
    primaryTotalTextOverride: `${subtotalDisplay} + ${ethTransactionTotal} ${nativeCurrency}`,
    primaryTotalTextOverrideMaxAmount: `${subtotalDisplay} + ${ethTransactionTotalMaxAmount} ${nativeCurrency}`,
    secondaryTotalTextOverride: secondaryTotalTextOverride
  });
}
ConfirmTokenTransactionBase.propTypes = {
  image: _propTypes.default.string,
  assetName: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  tokenAddress: _propTypes.default.string,
  tokenAmount: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  tokenId: _propTypes.default.string,
  assetStandard: _propTypes.default.string,
  onEdit: _propTypes.default.func,
  ethTransactionTotal: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  hexMaximumTransactionFee: _propTypes.default.string
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-token-transaction-base\\confirm-token-transaction-base.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\index.js", {"./confirm-token-transaction-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-token-transaction-base\\confirm-token-transaction-base.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-token-transaction-base%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmTokenTransactionBase.default;
  }
});
var _confirmTokenTransactionBase = _interopRequireDefault(require("./confirm-token-transaction-base"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-token-transaction-base\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\confirm-transaction-base.component.js", {"../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../components/app/confirm-data":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-data\\index.js","../../components/app/confirm-gas-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-gas-display\\index.js","../../components/app/confirm-hexdata":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-hexdata\\index.js","../../components/app/confirm-page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\index.js","../../components/app/confirm-subtitle":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-subtitle\\index.js","../../components/app/confirm-title":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-title\\index.js","../../components/app/ledger-instruction-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","../../components/app/transaction-alerts":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-alerts\\index.js","../../components/app/transaction-detail-item/transaction-detail-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../../components/app/transaction-detail/transaction-detail.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail\\transaction-detail.component.js","../../components/app/user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../../components/ui/loading-heartbeat":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js","../../components/ui/simulation-error-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\simulation-error-message\\index.js","../../components/ui/text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../contexts/transaction-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../helpers/constants/error-keys":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\error-keys.js","../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../helpers/utils/metrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\metrics.js","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../send/send.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\send\\send.constants.js","../send/send.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\send\\send.utils.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-transaction-base%5Cconfirm-transaction-base.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _confirmPageContainer = _interopRequireDefault(require("../../components/app/confirm-page-container"));
var _send = require("../send/send.utils");
var _routes = require("../../helpers/constants/routes");
var _errorKeys = require("../../helpers/constants/error-keys");
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../components/app/user-preferenced-currency-display"));
var _common = require("../../helpers/constants/common");
var _textField = _interopRequireDefault(require("../../components/ui/text-field"));
var _simulationErrorMessage = _interopRequireDefault(require("../../components/ui/simulation-error-message"));
var _metametrics = require("../../../shared/constants/metametrics");
var _transaction = require("../../../shared/constants/transaction");
var _metrics = require("../../helpers/utils/metrics");
var _transactions = require("../../helpers/utils/transactions.util");
var _transactionModal = require("../../contexts/transaction-modal");
var _transactionDetail = _interopRequireDefault(require("../../components/app/transaction-detail/transaction-detail.component"));
var _transactionDetailItem = _interopRequireDefault(require("../../components/app/transaction-detail-item/transaction-detail-item.component"));
var _loadingHeartbeat = _interopRequireDefault(require("../../components/ui/loading-heartbeat"));
var _ledgerInstructionField = _interopRequireDefault(require("../../components/app/ledger-instruction-field"));
var _actions = require("../../store/actions");
var _send2 = require("../send/send.constants");
var _network = require("../../../shared/constants/network");
var _conversion = require("../../../shared/modules/conversion.utils");
var _transactionAlerts = _interopRequireDefault(require("../../components/app/transaction-alerts"));
var _confirmHexdata = require("../../components/app/confirm-hexdata");
var _confirmData = require("../../components/app/confirm-data");
var _confirmTitle = require("../../components/app/confirm-title");
var _confirmSubtitle = require("../../components/app/confirm-subtitle");
var _confirmGasDisplay = require("../../components/app/confirm-gas-display");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmTransactionBase extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      submitting: false,
      submitError: null,
      submitWarning: '',
      ethGasPriceWarning: '',
      editingGas: false,
      userAcknowledgedGasMissing: false,
      showWarningModal: false
    });
    _defineProperty(this, "_beforeUnloadForGasPolling", () => {
      this._isMounted = false;
      if (this.state.pollingToken) {
        (0, _actions.disconnectGasFeeEstimatePoller)(this.state.pollingToken);
        (0, _actions.removePollingTokenFromAppState)(this.state.pollingToken);
      }
    });
    _defineProperty(this, "_removeBeforeUnload", () => {
      window.removeEventListener('beforeunload', this._beforeUnloadForGasPolling);
    });
    _defineProperty(this, "supportsEIP1559", this.props.supportsEIP1559 && !(0, _transactions.isLegacyTransaction)(this.props.txData));
  }
  componentDidUpdate(prevProps) {
    const {
      transactionStatus,
      showTransactionConfirmedModal,
      history,
      clearConfirmTransaction,
      nextNonce,
      customNonceValue,
      toAddress,
      tryReverseResolveAddress,
      isEthGasPrice,
      setDefaultHomeActiveTabName
    } = this.props;
    const {
      customNonceValue: prevCustomNonceValue,
      nextNonce: prevNextNonce,
      toAddress: prevToAddress,
      transactionStatus: prevTxStatus,
      isEthGasPrice: prevIsEthGasPrice
    } = prevProps;
    const statusUpdated = transactionStatus !== prevTxStatus;
    const txDroppedOrConfirmed = transactionStatus === _transaction.TransactionStatus.dropped || transactionStatus === _transaction.TransactionStatus.confirmed;
    if (nextNonce !== prevNextNonce || customNonceValue !== prevCustomNonceValue) {
      if (nextNonce !== null && customNonceValue > nextNonce) {
        this.setState({
          submitWarning: this.context.t('nextNonceWarning', [nextNonce])
        });
      } else {
        this.setState({
          submitWarning: ''
        });
      }
    }
    if (statusUpdated && txDroppedOrConfirmed) {
      showTransactionConfirmedModal({
        onSubmit: () => {
          clearConfirmTransaction();
          setDefaultHomeActiveTabName('activity').then(() => {
            history.push(_routes.DEFAULT_ROUTE);
          });
        }
      });
    }
    if (toAddress && toAddress !== prevToAddress) {
      tryReverseResolveAddress(toAddress);
    }
    if (isEthGasPrice !== prevIsEthGasPrice) {
      if (isEthGasPrice) {
        this.setState({
          ethGasPriceWarning: this.context.t(_errorKeys.ETH_GAS_PRICE_FETCH_WARNING_KEY)
        });
      } else {
        this.setState({
          ethGasPriceWarning: ''
        });
      }
    }
  }
  getErrorKey() {
    const {
      balance,
      conversionRate,
      hexMaximumTransactionFee,
      txData: {
        txParams: {
          value: amount
        } = {}
      } = {},
      customGas,
      noGasPrice,
      gasFeeIsCustom
    } = this.props;
    const insufficientBalance = balance && !(0, _send.isBalanceSufficient)({
      amount,
      gasTotal: hexMaximumTransactionFee || '0x0',
      balance,
      conversionRate
    });
    if (insufficientBalance) {
      return {
        valid: false,
        errorKey: _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY
      };
    }
    if ((0, _conversion.hexToDecimal)(customGas.gasLimit) < Number(_send2.MIN_GAS_LIMIT_DEC)) {
      return {
        valid: false,
        errorKey: _errorKeys.GAS_LIMIT_TOO_LOW_ERROR_KEY
      };
    }
    if (noGasPrice && !gasFeeIsCustom) {
      return {
        valid: false,
        errorKey: _errorKeys.GAS_PRICE_FETCH_FAILURE_ERROR_KEY
      };
    }
    return {
      valid: true
    };
  }
  handleEditGas() {
    const {
      actionKey,
      txData: {
        origin
      },
      methodData = {}
    } = this.props;
    this.context.trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Transactions,
      event: 'User clicks "Edit" on gas',
      properties: {
        action: 'Confirm Screen',
        legacy_event: true,
        recipientKnown: null,
        functionType: actionKey || (0, _metrics.getMethodName)(methodData.name) || _transaction.TransactionType.contractInteraction,
        origin
      }
    });
    this.setState({
      editingGas: true
    });
  }
  handleCloseEditGas() {
    this.setState({
      editingGas: false
    });
  }
  setUserAcknowledgedGasMissing() {
    this.setState({
      userAcknowledgedGasMissing: true
    });
  }
  renderDetails() {
    var _this$props$txData3, _txData$txParams;
    const {
      primaryTotalTextOverride,
      secondaryTotalTextOverride,
      hexMaximumTransactionFee,
      hexTransactionTotal,
      useNonceField,
      customNonceValue,
      updateCustomNonce,
      nextNonce,
      getNextNonce,
      txData,
      useNativeCurrencyAsPrimaryCurrency,
      primaryTotalTextOverrideMaxAmount,
      showLedgerSteps,
      isMultiLayerFeeNetwork,
      nativeCurrency,
      isBuyableChain,
      useCurrencyRateCheck
    } = this.props;
    const {
      t
    } = this.context;
    const {
      userAcknowledgedGasMissing
    } = this.state;
    const {
      valid
    } = this.getErrorKey();
    const isDisabled = () => {
      return userAcknowledgedGasMissing ? false : !valid;
    };
    const hasSimulationError = Boolean(txData.simulationFails);
    const renderSimulationFailureWarning = hasSimulationError && !userAcknowledgedGasMissing;
    const networkName = _network.NETWORK_TO_NAME_MAP[txData.chainId];
    const renderTotalMaxAmount = () => {
      if (primaryTotalTextOverrideMaxAmount === undefined && secondaryTotalTextOverride === undefined) {
        // Native Send
        return /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          type: _common.PRIMARY,
          key: "total-max-amount",
          value: (0, _conversion.addHexes)(txData.txParams.value, hexMaximumTransactionFee),
          hideLabel: !useNativeCurrencyAsPrimaryCurrency
        });
      }

      // Token send
      return useNativeCurrencyAsPrimaryCurrency ? primaryTotalTextOverrideMaxAmount : secondaryTotalTextOverride;
    };
    const renderTotalDetailTotal = () => {
      if (primaryTotalTextOverride === undefined && secondaryTotalTextOverride === undefined) {
        var _this$props$txData;
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "confirm-page-container-content__total-value"
        }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
          estimateUsed: (_this$props$txData = this.props.txData) === null || _this$props$txData === void 0 ? void 0 : _this$props$txData.userFeeLevel
        }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          type: _common.PRIMARY,
          key: "total-detail-value",
          value: hexTransactionTotal,
          hideLabel: !useNativeCurrencyAsPrimaryCurrency
        }));
      }
      return useNativeCurrencyAsPrimaryCurrency ? primaryTotalTextOverride : secondaryTotalTextOverride;
    };
    const renderTotalDetailText = () => {
      if (primaryTotalTextOverride === undefined && secondaryTotalTextOverride === undefined) {
        var _this$props$txData2;
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "confirm-page-container-content__total-value"
        }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
          estimateUsed: (_this$props$txData2 = this.props.txData) === null || _this$props$txData2 === void 0 ? void 0 : _this$props$txData2.userFeeLevel
        }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
          type: _common.SECONDARY,
          key: "total-detail-text",
          value: hexTransactionTotal,
          hideLabel: Boolean(useNativeCurrencyAsPrimaryCurrency)
        }));
      }
      return useNativeCurrencyAsPrimaryCurrency ? secondaryTotalTextOverride : primaryTotalTextOverride;
    };
    const nonceField = useNonceField ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-detail-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-detail-row__label"
    }, t('nonceFieldHeading')), /*#__PURE__*/_react.default.createElement("div", {
      className: "custom-nonce-input"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "number",
      min: 0,
      placeholder: typeof nextNonce === 'number' ? nextNonce.toString() : null,
      onChange: ({
        target: {
          value
        }
      }) => {
        if (!value.length || Number(value) < 0) {
          updateCustomNonce('');
        } else {
          updateCustomNonce(String(Math.floor(value)));
        }
        getNextNonce();
      },
      fullWidth: true,
      margin: "dense",
      value: customNonceValue || ''
    })))) : null;
    const simulationFailureWarning = () => /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__error-container"
    }, /*#__PURE__*/_react.default.createElement(_simulationErrorMessage.default, {
      userAcknowledgedGasMissing: userAcknowledgedGasMissing,
      setUserAcknowledgedGasMissing: () => this.setUserAcknowledgedGasMissing()
    }));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__details"
    }, /*#__PURE__*/_react.default.createElement(_transactionAlerts.default, {
      setUserAcknowledgedGasMissing: () => this.setUserAcknowledgedGasMissing(),
      userAcknowledgedGasMissing: userAcknowledgedGasMissing,
      nativeCurrency: nativeCurrency,
      networkName: networkName,
      type: txData.type,
      isBuyableChain: isBuyableChain
    }), /*#__PURE__*/_react.default.createElement(_transactionDetail.default, {
      disabled: isDisabled(),
      userAcknowledgedGasMissing: userAcknowledgedGasMissing,
      onEdit: renderSimulationFailureWarning ? null : () => this.handleEditGas(),
      rows: [renderSimulationFailureWarning && simulationFailureWarning(), !renderSimulationFailureWarning && /*#__PURE__*/_react.default.createElement(_confirmGasDisplay.ConfirmGasDisplay, {
        userAcknowledgedGasMissing: userAcknowledgedGasMissing
      }), !isMultiLayerFeeNetwork && /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
        key: "confirm-transaction-base-total-item",
        detailTitle: t('total'),
        detailText: useCurrencyRateCheck && renderTotalDetailText(),
        detailTotal: renderTotalDetailTotal(),
        subTitle: t('transactionDetailGasTotalSubtitle'),
        subText: /*#__PURE__*/_react.default.createElement("div", {
          className: "confirm-page-container-content__total-amount"
        }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
          estimateUsed: (_this$props$txData3 = this.props.txData) === null || _this$props$txData3 === void 0 ? void 0 : _this$props$txData3.userFeeLevel
        }), /*#__PURE__*/_react.default.createElement("strong", {
          key: "editGasSubTextAmountLabel"
        }, t('editGasSubTextAmountLabel')), ' ', renderTotalMaxAmount())
      })]
    }), nonceField, showLedgerSteps ? /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
      showDataInstruction: Boolean((_txData$txParams = txData.txParams) === null || _txData$txParams === void 0 ? void 0 : _txData$txParams.data)
    }) : null);
  }
  renderData() {
    const {
      txData,
      dataComponent
    } = this.props;
    const {
      txParams: {
        data
      }
    } = txData;
    if (!data) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement(_confirmData.ConfirmData, {
      txData: txData,
      dataComponent: dataComponent
    });
  }
  renderDataHex() {
    const {
      txData,
      dataHexComponent
    } = this.props;
    const {
      txParams: {
        data,
        to
      }
    } = txData;
    if (!data || !to) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement(_confirmHexdata.ConfirmHexData, {
      txData: txData,
      dataHexComponent: dataHexComponent
    });
  }
  handleEdit() {
    const {
      txData,
      tokenData,
      tokenProps,
      onEdit,
      actionKey,
      txData: {
        origin
      },
      methodData = {}
    } = this.props;
    this.context.trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Transactions,
      event: 'Edit Transaction',
      properties: {
        action: 'Confirm Screen',
        legacy_event: true,
        recipientKnown: null,
        functionType: actionKey || (0, _metrics.getMethodName)(methodData.name) || _transaction.TransactionType.contractInteraction,
        origin
      }
    });
    onEdit({
      txData,
      tokenData,
      tokenProps
    });
  }
  handleCancelAll() {
    const {
      cancelAllTransactions,
      clearConfirmTransaction,
      history,
      mostRecentOverviewPage,
      showRejectTransactionsConfirmationModal,
      unapprovedTxCount
    } = this.props;
    showRejectTransactionsConfirmationModal({
      unapprovedTxCount,
      onSubmit: async () => {
        this._removeBeforeUnload();
        await cancelAllTransactions();
        clearConfirmTransaction();
        history.push(mostRecentOverviewPage);
      }
    });
  }
  handleCancel() {
    const {
      txData,
      cancelTransaction,
      history,
      mostRecentOverviewPage,
      updateCustomNonce
    } = this.props;
    this._removeBeforeUnload();
    updateCustomNonce('');
    cancelTransaction(txData).then(() => {
      history.push(mostRecentOverviewPage);
    });
  }
  handleSubmit() {
    const {
      sendTransaction,
      txData,
      history,
      mostRecentOverviewPage,
      updateCustomNonce,
      maxFeePerGas,
      customTokenAmount,
      dappProposedTokenAmount,
      currentTokenBalance,
      maxPriorityFeePerGas,
      baseFeePerGas,
      methodData,
      addToAddressBookIfNew,
      toAccounts,
      toAddress
    } = this.props;
    const {
      submitting
    } = this.state;
    const {
      name
    } = methodData;
    if (txData.type === _transaction.TransactionType.simpleSend) {
      addToAddressBookIfNew(toAddress, toAccounts);
    }
    if (submitting) {
      return;
    }
    if (baseFeePerGas) {
      txData.estimatedBaseFee = baseFeePerGas;
    }
    if (name) {
      txData.contractMethodName = name;
    }
    if (dappProposedTokenAmount) {
      txData.dappProposedTokenAmount = dappProposedTokenAmount;
      txData.originalApprovalAmount = dappProposedTokenAmount;
    }
    if (customTokenAmount) {
      txData.customTokenAmount = customTokenAmount;
      txData.finalApprovalAmount = customTokenAmount;
    } else if (dappProposedTokenAmount !== undefined) {
      txData.finalApprovalAmount = dappProposedTokenAmount;
    }
    if (currentTokenBalance) {
      txData.currentTokenBalance = currentTokenBalance;
    }
    if (maxFeePerGas) {
      txData.txParams = {
        ...txData.txParams,
        maxFeePerGas
      };
    }
    if (maxPriorityFeePerGas) {
      txData.txParams = {
        ...txData.txParams,
        maxPriorityFeePerGas
      };
    }
    this.setState({
      submitting: true,
      submitError: null
    }, () => {
      this._removeBeforeUnload();
      sendTransaction(txData).then(() => {
        if (!this._isMounted) {
          return;
        }
        this.setState({
          submitting: false
        }, () => {
          history.push(mostRecentOverviewPage);
          updateCustomNonce('');
        });
      }).catch(error => {
        if (!this._isMounted) {
          return;
        }
        this.setState({
          submitting: false,
          submitError: error.message
        });
        updateCustomNonce('');
      });
    });
  }
  handleSetApprovalForAll() {
    this.setState({
      showWarningModal: true
    });
  }
  renderTitleComponent() {
    const {
      title,
      hexTransactionAmount,
      txData
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_confirmTitle.ConfirmTitle, {
      title: title,
      hexTransactionAmount: hexTransactionAmount,
      txData: txData
    });
  }
  renderSubtitleComponent() {
    const {
      subtitleComponent,
      hexTransactionAmount,
      txData
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_confirmSubtitle.ConfirmSubTitle, {
      hexTransactionAmount: hexTransactionAmount,
      subtitleComponent: subtitleComponent,
      txData: txData
    });
  }
  componentDidMount() {
    this._isMounted = true;
    const {
      toAddress,
      txData: {
        origin
      } = {},
      getNextNonce,
      tryReverseResolveAddress
    } = this.props;
    const {
      trackEvent
    } = this.context;
    trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Transactions,
      event: 'Confirm: Started',
      properties: {
        action: 'Confirm Screen',
        legacy_event: true,
        origin
      }
    });
    getNextNonce();
    if (toAddress) {
      tryReverseResolveAddress(toAddress);
    }

    /**
     * This makes a request to get estimates and begin polling, keeping track of the poll
     * token in component state.
     * It then disconnects polling upon componentWillUnmount. If the hook is unmounted
     * while waiting for `getGasFeeEstimatesAndStartPolling` to resolve, the `_isMounted`
     * flag ensures that a call to disconnect happens after promise resolution.
     */
    (0, _actions.getGasFeeEstimatesAndStartPolling)().then(pollingToken => {
      if (this._isMounted) {
        (0, _actions.addPollingTokenToAppState)(pollingToken);
        this.setState({
          pollingToken
        });
      } else {
        (0, _actions.disconnectGasFeeEstimatePoller)(pollingToken);
        (0, _actions.removePollingTokenFromAppState)(this.state.pollingToken);
      }
    });
    window.addEventListener('beforeunload', this._beforeUnloadForGasPolling);
  }
  componentWillUnmount() {
    this._beforeUnloadForGasPolling();
    this._removeBeforeUnload();
    this.props.clearConfirmTransaction();
  }
  render() {
    const {
      t
    } = this.context;
    const {
      fromName,
      fromAddress,
      toName,
      toAddress,
      toEns,
      toNickname,
      methodData,
      tokenAddress,
      contentComponent,
      onEdit,
      nonce,
      customNonceValue,
      unapprovedTxCount,
      type,
      hideSenderToRecipient,
      showAccountInHeader,
      txData,
      gasIsLoading,
      gasFeeIsCustom,
      nativeCurrency,
      hardwareWalletRequiresConnection,
      image,
      isApprovalOrRejection,
      assetStandard,
      title
    } = this.props;
    const {
      submitting,
      submitError,
      submitWarning,
      ethGasPriceWarning,
      editingGas,
      userAcknowledgedGasMissing,
      showWarningModal
    } = this.state;
    const {
      name
    } = methodData;
    const {
      valid,
      errorKey
    } = this.getErrorKey();
    const hasSimulationError = Boolean(txData.simulationFails);
    const renderSimulationFailureWarning = hasSimulationError && !userAcknowledgedGasMissing;

    // This `isTokenApproval` case is added to handle possible rendering of this component from
    // confirm-approve.js when `assetStandard` is `undefined`. That will happen if the request to
    // get the asset standard fails. In that scenario, confirm-approve.js returns the `<ConfirmContractInteraction />`
    // component, which in turn returns this `<ConfirmTransactionBase />` component. We meed to prevent
    // the user from editing the transaction in those cases.

    // as this component is made functional, useTransactionFunctionType can be used to get functionType
    const isTokenApproval = txData.type === _transaction.TransactionType.tokenMethodSetApprovalForAll || txData.type === _transaction.TransactionType.tokenMethodApprove;
    const isContractInteraction = txData.type === _transaction.TransactionType.contractInteraction;
    const isContractInteractionFromDapp = (isTokenApproval || isContractInteraction) && txData.origin !== 'metamask';
    let functionType;
    if (isContractInteractionFromDapp) {
      functionType = (0, _metrics.getMethodName)(name);
    }
    if (!functionType) {
      if (type) {
        functionType = (0, _transactions.getTransactionTypeTitle)(t, type, nativeCurrency);
      } else {
        functionType = t('contractInteraction');
      }
    }
    return /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, null, /*#__PURE__*/_react.default.createElement(_confirmPageContainer.default, {
      fromName: fromName,
      fromAddress: fromAddress,
      showAccountInHeader: showAccountInHeader,
      toName: toName,
      toAddress: toAddress,
      toEns: toEns,
      toNickname: toNickname,
      showEdit: !isContractInteractionFromDapp && Boolean(onEdit),
      action: functionType,
      image: image,
      title: title,
      titleComponent: this.renderTitleComponent(),
      subtitleComponent: this.renderSubtitleComponent(),
      detailsComponent: this.renderDetails(),
      dataComponent: this.renderData(functionType),
      dataHexComponent: this.renderDataHex(functionType),
      contentComponent: contentComponent,
      nonce: customNonceValue || nonce,
      unapprovedTxCount: unapprovedTxCount,
      tokenAddress: tokenAddress,
      errorMessage: submitError,
      errorKey: errorKey,
      hasSimulationError: hasSimulationError,
      warning: submitWarning,
      disabled: renderSimulationFailureWarning || !valid || submitting || hardwareWalletRequiresConnection || gasIsLoading && !gasFeeIsCustom,
      onEdit: () => this.handleEdit(),
      onCancelAll: () => this.handleCancelAll(),
      onCancel: () => this.handleCancel(),
      onSubmit: () => this.handleSubmit(),
      onSetApprovalForAll: () => this.handleSetApprovalForAll(),
      showWarningModal: showWarningModal,
      hideSenderToRecipient: hideSenderToRecipient,
      origin: txData.origin,
      ethGasPriceWarning: ethGasPriceWarning,
      editingGas: editingGas,
      handleCloseEditGas: () => this.handleCloseEditGas(),
      currentTransaction: txData,
      supportsEIP1559: this.supportsEIP1559,
      nativeCurrency: nativeCurrency,
      isApprovalOrRejection: isApprovalOrRejection,
      assetStandard: assetStandard,
      txData: txData
    }));
  }
}
exports.default = ConfirmTransactionBase;
_defineProperty(ConfirmTransactionBase, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
_defineProperty(ConfirmTransactionBase, "propTypes", {
  // react-router props
  history: _propTypes.default.object,
  // Redux props
  balance: _propTypes.default.string,
  cancelTransaction: _propTypes.default.func,
  cancelAllTransactions: _propTypes.default.func,
  clearConfirmTransaction: _propTypes.default.func,
  conversionRate: _propTypes.default.number,
  fromAddress: _propTypes.default.string,
  fromName: _propTypes.default.string,
  hexTransactionAmount: _propTypes.default.string,
  hexMaximumTransactionFee: _propTypes.default.string,
  hexTransactionTotal: _propTypes.default.string,
  methodData: _propTypes.default.object,
  nonce: _propTypes.default.string,
  useNonceField: _propTypes.default.bool,
  customNonceValue: _propTypes.default.string,
  updateCustomNonce: _propTypes.default.func,
  sendTransaction: _propTypes.default.func,
  showTransactionConfirmedModal: _propTypes.default.func,
  showRejectTransactionsConfirmationModal: _propTypes.default.func,
  toAccounts: _propTypes.default.array,
  toAddress: _propTypes.default.string,
  tokenData: _propTypes.default.object,
  tokenProps: _propTypes.default.object,
  toName: _propTypes.default.string,
  toEns: _propTypes.default.string,
  toNickname: _propTypes.default.string,
  transactionStatus: _propTypes.default.string,
  txData: _propTypes.default.object,
  unapprovedTxCount: _propTypes.default.number,
  customGas: _propTypes.default.object,
  addToAddressBookIfNew: _propTypes.default.func,
  // Component props
  actionKey: _propTypes.default.string,
  contentComponent: _propTypes.default.node,
  dataComponent: _propTypes.default.node,
  dataHexComponent: _propTypes.default.node,
  tokenAddress: _propTypes.default.string,
  customTokenAmount: _propTypes.default.string,
  dappProposedTokenAmount: _propTypes.default.string,
  currentTokenBalance: _propTypes.default.string,
  onEdit: _propTypes.default.func,
  subtitleComponent: _propTypes.default.node,
  title: _propTypes.default.string,
  image: _propTypes.default.string,
  type: _propTypes.default.string,
  getNextNonce: _propTypes.default.func,
  nextNonce: _propTypes.default.number,
  tryReverseResolveAddress: _propTypes.default.func.isRequired,
  hideSenderToRecipient: _propTypes.default.bool,
  showAccountInHeader: _propTypes.default.bool,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  isEthGasPrice: _propTypes.default.bool,
  noGasPrice: _propTypes.default.bool,
  setDefaultHomeActiveTabName: _propTypes.default.func,
  primaryTotalTextOverride: _propTypes.default.string,
  secondaryTotalTextOverride: _propTypes.default.string,
  gasIsLoading: _propTypes.default.bool,
  primaryTotalTextOverrideMaxAmount: _propTypes.default.string,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool,
  maxFeePerGas: _propTypes.default.string,
  maxPriorityFeePerGas: _propTypes.default.string,
  baseFeePerGas: _propTypes.default.string,
  gasFeeIsCustom: _propTypes.default.bool,
  showLedgerSteps: _propTypes.default.bool.isRequired,
  nativeCurrency: _propTypes.default.string,
  supportsEIP1559: _propTypes.default.bool,
  hardwareWalletRequiresConnection: _propTypes.default.bool,
  isMultiLayerFeeNetwork: _propTypes.default.bool,
  isBuyableChain: _propTypes.default.bool,
  isApprovalOrRejection: _propTypes.default.bool,
  assetStandard: _propTypes.default.string,
  useCurrencyRateCheck: _propTypes.default.bool
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-transaction-base\\confirm-transaction-base.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\confirm-transaction-base.container.js", {"../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","../../ducks/app/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\app\\app.ts","../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../helpers/utils/token-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\token-util.js","../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../send/send.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\send\\send.utils.js","./confirm-transaction-base.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\confirm-transaction-base.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-transaction-base%5Cconfirm-transaction-base.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapDispatchToProps = exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reactRouterDom = require("react-router-dom");
var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");
var _actions = require("../../store/actions");
var _send = require("../send/send.utils");
var _util = require("../../helpers/utils/util");
var _selectors = require("../../selectors");
var _history = require("../../ducks/history/history");
var _metamask = require("../../ducks/metamask/metamask");
var _util2 = require("../../../app/scripts/lib/util");
var _transaction = require("../../../shared/modules/transaction.utils");
var _hexstringUtils = require("../../../shared/modules/hexstring-utils");
var _app = require("../../ducks/app/app");
var _transactions = require("../../helpers/utils/transactions.util");
var _gas = require("../../../shared/constants/gas");
var _transaction2 = require("../../../shared/constants/transaction");
var _tokenUtil = require("../../helpers/utils/token-util");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _confirmTransactionBase = _interopRequireDefault(require("./confirm-transaction-base.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
let customNonceValue = '';
const customNonceMerge = txData => customNonceValue ? {
  ...txData,
  customNonceValue
} : txData;
function addressIsNew(toAccounts, newAddress) {
  const newAddressNormalized = newAddress.toLowerCase();
  const foundMatching = toAccounts.some(({
    address
  }) => address.toLowerCase() === newAddressNormalized);
  return !foundMatching;
}
const mapStateToProps = (state, ownProps) => {
  var _identities$toAddress, _tokenList$toAddress$, _toAddress;
  const {
    toAddress: propsToAddress,
    customTxParamsData,
    match: {
      params = {}
    }
  } = ownProps;
  const {
    id: paramsTransactionId
  } = params;
  const isMainnet = (0, _selectors.getIsMainnet)(state);
  const isGasEstimatesLoading = (0, _metamask.getIsGasEstimatesLoading)(state);
  const gasLoadingAnimationIsShowing = (0, _app.getGasLoadingAnimationIsShowing)(state);
  const isBuyableChain = (0, _selectors.getIsBuyableChain)(state);
  const {
    confirmTransaction,
    metamask
  } = state;
  const {
    conversionRate,
    identities,
    addressBook,
    networkId,
    unapprovedTxs,
    nextNonce
  } = metamask;
  const {
    chainId
  } = (0, _metamask.getProviderConfig)(state);
  const {
    tokenData,
    txData,
    tokenProps,
    nonce
  } = confirmTransaction;
  const {
    txParams = {},
    id: transactionId,
    type
  } = txData;
  const txId = transactionId || Number(paramsTransactionId);
  const transaction = (0, _selectors.getUnapprovedTransaction)(state, txId);
  const {
    from: fromAddress,
    to: txParamsToAddress,
    gasPrice,
    gas: gasLimit,
    value: amount,
    data
  } = transaction && transaction.txParams || txParams;
  const accounts = (0, _selectors.getMetaMaskAccounts)(state);
  const transactionData = (0, _transaction.parseStandardTokenTransactionData)(data);
  const tokenToAddress = (0, _tokenUtil.getTokenAddressParam)(transactionData);
  const {
    balance
  } = accounts[fromAddress];
  const {
    name: fromName
  } = identities[fromAddress];
  let toAddress = txParamsToAddress;
  if (type !== _transaction2.TransactionType.simpleSend) {
    toAddress = propsToAddress || tokenToAddress || txParamsToAddress;
  }
  const toAccounts = (0, _metamask.getSendToAccounts)(state);
  const tokenList = (0, _selectors.getTokenList)(state);
  const toName = ((_identities$toAddress = identities[toAddress]) === null || _identities$toAddress === void 0 ? void 0 : _identities$toAddress.name) || ((_tokenList$toAddress$ = tokenList[(_toAddress = toAddress) === null || _toAddress === void 0 ? void 0 : _toAddress.toLowerCase()]) === null || _tokenList$toAddress$ === void 0 ? void 0 : _tokenList$toAddress$.name) || (0, _util.shortenAddress)((0, _hexstringUtils.toChecksumHexAddress)(toAddress));
  const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(toAddress);
  const addressBookObject = addressBook && addressBook[chainId] && addressBook[chainId][checksummedAddress];
  const toEns = (0, _selectors.getEnsResolutionByAddress)(state, checksummedAddress);
  const toNickname = addressBookObject ? addressBookObject.name : '';
  const transactionStatus = transaction ? transaction.status : '';
  const supportsEIP1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state) && !(0, _transactions.isLegacyTransaction)(txParams);
  const {
    hexTransactionAmount,
    hexMaximumTransactionFee,
    hexTransactionTotal,
    gasEstimationObject
  } = (0, _selectors.transactionFeeSelector)(state, transaction);
  const currentNetworkUnapprovedTxs = Object.keys(unapprovedTxs).filter(key => (0, _transaction.transactionMatchesNetwork)(unapprovedTxs[key], chainId, networkId)).reduce((acc, key) => ({
    ...acc,
    [key]: unapprovedTxs[key]
  }), {});
  const unapprovedTxCount = (0, _util.valuesFor)(currentNetworkUnapprovedTxs).length;
  const insufficientBalance = !(0, _send.isBalanceSufficient)({
    amount,
    gasTotal: (0, _transactionsControllerUtils.calcGasTotal)(gasLimit, gasPrice),
    balance,
    conversionRate
  });
  const methodData = (0, _selectors.getKnownMethodData)(state, data) || {};
  const fullTxData = (0, _selectors.getFullTxData)(state, txId, _transaction2.TransactionStatus.unapproved, customTxParamsData);
  customNonceValue = (0, _selectors.getCustomNonceValue)(state);
  const isEthGasPrice = (0, _selectors.getIsEthGasPriceFetched)(state);
  const noGasPrice = !supportsEIP1559 && (0, _selectors.getNoGasPriceFetched)(state);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  const gasFeeIsCustom = fullTxData.userFeeLevel === _gas.CUSTOM_GAS_ESTIMATE || (0, _transaction.txParamsAreDappSuggested)(fullTxData);
  const fromAddressIsLedger = (0, _metamask.isAddressLedger)(state, fromAddress);
  const nativeCurrency = (0, _metamask.getNativeCurrency)(state);
  const hardwareWalletRequiresConnection = (0, _selectors.doesAddressRequireLedgerHidConnection)(state, fromAddress);
  const isMultiLayerFeeNetwork = (0, _selectors.getIsMultiLayerFeeNetwork)(state);
  return {
    balance,
    fromAddress,
    fromName,
    toAccounts,
    toAddress,
    toEns,
    toName,
    toNickname,
    hexTransactionAmount,
    hexMaximumTransactionFee,
    hexTransactionTotal,
    txData: fullTxData,
    tokenData,
    methodData,
    tokenProps,
    conversionRate,
    transactionStatus,
    nonce,
    unapprovedTxs,
    unapprovedTxCount,
    customGas: {
      gasLimit,
      gasPrice
    },
    advancedInlineGasShown: (0, _selectors.getAdvancedInlineGasShown)(state),
    useNonceField: (0, _selectors.getUseNonceField)(state),
    customNonceValue,
    insufficientBalance,
    hideFiatConversion: !(0, _selectors.getShouldShowFiat)(state),
    type,
    nextNonce,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    isMainnet,
    isEthGasPrice,
    noGasPrice,
    supportsEIP1559,
    gasIsLoading: isGasEstimatesLoading || gasLoadingAnimationIsShowing,
    useNativeCurrencyAsPrimaryCurrency,
    maxFeePerGas: gasEstimationObject.maxFeePerGas,
    maxPriorityFeePerGas: gasEstimationObject.maxPriorityFeePerGas,
    baseFeePerGas: gasEstimationObject.baseFeePerGas,
    gasFeeIsCustom,
    showLedgerSteps: fromAddressIsLedger,
    nativeCurrency,
    hardwareWalletRequiresConnection,
    isMultiLayerFeeNetwork,
    chainId,
    isBuyableChain,
    useCurrencyRateCheck: (0, _selectors.getUseCurrencyRateCheck)(state)
  };
};
const mapDispatchToProps = dispatch => {
  return {
    tryReverseResolveAddress: address => {
      return dispatch((0, _actions.tryReverseResolveAddress)(address));
    },
    updateCustomNonce: value => {
      customNonceValue = value;
      dispatch((0, _actions.updateCustomNonce)(value));
    },
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    showTransactionConfirmedModal: ({
      onSubmit
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'TRANSACTION_CONFIRMED',
        onSubmit
      }));
    },
    showRejectTransactionsConfirmationModal: ({
      onSubmit,
      unapprovedTxCount
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'REJECT_TRANSACTIONS',
        onSubmit,
        unapprovedTxCount
      }));
    },
    cancelTransaction: ({
      id
    }) => dispatch((0, _actions.cancelTx)({
      id
    })),
    cancelAllTransactions: txList => dispatch((0, _actions.cancelTxs)(txList)),
    sendTransaction: txData => dispatch((0, _actions.updateAndApproveTx)(customNonceMerge(txData))),
    getNextNonce: () => dispatch((0, _actions.getNextNonce)()),
    setDefaultHomeActiveTabName: tabName => dispatch((0, _actions.setDefaultHomeActiveTabName)(tabName)),
    updateTransactionGasFees: gasFees => {
      dispatch((0, _metamask.updateGasFees)({
        ...gasFees,
        expectHexWei: true
      }));
    },
    addToAddressBookIfNew: (newAddress, toAccounts, nickname = '') => {
      const hexPrefixedAddress = (0, _util2.addHexPrefix)(newAddress);
      if (addressIsNew(toAccounts, hexPrefixedAddress)) {
        dispatch((0, _actions.addToAddressBook)(hexPrefixedAddress, nickname));
      }
    }
  };
};
exports.mapDispatchToProps = mapDispatchToProps;
const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    txData,
    unapprovedTxs
  } = stateProps;
  const {
    cancelAllTransactions: dispatchCancelAllTransactions,
    updateTransactionGasFees: dispatchUpdateTransactionGasFees,
    ...otherDispatchProps
  } = dispatchProps;
  return {
    ...stateProps,
    ...otherDispatchProps,
    ...ownProps,
    cancelAllTransactions: () => dispatchCancelAllTransactions((0, _util.valuesFor)(unapprovedTxs)),
    updateGasAndCalculate: ({
      gasLimit,
      gasPrice
    }) => {
      dispatchUpdateTransactionGasFees({
        gasLimit,
        gasPrice,
        transaction: txData
      });
    }
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_confirmTransactionBase.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-transaction-base\\confirm-transaction-base.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\index.js", {"./confirm-transaction-base.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-transaction-base\\confirm-transaction-base.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Cpages%5Cconfirm-transaction-base%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmTransactionBase.default;
  }
});
var _confirmTransactionBase = _interopRequireDefault(require("./confirm-transaction-base.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\pages\\confirm-transaction-base\\index.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
