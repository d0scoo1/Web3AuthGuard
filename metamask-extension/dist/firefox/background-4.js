LavaPack.loadBundle([
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\PollingBlockTracker.js", {"./BaseBlockTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\BaseBlockTracker.js","./logging-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\logging-utils.js","json-rpc-random-id":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\json-rpc-random-id\\index.js","pify":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\pify\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cdist%5CPollingBlockTracker.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PollingBlockTracker = void 0;
const json_rpc_random_id_1 = __importDefault(require("json-rpc-random-id"));
const pify_1 = __importDefault(require("pify"));
const BaseBlockTracker_1 = require("./BaseBlockTracker");
const logging_utils_1 = require("./logging-utils");
const log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, 'polling-block-tracker');
const createRandomId = (0, json_rpc_random_id_1.default)();
const sec = 1000;
class PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {
    constructor(opts = {}) {
        var _a;
        // parse + validate args
        if (!opts.provider) {
            throw new Error('PollingBlockTracker - no provider specified.');
        }
        super({
            blockResetDuration: (_a = opts.blockResetDuration) !== null && _a !== void 0 ? _a : opts.pollingInterval,
        });
        // config
        this._provider = opts.provider;
        this._pollingInterval = opts.pollingInterval || 20 * sec;
        this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;
        this._keepEventLoopActive =
            opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;
        this._setSkipCacheFlag = opts.setSkipCacheFlag || false;
    }
    // trigger block polling
    async checkForLatestBlock() {
        await this._updateLatestBlock();
        return await this.getLatestBlock();
    }
    async _start() {
        this._synchronize();
    }
    async _end() {
        // No-op
    }
    async _synchronize() {
        var _a;
        while (this._isRunning) {
            try {
                await this._updateLatestBlock();
                const promise = timeout(this._pollingInterval, !this._keepEventLoopActive);
                this.emit('_waitingForNextIteration');
                await promise;
            }
            catch (err) {
                const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${(_a = err.stack) !== null && _a !== void 0 ? _a : err}`);
                try {
                    this.emit('error', newErr);
                }
                catch (emitErr) {
                    console.error(newErr);
                }
                const promise = timeout(this._retryTimeout, !this._keepEventLoopActive);
                this.emit('_waitingForNextIteration');
                await promise;
            }
        }
    }
    async _updateLatestBlock() {
        // fetch + set latest block
        const latestBlock = await this._fetchLatestBlock();
        this._newPotentialLatest(latestBlock);
    }
    async _fetchLatestBlock() {
        const req = {
            jsonrpc: '2.0',
            id: createRandomId(),
            method: 'eth_blockNumber',
            params: [],
        };
        if (this._setSkipCacheFlag) {
            req.skipCache = true;
        }
        log('Making request', req);
        const res = await (0, pify_1.default)((cb) => this._provider.sendAsync(req, cb))();
        log('Got response', res);
        if (res.error) {
            throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error.message}`);
        }
        return res.result;
    }
}
exports.PollingBlockTracker = PollingBlockTracker;
/**
 * Waits for the specified amount of time.
 *
 * @param duration - The amount of time in milliseconds.
 * @param unref - Assuming this function is run in a Node context, governs
 * whether Node should wait before the `setTimeout` has completed before ending
 * the process (true for no, false for yes). Defaults to false.
 * @returns A promise that can be used to wait.
 */
function timeout(duration, unref) {
    return new Promise((resolve) => {
        const timeoutRef = setTimeout(resolve, duration);
        // don't keep process open
        if (timeoutRef.unref && unref) {
            timeoutRef.unref();
        }
    });
}
//# sourceMappingURL=PollingBlockTracker.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker",file:"node_modules\\eth-block-tracker\\dist\\PollingBlockTracker.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\SubscribeBlockTracker.js", {"./BaseBlockTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\BaseBlockTracker.js","json-rpc-random-id":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\json-rpc-random-id\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cdist%5CSubscribeBlockTracker.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscribeBlockTracker = void 0;
const json_rpc_random_id_1 = __importDefault(require("json-rpc-random-id"));
const BaseBlockTracker_1 = require("./BaseBlockTracker");
const createRandomId = (0, json_rpc_random_id_1.default)();
class SubscribeBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {
    constructor(opts = {}) {
        // parse + validate args
        if (!opts.provider) {
            throw new Error('SubscribeBlockTracker - no provider specified.');
        }
        // BaseBlockTracker constructor
        super(opts);
        // config
        this._provider = opts.provider;
        this._subscriptionId = null;
    }
    async checkForLatestBlock() {
        return await this.getLatestBlock();
    }
    async _start() {
        if (this._subscriptionId === undefined || this._subscriptionId === null) {
            try {
                const blockNumber = (await this._call('eth_blockNumber'));
                this._subscriptionId = (await this._call('eth_subscribe', 'newHeads'));
                this._provider.on('data', this._handleSubData.bind(this));
                this._newPotentialLatest(blockNumber);
            }
            catch (e) {
                this.emit('error', e);
            }
        }
    }
    async _end() {
        if (this._subscriptionId !== null && this._subscriptionId !== undefined) {
            try {
                await this._call('eth_unsubscribe', this._subscriptionId);
                this._subscriptionId = null;
            }
            catch (e) {
                this.emit('error', e);
            }
        }
    }
    _call(method, ...params) {
        return new Promise((resolve, reject) => {
            this._provider.sendAsync({
                id: createRandomId(),
                method,
                params,
                jsonrpc: '2.0',
            }, (err, res) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(res.result);
                }
            });
        });
    }
    _handleSubData(_, response) {
        var _a;
        if (response.method === 'eth_subscription' &&
            ((_a = response.params) === null || _a === void 0 ? void 0 : _a.subscription) === this._subscriptionId) {
            this._newPotentialLatest(response.params.result.number);
        }
    }
}
exports.SubscribeBlockTracker = SubscribeBlockTracker;
//# sourceMappingURL=SubscribeBlockTracker.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker",file:"node_modules\\eth-block-tracker\\dist\\SubscribeBlockTracker.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\index.js", {"./PollingBlockTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\PollingBlockTracker.js","./SubscribeBlockTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\SubscribeBlockTracker.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./PollingBlockTracker"), exports);
__exportStar(require("./SubscribeBlockTracker"), exports);
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker",file:"node_modules\\eth-block-tracker\\dist\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\dist\\logging-utils.js", {"@metamask/utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cdist%5Clogging-utils.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createModuleLogger = exports.projectLogger = void 0;
const utils_1 = require("@metamask/utils");
Object.defineProperty(exports, "createModuleLogger", { enumerable: true, get: function () { return utils_1.createModuleLogger; } });
exports.projectLogger = (0, utils_1.createProjectLogger)('eth-block-tracker');
//# sourceMappingURL=logging-utils.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker",file:"node_modules\\eth-block-tracker\\dist\\logging-utils.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js", {"superstruct":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\superstruct\\dist\\index.cjs"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cassert.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;
const superstruct_1 = require("superstruct");
/**
 * Type guard for determining whether the given value is an error object with a
 * `message` property, such as an instance of Error.
 *
 * @param error - The object to check.
 * @returns True or false, depending on the result.
 */
function isErrorWithMessage(error) {
    return typeof error === 'object' && error !== null && 'message' in error;
}
/**
 * Check if a value is a constructor, i.e., a function that can be called with
 * the `new` keyword.
 *
 * @param fn - The value to check.
 * @returns `true` if the value is a constructor, or `false` otherwise.
 */
function isConstructable(fn) {
    var _a, _b;
    /* istanbul ignore next */
    return Boolean(typeof ((_b = (_a = fn === null || fn === void 0 ? void 0 : fn.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'string');
}
/**
 * Get the error message from an unknown error object. If the error object has
 * a `message` property, that property is returned. Otherwise, the stringified
 * error object is returned.
 *
 * @param error - The error object to get the message from.
 * @returns The error message.
 */
function getErrorMessage(error) {
    const message = isErrorWithMessage(error) ? error.message : String(error);
    // If the error ends with a period, remove it, as we'll add our own period.
    if (message.endsWith('.')) {
        return message.slice(0, -1);
    }
    return message;
}
/**
 * Initialise an {@link AssertionErrorConstructor} error.
 *
 * @param ErrorWrapper - The error class to use.
 * @param message - The error message.
 * @returns The error object.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function getError(ErrorWrapper, message) {
    if (isConstructable(ErrorWrapper)) {
        return new ErrorWrapper({
            message,
        });
    }
    return ErrorWrapper({
        message,
    });
}
/**
 * The default error class that is thrown if an assertion fails.
 */
class AssertionError extends Error {
    constructor(options) {
        super(options.message);
        this.code = 'ERR_ASSERTION';
    }
}
exports.AssertionError = AssertionError;
/**
 * Same as Node.js assert.
 * If the value is falsy, throws an error, does nothing otherwise.
 *
 * @throws {@link AssertionError} If value is falsy.
 * @param value - The test that should be truthy to pass.
 * @param message - Message to be passed to {@link AssertionError} or an
 * {@link Error} instance to throw.
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}. If a custom error class is provided for
 * the `message` argument, this argument is ignored.
 */
function assert(value, message = 'Assertion failed.', 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper = AssertionError) {
    if (!value) {
        if (message instanceof Error) {
            throw message;
        }
        throw getError(ErrorWrapper, message);
    }
}
exports.assert = assert;
/**
 * Assert a value against a Superstruct struct.
 *
 * @param value - The value to validate.
 * @param struct - The struct to validate against.
 * @param errorPrefix - A prefix to add to the error message. Defaults to
 * "Assertion failed".
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}.
 * @throws If the value is not valid.
 */
function assertStruct(value, struct, errorPrefix = 'Assertion failed', 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper = AssertionError) {
    try {
        (0, superstruct_1.assert)(value, struct);
    }
    catch (error) {
        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessage(error)}.`);
    }
}
exports.assertStruct = assertStruct;
/**
 * Use in the default case of a switch that you want to be fully exhaustive.
 * Using this function forces the compiler to enforce exhaustivity during
 * compile-time.
 *
 * @example
 * ```
 * const number = 1;
 * switch (number) {
 *   case 0:
 *     ...
 *   case 1:
 *     ...
 *   default:
 *     assertExhaustive(snapPrefix);
 * }
 * ```
 * @param _object - The object on which the switch is being operated.
 */
function assertExhaustive(_object) {
    throw new Error('Invalid branch reached. Should be detected during compilation.');
}
exports.assertExhaustive = assertExhaustive;
//# sourceMappingURL=assert.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\base64.js", {"./assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js","superstruct":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\superstruct\\dist\\index.cjs"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cbase64.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64 = void 0;
const superstruct_1 = require("superstruct");
const assert_1 = require("./assert");
/**
 * Ensure that a provided string-based struct is valid base64.
 *
 * @param struct - The string based struct.
 * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.
 * @returns A superstruct validating base64.
 */
const base64 = (struct, options = {}) => {
    var _a, _b;
    const paddingRequired = (_a = options.paddingRequired) !== null && _a !== void 0 ? _a : false;
    const characterSet = (_b = options.characterSet) !== null && _b !== void 0 ? _b : 'base64';
    let letters;
    if (characterSet === 'base64') {
        letters = String.raw `[A-Za-z0-9+\/]`;
    }
    else {
        (0, assert_1.assert)(characterSet === 'base64url');
        letters = String.raw `[-_A-Za-z0-9]`;
    }
    let re;
    if (paddingRequired) {
        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');
    }
    else {
        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');
    }
    return (0, superstruct_1.pattern)(struct, re);
};
exports.base64 = base64;
//# sourceMappingURL=base64.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\base64.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\bytes.js", {"./assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js","./hex":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\hex.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cbytes.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDataView = exports.concatBytes = exports.valueToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;
const assert_1 = require("./assert");
const hex_1 = require("./hex");
// '0'.charCodeAt(0) === 48
const HEX_MINIMUM_NUMBER_CHARACTER = 48;
// '9'.charCodeAt(0) === 57
const HEX_MAXIMUM_NUMBER_CHARACTER = 58;
const HEX_CHARACTER_OFFSET = 87;
/**
 * Memoized function that returns an array to be used as a lookup table for
 * converting bytes to hexadecimal values.
 *
 * The array is created lazily and then cached for future use. The benefit of
 * this approach is that the performance of converting bytes to hex is much
 * better than if we were to call `toString(16)` on each byte.
 *
 * The downside is that the array is created once and then never garbage
 * collected. This is not a problem in practice because the array is only 256
 * elements long.
 *
 * @returns A function that returns the lookup table.
 */
function getPrecomputedHexValuesBuilder() {
    // To avoid issues with tree shaking, we need to use a function to return the
    // array. This is because the array is only used in the `bytesToHex` function
    // and if we were to use a global variable, the array might be removed by the
    // tree shaker.
    const lookupTable = [];
    return () => {
        if (lookupTable.length === 0) {
            for (let i = 0; i < 256; i++) {
                lookupTable.push(i.toString(16).padStart(2, '0'));
            }
        }
        return lookupTable;
    };
}
/**
 * Function implementation of the {@link getPrecomputedHexValuesBuilder}
 * function.
 */
const getPrecomputedHexValues = getPrecomputedHexValuesBuilder();
/**
 * Check if a value is a `Uint8Array`.
 *
 * @param value - The value to check.
 * @returns Whether the value is a `Uint8Array`.
 */
function isBytes(value) {
    return value instanceof Uint8Array;
}
exports.isBytes = isBytes;
/**
 * Assert that a value is a `Uint8Array`.
 *
 * @param value - The value to check.
 * @throws If the value is not a `Uint8Array`.
 */
function assertIsBytes(value) {
    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');
}
exports.assertIsBytes = assertIsBytes;
/**
 * Convert a `Uint8Array` to a hexadecimal string.
 *
 * @param bytes - The bytes to convert to a hexadecimal string.
 * @returns The hexadecimal string.
 */
function bytesToHex(bytes) {
    assertIsBytes(bytes);
    if (bytes.length === 0) {
        return '0x';
    }
    const lookupTable = getPrecomputedHexValues();
    const hexadecimal = new Array(bytes.length);
    for (let i = 0; i < bytes.length; i++) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        hexadecimal[i] = lookupTable[bytes[i]];
    }
    return (0, hex_1.add0x)(hexadecimal.join(''));
}
exports.bytesToHex = bytesToHex;
/**
 * Convert a `Uint8Array` to a `bigint`.
 *
 * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.
 * To convert a two's complement encoded `Uint8Array` to a `bigint`, use
 * {@link bytesToSignedBigInt}.
 *
 * @param bytes - The bytes to convert to a `bigint`.
 * @returns The `bigint`.
 */
function bytesToBigInt(bytes) {
    assertIsBytes(bytes);
    const hexadecimal = bytesToHex(bytes);
    return BigInt(hexadecimal);
}
exports.bytesToBigInt = bytesToBigInt;
/**
 * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are
 * encoded in two's complement.
 *
 * To convert a `Uint8Array` to an unsigned `bigint` instead, use
 * {@link bytesToBigInt}.
 *
 * @see https://en.wikipedia.org/wiki/Two%27s_complement
 * @param bytes - The bytes to convert to a signed `bigint`.
 * @returns The signed `bigint`.
 */
function bytesToSignedBigInt(bytes) {
    assertIsBytes(bytes);
    let value = BigInt(0);
    for (const byte of bytes) {
        // eslint-disable-next-line no-bitwise
        value = (value << BigInt(8)) + BigInt(byte);
    }
    return BigInt.asIntN(bytes.length * 8, value);
}
exports.bytesToSignedBigInt = bytesToSignedBigInt;
/**
 * Convert a `Uint8Array` to a `number`.
 *
 * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.
 *
 * @param bytes - The bytes to convert to a number.
 * @returns The number.
 * @throws If the resulting number is not a safe integer.
 */
function bytesToNumber(bytes) {
    assertIsBytes(bytes);
    const bigint = bytesToBigInt(bytes);
    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');
    return Number(bigint);
}
exports.bytesToNumber = bytesToNumber;
/**
 * Convert a UTF-8 encoded `Uint8Array` to a `string`.
 *
 * @param bytes - The bytes to convert to a string.
 * @returns The string.
 */
function bytesToString(bytes) {
    assertIsBytes(bytes);
    return new TextDecoder().decode(bytes);
}
exports.bytesToString = bytesToString;
/**
 * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be
 * prefixed with `0x`. It accepts even and odd length strings.
 *
 * If the value is "0x", an empty `Uint8Array` is returned.
 *
 * @param value - The hexadecimal string to convert to bytes.
 * @returns The bytes as `Uint8Array`.
 */
function hexToBytes(value) {
    var _a;
    // "0x" is often used as empty byte array.
    if (((_a = value === null || value === void 0 ? void 0 : value.toLowerCase) === null || _a === void 0 ? void 0 : _a.call(value)) === '0x') {
        return new Uint8Array();
    }
    (0, hex_1.assertIsHexString)(value);
    // Remove the `0x` prefix if it exists, and pad the string to have an even
    // number of characters.
    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();
    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;
    const bytes = new Uint8Array(normalizedValue.length / 2);
    for (let i = 0; i < bytes.length; i++) {
        // While this is not the prettiest way to convert a hexadecimal string to a
        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each
        // character.
        const c1 = normalizedValue.charCodeAt(i * 2);
        const c2 = normalizedValue.charCodeAt(i * 2 + 1);
        const n1 = c1 -
            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER
                ? HEX_MINIMUM_NUMBER_CHARACTER
                : HEX_CHARACTER_OFFSET);
        const n2 = c2 -
            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER
                ? HEX_MINIMUM_NUMBER_CHARACTER
                : HEX_CHARACTER_OFFSET);
        bytes[i] = n1 * 16 + n2;
    }
    return bytes;
}
exports.hexToBytes = hexToBytes;
/**
 * Convert a `bigint` to a `Uint8Array`.
 *
 * This assumes that the `bigint` is an unsigned integer. To convert a signed
 * `bigint` instead, use {@link signedBigIntToBytes}.
 *
 * @param value - The bigint to convert to bytes.
 * @returns The bytes as `Uint8Array`.
 */
function bigIntToBytes(value) {
    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');
    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');
    const hexadecimal = value.toString(16);
    return hexToBytes(hexadecimal);
}
exports.bigIntToBytes = bigIntToBytes;
/**
 * Check if a `bigint` fits in a certain number of bytes.
 *
 * @param value - The `bigint` to check.
 * @param bytes - The number of bytes.
 * @returns Whether the `bigint` fits in the number of bytes.
 */
function bigIntFits(value, bytes) {
    (0, assert_1.assert)(bytes > 0);
    /* eslint-disable no-bitwise */
    const mask = value >> BigInt(31);
    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));
    /* eslint-enable no-bitwise */
}
/**
 * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement
 * encoding to represent negative numbers.
 *
 * To convert an unsigned `bigint` to a `Uint8Array` instead, use
 * {@link bigIntToBytes}.
 *
 * @see https://en.wikipedia.org/wiki/Two%27s_complement
 * @param value - The number to convert to bytes.
 * @param byteLength - The length of the resulting `Uint8Array`. If the number
 * is larger than the maximum value that can be represented by the given length,
 * an error is thrown.
 * @returns The bytes as `Uint8Array`.
 */
function signedBigIntToBytes(value, byteLength) {
    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');
    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');
    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');
    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');
    // ESLint doesn't like mutating function parameters, so to avoid having to
    // disable the rule, we create a new variable.
    let numberValue = value;
    const bytes = new Uint8Array(byteLength);
    for (let i = 0; i < bytes.length; i++) {
        bytes[i] = Number(BigInt.asUintN(8, numberValue));
        // eslint-disable-next-line no-bitwise
        numberValue >>= BigInt(8);
    }
    return bytes.reverse();
}
exports.signedBigIntToBytes = signedBigIntToBytes;
/**
 * Convert a `number` to a `Uint8Array`.
 *
 * @param value - The number to convert to bytes.
 * @returns The bytes as `Uint8Array`.
 * @throws If the number is not a safe integer.
 */
function numberToBytes(value) {
    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');
    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');
    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');
    const hexadecimal = value.toString(16);
    return hexToBytes(hexadecimal);
}
exports.numberToBytes = numberToBytes;
/**
 * Convert a `string` to a UTF-8 encoded `Uint8Array`.
 *
 * @param value - The string to convert to bytes.
 * @returns The bytes as `Uint8Array`.
 */
function stringToBytes(value) {
    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');
    return new TextEncoder().encode(value);
}
exports.stringToBytes = stringToBytes;
/**
 * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,
 * a `bigint`, a `number`, or a `string`.
 *
 * This will attempt to guess the type of the value based on its type and
 * contents. For more control over the conversion, use the more specific
 * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.
 *
 * If the value is a `string`, and it is prefixed with `0x`, it will be
 * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a
 * UTF-8 string. To convert a hexadecimal string to bytes without interpreting
 * it as a UTF-8 string, use {@link hexToBytes} instead.
 *
 * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed
 * `bigint` to bytes, use {@link signedBigIntToBytes} instead.
 *
 * If the value is a `Uint8Array`, it will be returned as-is.
 *
 * @param value - The value to convert to bytes.
 * @returns The bytes as `Uint8Array`.
 */
function valueToBytes(value) {
    if (typeof value === 'bigint') {
        return bigIntToBytes(value);
    }
    if (typeof value === 'number') {
        return numberToBytes(value);
    }
    if (typeof value === 'string') {
        if (value.startsWith('0x')) {
            return hexToBytes(value);
        }
        return stringToBytes(value);
    }
    if (isBytes(value)) {
        return value;
    }
    throw new TypeError(`Unsupported value type: "${typeof value}".`);
}
exports.valueToBytes = valueToBytes;
/**
 * Concatenate multiple byte-like values into a single `Uint8Array`. The values
 * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses
 * {@link valueToBytes} under the hood to convert each value to bytes. Refer to
 * the documentation of that function for more information.
 *
 * @param values - The values to concatenate.
 * @returns The concatenated bytes as `Uint8Array`.
 */
function concatBytes(values) {
    const normalizedValues = new Array(values.length);
    let byteLength = 0;
    for (let i = 0; i < values.length; i++) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const value = valueToBytes(values[i]);
        normalizedValues[i] = value;
        byteLength += value.length;
    }
    const bytes = new Uint8Array(byteLength);
    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {
        // While we could simply spread the values into an array and use
        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.
        bytes.set(normalizedValues[i], offset);
        offset += normalizedValues[i].length;
    }
    return bytes;
}
exports.concatBytes = concatBytes;
/**
 * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience
 * function that avoids having to create a {@link DataView} manually, which
 * requires passing the `byteOffset` and `byteLength` parameters every time.
 *
 * Not passing the `byteOffset` and `byteLength` parameters can result in
 * unexpected behavior when the {@link Uint8Array} is a view of a larger
 * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.
 *
 * This function also supports Node.js {@link Buffer}s.
 *
 * @example
 * ```typescript
 * const bytes = new Uint8Array([1, 2, 3]);
 *
 * // This is equivalent to:
 * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
 * const dataView = createDataView(bytes);
 * ```
 * @param bytes - The bytes to create the {@link DataView} from.
 * @returns The {@link DataView}.
 */
function createDataView(bytes) {
    // To maintain compatibility with Node.js, we need to check if the bytes are
    // a Buffer. If so, we need to slice the buffer to get the underlying
    // ArrayBuffer.
    // eslint-disable-next-line no-restricted-globals
    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {
        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);
        return new DataView(buffer);
    }
    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}
exports.createDataView = createDataView;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\bytes.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\checksum.js", {"./base64":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\base64.js","superstruct":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\superstruct\\dist\\index.cjs"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cchecksum.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChecksumStruct = void 0;
const superstruct_1 = require("superstruct");
const base64_1 = require("./base64");
exports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);
//# sourceMappingURL=checksum.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\checksum.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\coercers.js", {"./assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js","./bytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\bytes.js","./hex":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\hex.js","superstruct":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\superstruct\\dist\\index.cjs"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Ccoercers.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;
const superstruct_1 = require("superstruct");
const assert_1 = require("./assert");
const bytes_1 = require("./bytes");
const hex_1 = require("./hex");
const NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);
const NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);
const BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);
const BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);
const BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);
const HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);
/**
 * Create a number from a number-like value.
 *
 * - If the value is a number, it is returned as-is.
 * - If the value is a `bigint`, it is converted to a number.
 * - If the value is a string, it is interpreted as a decimal number.
 * - If the value is a hex string (i.e., it starts with "0x"), it is
 * interpreted as a hexadecimal number.
 *
 * This validates that the value is a number-like value, and that the resulting
 * number is not `NaN` or `Infinity`.
 *
 * @example
 * ```typescript
 * const value = createNumber('0x010203');
 * console.log(value); // 66051
 *
 * const otherValue = createNumber(123n);
 * console.log(otherValue); // 123
 * ```
 * @param value - The value to create the number from.
 * @returns The created number.
 * @throws If the value is not a number-like value, or if the resulting number
 * is `NaN` or `Infinity`.
 */
function createNumber(value) {
    try {
        const result = (0, superstruct_1.create)(value, NumberCoercer);
        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got "${value}".`);
        return result;
    }
    catch (error) {
        if (error instanceof superstruct_1.StructError) {
            throw new Error(`Expected a number-like value, got "${value}".`);
        }
        /* istanbul ignore next */
        throw error;
    }
}
exports.createNumber = createNumber;
/**
 * Create a `bigint` from a number-like value.
 *
 * - If the value is a number, it is converted to a `bigint`.
 * - If the value is a `bigint`, it is returned as-is.
 * - If the value is a string, it is interpreted as a decimal number and
 * converted to a `bigint`.
 * - If the value is a hex string (i.e., it starts with "0x"), it is
 * interpreted as a hexadecimal number and converted to a `bigint`.
 *
 * @example
 * ```typescript
 * const value = createBigInt('0x010203');
 * console.log(value); // 16909060n
 *
 * const otherValue = createBigInt(123);
 * console.log(otherValue); // 123n
 * ```
 * @param value - The value to create the bigint from.
 * @returns The created bigint.
 * @throws If the value is not a number-like value.
 */
function createBigInt(value) {
    try {
        // The `BigInt` constructor throws if the value is not a number-like value.
        // There is no need to validate the value manually.
        return (0, superstruct_1.create)(value, BigIntCoercer);
    }
    catch (error) {
        if (error instanceof superstruct_1.StructError) {
            throw new Error(`Expected a number-like value, got "${String(error.value)}".`);
        }
        /* istanbul ignore next */
        throw error;
    }
}
exports.createBigInt = createBigInt;
/**
 * Create a byte array from a bytes-like value.
 *
 * - If the value is a byte array, it is returned as-is.
 * - If the value is a hex string (i.e., it starts with "0x"), it is interpreted
 * as a hexadecimal number and converted to a byte array.
 *
 * @example
 * ```typescript
 * const value = createBytes('0x010203');
 * console.log(value); // Uint8Array [ 1, 2, 3 ]
 *
 * const otherValue = createBytes('0x010203');
 * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]
 * ```
 * @param value - The value to create the byte array from.
 * @returns The created byte array.
 * @throws If the value is not a bytes-like value.
 */
function createBytes(value) {
    if (typeof value === 'string' && value.toLowerCase() === '0x') {
        return new Uint8Array();
    }
    try {
        return (0, superstruct_1.create)(value, BytesCoercer);
    }
    catch (error) {
        if (error instanceof superstruct_1.StructError) {
            throw new Error(`Expected a bytes-like value, got "${String(error.value)}".`);
        }
        /* istanbul ignore next */
        throw error;
    }
}
exports.createBytes = createBytes;
/**
 * Create a hexadecimal string from a bytes-like value.
 *
 * - If the value is a hex string (i.e., it starts with "0x"), it is returned
 * as-is.
 * - If the value is a `Uint8Array`, it is converted to a hex string.
 *
 * @example
 * ```typescript
 * const value = createHex(new Uint8Array([1, 2, 3]));
 * console.log(value); // '0x010203'
 *
 * const otherValue = createHex('0x010203');
 * console.log(otherValue); // '0x010203'
 * ```
 * @param value - The value to create the hex string from.
 * @returns The created hex string.
 * @throws If the value is not a bytes-like value.
 */
function createHex(value) {
    if ((value instanceof Uint8Array && value.length === 0) ||
        (typeof value === 'string' && value.toLowerCase() === '0x')) {
        return '0x';
    }
    try {
        return (0, superstruct_1.create)(value, HexCoercer);
    }
    catch (error) {
        if (error instanceof superstruct_1.StructError) {
            throw new Error(`Expected a bytes-like value, got "${String(error.value)}".`);
        }
        /* istanbul ignore next */
        throw error;
    }
}
exports.createHex = createHex;
//# sourceMappingURL=coercers.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\coercers.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\collections.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Ccollections.js
      return function (require, module, exports) {
"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FrozenMap_map, _FrozenSet_set;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrozenSet = exports.FrozenMap = void 0;
/**
 * A {@link ReadonlyMap} that cannot be modified after instantiation.
 * The implementation uses an inner map hidden via a private field, and the
 * immutability guarantee relies on it being impossible to get a reference
 * to this map.
 */
class FrozenMap {
    constructor(entries) {
        _FrozenMap_map.set(this, void 0);
        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), "f");
        Object.freeze(this);
    }
    get size() {
        return __classPrivateFieldGet(this, _FrozenMap_map, "f").size;
    }
    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {
        return __classPrivateFieldGet(this, _FrozenMap_map, "f")[Symbol.iterator]();
    }
    entries() {
        return __classPrivateFieldGet(this, _FrozenMap_map, "f").entries();
    }
    forEach(callbackfn, thisArg) {
        // We have to wrap the specified callback in order to prevent it from
        // receiving a reference to the inner map.
        return __classPrivateFieldGet(this, _FrozenMap_map, "f").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));
    }
    get(key) {
        return __classPrivateFieldGet(this, _FrozenMap_map, "f").get(key);
    }
    has(key) {
        return __classPrivateFieldGet(this, _FrozenMap_map, "f").has(key);
    }
    keys() {
        return __classPrivateFieldGet(this, _FrozenMap_map, "f").keys();
    }
    values() {
        return __classPrivateFieldGet(this, _FrozenMap_map, "f").values();
    }
    toString() {
        return `FrozenMap(${this.size}) {${this.size > 0
            ? ` ${[...this.entries()]
                .map(([key, value]) => `${String(key)} => ${String(value)}`)
                .join(', ')} `
            : ''}}`;
    }
}
exports.FrozenMap = FrozenMap;
/**
 * A {@link ReadonlySet} that cannot be modified after instantiation.
 * The implementation uses an inner set hidden via a private field, and the
 * immutability guarantee relies on it being impossible to get a reference
 * to this set.
 */
class FrozenSet {
    constructor(values) {
        _FrozenSet_set.set(this, void 0);
        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), "f");
        Object.freeze(this);
    }
    get size() {
        return __classPrivateFieldGet(this, _FrozenSet_set, "f").size;
    }
    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {
        return __classPrivateFieldGet(this, _FrozenSet_set, "f")[Symbol.iterator]();
    }
    entries() {
        return __classPrivateFieldGet(this, _FrozenSet_set, "f").entries();
    }
    forEach(callbackfn, thisArg) {
        // We have to wrap the specified callback in order to prevent it from
        // receiving a reference to the inner set.
        return __classPrivateFieldGet(this, _FrozenSet_set, "f").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));
    }
    has(value) {
        return __classPrivateFieldGet(this, _FrozenSet_set, "f").has(value);
    }
    keys() {
        return __classPrivateFieldGet(this, _FrozenSet_set, "f").keys();
    }
    values() {
        return __classPrivateFieldGet(this, _FrozenSet_set, "f").values();
    }
    toString() {
        return `FrozenSet(${this.size}) {${this.size > 0
            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `
            : ''}}`;
    }
}
exports.FrozenSet = FrozenSet;
Object.freeze(FrozenMap);
Object.freeze(FrozenMap.prototype);
Object.freeze(FrozenSet);
Object.freeze(FrozenSet.prototype);
//# sourceMappingURL=collections.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\collections.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\hex.js", {"./assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js","superstruct":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\superstruct\\dist\\index.cjs"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Chex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove0x = exports.add0x = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.StrictHexStruct = exports.HexStruct = void 0;
const superstruct_1 = require("superstruct");
const assert_1 = require("./assert");
exports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);
exports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);
/**
 * Check if a string is a valid hex string.
 *
 * @param value - The value to check.
 * @returns Whether the value is a valid hex string.
 */
function isHexString(value) {
    return (0, superstruct_1.is)(value, exports.HexStruct);
}
exports.isHexString = isHexString;
/**
 * Strictly check if a string is a valid hex string. A valid hex string must
 * start with the "0x"-prefix.
 *
 * @param value - The value to check.
 * @returns Whether the value is a valid hex string.
 */
function isStrictHexString(value) {
    return (0, superstruct_1.is)(value, exports.StrictHexStruct);
}
exports.isStrictHexString = isStrictHexString;
/**
 * Assert that a value is a valid hex string.
 *
 * @param value - The value to check.
 * @throws If the value is not a valid hex string.
 */
function assertIsHexString(value) {
    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');
}
exports.assertIsHexString = assertIsHexString;
/**
 * Assert that a value is a valid hex string. A valid hex string must start with
 * the "0x"-prefix.
 *
 * @param value - The value to check.
 * @throws If the value is not a valid hex string.
 */
function assertIsStrictHexString(value) {
    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with "0x".');
}
exports.assertIsStrictHexString = assertIsStrictHexString;
/**
 * Add the `0x`-prefix to a hexadecimal string. If the string already has the
 * prefix, it is returned as-is.
 *
 * @param hexadecimal - The hexadecimal string to add the prefix to.
 * @returns The prefixed hexadecimal string.
 */
function add0x(hexadecimal) {
    if (hexadecimal.startsWith('0x')) {
        return hexadecimal;
    }
    if (hexadecimal.startsWith('0X')) {
        return `0x${hexadecimal.substring(2)}`;
    }
    return `0x${hexadecimal}`;
}
exports.add0x = add0x;
/**
 * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have
 * the prefix, it is returned as-is.
 *
 * @param hexadecimal - The hexadecimal string to remove the prefix from.
 * @returns The un-prefixed hexadecimal string.
 */
function remove0x(hexadecimal) {
    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {
        return hexadecimal.substring(2);
    }
    return hexadecimal;
}
exports.remove0x = remove0x;
//# sourceMappingURL=hex.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\hex.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\index.js", {"./assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js","./base64":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\base64.js","./bytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\bytes.js","./checksum":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\checksum.js","./coercers":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\coercers.js","./collections":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\collections.js","./hex":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\hex.js","./json":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\json.js","./logging":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\logging.js","./misc":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\misc.js","./number":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\number.js","./opaque":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\opaque.js","./time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\time.js","./versions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\versions.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./assert"), exports);
__exportStar(require("./base64"), exports);
__exportStar(require("./bytes"), exports);
__exportStar(require("./checksum"), exports);
__exportStar(require("./coercers"), exports);
__exportStar(require("./collections"), exports);
__exportStar(require("./hex"), exports);
__exportStar(require("./json"), exports);
__exportStar(require("./logging"), exports);
__exportStar(require("./misc"), exports);
__exportStar(require("./number"), exports);
__exportStar(require("./opaque"), exports);
__exportStar(require("./time"), exports);
__exportStar(require("./versions"), exports);
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\json.js", {"./assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js","./misc":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\misc.js","superstruct":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\superstruct\\dist\\index.cjs"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cjson.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJsonAndGetSize = exports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.isValidJson = exports.JsonStruct = void 0;
const superstruct_1 = require("superstruct");
const assert_1 = require("./assert");
const misc_1 = require("./misc");
exports.JsonStruct = (0, superstruct_1.define)('Json', (value) => {
    const [isValid] = validateJsonAndGetSize(value, true);
    if (!isValid) {
        return 'Expected a valid JSON-serializable value';
    }
    return true;
});
/**
 * Check if the given value is a valid {@link Json} value, i.e., a value that is
 * serializable to JSON.
 *
 * @param value - The value to check.
 * @returns Whether the value is a valid {@link Json} value.
 */
function isValidJson(value) {
    return (0, superstruct_1.is)(value, exports.JsonStruct);
}
exports.isValidJson = isValidJson;
/**
 * The string '2.0'.
 */
exports.jsonrpc2 = '2.0';
exports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);
exports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));
exports.JsonRpcErrorStruct = (0, superstruct_1.object)({
    code: (0, superstruct_1.integer)(),
    message: (0, superstruct_1.string)(),
    data: (0, superstruct_1.optional)(exports.JsonStruct),
    stack: (0, superstruct_1.optional)((0, superstruct_1.string)()),
});
exports.JsonRpcParamsStruct = (0, superstruct_1.optional)((0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]));
exports.JsonRpcRequestStruct = (0, superstruct_1.object)({
    id: exports.JsonRpcIdStruct,
    jsonrpc: exports.JsonRpcVersionStruct,
    method: (0, superstruct_1.string)(),
    params: exports.JsonRpcParamsStruct,
});
exports.JsonRpcNotificationStruct = (0, superstruct_1.omit)(exports.JsonRpcRequestStruct, ['id']);
/**
 * Check if the given value is a valid {@link JsonRpcNotification} object.
 *
 * @param value - The value to check.
 * @returns Whether the given value is a valid {@link JsonRpcNotification}
 * object.
 */
function isJsonRpcNotification(value) {
    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);
}
exports.isJsonRpcNotification = isJsonRpcNotification;
/**
 * Assert that the given value is a valid {@link JsonRpcNotification} object.
 *
 * @param value - The value to check.
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}.
 * @throws If the given value is not a valid {@link JsonRpcNotification} object.
 */
function assertIsJsonRpcNotification(value, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);
}
exports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;
/**
 * Check if the given value is a valid {@link JsonRpcRequest} object.
 *
 * @param value - The value to check.
 * @returns Whether the given value is a valid {@link JsonRpcRequest} object.
 */
function isJsonRpcRequest(value) {
    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);
}
exports.isJsonRpcRequest = isJsonRpcRequest;
/**
 * Assert that the given value is a valid {@link JsonRpcRequest} object.
 *
 * @param value - The JSON-RPC request or notification to check.
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}.
 * @throws If the given value is not a valid {@link JsonRpcRequest} object.
 */
function assertIsJsonRpcRequest(value, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);
}
exports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;
exports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({
    id: exports.JsonRpcIdStruct,
    jsonrpc: exports.JsonRpcVersionStruct,
    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),
    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),
});
exports.JsonRpcSuccessStruct = (0, superstruct_1.object)({
    id: exports.JsonRpcIdStruct,
    jsonrpc: exports.JsonRpcVersionStruct,
    result: exports.JsonStruct,
});
exports.JsonRpcFailureStruct = (0, superstruct_1.object)({
    id: exports.JsonRpcIdStruct,
    jsonrpc: exports.JsonRpcVersionStruct,
    error: exports.JsonRpcErrorStruct,
});
exports.JsonRpcResponseStruct = (0, superstruct_1.union)([
    exports.JsonRpcSuccessStruct,
    exports.JsonRpcFailureStruct,
]);
/**
 * Type guard to check whether specified JSON-RPC response is a
 * {@link PendingJsonRpcResponse}.
 *
 * @param response - The JSON-RPC response to check.
 * @returns Whether the specified JSON-RPC response is pending.
 */
function isPendingJsonRpcResponse(response) {
    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);
}
exports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;
/**
 * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.
 *
 * @param response - The JSON-RPC response to check.
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}.
 * @throws If the given value is not a valid {@link PendingJsonRpcResponse}
 * object.
 */
function assertIsPendingJsonRpcResponse(response, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);
}
exports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;
/**
 * Type guard to check if a value is a {@link JsonRpcResponse}.
 *
 * @param response - The object to check.
 * @returns Whether the object is a JsonRpcResponse.
 */
function isJsonRpcResponse(response) {
    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);
}
exports.isJsonRpcResponse = isJsonRpcResponse;
/**
 * Assert that the given value is a valid {@link JsonRpcResponse} object.
 *
 * @param value - The value to check.
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}.
 * @throws If the given value is not a valid {@link JsonRpcResponse} object.
 */
function assertIsJsonRpcResponse(value, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);
}
exports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;
/**
 * Check if the given value is a valid {@link JsonRpcSuccess} object.
 *
 * @param value - The value to check.
 * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.
 */
function isJsonRpcSuccess(value) {
    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);
}
exports.isJsonRpcSuccess = isJsonRpcSuccess;
/**
 * Assert that the given value is a valid {@link JsonRpcSuccess} object.
 *
 * @param value - The value to check.
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}.
 * @throws If the given value is not a valid {@link JsonRpcSuccess} object.
 */
function assertIsJsonRpcSuccess(value, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);
}
exports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;
/**
 * Check if the given value is a valid {@link JsonRpcFailure} object.
 *
 * @param value - The value to check.
 * @returns Whether the given value is a valid {@link JsonRpcFailure} object.
 */
function isJsonRpcFailure(value) {
    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);
}
exports.isJsonRpcFailure = isJsonRpcFailure;
/**
 * Assert that the given value is a valid {@link JsonRpcFailure} object.
 *
 * @param value - The value to check.
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}.
 * @throws If the given value is not a valid {@link JsonRpcFailure} object.
 */
function assertIsJsonRpcFailure(value, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);
}
exports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;
/**
 * Check if the given value is a valid {@link JsonRpcError} object.
 *
 * @param value - The value to check.
 * @returns Whether the given value is a valid {@link JsonRpcError} object.
 */
function isJsonRpcError(value) {
    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);
}
exports.isJsonRpcError = isJsonRpcError;
/**
 * Assert that the given value is a valid {@link JsonRpcError} object.
 *
 * @param value - The value to check.
 * @param ErrorWrapper - The error class to throw if the assertion fails.
 * Defaults to {@link AssertionError}.
 * @throws If the given value is not a valid {@link JsonRpcError} object.
 */
function assertIsJsonRpcError(value, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);
}
exports.assertIsJsonRpcError = assertIsJsonRpcError;
/**
 * Gets a function for validating JSON-RPC request / response `id` values.
 *
 * By manipulating the options of this factory, you can control the behavior
 * of the resulting validator for some edge cases. This is useful because e.g.
 * `null` should sometimes but not always be permitted.
 *
 * Note that the empty string (`''`) is always permitted by the JSON-RPC
 * specification, but that kind of sucks and you may want to forbid it in some
 * instances anyway.
 *
 * For more details, see the
 * [JSON-RPC Specification](https://www.jsonrpc.org/specification).
 *
 * @param options - An options object.
 * @param options.permitEmptyString - Whether the empty string (i.e. `''`)
 * should be treated as a valid ID. Default: `true`
 * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)
 * should be treated as valid IDs. Default: `false`
 * @param options.permitNull - Whether `null` should be treated as a valid ID.
 * Default: `true`
 * @returns The JSON-RPC ID validator function.
 */
function getJsonRpcIdValidator(options) {
    const { permitEmptyString, permitFractions, permitNull } = Object.assign({ permitEmptyString: true, permitFractions: false, permitNull: true }, options);
    /**
     * Type guard for {@link JsonRpcId}.
     *
     * @param id - The JSON-RPC ID value to check.
     * @returns Whether the given ID is valid per the options given to the
     * factory.
     */
    const isValidJsonRpcId = (id) => {
        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||
            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||
            (permitNull && id === null));
    };
    return isValidJsonRpcId;
}
exports.getJsonRpcIdValidator = getJsonRpcIdValidator;
/**
 * Checks whether a value is JSON serializable and counts the total number
 * of bytes needed to store the serialized version of the value.
 *
 * @param jsObject - Potential JSON serializable object.
 * @param skipSizingProcess - Skip JSON size calculation (default: false).
 * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether
 * the value was serializable and a number of bytes that it will use when serialized to JSON.
 */
function validateJsonAndGetSize(jsObject, skipSizingProcess = false) {
    const seenObjects = new Set();
    /**
     * Checks whether a value is JSON serializable and counts the total number
     * of bytes needed to store the serialized version of the value.
     *
     * This function assumes the encoding of the JSON is done in UTF-8.
     *
     * @param value - Potential JSON serializable value.
     * @param skipSizing - Skip JSON size calculation (default: false).
     * @returns Tuple [isValid, plainTextSizeInBytes] containing a boolean that signals whether
     * the value was serializable and a number of bytes that it will use when serialized to JSON.
     */
    function getJsonSerializableInfo(value, skipSizing) {
        if (value === undefined) {
            return [false, 0];
        }
        else if (value === null) {
            // Return already specified constant size for null (special object)
            return [true, skipSizing ? 0 : misc_1.JsonSize.Null];
        }
        // Check and calculate sizes for basic (and some special) types
        const typeOfValue = typeof value;
        try {
            if (typeOfValue === 'function') {
                return [false, 0];
            }
            else if (typeOfValue === 'string' || value instanceof String) {
                return [
                    true,
                    skipSizing
                        ? 0
                        : (0, misc_1.calculateStringSize)(value) + misc_1.JsonSize.Quote * 2,
                ];
            }
            else if (typeOfValue === 'boolean' || value instanceof Boolean) {
                if (skipSizing) {
                    return [true, 0];
                }
                // eslint-disable-next-line eqeqeq
                return [true, value == true ? misc_1.JsonSize.True : misc_1.JsonSize.False];
            }
            else if (typeOfValue === 'number' || value instanceof Number) {
                if (skipSizing) {
                    return [true, 0];
                }
                return [true, (0, misc_1.calculateNumberSize)(value)];
            }
            else if (value instanceof Date) {
                if (skipSizing) {
                    return [true, 0];
                }
                return [
                    true,
                    // Note: Invalid dates will serialize to null
                    isNaN(value.getDate())
                        ? misc_1.JsonSize.Null
                        : misc_1.JsonSize.Date + misc_1.JsonSize.Quote * 2,
                ];
            }
        }
        catch (_) {
            return [false, 0];
        }
        // If object is not plain and cannot be serialized properly,
        // stop here and return false for serialization
        if (!(0, misc_1.isPlainObject)(value) && !Array.isArray(value)) {
            return [false, 0];
        }
        // Circular object detection (handling)
        // Check if the same object already exists
        if (seenObjects.has(value)) {
            return [false, 0];
        }
        // Add new object to the seen objects set
        // Only the plain objects should be added (Primitive types are skipped)
        seenObjects.add(value);
        // Continue object decomposition
        try {
            return [
                true,
                Object.entries(value).reduce((sum, [key, nestedValue], idx, arr) => {
                    // Recursively process next nested object or primitive type
                    // eslint-disable-next-line prefer-const
                    let [valid, size] = getJsonSerializableInfo(nestedValue, skipSizing);
                    if (!valid) {
                        throw new Error('JSON validation did not pass. Validation process stopped.');
                    }
                    // Circular object detection
                    // Once a child node is visited and processed remove it from the set.
                    // This will prevent false positives with the same adjacent objects.
                    seenObjects.delete(value);
                    if (skipSizing) {
                        return 0;
                    }
                    // Objects will have be serialized with "key": value,
                    // therefore we include the key in the calculation here
                    const keySize = Array.isArray(value)
                        ? 0
                        : key.length + misc_1.JsonSize.Comma + misc_1.JsonSize.Colon * 2;
                    const separator = idx < arr.length - 1 ? misc_1.JsonSize.Comma : 0;
                    return sum + keySize + size + separator;
                }, 
                // Starts at 2 because the serialized JSON string data (plain text)
                // will minimally contain {}/[]
                skipSizing ? 0 : misc_1.JsonSize.Wrapper * 2),
            ];
        }
        catch (_) {
            return [false, 0];
        }
    }
    return getJsonSerializableInfo(jsObject, skipSizingProcess);
}
exports.validateJsonAndGetSize = validateJsonAndGetSize;
//# sourceMappingURL=json.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\json.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\logging.js", {"debug":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\debug\\src\\browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Clogging.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createModuleLogger = exports.createProjectLogger = void 0;
const debug_1 = __importDefault(require("debug"));
const globalLogger = (0, debug_1.default)('metamask');
/**
 * Creates a logger via the `debug` library whose log messages will be tagged
 * using the name of your project. By default, such messages will be
 * suppressed, but you can reveal them by setting the `DEBUG` environment
 * variable to `metamask:<projectName>`. You can also set this variable to
 * `metamask:*` if you want to see log messages from all MetaMask projects that
 * are also using this function to create their loggers.
 *
 * @param projectName - The name of your project. This should be the name of
 * your NPM package if you're developing one.
 * @returns An instance of `debug`.
 */
function createProjectLogger(projectName) {
    return globalLogger.extend(projectName);
}
exports.createProjectLogger = createProjectLogger;
/**
 * Creates a logger via the `debug` library which is derived from the logger for
 * the whole project whose log messages will be tagged using the name of your
 * module. By default, such messages will be suppressed, but you can reveal them
 * by setting the `DEBUG` environment variable to
 * `metamask:<projectName>:<moduleName>`. You can also set this variable to
 * `metamask:<projectName>:*` if you want to see log messages from the project,
 * or `metamask:*` if you want to see log messages from all MetaMask projects.
 *
 * @param projectLogger - The logger created via {@link createProjectLogger}.
 * @param moduleName - The name of your module. You could use the name of the
 * file where you're using this logger or some other name.
 * @returns An instance of `debug`.
 */
function createModuleLogger(projectLogger, moduleName) {
    return projectLogger.extend(moduleName);
}
exports.createModuleLogger = createModuleLogger;
//# sourceMappingURL=logging.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\logging.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\misc.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cmisc.js
      return function (require, module, exports) {
"use strict";
//
// Types
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;
//
// Type Guards
//
/**
 * A {@link NonEmptyArray} type guard.
 *
 * @template Element - The non-empty array member type.
 * @param value - The value to check.
 * @returns Whether the value is a non-empty array.
 */
function isNonEmptyArray(value) {
    return Array.isArray(value) && value.length > 0;
}
exports.isNonEmptyArray = isNonEmptyArray;
/**
 * Type guard for "nullishness".
 *
 * @param value - Any value.
 * @returns `true` if the value is null or undefined, `false` otherwise.
 */
function isNullOrUndefined(value) {
    return value === null || value === undefined;
}
exports.isNullOrUndefined = isNullOrUndefined;
/**
 * A type guard for {@link RuntimeObject}.
 *
 * @param value - The value to check.
 * @returns Whether the specified value has a runtime type of `object` and is
 * neither `null` nor an `Array`.
 */
function isObject(value) {
    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);
}
exports.isObject = isObject;
//
// Other utility functions
//
/**
 * A type guard for ensuring an object has a property.
 *
 * @param objectToCheck - The object to check.
 * @param name - The property name to check for.
 * @returns Whether the specified object has an own property with the specified
 * name, regardless of whether it is enumerable or not.
 */
const hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);
exports.hasProperty = hasProperty;
/**
 * Predefined sizes (in Bytes) of specific parts of JSON structure.
 */
var JsonSize;
(function (JsonSize) {
    JsonSize[JsonSize["Null"] = 4] = "Null";
    JsonSize[JsonSize["Comma"] = 1] = "Comma";
    JsonSize[JsonSize["Wrapper"] = 1] = "Wrapper";
    JsonSize[JsonSize["True"] = 4] = "True";
    JsonSize[JsonSize["False"] = 5] = "False";
    JsonSize[JsonSize["Quote"] = 1] = "Quote";
    JsonSize[JsonSize["Colon"] = 1] = "Colon";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    JsonSize[JsonSize["Date"] = 24] = "Date";
})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));
/**
 * Regular expression with pattern matching for (special) escaped characters.
 */
exports.ESCAPE_CHARACTERS_REGEXP = /"|\\|\n|\r|\t/gu;
/**
 * Check if the value is plain object.
 *
 * @param value - Value to be checked.
 * @returns True if an object is the plain JavaScript object,
 * false if the object is not plain (e.g. function).
 */
function isPlainObject(value) {
    if (typeof value !== 'object' || value === null) {
        return false;
    }
    try {
        let proto = value;
        while (Object.getPrototypeOf(proto) !== null) {
            proto = Object.getPrototypeOf(proto);
        }
        return Object.getPrototypeOf(value) === proto;
    }
    catch (_) {
        return false;
    }
}
exports.isPlainObject = isPlainObject;
/**
 * Check if character is ASCII.
 *
 * @param character - Character.
 * @returns True if a character code is ASCII, false if not.
 */
function isASCII(character) {
    return character.charCodeAt(0) <= 127;
}
exports.isASCII = isASCII;
/**
 * Calculate string size.
 *
 * @param value - String value to calculate size.
 * @returns Number of bytes used to store whole string value.
 */
function calculateStringSize(value) {
    var _a;
    const size = value.split('').reduce((total, character) => {
        if (isASCII(character)) {
            return total + 1;
        }
        return total + 2;
    }, 0);
    // Also detect characters that need backslash escape
    return size + ((_a = value.match(exports.ESCAPE_CHARACTERS_REGEXP)) !== null && _a !== void 0 ? _a : []).length;
}
exports.calculateStringSize = calculateStringSize;
/**
 * Calculate size of a number ofter JSON serialization.
 *
 * @param value - Number value to calculate size.
 * @returns Number of bytes used to store whole number in JSON.
 */
function calculateNumberSize(value) {
    return value.toString().length;
}
exports.calculateNumberSize = calculateNumberSize;
//# sourceMappingURL=misc.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\misc.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\number.js", {"./assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js","./hex":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\hex.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cnumber.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;
const assert_1 = require("./assert");
const hex_1 = require("./hex");
/**
 * Convert a number to a hexadecimal string. This verifies that the number is a
 * non-negative safe integer.
 *
 * To convert a `bigint` to a hexadecimal string instead, use
 * {@link bigIntToHex}.
 *
 * @example
 * ```typescript
 * numberToHex(0); // '0x0'
 * numberToHex(1); // '0x1'
 * numberToHex(16); // '0x10'
 * ```
 * @param value - The number to convert to a hexadecimal string.
 * @returns The hexadecimal string, with the "0x"-prefix.
 * @throws If the number is not a non-negative safe integer.
 */
const numberToHex = (value) => {
    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');
    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');
    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');
    return (0, hex_1.add0x)(value.toString(16));
};
exports.numberToHex = numberToHex;
/**
 * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`
 * is a non-negative integer.
 *
 * To convert a number to a hexadecimal string instead, use {@link numberToHex}.
 *
 * @example
 * ```typescript
 * bigIntToHex(0n); // '0x0'
 * bigIntToHex(1n); // '0x1'
 * bigIntToHex(16n); // '0x10'
 * ```
 * @param value - The `bigint` to convert to a hexadecimal string.
 * @returns The hexadecimal string, with the "0x"-prefix.
 * @throws If the `bigint` is not a non-negative integer.
 */
const bigIntToHex = (value) => {
    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');
    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');
    return (0, hex_1.add0x)(value.toString(16));
};
exports.bigIntToHex = bigIntToHex;
/**
 * Convert a hexadecimal string to a number. This verifies that the string is a
 * valid hex string, and that the resulting number is a safe integer. Both
 * "0x"-prefixed and unprefixed strings are supported.
 *
 * To convert a hexadecimal string to a `bigint` instead, use
 * {@link hexToBigInt}.
 *
 * @example
 * ```typescript
 * hexToNumber('0x0'); // 0
 * hexToNumber('0x1'); // 1
 * hexToNumber('0x10'); // 16
 * ```
 * @param value - The hexadecimal string to convert to a number.
 * @returns The number.
 * @throws If the value is not a valid hexadecimal string, or if the resulting
 * number is not a safe integer.
 */
const hexToNumber = (value) => {
    (0, hex_1.assertIsHexString)(value);
    // `parseInt` accepts values without the "0x"-prefix, whereas `Number` does
    // not. Using this is slightly faster than `Number(add0x(value))`.
    const numberValue = parseInt(value, 16);
    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');
    return numberValue;
};
exports.hexToNumber = hexToNumber;
/**
 * Convert a hexadecimal string to a `bigint`. This verifies that the string is
 * a valid hex string. Both "0x"-prefixed and unprefixed strings are supported.
 *
 * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.
 *
 * @example
 * ```typescript
 * hexToBigInt('0x0'); // 0n
 * hexToBigInt('0x1'); // 1n
 * hexToBigInt('0x10'); // 16n
 * ```
 * @param value - The hexadecimal string to convert to a `bigint`.
 * @returns The `bigint`.
 * @throws If the value is not a valid hexadecimal string.
 */
const hexToBigInt = (value) => {
    (0, hex_1.assertIsHexString)(value);
    // The `BigInt` constructor requires the "0x"-prefix to parse a hex string.
    return BigInt((0, hex_1.add0x)(value));
};
exports.hexToBigInt = hexToBigInt;
//# sourceMappingURL=number.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\number.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\opaque.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Copaque.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=opaque.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\opaque.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\time.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Ctime.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeSince = exports.inMilliseconds = exports.Duration = void 0;
/**
 * Common duration constants, in milliseconds.
 */
var Duration;
(function (Duration) {
    /**
     * A millisecond.
     */
    Duration[Duration["Millisecond"] = 1] = "Millisecond";
    /**
     * A second, in milliseconds.
     */
    Duration[Duration["Second"] = 1000] = "Second";
    /**
     * A minute, in milliseconds.
     */
    Duration[Duration["Minute"] = 60000] = "Minute";
    /**
     * An hour, in milliseconds.
     */
    Duration[Duration["Hour"] = 3600000] = "Hour";
    /**
     * A day, in milliseconds.
     */
    Duration[Duration["Day"] = 86400000] = "Day";
    /**
     * A week, in milliseconds.
     */
    Duration[Duration["Week"] = 604800000] = "Week";
    /**
     * A year, in milliseconds.
     */
    Duration[Duration["Year"] = 31536000000] = "Year";
})(Duration = exports.Duration || (exports.Duration = {}));
const isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;
const assertIsNonNegativeInteger = (number, name) => {
    if (!isNonNegativeInteger(number)) {
        throw new Error(`"${name}" must be a non-negative integer. Received: "${number}".`);
    }
};
/**
 * Calculates the millisecond value of the specified number of units of time.
 *
 * @param count - The number of units of time.
 * @param duration - The unit of time to count.
 * @returns The count multiplied by the specified duration.
 */
function inMilliseconds(count, duration) {
    assertIsNonNegativeInteger(count, 'count');
    return count * duration;
}
exports.inMilliseconds = inMilliseconds;
/**
 * Gets the milliseconds since a particular Unix epoch timestamp.
 *
 * @param timestamp - A Unix millisecond timestamp.
 * @returns The number of milliseconds elapsed since the specified timestamp.
 */
function timeSince(timestamp) {
    assertIsNonNegativeInteger(timestamp, 'timestamp');
    return Date.now() - timestamp;
}
exports.timeSince = timeSince;
//# sourceMappingURL=time.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\time.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\versions.js", {"./assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\assert.js","semver":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\semver\\index.js","superstruct":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\superstruct\\dist\\index.cjs"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5C@metamask%5Cutils%5Cdist%5Cversions.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;
const semver_1 = require("semver");
const superstruct_1 = require("superstruct");
const assert_1 = require("./assert");
/**
 * A struct for validating a version string.
 */
exports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {
    if ((0, semver_1.valid)(value) === null) {
        return `Expected SemVer version, got "${value}"`;
    }
    return true;
});
exports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {
    if ((0, semver_1.validRange)(value) === null) {
        return `Expected SemVer range, got "${value}"`;
    }
    return true;
});
/**
 * Checks whether a SemVer version is valid.
 *
 * @param version - A potential version.
 * @returns `true` if the version is valid, and `false` otherwise.
 */
function isValidSemVerVersion(version) {
    return (0, superstruct_1.is)(version, exports.VersionStruct);
}
exports.isValidSemVerVersion = isValidSemVerVersion;
/**
 * Checks whether a SemVer version range is valid.
 *
 * @param versionRange - A potential version range.
 * @returns `true` if the version range is valid, and `false` otherwise.
 */
function isValidSemVerRange(versionRange) {
    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);
}
exports.isValidSemVerRange = isValidSemVerRange;
/**
 * Asserts that a value is a valid concrete SemVer version.
 *
 * @param version - A potential SemVer concrete version.
 */
function assertIsSemVerVersion(version) {
    (0, assert_1.assertStruct)(version, exports.VersionStruct);
}
exports.assertIsSemVerVersion = assertIsSemVerVersion;
/**
 * Asserts that a value is a valid SemVer range.
 *
 * @param range - A potential SemVer range.
 */
function assertIsSemVerRange(range) {
    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);
}
exports.assertIsSemVerRange = assertIsSemVerRange;
/**
 * Checks whether a SemVer version is greater than another.
 *
 * @param version1 - The left-hand version.
 * @param version2 - The right-hand version.
 * @returns `version1 > version2`.
 */
function gtVersion(version1, version2) {
    return (0, semver_1.gt)(version1, version2);
}
exports.gtVersion = gtVersion;
/**
 * Checks whether a SemVer version is greater than all possibilities in a range.
 *
 * @param version - A SemvVer version.
 * @param range - The range to check against.
 * @returns `version > range`.
 */
function gtRange(version, range) {
    return (0, semver_1.gtr)(version, range);
}
exports.gtRange = gtRange;
/**
 * Returns whether a SemVer version satisfies a SemVer range.
 *
 * @param version - The SemVer version to check.
 * @param versionRange - The SemVer version range to check against.
 * @returns Whether the version satisfied the version range.
 */
function satisfiesVersionRange(version, versionRange) {
    return (0, semver_1.satisfies)(version, versionRange, {
        includePrerelease: true,
    });
}
exports.satisfiesVersionRange = satisfiesVersionRange;
//# sourceMappingURL=versions.js.map
      };
    };
  }
  }
}, {package:"eth-block-tracker>@metamask/utils",file:"node_modules\\eth-block-tracker\\node_modules\\@metamask\\utils\\dist\\versions.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-block-tracker\\node_modules\\pify\\index.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-block-tracker%5Cnode_modules%5Cpify%5Cindex.js
      return function (require, module, exports) {
'use strict';

const processFn = (fn, opts) => function () {
	const P = opts.promiseModule;
	const args = new Array(arguments.length);

	for (let i = 0; i < arguments.length; i++) {
		args[i] = arguments[i];
	}

	return new P((resolve, reject) => {
		if (opts.errorFirst) {
			args.push(function (err, result) {
				if (opts.multiArgs) {
					const results = new Array(arguments.length - 1);

					for (let i = 1; i < arguments.length; i++) {
						results[i - 1] = arguments[i];
					}

					if (err) {
						results.unshift(err);
						reject(results);
					} else {
						resolve(results);
					}
				} else if (err) {
					reject(err);
				} else {
					resolve(result);
				}
			});
		} else {
			args.push(function (result) {
				if (opts.multiArgs) {
					const results = new Array(arguments.length - 1);

					for (let i = 0; i < arguments.length; i++) {
						results[i] = arguments[i];
					}

					resolve(results);
				} else {
					resolve(result);
				}
			});
		}

		fn.apply(this, args);
	});
};

module.exports = (obj, opts) => {
	opts = Object.assign({
		exclude: [/.+(Sync|Stream)$/],
		errorFirst: true,
		promiseModule: Promise
	}, opts);

	const filter = key => {
		const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
		return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
	};

	let ret;
	if (typeof obj === 'function') {
		ret = function () {
			if (opts.excludeMain) {
				return obj.apply(this, arguments);
			}

			return processFn(obj, opts).apply(this, arguments);
		};
	} else {
		ret = Object.create(Object.getPrototypeOf(obj));
	}

	for (const key in obj) { // eslint-disable-line guard-for-in
		const x = obj[key];
		ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;
	}

	return ret;
};

      };
    };
  }
  }
}, {package:"eth-block-tracker>pify",file:"node_modules\\eth-block-tracker\\node_modules\\pify\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\abi.js", {"./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\util.js","bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\bn.js\\lib\\bn.js","buffer/":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-eip712-util-browser%5Cabi.js
      return function (require, module, exports) {
// Extracted from https://github.com/ethereumjs/ethereumjs-abi and stripped out irrelevant code
// Original code licensed under the MIT License - Copyright (c) 2015 Alex Beregszaszi

const util = require('./util')
const BN = require('bn.js')
const Buffer = require('buffer/').Buffer

// Convert from short to canonical names
// FIXME: optimise or make this nicer?
function elementaryName (name) {
  if (name.startsWith('int[')) {
    return 'int256' + name.slice(3)
  } else if (name === 'int') {
    return 'int256'
  } else if (name.startsWith('uint[')) {
    return 'uint256' + name.slice(4)
  } else if (name === 'uint') {
    return 'uint256'
  } else if (name.startsWith('fixed[')) {
    return 'fixed128x128' + name.slice(5)
  } else if (name === 'fixed') {
    return 'fixed128x128'
  } else if (name.startsWith('ufixed[')) {
    return 'ufixed128x128' + name.slice(6)
  } else if (name === 'ufixed') {
    return 'ufixed128x128'
  }
  return name
}

// Parse N from type<N>
function parseTypeN (type) {
  return parseInt(/^\D+(\d+)$/.exec(type)[1], 10)
}

// Parse N,M from type<N>x<M>
function parseTypeNxM (type) {
  var tmp = /^\D+(\d+)x(\d+)$/.exec(type)
  return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]
}

// Parse N in type[<N>] where "type" can itself be an array type.
function parseTypeArray (type) {
  var tmp = type.match(/(.*)\[(.*?)\]$/)
  if (tmp) {
    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)
  }
  return null
}

function parseNumber (arg) {
  var type = typeof arg
  if (type === 'string') {
    if (util.isHexString(arg)) {
      return new BN(util.stripHexPrefix(arg), 16)
    } else {
      return new BN(arg, 10)
    }
  } else if (type === 'number') {
    return new BN(arg)
  } else if (arg.toArray) {
    // assume this is a BN for the moment, replace with BN.isBN soon
    return arg
  } else {
    throw new Error('Argument is not a number')
  }
}

// Encodes a single item (can be dynamic array)
// @returns: Buffer
function encodeSingle (type, arg) {
  var size, num, ret, i

  if (type === 'address') {
    return encodeSingle('uint160', parseNumber(arg))
  } else if (type === 'bool') {
    return encodeSingle('uint8', arg ? 1 : 0)
  } else if (type === 'string') {
    return encodeSingle('bytes', new Buffer(arg, 'utf8'))
  } else if (isArray(type)) {
    // this part handles fixed-length ([2]) and variable length ([]) arrays
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    if (typeof arg.length === 'undefined') {
      throw new Error('Not an array?')
    }
    size = parseTypeArray(type)
    if (size !== 'dynamic' && size !== 0 && arg.length > size) {
      throw new Error('Elements exceed array size: ' + size)
    }
    ret = []
    type = type.slice(0, type.lastIndexOf('['))
    if (typeof arg === 'string') {
      arg = JSON.parse(arg)
    }
    for (i in arg) {
      ret.push(encodeSingle(type, arg[i]))
    }
    if (size === 'dynamic') {
      var length = encodeSingle('uint256', arg.length)
      ret.unshift(length)
    }
    return Buffer.concat(ret)
  } else if (type === 'bytes') {
    arg = new Buffer(arg)

    ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ])

    if ((arg.length % 32) !== 0) {
      ret = Buffer.concat([ ret, util.zeros(32 - (arg.length % 32)) ])
    }

    return ret
  } else if (type.startsWith('bytes')) {
    size = parseTypeN(type)
    if (size < 1 || size > 32) {
      throw new Error('Invalid bytes<N> width: ' + size)
    }

    return util.setLengthRight(arg, 32)
  } else if (type.startsWith('uint')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid uint<N> width: ' + size)
    }

    num = parseNumber(arg)
    if (num.bitLength() > size) {
      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    if (num < 0) {
      throw new Error('Supplied uint is negative')
    }

    return num.toArrayLike(Buffer, 'be', 32)
  } else if (type.startsWith('int')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid int<N> width: ' + size)
    }

    num = parseNumber(arg)
    if (num.bitLength() > size) {
      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    return num.toTwos(256).toArrayLike(Buffer, 'be', 32)
  } else if (type.startsWith('ufixed')) {
    size = parseTypeNxM(type)

    num = parseNumber(arg)

    if (num < 0) {
      throw new Error('Supplied ufixed is negative')
    }

    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))))
  } else if (type.startsWith('fixed')) {
    size = parseTypeNxM(type)

    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))))
  }

  throw new Error('Unsupported or invalid type: ' + type)
}

// Is a type dynamic?
function isDynamic (type) {
  // FIXME: handle all types? I don't think anything is missing now
  return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')
}

// Is a type an array?
function isArray (type) {
  return type.lastIndexOf(']') === type.length - 1
}

// Encode a method/event with arguments
// @types an array of string type names
// @args  an array of the appropriate values
function rawEncode (types, values) {
  var output = []
  var data = []

  var headLength = 32 * types.length

  for (var i in types) {
    var type = elementaryName(types[i])
    var value = values[i]
    var cur = encodeSingle(type, value)

    // Use the head/tail method for storing dynamic data
    if (isDynamic(type)) {
      output.push(encodeSingle('uint256', headLength))
      data.push(cur)
      headLength += cur.length
    } else {
      output.push(cur)
    }
  }

  return Buffer.concat(output.concat(data))
}

function solidityPack (types, values) {
  if (types.length !== values.length) {
    throw new Error('Number of types are not matching the values')
  }

  var size, num
  var ret = []

  for (var i = 0; i < types.length; i++) {
    var type = elementaryName(types[i])
    var value = values[i]

    if (type === 'bytes') {
      ret.push(value)
    } else if (type === 'string') {
      ret.push(new Buffer(value, 'utf8'))
    } else if (type === 'bool') {
      ret.push(new Buffer(value ? '01' : '00', 'hex'))
    } else if (type === 'address') {
      ret.push(util.setLength(value, 20))
    } else if (type.startsWith('bytes')) {
      size = parseTypeN(type)
      if (size < 1 || size > 32) {
        throw new Error('Invalid bytes<N> width: ' + size)
      }

      ret.push(util.setLengthRight(value, size))
    } else if (type.startsWith('uint')) {
      size = parseTypeN(type)
      if ((size % 8) || (size < 8) || (size > 256)) {
        throw new Error('Invalid uint<N> width: ' + size)
      }

      num = parseNumber(value)
      if (num.bitLength() > size) {
        throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
      }

      ret.push(num.toArrayLike(Buffer, 'be', size / 8))
    } else if (type.startsWith('int')) {
      size = parseTypeN(type)
      if ((size % 8) || (size < 8) || (size > 256)) {
        throw new Error('Invalid int<N> width: ' + size)
      }

      num = parseNumber(value)
      if (num.bitLength() > size) {
        throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
      }

      ret.push(num.toTwos(size).toArrayLike(Buffer, 'be', size / 8))
    } else {
      // FIXME: support all other types
      throw new Error('Unsupported or invalid type: ' + type)
    }
  }

  return Buffer.concat(ret)
}

function soliditySHA3 (types, values) {
  return util.keccak(solidityPack(types, values))
}

module.exports = {
  rawEncode,
  solidityPack,
  soliditySHA3
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>eth-eip712-util-browser",file:"node_modules\\eth-eip712-util-browser\\abi.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\index.js", {"./abi":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\abi.js","./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\util.js","buffer/":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-eip712-util-browser%5Cindex.js
      return function (require, module, exports) {
const util = require('./util')
const abi = require('./abi')
const Buffer = require('buffer/').Buffer

const TYPED_MESSAGE_SCHEMA = {
  type: 'object',
  properties: {
    types: {
      type: 'object',
      additionalProperties: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            name: {type: 'string'},
            type: {type: 'string'},
          },
          required: ['name', 'type'],
        },
      },
    },
    primaryType: {type: 'string'},
    domain: {type: 'object'},
    message: {type: 'object'},
  },
  required: ['types', 'primaryType', 'domain', 'message'],
}

/**
 * A collection of utility functions used for signing typed data
 */
const TypedDataUtils = {
  /**
   * Encodes an object by encoding and concatenating each of its members
   *
   * @param {string} primaryType - Root type
   * @param {Object} data - Object to encode
   * @param {Object} types - Type definitions
   * @returns {string} - Encoded representation of an object
   */
  encodeData (primaryType, data, types, useV4 = true) {
    const encodedTypes = ['bytes32']
    const encodedValues = [this.hashType(primaryType, types)]

    if(useV4) {
      const encodeField = (name, type, value) => {
        if (types[type] !== undefined) {
          return ['bytes32', value == null ?
            '0x0000000000000000000000000000000000000000000000000000000000000000' :
            util.keccak(this.encodeData(type, value, types, useV4))]
        }

        if(value === undefined)
          throw new Error(`missing value for field ${name} of type ${type}`)

        if (type === 'bytes') {
          return ['bytes32', util.keccak(value)]
        }

        if (type === 'string') {
          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex
          if (typeof value === 'string') {
            value = Buffer.from(value, 'utf8')
          }
          return ['bytes32', util.keccak(value)]
        }

        if (type.lastIndexOf(']') === type.length - 1) {
          const parsedType = type.slice(0, type.lastIndexOf('['))
          const typeValuePairs = value.map(item =>
            encodeField(name, parsedType, item))
          return ['bytes32', util.keccak(abi.rawEncode(
            typeValuePairs.map(([type]) => type),
            typeValuePairs.map(([, value]) => value),
          ))]
        }

        return [type, value]
      }

      for (const field of types[primaryType]) {
        const [type, value] = encodeField(field.name, field.type, data[field.name])
        encodedTypes.push(type)
        encodedValues.push(value)
      }
    } else {
      for (const field of types[primaryType]) {
        let value = data[field.name]
        if (value !== undefined) {
          if (field.type === 'bytes') {
            encodedTypes.push('bytes32')
            value = util.keccak(value)
            encodedValues.push(value)
          } else if (field.type === 'string') {
            encodedTypes.push('bytes32')
            // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex
            if (typeof value === 'string') {
              value = Buffer.from(value, 'utf8')
            }
            value = util.keccak(value)
            encodedValues.push(value)
          } else if (types[field.type] !== undefined) {
            encodedTypes.push('bytes32')
            value = util.keccak(this.encodeData(field.type, value, types, useV4))
            encodedValues.push(value)
          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {
            throw new Error('Arrays currently unimplemented in encodeData')
          } else {
            encodedTypes.push(field.type)
            encodedValues.push(value)
          }
        }
      }
    }

    return abi.rawEncode(encodedTypes, encodedValues)
  },

  /**
   * Encodes the type of an object by encoding a comma delimited list of its members
   *
   * @param {string} primaryType - Root type to encode
   * @param {Object} types - Type definitions
   * @returns {string} - Encoded representation of the type of an object
   */
  encodeType (primaryType, types) {
    let result = ''
    let deps = this.findTypeDependencies(primaryType, types).filter(dep => dep !== primaryType)
    deps = [primaryType].concat(deps.sort())
    for (const type of deps) {
      const children = types[type]
      if (!children) {
        throw new Error('No type definition specified: ' + type)
      }
      result += type + '(' + types[type].map(({ name, type }) => type + ' ' + name).join(',') + ')'
    }
    return result
  },

  /**
   * Finds all types within a type defintion object
   *
   * @param {string} primaryType - Root type
   * @param {Object} types - Type definitions
   * @param {Array} results - current set of accumulated types
   * @returns {Array} - Set of all types found in the type definition
   */
  findTypeDependencies (primaryType, types, results = []) {
    primaryType = primaryType.match(/^\w*/)[0]
    if (results.includes(primaryType) || types[primaryType] === undefined) { return results }
    results.push(primaryType)
    for (const field of types[primaryType]) {
      for (const dep of this.findTypeDependencies(field.type, types, results)) {
        !results.includes(dep) && results.push(dep)
      }
    }
    return results
  },

  /**
   * Hashes an object
   *
   * @param {string} primaryType - Root type
   * @param {Object} data - Object to hash
   * @param {Object} types - Type definitions
   * @returns {string} - Hash of an object
   */
  hashStruct (primaryType, data, types, useV4 = true) {
    return util.keccak(this.encodeData(primaryType, data, types, useV4))
  },

  /**
   * Hashes the type of an object
   *
   * @param {string} primaryType - Root type to hash
   * @param {Object} types - Type definitions
   * @returns {string} - Hash of an object
   */
  hashType (primaryType, types) {
    return util.keccak(this.encodeType(primaryType, types))
  },

  /**
   * Removes properties from a message object that are not defined per EIP-712
   *
   * @param {Object} data - typed message object
   * @returns {Object} - typed message object with only allowed fields
   */
  sanitizeData (data) {
    const sanitizedData = {}
    for (const key in TYPED_MESSAGE_SCHEMA.properties) {
      data[key] && (sanitizedData[key] = data[key])
    }
    if (sanitizedData.types) {
      sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types)
    }
    return sanitizedData
  },

  /**
   * Returns the hash of a typed message as per EIP-712 for signing
   *
   * @param {Object} typedData - Types message data to sign
   * @returns {string} - sha3 hash for signing
   */
  hash (typedData, useV4 = true) {
    const sanitizedData = this.sanitizeData(typedData)
    const parts = [Buffer.from('1901', 'hex')]
    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4))
    if (sanitizedData.primaryType !== 'EIP712Domain') {
      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4))
    }
    return util.keccak(Buffer.concat(parts))
  },
}

module.exports = {
  TYPED_MESSAGE_SCHEMA,
  TypedDataUtils,

  hashForSignTypedDataLegacy: function (msgParams) {
    return typedSignatureHashLegacy(msgParams.data)
  },

  hashForSignTypedData_v3: function (msgParams) {
    return TypedDataUtils.hash(msgParams.data, false)
  },

  hashForSignTypedData_v4: function (msgParams) {
    return TypedDataUtils.hash(msgParams.data)
  },
}

/**
 * @param typedData - Array of data along with types, as per EIP712.
 * @returns Buffer
 */
function typedSignatureHashLegacy(typedData) {
  const error = new Error('Expect argument to be non-empty array')
  if (typeof typedData !== 'object' || !typedData.length) throw error

  const data = typedData.map(function (e) {
    return e.type === 'bytes' ? util.toBuffer(e.value) : e.value
  })
  const types = typedData.map(function (e) { return e.type })
  const schema = typedData.map(function (e) {
    if (!e.name) throw error
    return e.type + ' ' + e.name
  })

  return abi.soliditySHA3(
    ['bytes32', 'bytes32'],
    [
      abi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
      abi.soliditySHA3(types, data)
    ]
  )
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>eth-eip712-util-browser",file:"node_modules\\eth-eip712-util-browser\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\bn.js\\lib\\bn.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\browser-resolve\\empty.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-eip712-util-browser%5Cnode_modules%5Cbn.js%5Clib%5Cbn.js
      return function (require, module, exports) {
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>eth-eip712-util-browser>bn.js",file:"node_modules\\eth-eip712-util-browser\\node_modules\\bn.js\\lib\\bn.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\buffer\\index.js", {"base64-js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\base64-js\\index.js","ieee754":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ieee754\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-eip712-util-browser%5Cnode_modules%5Cbuffer%5Cindex.js
      return function (require, module, exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

const base64 = require('base64-js')
const ieee754 = require('ieee754')
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>eth-eip712-util-browser>buffer",file:"node_modules\\eth-eip712-util-browser\\node_modules\\buffer\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\js-sha3\\src\\sha3.js", {"_process":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\process\\browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-eip712-util-browser%5Cnode_modules%5Cjs-sha3%5Csrc%5Csha3.js
      return function (require, module, exports) {
(function (process){(function (){
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD = typeof define === 'function' && define.amd;
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function (bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function (method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }
    return method;
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };
    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };
    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');
    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };
    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };
    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [
    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
  ];

  var methods = {}, methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;
    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255, n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;
    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }
    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }
    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString, type = typeof str;
    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var bytes = 0, length = str.length;
    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
          bytes += 4;
        }
      }
    }
    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);
    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }
    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }
    if (AMD) {
      define(function () {
        return methods;
      });
    }
  }
})();

}).call(this)}).call(this,require('_process'))

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>eth-eip712-util-browser>js-sha3",file:"node_modules\\eth-eip712-util-browser\\node_modules\\js-sha3\\src\\sha3.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\util.js", {"bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\bn.js\\lib\\bn.js","buffer/":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\buffer\\index.js","js-sha3":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\node_modules\\js-sha3\\src\\sha3.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-eip712-util-browser%5Cutil.js
      return function (require, module, exports) {
// Extracted from https://github.com/ethereumjs/ethereumjs-util and stripped out irrelevant code
// Original code licensed under the Mozilla Public License Version 2.0

const BN = require('bn.js')
const Buffer = require('buffer/').Buffer
const keccak256 = require('js-sha3').keccak256

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */
function zeros (bytes) {
  return Buffer.allocUnsafe(bytes).fill(0)
}

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method setLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */
function setLength (msg, length, right) {
  const buf = zeros(length)
  msg = toBuffer(msg)
  if (right) {
    if (msg.length < length) {
      msg.copy(buf)
      return buf
    }
    return msg.slice(0, length)
  } else {
    if (msg.length < length) {
      msg.copy(buf, length - msg.length)
      return buf
    }
    return msg.slice(-length)
  }
}

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */
function setLengthRight (msg, length) {
  return setLength(msg, length, true)
}

/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */
function toBuffer (v) {
  if (!Buffer.isBuffer(v)) {
    if (Array.isArray(v)) {
      v = Buffer.from(v)
    } else if (typeof v === 'string') {
      if (isHexString(v)) {
        v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex')
      } else {
        v = Buffer.from(v)
      }
    } else if (typeof v === 'number') {
      v = intToBuffer(v)
    } else if (v === null || v === undefined) {
      v = Buffer.allocUnsafe(0)
    } else if (BN.isBN(v)) {
      v = v.toArrayLike(Buffer)
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = Buffer.from(v.toArray())
    } else {
      throw new Error('invalid type')
    }
  }
  return v
}

/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */
function bufferToHex (buf) {
  buf = toBuffer(buf)
  return '0x' + buf.toString('hex')
}

/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
function keccak (a) {
  a = toBuffer(a)
  return Buffer.from(keccak256(a), 'hex')
}

function padToEven (str) {
  return str.length % 2 ? '0' + str : str
}

function isHexString (str) {
  return typeof str === 'string' && str.match(/^0x[0-9A-Fa-f]*$/)
}

function stripHexPrefix (str) {
  if (typeof str === 'string' && str.startsWith('0x')) {
    return str.slice(2)
  }
  return str
}

module.exports = {
  zeros,
  setLength,
  setLengthRight,
  isHexString,
  stripHexPrefix,
  toBuffer,
  bufferToHex,
  keccak
}

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk>eth-eip712-util-browser",file:"node_modules\\eth-eip712-util-browser\\util.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\base-filter-history.js", {"./base-filter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\base-filter.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5Cbase-filter-history.js
      return function (require, module, exports) {
const BaseFilter = require('./base-filter')

// tracks all results ever recorded
class BaseFilterWithHistory extends BaseFilter {

  constructor () {
    super()
    this.allResults = []
  }

  async update () {
    throw new Error('BaseFilterWithHistory - no update method specified')
  }

  addResults (newResults) {
    this.allResults = this.allResults.concat(newResults)
    super.addResults(newResults)
  }

  addInitialResults (newResults) {
    this.allResults = this.allResults.concat(newResults)
    super.addInitialResults(newResults)
  }

  getAllResults () {
    return this.allResults
  }

}

module.exports = BaseFilterWithHistory
      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\base-filter-history.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\base-filter.js", {"@metamask/safe-event-emitter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\safe-event-emitter\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5Cbase-filter.js
      return function (require, module, exports) {
const SafeEventEmitter = require('@metamask/safe-event-emitter').default

class BaseFilter extends SafeEventEmitter {

  constructor () {
    super()
    this.updates = []
  }

  async initialize () {}

  async update () {
    throw new Error('BaseFilter - no update method specified')
  }

  addResults (newResults) {
    this.updates = this.updates.concat(newResults)
    newResults.forEach(result => this.emit('update', result))
  }

  addInitialResults (newResults) {}

  getChangesAndClear () {
    const updates = this.updates
    this.updates = []
    return updates
  }
  
}

module.exports = BaseFilter

      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\base-filter.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\block-filter.js", {"./base-filter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\base-filter.js","./getBlocksForRange":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\getBlocksForRange.js","./hexUtils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\hexUtils.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5Cblock-filter.js
      return function (require, module, exports) {
const BaseFilter = require('./base-filter')
const getBlocksForRange = require('./getBlocksForRange')
const { incrementHexInt } = require('./hexUtils')

class BlockFilter extends BaseFilter {

  constructor ({ provider, params }) {
    super()
    this.type = 'block'
    this.provider = provider
  }

  async update ({ oldBlock, newBlock }) {
    const toBlock = newBlock
    const fromBlock = incrementHexInt(oldBlock)
    const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })
    const blockHashes = blockBodies.map((block) => block.hash)
    this.addResults(blockHashes)
  }

}

module.exports = BlockFilter

      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\block-filter.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\getBlocksForRange.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5CgetBlocksForRange.js
      return function (require, module, exports) {
module.exports = getBlocksForRange

async function getBlocksForRange({ provider, fromBlock, toBlock }) {
  if (!fromBlock) fromBlock = toBlock

  const fromBlockNumber = hexToInt(fromBlock)
  const toBlockNumber = hexToInt(toBlock)
  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1
  // load all blocks from old to new (inclusive)
  const missingBlockNumbers = Array(blockCountToQuery).fill()
                              .map((_,index) => fromBlockNumber + index)
                              .map(intToHex)
  let blockBodies = await Promise.all(
    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))
  )
  blockBodies = blockBodies.filter(block => block !== null);
  return blockBodies
}

function hexToInt(hexString) {
  if (hexString === undefined || hexString === null) return hexString
  return Number.parseInt(hexString, 16)
}

function incrementHexInt(hexString){
  if (hexString === undefined || hexString === null) return hexString
  const value = hexToInt(hexString)
  return intToHex(value + 1)
}

function intToHex(int) {
  if (int === undefined || int === null) return int
  const hexString = int.toString(16)
  return '0x' + hexString
}

function sendAsync(provider, request) {
  return new Promise((resolve, reject) => {
    provider.sendAsync(request, (error, response) => {
      if (error) {
        reject(error);
      } else if (response.error) {
        reject(response.error);
      } else if (response.result) {
        resolve(response.result);
      } else {
        reject(new Error("Result was empty"));
      }
    });
  });
}

async function query(provider, method, params) {
  for (let i = 0; i < 3; i++) {
    try {
      return await sendAsync(provider, {
        id: 1,
        jsonrpc: "2.0",
        method,
        params,
      });
    } catch (error) {
      console.error(
        `provider.sendAsync failed: ${error.stack || error.message || error}`
      );
    }
  }
  return null;
}

      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\getBlocksForRange.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\hexUtils.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5ChexUtils.js
      return function (require, module, exports) {

module.exports = {
  minBlockRef,
  maxBlockRef,
  sortBlockRefs,
  bnToHex,
  blockRefIsNumber,
  hexToInt,
  incrementHexInt,
  intToHex,
  unsafeRandomBytes,
}

function minBlockRef(...refs) {
  const sortedRefs = sortBlockRefs(refs)
  return sortedRefs[0]
}

function maxBlockRef(...refs) {
  const sortedRefs = sortBlockRefs(refs)
  return sortedRefs[sortedRefs.length-1]
}

function sortBlockRefs(refs) {
  return refs.sort((refA, refB) => {
    if (refA === 'latest' || refB === 'earliest') return 1
    if (refB === 'latest' || refA === 'earliest') return -1
    return hexToInt(refA) - hexToInt(refB)
  })
}

function bnToHex(bn) {
  return '0x' + bn.toString(16)
}

function blockRefIsNumber(blockRef){
  return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef)
}

function hexToInt(hexString) {
  if (hexString === undefined || hexString === null) return hexString
  return Number.parseInt(hexString, 16)
}

function incrementHexInt(hexString){
  if (hexString === undefined || hexString === null) return hexString
  const value = hexToInt(hexString)
  return intToHex(value + 1)
}

function intToHex(int) {
  if (int === undefined || int === null) return int
  let hexString = int.toString(16)
  const needsLeftPad = hexString.length % 2
  if (needsLeftPad) hexString = '0' + hexString
  return '0x' + hexString
}

function unsafeRandomBytes(byteCount) {
  let result = '0x'
  for (let i = 0; i < byteCount; i++) {
    result += unsafeRandomNibble()
    result += unsafeRandomNibble()
  }
  return result
}

function unsafeRandomNibble() {
  return Math.floor(Math.random() * 16).toString(16)
}

      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\hexUtils.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\index.js", {"./block-filter.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\block-filter.js","./hexUtils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\hexUtils.js","./log-filter.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\log-filter.js","./tx-filter.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\tx-filter.js","async-mutex":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\async-mutex\\lib\\index.js","json-rpc-engine":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\json-rpc-engine\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5Cindex.js
      return function (require, module, exports) {
const Mutex = require('async-mutex').Mutex
const { createAsyncMiddleware, createScaffoldMiddleware } = require('json-rpc-engine')
const LogFilter = require('./log-filter.js')
const BlockFilter = require('./block-filter.js')
const TxFilter = require('./tx-filter.js')
const { intToHex, hexToInt } = require('./hexUtils')

module.exports = createEthFilterMiddleware

function createEthFilterMiddleware({ blockTracker, provider }) {

  // create filter collection
  let filterIndex = 0
  let filters = {}
  // create update mutex
  const mutex = new Mutex()
  const waitForFree = mutexMiddlewareWrapper({ mutex })

  const middleware = createScaffoldMiddleware({
    // install filters
    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),
    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),
    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),
    // uninstall filters
    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),
    // checking filter changes
    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),
    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),
  })

  // setup filter updating and destroy handler
  const filterUpdater = async ({ oldBlock, newBlock }) => {
    if (filters.length === 0) return
    // lock update reads
    const releaseLock = await mutex.acquire()
    try {
      // process all filters in parallel
      await Promise.all(objValues(filters).map(async (filter) => {
        try {
         await filter.update({ oldBlock, newBlock })
        } catch (err) {
          // handle each error individually so filter update errors don't affect other filters
          console.error(err)
        }
      }))
    } catch (err) {
      // log error so we don't skip the releaseLock
      console.error(err)
    }
    // unlock update reads
    releaseLock()
  }

  // expose filter methods directly
  middleware.newLogFilter = newLogFilter
  middleware.newBlockFilter = newBlockFilter
  middleware.newPendingTransactionFilter = newPendingTransactionFilter
  middleware.uninstallFilter = uninstallFilterHandler
  middleware.getFilterChanges = getFilterChanges
  middleware.getFilterLogs = getFilterLogs

  // expose destroy method for cleanup
  middleware.destroy = () => {
    uninstallAllFilters()
  }

  return middleware

  //
  // new filters
  //

  async function newLogFilter(params) {
    const filter = new LogFilter({ provider, params })
    const filterIndex = await installFilter(filter)
    return filter
  }

  async function newBlockFilter() {
    const filter = new BlockFilter({ provider })
    const filterIndex = await installFilter(filter)
    return filter
  }

  async function newPendingTransactionFilter() {
    const filter = new TxFilter({ provider })
    const filterIndex = await installFilter(filter)
    return filter
  }

  //
  // get filter changes
  //

  async function getFilterChanges(filterIndexHex) {
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    if (!filter) {
      throw new Error(`No filter for index "${filterIndex}"`)
    }
    const results = filter.getChangesAndClear()
    return results
  }

  async function getFilterLogs(filterIndexHex) {
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    if (!filter) {
      throw new Error(`No filter for index "${filterIndex}"`)
    }
    // only return results for log filters
    let results = []
    if (filter.type === 'log') {
      results = filter.getAllResults()
    }
    return results
  }


  //
  // remove filters
  //


  async function uninstallFilterHandler(filterIndexHex) {
    // check filter exists
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    const result = Boolean(filter)
    // uninstall filter
    if (result) {
      await uninstallFilter(filterIndex)
    }
    return result
  }

  //
  // utils
  //

  async function installFilter(filter) {
    const prevFilterCount = objValues(filters).length
    // install filter
    const currentBlock = await blockTracker.getLatestBlock()
    await filter.initialize({ currentBlock })
    filterIndex++
    filters[filterIndex] = filter
    filter.id = filterIndex
    filter.idHex = intToHex(filterIndex)
    // update block tracker subs
    const newFilterCount = objValues(filters).length
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })
    return filterIndex
  }

  async function uninstallFilter(filterIndex) {
    const prevFilterCount = objValues(filters).length
    delete filters[filterIndex]
    // update block tracker subs
    const newFilterCount = objValues(filters).length
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })
  }

  async function uninstallAllFilters() {
    const prevFilterCount = objValues(filters).length
    filters = {}
    // update block tracker subs
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })
  }

  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {
    // subscribe
    if (prevFilterCount === 0 && newFilterCount > 0) {
      blockTracker.on('sync', filterUpdater)
      return
    }
    // unsubscribe
    if (prevFilterCount > 0 && newFilterCount === 0) {
      blockTracker.removeListener('sync', filterUpdater)
      return
    }
  }

}

// helper for turning filter constructors into rpc middleware
function toFilterCreationMiddleware(createFilterFn) {
  return toAsyncRpcMiddleware(async (...args) => {
    const filter = await createFilterFn(...args)
    const result = intToHex(filter.id)
    return result
  })
}

// helper for pulling out req.params and setting res.result
function toAsyncRpcMiddleware(asyncFn) {
  return createAsyncMiddleware(async (req, res) => {
    const result = await asyncFn.apply(null, req.params)
    res.result = result
  })
}

function mutexMiddlewareWrapper({ mutex }) {
  return (middleware) => {
    return async (req, res, next, end) => {
      // wait for mutex available
      // we can release immediately because
      // we just need to make sure updates aren't active
      const releaseLock = await mutex.acquire()
      releaseLock()
      middleware(req, res, next, end)
    }
  }
}

function objValues(obj, fn){
  const values = []
  for (let key in obj) {
    values.push(obj[key])
  }
  return values
}

      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\log-filter.js", {"./base-filter-history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\base-filter-history.js","./hexUtils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\hexUtils.js","eth-query":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-query\\index.js","pify":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\pify\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5Clog-filter.js
      return function (require, module, exports) {
const EthQuery = require('eth-query')
const pify = require('pify')
const BaseFilterWithHistory = require('./base-filter-history')
const { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')

class LogFilter extends BaseFilterWithHistory {

  constructor ({ provider, params }) {
    super()
    this.type = 'log'
    this.ethQuery = new EthQuery(provider)
    this.params = Object.assign({
      fromBlock: 'latest',
      toBlock: 'latest',
      address: undefined,
      topics: [],
    }, params)
    // normalize address parameter
    if (this.params.address) {
      // ensure array
      if (!Array.isArray(this.params.address)) {
        this.params.address = [this.params.address]
      }
      // ensure lowercase
      this.params.address = this.params.address.map(address => address.toLowerCase())
    }
  }

  async initialize({ currentBlock }) {
    // resolve params.fromBlock
    let fromBlock = this.params.fromBlock
    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock
    if ('earliest' === fromBlock) fromBlock = '0x0'
    this.params.fromBlock = fromBlock
    // set toBlock for initial lookup
    const toBlock = minBlockRef(this.params.toBlock, currentBlock)
    const params = Object.assign({}, this.params, { toBlock })
    // fetch logs and add to results
    const newLogs = await this._fetchLogs(params)
    this.addInitialResults(newLogs)
  }

  async update ({ oldBlock, newBlock }) {
    // configure params for this update
    const toBlock = newBlock
    let fromBlock
    // oldBlock is empty on first sync
    if (oldBlock) {
      fromBlock = incrementHexInt(oldBlock)
    } else {
      fromBlock = newBlock
    }
    // fetch logs
    const params = Object.assign({}, this.params, { fromBlock, toBlock })
    const newLogs = await this._fetchLogs(params)
    const matchingLogs = newLogs.filter(log => this.matchLog(log))

    // add to results
    this.addResults(matchingLogs)
  }

  async _fetchLogs (params) {
    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()
    // add to results
    return newLogs
  }

  matchLog(log) {
    // check if block number in bounds:
    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false
    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false

    // address is correct:
    const normalizedLogAddress = log.address && log.address.toLowerCase()
    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false

    // topics match:
    // topics are position-dependant
    // topics can be nested to represent `or` [[a || b], c]
    // topics can be null, representing a wild card for that position
    const topicsMatch = this.params.topics.every((topicPattern, index) => {
      // pattern is longer than actual topics
      let logTopic = log.topics[index]
      if (!logTopic) return false
      logTopic = logTopic.toLowerCase()
      // normalize subTopics
      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]
      // check for wild card
      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)
      if (subtopicsIncludeWildcard) return true
      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())
      // check each possible matching topic
      const topicDoesMatch = subtopicsToMatch.includes(logTopic)
      return topicDoesMatch
    })

    return topicsMatch
  }

}

module.exports = LogFilter

      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\log-filter.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\subscriptionManager.js", {"./getBlocksForRange.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\getBlocksForRange.js","./hexUtils.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\hexUtils.js","./index.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\index.js","@metamask/safe-event-emitter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\safe-event-emitter\\index.js","json-rpc-engine":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\json-rpc-engine\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5CsubscriptionManager.js
      return function (require, module, exports) {
const SafeEventEmitter = require('@metamask/safe-event-emitter').default
const { createAsyncMiddleware, createScaffoldMiddleware } = require('json-rpc-engine')
const createFilterMiddleware = require('./index.js')
const { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')
const getBlocksForRange = require('./getBlocksForRange.js')

module.exports = createSubscriptionMiddleware


function createSubscriptionMiddleware({ blockTracker, provider }) {
  // state and utilities for handling subscriptions
  const subscriptions = {}
  const filterManager = createFilterMiddleware({ blockTracker, provider })

  // internal flag
  let isDestroyed = false

  // create subscriptionManager api object
  const events = new SafeEventEmitter()
  const middleware = createScaffoldMiddleware({
    eth_subscribe: createAsyncMiddleware(subscribe),
    eth_unsubscribe: createAsyncMiddleware(unsubscribe),
  })
  middleware.destroy = destroy
  return { events, middleware }

  async function subscribe(req, res) {

    if (isDestroyed) throw new Error(
      'SubscriptionManager - attempting to use after destroying'
    )

    const subscriptionType = req.params[0]
    // subId is 16 byte hex string
    const subId = unsafeRandomBytes(16)

    // create sub
    let sub
    switch (subscriptionType) {
      case 'newHeads':
        sub = createSubNewHeads({ subId })
        break
      case 'logs':
        const filterParams = req.params[1]
        const filter = await filterManager.newLogFilter(filterParams)
        sub = createSubFromFilter({ subId, filter })
        break
      default:
        throw new Error(`SubscriptionManager - unsupported subscription type "${subscriptionType}"`)

    }
    subscriptions[subId] = sub

    res.result = subId
    return

    function createSubNewHeads({ subId }) {
      const sub = {
        type: subscriptionType,
        destroy: async () => {
          blockTracker.removeListener('sync', sub.update)
        },
        update: async ({ oldBlock, newBlock }) => {
          // for newHeads
          const toBlock = newBlock
          const fromBlock = incrementHexInt(oldBlock)
          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })
          const results = rawBlocks.map(normalizeBlock).filter(block => block !== null)
          results.forEach((value) => {
            _emitSubscriptionResult(subId, value)
          })
        }
      }
      // check for subscription updates on new block
      blockTracker.on('sync', sub.update)
      return sub
    }

    function createSubFromFilter({ subId, filter }) {
      filter.on('update', result => _emitSubscriptionResult(subId, result))
      const sub = {
        type: subscriptionType,
        destroy: async () => {
          return await filterManager.uninstallFilter(filter.idHex)
        },
      }
      return sub
    }
  }

  async function unsubscribe(req, res) {

    if (isDestroyed) throw new Error(
      'SubscriptionManager - attempting to use after destroying'
    )

    const id = req.params[0]
    const subscription = subscriptions[id]
    // if missing, return "false" to indicate it was not removed
    if (!subscription) {
      res.result = false
      return
    }
    // cleanup subscription
    delete subscriptions[id]
    await subscription.destroy()
    res.result = true
  }

  function _emitSubscriptionResult(filterIdHex, value) {
    events.emit('notification', {
      jsonrpc: '2.0',
      method: 'eth_subscription',
      params: {
        subscription: filterIdHex,
        result: value,
      },
    })
  }

  function destroy() {
    events.removeAllListeners()
    for (const id in subscriptions) {
      subscriptions[id].destroy()
      delete subscriptions[id]
    }
    isDestroyed = true
  }
}

function normalizeBlock(block) {
  if (block === null || block === undefined) {
    return null;
  }
  return {
    hash: block.hash,
    parentHash: block.parentHash,
    sha3Uncles: block.sha3Uncles,
    miner: block.miner,
    stateRoot: block.stateRoot,
    transactionsRoot: block.transactionsRoot,
    receiptsRoot: block.receiptsRoot,
    logsBloom: block.logsBloom,
    difficulty: block.difficulty,
    number: block.number,
    gasLimit: block.gasLimit,
    gasUsed: block.gasUsed,
    nonce: block.nonce,
    mixHash: block.mixHash,
    timestamp: block.timestamp,
    extraData: block.extraData,
  }
}

      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\subscriptionManager.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\tx-filter.js", {"./base-filter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\base-filter.js","./getBlocksForRange":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\getBlocksForRange.js","./hexUtils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-json-rpc-filters\\hexUtils.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-json-rpc-filters%5Ctx-filter.js
      return function (require, module, exports) {
const BaseFilter = require('./base-filter')
const getBlocksForRange = require('./getBlocksForRange')
const { incrementHexInt } = require('./hexUtils')

class TxFilter extends BaseFilter {

  constructor ({ provider }) {
    super()
    this.type = 'tx'
    this.provider = provider
  }

  async update ({ oldBlock }) {
    const toBlock = oldBlock
    const fromBlock = incrementHexInt(oldBlock)
    const blocks = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })
    const blockTxHashes = []
    for (const block of blocks) {
      blockTxHashes.push(...block.transactions)
    }
    // add to results
    this.addResults(blockTxHashes)
  }

}

module.exports = TxFilter

      };
    };
  }
  }
}, {package:"eth-json-rpc-filters",file:"node_modules\\eth-json-rpc-filters\\tx-filter.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-lattice-keyring\\index.js", {"@ethereumjs/tx":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ethereumjs\\tx\\dist\\index.js","@ethereumjs/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ethereumjs\\util\\dist\\index.js","bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-lattice-keyring\\node_modules\\bn.js\\lib\\bn.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","crypto":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\crypto-browserify\\index.js","events":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\events\\events.js","gridplus-sdk":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js","rlp":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-lattice-keyring\\node_modules\\rlp\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-lattice-keyring%5Cindex.js
      return function (require, module, exports) {
(function (Buffer){(function (){
const crypto = require('crypto');
const EventEmitter = require('events').EventEmitter;
const BN = require('bn.js');
const SDK = require('gridplus-sdk');
const EthTx = require('@ethereumjs/tx');
const { addHexPrefix } = require("@ethereumjs/util");
const rlp = require('rlp');
const keyringType = 'Lattice Hardware';
const HARDENED_OFFSET = 0x80000000;
const PER_PAGE = 5;
const CLOSE_CODE = -1000;
const STANDARD_HD_PATH = `m/44'/60'/0'/0/x`;
const SDK_TIMEOUT = 120000;
const CONNECT_TIMEOUT = 20000;

class LatticeKeyring extends EventEmitter {
  constructor (opts={}) {
    super()
    this.type = keyringType;
    this._resetDefaults();
    this.deserialize(opts);
  }

  //-------------------------------------------------------------------
  // Keyring API (per `https://github.com/MetaMask/eth-simple-keyring`)
  //-------------------------------------------------------------------
  async deserialize (opts = {}) {
    if (opts.hdPath)
      this.hdPath = opts.hdPath;
    if (opts.creds)
      this.creds = opts.creds;
    if (opts.accounts)
      this.accounts = opts.accounts;
    if (opts.accountIndices)
      this.accountIndices = opts.accountIndices;
    if (opts.accountOpts)
      this.accountOpts = opts.accountOpts;
    if (opts.walletUID)
      this.walletUID = opts.walletUID;
    if (opts.name)  // Legacy; use is deprecated and appName is more descriptive
      this.appName = opts.name;
    if (opts.appName)
      this.appName = opts.appName;
    if (opts.network)
      this.network = opts.network;
    if (opts.page)
      this.page = opts.page;
    return;
  }

  setHdPath(hdPath) {
    this.hdPath = hdPath;
  }

  async serialize() {
    return {
      creds: this.creds,
      accounts: this.accounts,
      accountIndices: this.accountIndices,
      accountOpts: this.accountOpts,
      walletUID: this.walletUID,
      appName: this.appName,
      name: this.name,  // Legacy; use is deprecated
      network: this.network,
      page: this.page,
      hdPath: this.hdPath,
    };
  }

  // Deterimine if we have a connection to the Lattice and an existing wallet UID
  // against which to make requests.
  isUnlocked () {
    return !!this._getCurrentWalletUID() && !!this.sdkSession;
  }

  // Initialize a session with the Lattice1 device using the GridPlus SDK
  // NOTE: `bypassOnStateData=true` allows us to rehydrate a new SDK session without
  // reconnecting to the target Lattice. This is only currently used for signing
  // because it eliminates the need for 2 connection requests and shaves off ~4-6sec.
  // We avoid passing `bypassOnStateData=true` for other calls on `unlock` to avoid
  // possible edge cases related to this new functionality (it's probably fine - just
  // being cautious). In the future we may remove `bypassOnStateData` entirely.
  async unlock (bypassOnStateData = false) {
    if (this.isUnlocked()) {
      return "Unlocked";
    }
    const creds = await this._getCreds();
    if (creds) {
      this.creds.deviceID = creds.deviceID;
      this.creds.password = creds.password;
      this.creds.endpoint = creds.endpoint || null;
    }
    const includedStateData = await this._initSession();
    // If state data was provided and if we are authorized to
    // bypass reconnecting, we can exit here.
    if (includedStateData && bypassOnStateData) {
      return "Unlocked";
    }
    await this._connect();
    return "Unlocked";
  }

  // Add addresses to the local store and return the full result
  async addAccounts(n=1) {
    if (n <= 0) {
      // Avoid non-positive numbers.
      throw new Error(
        'Number of accounts to add must be a positive number.'
      );
    }
    // Normal behavior: establish the connection and fetch addresses.
    await this.unlock()
    const addrs = await this._fetchAddresses(n, this.unlockedAccount);
    const walletUID = this._getCurrentWalletUID();
    if (!walletUID) {
      // We should not add accounts that do not have wallet UIDs.
      // Something went wrong and needs to be retried.
      await this._connect();
      throw new Error('No active wallet found in Lattice. Please retry.');
    }
    // Add these indices
    addrs.forEach((addr, i) => {
      let alreadySaved = false;
      for (let j = 0; j < this.accounts.length; j++) {
        if ((this.accounts[j] === addr) &&
            (this.accountOpts[j].walletUID === walletUID) &&
            (this.accountOpts[j].hdPath === this.hdPath))
          alreadySaved = true;
      }
      if (!alreadySaved) {
        this.accounts.push(addr);
        this.accountIndices.push(this.unlockedAccount+i);
        this.accountOpts.push({
          walletUID,
          hdPath: this.hdPath,
        })
      }
    })
    return this.accounts;
  }

  // Return the local store of addresses. This gets called when the extension unlocks.
  async getAccounts() {
    return this.accounts ? [...this.accounts] : [];
  }

  async signTransaction (address, tx) {
    let signedTx, v;
    // We will be adding a signature to hydration data for a new
    // transaction object since the sig data is not mutable.
    // Setup `txToReturn` data and start adding to it.
    const txToReturn = tx.toJSON();
    txToReturn.type = tx._type || null;
    // Setup info related to signer account
    const accountIdx = await this._findSignerIdx(address);
    const chainId = getTxChainId(tx).toNumber();
    const fwVersion = this.sdkSession.getFwVersion();
    const addressIdx = this.accountIndices[accountIdx];
    const { hdPath } = this.accountOpts[accountIdx];
    const signerPath = this._getHDPathIndices(hdPath, addressIdx);
    // Lattice firmware v0.11.0 implemented EIP1559 and EIP2930
    // We should throw an error if we cannot support this.
    if (fwVersion.major === 0 && fwVersion.minor <= 11) {
      throw new Error('Please update Lattice firmware.');
    }
    // Build the signing request
    if (fwVersion.major > 0 || fwVersion.minor >= 15) {
      // Newer firmware versions support an easier pathway
      const data = {
        // Legacy transactions return tx params. Newer transactions
        // return the raw, serialized transaction
        payload:  tx._type ?
                  tx.getMessageToSign(false) :
                  rlp.encode(tx.getMessageToSign(false)),
        curveType: SDK.Constants.SIGNING.CURVES.SECP256K1,
        hashType: SDK.Constants.SIGNING.HASHES.KECCAK256,
        encodingType: SDK.Constants.SIGNING.ENCODINGS.EVM,
        signerPath,
      };
      const supportsDecoderRecursion = fwVersion.major > 0 || fwVersion.minor >=16;
      // Check if we can decode the calldata
      const { def } = await SDK.Utils.fetchCalldataDecoder(tx.data, tx.to, chainId, supportsDecoderRecursion);
      if (def) {
        data.decoder = def;
      }
      // Send the request
      signedTx = await this.sdkSession.sign({ data });
    } else {
      // Older firmware versions (<0.15.0) use the legacy signing pathway.
      const data = getLegacyTxReq(tx);
      data.chainId = chainId;
      data.signerPath = signerPath;
      signedTx = await this.sdkSession.sign({ currency: 'ETH', data });
    }
    // Ensure we got a signature back
    if (!signedTx.sig || !signedTx.sig.r || !signedTx.sig.s) {
      throw new Error('No signature returned.');
    }
    // Construct the `v` signature param
    if (signedTx.sig.v === undefined) {
      // V2 signature needs `v` calculated
      v = SDK.Utils.getV(tx, signedTx);
    } else {
      // Legacy signatures have `v` in the response
      v = signedTx.sig.v.length === 0 ? '0' : signedTx.sig.v.toString('hex')
    }

    // Pack the signature into the return object
    txToReturn.r = addHexPrefix(signedTx.sig.r.toString('hex'));
    txToReturn.s = addHexPrefix(signedTx.sig.s.toString('hex'));
    txToReturn.v = addHexPrefix(v);

    // Make sure the active wallet is correct to avoid returning
    // a signature from an unexpected signer.
    const foundIdx = await this._accountIdxInCurrentWallet(address);
    if (foundIdx === null) {
      throw new Error(
        'Wrong account. Please change your Lattice wallet or ' +
        'switch to an account on your current active wallet.'
      );
    }
    return EthTx.TransactionFactory.fromTxData(txToReturn, {
      common: tx.common, freeze: Object.isFrozen(tx)
    })
  }

  async signPersonalMessage(address, msg) {
    return this.signMessage(address, { payload: msg, protocol: 'signPersonal' });
  }

  async signTypedData(address, msg, opts) {
    if (opts.version && (opts.version !== 'V4' && opts.version !== 'V3')) {
      throw new Error(
        `Only signTypedData V3 and V4 messages (EIP712) are supported. Got version ${opts.version}`
      );
    }
    return this.signMessage(address, { payload: msg, protocol: 'eip712' })
  }

  async signMessage (address, msg) {
    const accountIdx = await this._findSignerIdx(address);
    let { payload, protocol } = msg;
    // If the message is not an object we assume it is a legacy signPersonal request
    if (!payload || !protocol) {
      payload = msg;
      protocol = "signPersonal";
    }
    const addressIdx = this.accountIndices[accountIdx];
    const addressParentPath = this.accountOpts[accountIdx].hdPath;
    const req = {
      currency: "ETH_MSG",
      data: {
        protocol,
        payload,
        signerPath: this._getHDPathIndices(addressParentPath, addressIdx),
      },
    };
    const res = await this.sdkSession.sign(req);
    if (!res.sig) {
      throw new Error("No signature returned");
    }
    // Convert the `v` to a number. It should convert to 0 or 1
    let v;
    try {
      v = res.sig.v.toString("hex");
      if (v.length < 2) {
        v = `0${v}`;
      }
    } catch (err) {
      throw new Error("Invalid signature format returned.");
    }
    // Make sure the active wallet is correct to avoid returning
    // a signature from an unexpected signer.
    const foundIdx = await this._accountIdxInCurrentWallet(address);
    if (foundIdx === null) {
      throw new Error(
        'Wrong account. Please change your Lattice wallet or ' +
        'switch to an account on your current active wallet.'
      );
    }
    // Return the sig string
    return `0x${res.sig.r}${res.sig.s}${v}`;
  }

  async exportAccount(address) {
    throw new Error('exportAccount not supported by this device');
  }

  removeAccount(address) {
    this.accounts.forEach((account, i) => {
      if (account.toLowerCase() === address.toLowerCase()) {
        this.accounts.splice(i, 1);
        this.accountIndices.splice(i, 1);
        this.accountOpts.splice(i, 1);
        return;
      }
    })
  }

  async getFirstPage() {
    this.page = 0;
    return this._getPage(0);
  }

  async getNextPage () {
    return this._getPage(1);
  }

  async getPreviousPage () {
    return this._getPage(-1);
  }

  setAccountToUnlock (index) {
    this.unlockedAccount = parseInt(index, 10)
  }

  forgetDevice () {
    this._resetDefaults();
  }

  //-------------------------------------------------------------------
  // Internal methods and interface to SDK
  //-------------------------------------------------------------------
  // Find the account index of the requested address.
  // Note that this is the BIP39 path index, not the index in the address cache.
  async _findSignerIdx (address) {
    // Take note if this was already unlocked
    const wasUnlocked = this.isUnlocked();
    // Unlock and get the wallet UID. We will bypass the reconnection
    // step if we are able to rehydrate an SDK session with state data.
    await this.unlock(true);
    let accountIdx = await this._accountIdxInCurrentWallet(address);
    if (accountIdx !== null) {
      return accountIdx;
    }
    // If this was unlocked already, the `this.unlock` call did not sync
    // data with the Lattice. We should force a sync by reconnecting.
    if (wasUnlocked) {
      await this._connect();
      // Check the new wallet and see if there is a match
      accountIdx = await this._accountIdxInCurrentWallet(address);
      if (accountIdx !== null) {
        return accountIdx;
      }
    }
    // If we could not find a match, exit here
    throw new Error(
      "Account not found in active Lattice wallet. Please switch."
    );
  }

  async _accountIdxInCurrentWallet(address) {
    // Get the wallet UID associated with the signer and make sure
    // the Lattice has that as its active wallet before continuing.
    const accountIdx = await this._findAccountByAddress(address);
    const { walletUID } = this.accountOpts[accountIdx];
    // Get the last updated SDK wallet UID
    const activeWallet = this.sdkSession.getActiveWallet();
    if (!activeWallet) {
      this._connect();
      throw new Error("No active wallet in Lattice.");
    }
    const activeUID = activeWallet.uid.toString("hex");
    // If this is already the active wallet we don't need to make a request
    if (walletUID.toString("hex") === activeUID) {
      return accountIdx;
    }
    return null;
  }

  async _findAccountByAddress(address) {
    const addrs = await this.getAccounts();
    let accountIdx = -1;
    addrs.forEach((addr, i) => {
      if (address.toLowerCase() === addr.toLowerCase())
        accountIdx = i;
    })
    if (accountIdx < 0) {
      throw new Error('Signer not present');
    }
    return accountIdx;
  }

  _getHDPathIndices(hdPath, insertIdx=0) {
    const path = hdPath.split('/').slice(1);
    const indices = [];
    let usedX = false;
    path.forEach((_idx) => {
      const isHardened = (_idx[_idx.length - 1] === "'");
      let idx = isHardened ? HARDENED_OFFSET : 0;
      // If there is an `x` in the path string, we will use it to insert our
      // index. This is useful for e.g. Ledger Live path. Most paths have the
      // changing index as the last one, so having an `x` in the path isn't
      // usually necessary.
      if (_idx.indexOf('x') > -1) {
        idx += insertIdx;
        usedX = true;
      } else if (isHardened) {
        idx += Number(_idx.slice(0, _idx.length - 1));
      } else {
        idx += Number(_idx);
      }
      indices.push(idx);
    })
    // If this path string does not include an `x`, we just append the index
    // to the end of the extracted set
    if (usedX === false) {
      indices.push(insertIdx);
    }
    // Sanity check -- Lattice firmware will throw an error for large paths
    if (indices.length > 5)
      throw new Error('Only HD paths with up to 5 indices are allowed.')
    return indices;
  }

  _resetDefaults() {
    this.accounts = [];
    this.accountIndices = [];
    this.accountOpts = [];
    this.isLocked = true;
    this.creds = {
      deviceID: null,
      password: null,
      endpoint: null,
    };
    this.walletUID = null;
    this.sdkSession = null;
    this.page = 0;
    this.unlockedAccount = 0;
    this.network = null;
    this.hdPath = STANDARD_HD_PATH;
  }

  async _openConnectorTab(url) {
    try {
      const browserTab = window.open(url);
      // Preferred option for Chromium browsers. This extension runs in a window
      // for Chromium so we can do window-based communication very easily.
      if (browserTab) {
        return { chromium: browserTab };
      } else if (browser && browser.tabs && browser.tabs.create) {
        // FireFox extensions do not run in windows, so it will return `null` from
        // `window.open`. Instead, we need to use the `browser` API to open a tab.
        // We will surveille this tab to see if its URL parameters change, which
        // will indicate that the user has logged in.
        const tab = await browser.tabs.create({url})
        return { firefox: tab };
      } else {
        throw new Error('Unknown browser context. Cannot open Lattice connector.');
      }
    } catch (err) {
      throw new Error('Failed to open Lattice connector.');
    }
  }

  async _findTabById(id) {
    const tabs = await browser.tabs.query({});
    return tabs.find((tab) => tab.id === id);
  }

  _getCreds() {
    return new Promise((resolve, reject) => {
      // We only need to setup if we don't have a deviceID
      if (this._hasCreds())
        return resolve();
      // If we are not aware of what Lattice we should be talking to,
      // we need to open a window that lets the user go through the
      // pairing or connection process.
      const name = this.appName ? this.appName : 'Unknown'
      const base = 'https://lattice.gridplus.io';
      const url = `${base}?keyring=${name}&forceLogin=true`;
      let listenInterval;

      // PostMessage handler
      function receiveMessage(event) {
        // Ensure origin
        if (event.origin !== base)
          return;
        try {
          // Stop the listener
          clearInterval(listenInterval);
          // Parse and return creds
          const creds = JSON.parse(event.data);
          if (!creds.deviceID || !creds.password)
            return reject(new Error('Invalid credentials returned from Lattice.'));
          return resolve(creds);
        } catch (err) {
          return reject(err);
        }
      }

      // Open the tab
      this._openConnectorTab(url)
      .then((conn) => {
        if (conn.chromium) {
          // On a Chromium browser we can just listen for a window message
          window.addEventListener("message", receiveMessage, false);
          // Watch for the open window closing before creds are sent back
          listenInterval = setInterval(() => {
            if (conn.chromium.closed) {
              clearInterval(listenInterval);
              return reject(new Error('Lattice connector closed.'));
            }
          }, 500);
        } else if (conn.firefox) {
          // For Firefox we cannot use `window` in the extension and can't
          // directly communicate with the tabs very easily so we use a
          // workaround: listen for changes to the URL, which will contain
          // the login info.
          // NOTE: This will only work if have `https://lattice.gridplus.io/*`
          // host permissions in your manifest file (and also `activeTab` permission)
          const loginUrlParam = '&loginCache=';
          listenInterval = setInterval(() => {
            this._findTabById(conn.firefox.id)
            .then((tab) => {
              if (!tab || !tab.url) {
                return reject(new Error('Lattice connector closed.'));
              }
              // If the tab we opened contains a new URL param
              const paramLoc = tab.url.indexOf(loginUrlParam);
              if (paramLoc < 0)
                return;
              const dataLoc = paramLoc + loginUrlParam.length;
              // Stop this interval
              clearInterval(listenInterval);
              try {
                // Parse the login data. It is a stringified JSON object
                // encoded as a base64 string.
                const _creds = Buffer.from(tab.url.slice(dataLoc), 'base64').toString();
                // Close the tab and return the credentials
                browser.tabs.remove(tab.id)
                .then(() => {
                  const creds = JSON.parse(_creds);
                  if (!creds.deviceID || !creds.password)
                    return reject(new Error('Invalid credentials returned from Lattice.'));
                  return resolve(creds);
                })
              } catch (err) {
                return reject('Failed to get login data from Lattice. Please try again.')
              }
            })
          }, 500);
        }
      })
    })
  }

  // [re]connect to the Lattice. This should be done frequently to ensure
  // the expected wallet UID is still the one active in the Lattice.
  // This will handle SafeCard insertion/removal events.
  async _connect () {
    try {
      // Attempt to connect with a Lattice using a shorter timeout. If
      // the device is unplugged it will time out and we don't need to wait
      // 2 minutes for that to happen.
      this.sdkSession.timeout = CONNECT_TIMEOUT;
      return this.sdkSession.connect(this.creds.deviceID)
    } finally {
      // Reset to normal timeout no matter what
      this.sdkSession.timeout = SDK_TIMEOUT;
    }
  }

  async _initSession() {
    if (this.isUnlocked()) {
      return;
    }
    let url = 'https://signing.gridpl.us';
    if (this.creds.endpoint)
      url = this.creds.endpoint
    let setupData = {
      name: this.appName,
      baseUrl: url,
      timeout: SDK_TIMEOUT,
      privKey: this._genSessionKey(),
      network: this.network,
      skipRetryOnWrongWallet: true,
    };
    /*
    NOTE: We need state to actually be synced by MetaMask or we can't
    use this. See: https://github.com/MetaMask/KeyringController/issues/130

    if (this.sdkState) {
      // If we have state data we can fully rehydrate the session.
      setupData = {
        stateData: this.sdkState,
        skipRetryOnWrongWallet: true,
      }
    }
    */
    this.sdkSession = new SDK.Client(setupData);
    // Return a boolean indicating whether we provided state data.
    // If we have, we can skip `connect`.
    return !!setupData.stateData;
  }

  async _fetchAddresses(n=1, i=0, recursedAddrs=[]) {
    if (!this.isUnlocked()) {
      throw new Error('No connection to Lattice. Cannot fetch addresses.')
    }
    return this.__fetchAddresses(n, i);
  }

  async __fetchAddresses(n=1, i=0, recursedAddrs=[]) {
    // Determine if we need to do a recursive call here. We prefer not to
    // because they will be much slower, but Ledger paths require it since
    // they are non-standard.
    if (n === 0) {
      return recursedAddrs;
    }
    const shouldRecurse = this._hdPathHasInternalVarIdx();

    // Make the request to get the requested address
    const addrData = {
      currency: 'ETH',
      startPath: this._getHDPathIndices(this.hdPath, i),
      n: shouldRecurse ? 1 : n,
    };
    const addrs = await this.sdkSession.getAddresses(addrData);
    // Sanity check -- if this returned 0 addresses, handle the error
    if (addrs.length < 1) {
      throw new Error('No addresses returned');
    }
    // Return the addresses we fetched *without* updating state
    if (shouldRecurse) {
      return await this.__fetchAddresses(n-1, i+1, recursedAddrs.concat(addrs));
    }
    return addrs;
  }

  async _getPage(increment=0) {
    try {
      this.page += increment;
      if (this.page < 0)
        this.page = 0;
      const start = PER_PAGE * this.page;
      // Otherwise unlock the device and fetch more addresses
      await this.unlock()
      const addrs = await this._fetchAddresses(PER_PAGE, start)
      const accounts = addrs.map((address, i) => {
        return {
          address,
          balance: null,
          index: start + i,
        };
      });
      return accounts;
    } catch (err) {
      // This will get hit for a few reasons. Here are two possibilities:
      // 1. The user has a SafeCard inserted, but not unlocked
      // 2. The user fetched a page for a different wallet, then switched
      //    interface on the device
      // In either event we should try to resync the wallet and if that
      // fails throw an error
      try {
        const isPaired = await this._connect();
        if (!isPaired) {
          throw new Error('NOT_PAIRED');
        }
        const accounts = await this._getPage(0);
        return accounts;
      } catch (err) {
        if (this.accounts.length === 0){
          this.forgetDevice();
        }
        throw new Error(
          'Failed to get accounts. Please forget the device and try again. ' +
          'Make sure you do not have a locked SafeCard inserted.'
        );
      }
    }
  }

  _hasCreds() {
    return this.creds.deviceID !== null && this.creds.password !== null && this.appName;
  }

  _genSessionKey() {
    if (this.name && !this.appName) // Migrate from legacy param if needed
      this.appName = this.name;
    if (!this._hasCreds())
      throw new Error('No credentials -- cannot create session key!');
    const buf = Buffer.concat([
      Buffer.from(this.creds.password),
      Buffer.from(this.creds.deviceID),
      Buffer.from(this.appName)
    ])
    return crypto.createHash('sha256').update(buf).digest();
  }

  // Determine if an HD path has a variable index internal to it.
  // e.g. m/44'/60'/x'/0/0 -> true, while m/44'/60'/0'/0/x -> false
  // This is just a hacky helper to avoid having to recursively call for non-ledger
  // derivation paths. Ledger is SO ANNOYING TO SUPPORT.
  _hdPathHasInternalVarIdx() {
    const path = this.hdPath.split('/').slice(1);
    for (let i = 0; i < path.length -1; i++) {
      if (path[i].indexOf('x') > -1)
        return true;
    }
    return false;
  }

  _getCurrentWalletUID() {
    if (!this.sdkSession) {
      return null;
    }
    const activeWallet = this.sdkSession.getActiveWallet();
    if (!activeWallet || !activeWallet.uid) {
      return null;
    }
    return activeWallet.uid.toString('hex');
  }
}

// -----
// HELPERS
// -----
function getTxChainId (tx) {
  if (tx && tx.common && typeof tx.common.chainIdBN === 'function') {
    return tx.common.chainIdBN();
  } else if (tx && tx.chainId) {
    return new BN(tx.chainId);
  }
  return new BN(1);
}

// Legacy versions of Lattice firmware signed ETH transactions out of
// a now deprecated pathway. The request data is built by this helper.
function getLegacyTxReq (tx) {
  let txData;
  try {
    txData = {
      nonce: `0x${tx.nonce.toString('hex')}` || 0,
      gasLimit: `0x${tx.gasLimit.toString('hex')}`,
      to: !!tx.to ? tx.to.toString('hex') : null, // null for contract deployments
      value: `0x${tx.value.toString('hex')}`,
      data: tx.data.length === 0 ? null : `0x${tx.data.toString('hex')}`,
    }
    switch (tx._type) {
      case 2: // eip1559
        if ((tx.maxPriorityFeePerGas === null || tx.maxFeePerGas === null) ||
            (tx.maxPriorityFeePerGas === undefined || tx.maxFeePerGas === undefined))
          throw new Error('`maxPriorityFeePerGas` and `maxFeePerGas` must be included for EIP1559 transactions.');
        txData.maxPriorityFeePerGas = `0x${tx.maxPriorityFeePerGas.toString('hex')}`;
        txData.maxFeePerGas = `0x${tx.maxFeePerGas.toString('hex')}`;
        txData.accessList = tx.accessList || [];
        txData.type = 2;
        break;
      case 1: // eip2930
        txData.accessList = tx.accessList || [];
        txData.gasPrice = `0x${tx.gasPrice.toString('hex')}`;
        txData.type = 1;
        break;
      default: // legacy
        txData.gasPrice = `0x${tx.gasPrice.toString('hex')}`;
        txData.type = null;
        break;
    }
  } catch (err) {
    throw new Error(`Failed to build transaction.`)
  }
  return txData;
}

async function httpRequest (url) {
  const resp = await window.fetch(url);
  if (resp.ok) {
    return await resp.text();
  } else {
    throw new Error('Failed to make request: ', resp.status);
  }
}

LatticeKeyring.type = keyringType
module.exports = LatticeKeyring;
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring",file:"node_modules\\eth-lattice-keyring\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-lattice-keyring\\node_modules\\bn.js\\lib\\bn.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\browser-resolve\\empty.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-lattice-keyring%5Cnode_modules%5Cbn.js%5Clib%5Cbn.js
      return function (require, module, exports) {
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>bn.js",file:"node_modules\\eth-lattice-keyring\\node_modules\\bn.js\\lib\\bn.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-lattice-keyring\\node_modules\\rlp\\dist\\index.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-lattice-keyring%5Cnode_modules%5Crlp%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.utils = exports.decode = exports.encode = void 0;
/**
 * RLP Encoding based on https://eth.wiki/en/fundamentals/rlp
 * This function takes in data, converts it to Uint8Array if not,
 * and adds a length for recursion.
 * @param input Will be converted to Uint8Array
 * @returns Uint8Array of encoded data
 **/
function encode(input) {
    if (Array.isArray(input)) {
        const output = [];
        for (let i = 0; i < input.length; i++) {
            output.push(encode(input[i]));
        }
        const buf = concatBytes(...output);
        return concatBytes(encodeLength(buf.length, 192), buf);
    }
    const inputBuf = toBytes(input);
    if (inputBuf.length === 1 && inputBuf[0] < 128) {
        return inputBuf;
    }
    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
}
exports.encode = encode;
/**
 * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.
 * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.
 * @param input
 * @param start
 * @param end
 */
function safeSlice(input, start, end) {
    if (end > input.length) {
        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');
    }
    return input.slice(start, end);
}
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 */
function decodeLength(v) {
    if (v[0] === 0) {
        throw new Error('invalid RLP: extra zeros');
    }
    return parseHexByte(bytesToHex(v));
}
function encodeLength(len, offset) {
    if (len < 56) {
        return Uint8Array.from([len + offset]);
    }
    const hexLength = numberToHex(len);
    const lLength = hexLength.length / 2;
    const firstByte = numberToHex(offset + 55 + lLength);
    return Uint8Array.from(hexToBytes(firstByte + hexLength));
}
function decode(input, stream = false) {
    if (!input || input.length === 0) {
        return Uint8Array.from([]);
    }
    const inputBytes = toBytes(input);
    const decoded = _decode(inputBytes);
    if (stream) {
        return decoded;
    }
    if (decoded.remainder.length !== 0) {
        throw new Error('invalid RLP: remainder must be zero');
    }
    return decoded.data;
}
exports.decode = decode;
/** Decode an input with RLP */
function _decode(input) {
    let length, llength, data, innerRemainder, d;
    const decoded = [];
    const firstByte = input[0];
    if (firstByte <= 0x7f) {
        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
        return {
            data: input.slice(0, 1),
            remainder: input.slice(1),
        };
    }
    else if (firstByte <= 0xb7) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 0x7f;
        // set 0x80 null to 0
        if (firstByte === 0x80) {
            data = Uint8Array.from([]);
        }
        else {
            data = safeSlice(input, 1, length);
        }
        if (length === 2 && data[0] < 0x80) {
            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');
        }
        return {
            data: data,
            remainder: input.slice(length),
        };
    }
    else if (firstByte <= 0xbf) {
        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
        // followed by the length, followed by the string
        llength = firstByte - 0xb6;
        if (input.length - 1 < llength) {
            throw new Error('invalid RLP: not enough bytes for string length');
        }
        length = decodeLength(safeSlice(input, 1, llength));
        if (length <= 55) {
            throw new Error('invalid RLP: expected string length to be greater than 55');
        }
        data = safeSlice(input, llength, length + llength);
        return {
            data: data,
            remainder: input.slice(length + llength),
        };
    }
    else if (firstByte <= 0xf7) {
        // a list between 0-55 bytes long
        length = firstByte - 0xbf;
        innerRemainder = safeSlice(input, 1, length);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(length),
        };
    }
    else {
        // a list over 55 bytes long
        llength = firstByte - 0xf6;
        length = decodeLength(safeSlice(input, 1, llength));
        if (length < 56) {
            throw new Error('invalid RLP: encoded list too short');
        }
        const totalLength = llength + length;
        if (totalLength > input.length) {
            throw new Error('invalid RLP: total length is larger than the data');
        }
        innerRemainder = safeSlice(input, llength, totalLength);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(totalLength),
        };
    }
}
const cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));
function bytesToHex(uint8a) {
    // Pre-caching chars with `cachedHexes` speeds this up 6x
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += cachedHexes[uint8a[i]];
    }
    return hex;
}
function parseHexByte(hexByte) {
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte))
        throw new Error('Invalid byte sequence');
    return byte;
}
// Caching slows it down 2-3x
function hexToBytes(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex');
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        array[i] = parseHexByte(hex.slice(j, j + 2));
    }
    return array;
}
/** Concatenates two Uint8Arrays into one. */
function concatBytes(...arrays) {
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function utf8ToBytes(utf) {
    return new TextEncoder().encode(utf);
}
/** Transform an integer into its hexadecimal value */
function numberToHex(integer) {
    if (integer < 0) {
        throw new Error('Invalid integer as argument, must be unsigned!');
    }
    const hex = integer.toString(16);
    return hex.length % 2 ? `0${hex}` : hex;
}
/** Pad a string to be even */
function padToEven(a) {
    return a.length % 2 ? `0${a}` : a;
}
/** Check if a string is prefixed by 0x */
function isHexPrefixed(str) {
    return str.length >= 2 && str[0] === '0' && str[1] === 'x';
}
/** Removes 0x from a given String */
function stripHexPrefix(str) {
    if (typeof str !== 'string') {
        return str;
    }
    return isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform anything into a Uint8Array */
function toBytes(v) {
    if (v instanceof Uint8Array) {
        return v;
    }
    if (typeof v === 'string') {
        if (isHexPrefixed(v)) {
            return hexToBytes(padToEven(stripHexPrefix(v)));
        }
        return utf8ToBytes(v);
    }
    if (typeof v === 'number' || typeof v === 'bigint') {
        if (!v) {
            return Uint8Array.from([]);
        }
        return hexToBytes(numberToHex(v));
    }
    if (v === null || v === undefined) {
        return Uint8Array.from([]);
    }
    throw new Error('toBytes: received unsupported type ' + typeof v);
}
exports.utils = {
    bytesToHex,
    concatBytes,
    hexToBytes,
    utf8ToBytes,
};
const RLP = { encode, decode };
exports.default = RLP;
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"eth-lattice-keyring>rlp",file:"node_modules\\eth-lattice-keyring\\node_modules\\rlp\\dist\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-phishing-detect\\src\\config.json", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-phishing-detect%5Csrc%5Cconfig.json
      return function (require, module, exports) {
module.exports={
  "version": 2,
  "tolerance": 2,
  "fuzzylist": [
    "auctus.org",
    "cryptokitties.co",
    "dfinity.org",
    "launchpad.ethereum.org",
    "etherscan.io",
    "fulcrum.trade",
    "hederahashgraph.com",
    "localcryptos.com",
    "localethereum.com",
    "makerfoundation.com",
    "maskmeta.org",
    "metamask.io",
    "myetherwallet.com",
    "opensea.io",
    "originprotocol.com"
  ],
  "whitelist": [
    "auctic.net",
    "metavas.com",
    "openwear.pl",
    "aftus.io",
    "opendem.info",
    "peansea.store",
    "ifinty.nl",
    "artus.com",
    "aukus.fr",
    "fulcrumwp.com",
    "opensi.net",
    "xactus.com",
    "spenser.xyz",
    "openscad.cloud",
    "opende.fi",
    "sushiguard.com",
    "sushirelay.com",
    "sushi.com",
    "metarank.ai",
    "vultus.one",
    "klimadao.finance",
    "9finite.com",
    "opengem.com",
    "infinity.exchange",
    "otterscan.io",
    "olympusdao.finance",
    "bifinity.com",
    "effinity.fr",
    "opensend.com",
    "app.cryptoblades.io",
    "auctusiq.com",
    "artblocks.io",
    "finite.io",
    "lasmeta.io",
    "actum.dk",
    "actum.games",
    "actum.gr",
    "actyus.com",
    "metapass.cloud",
    "metamarz.com",
    "metamarz.io",
    "opensfx.com",
    "msmeta.fun",
    "metamap.com",
    "metamars.org",
    "metamars.ai",
    "metadash.ai",
    "sanctus.audio",
    "affinity.ad",
    "affinity.ro",
    "affinity.solutions",
    "actis.no",
    "actss.ca",
    "actus.at",
    "ajatus.in",
    "aptus.ai",
    "nfinit.com",
    "arcus.no",
    "arcteus.in",
    "fincity.sk",
    "askmenta.com",
    "astus.app",
    "aubtu.biz",
    "aubus.xyz",
    "aucu.es",
    "audius.io",
    "audius.party",
    "auktus.com",
    "aulus.org",
    "aulus.xyz",
    "autos.id",
    "autos.nu",
    "aureus.eu",
    "aureus.ltd",
    "aureus.money",
    "aurous.cl",
    "au.tts.ru",
    "avatus.com",
    "avinity.com",
    "aurous.finance",
    "befinity.media",
    "beta.ask.rip",
    "betatask.com",
    "bulurum.com",
    "cryptopatties.xyz",
    "definfty.io",
    "difinite.com",
    "dinify.io",
    "divinity.ca",
    "divinity.es",
    "doinita.art",
    "easymeta.fun",
    "revigo.fanclub.rocks",
    "finity.in",
    "finitty.com",
    "finityx.com",
    "fulcrum.ag",
    "fulcrum.org",
    "fulcrum7.com",
    "fulcrumtx.com",
    "fulpruf.com",
    "hugtus.com",
    "fvlcrvm.com",
    "futurum.cl",
    "futurum.software",
    "ifinity.ch",
    "cryptohotties.space",
    "cryptopities.com",
    "cryptotitties.xyz",
    "cutus.in",
    "metapass.ml",
    "open5e.com",
    "openbee.com",
    "openbeta.works",
    "openeo.cloud",
    "openeo.org",
    "openes.io",
    "openhead.info",
    "openmeta.city",
    "openmeta.finance",
    "openmeta.kr",
    "openmeta.trade",
    "openpoa.com",
    "opensig.org",
    "opensit.net",
    "openseas.com",
    "opensees.pro",
    "looksrare.org",
    "openmha.org",
    "openres.io",
    "openresa.com",
    "opensat.cc",
    "opensoc.pl",
    "openspa.info",
    "openweb.science",
    "openzeka.com",
    "openuba.org",
    "open.wa.link",
    "pulsechain.com",
    "pulseramp.com",
    "pulsex.com",
    "cactus.by",
    "cactus.cards",
    "cactus.gr",
    "cactus.store",
    "cactus.la",
    "cactus.sh",
    "ebinity.com",
    "flarum.it",
    "hoctus.win",
    "infinity.co",
    "infinity.fish",
    "infinity.group",
    "infinity.health",
    "infinity.irish",
    "infinity.nl",
    "infinity.re",
    "infinity.watch",
    "ipensa.com",
    "justus.fun",
    "justus.link",
    "kryptkitties.com",
    "openscad.info",
    "flarum.ir",
    "noctus.cc",
    "quatus.de",
    "ruckus.cloud",
    "ruckus.nl",
    "ruckus.one",
    "ruckus.studio",
    "fvlcrum.com",
    "openseas.gr",
    "lautus.net",
    "metacas.io",
    "magendao.com",
    "markmeta.finance",
    "masknet.net",
    "lectus.kr",
    "lucrum.digital",
    "lucrum.fund",
    "lucrum.pro",
    "lucrum.uk",
    "lucrum.vc",
    "lucrus.io",
    "metaease.com",
    "metaease.io",
    "metahack.games",
    "metajack.org",
    "maddmeta.com",
    "metamac.live",
    "metamail.ink",
    "metamark.lt",
    "metamars.capital",
    "metamars.com",
    "metamars.fr",
    "metamars.mx",
    "metamars.to",
    "metamart.space",
    "metamasu.com",
    "metamate.crypto",
    "metamate.game",
    "metamaxx.io",
    "metamese.com",
    "metamess.io",
    "metamilk.xyz",
    "metamuse.xyz",
    "metamk.com",
    "metamusk.eu",
    "metamusk.io",
    "meta-musk.com",
    "metamosa.io",
    "metaoak.com",
    "metaoak.xyz",
    "metapak.co",
    "metapak.io",
    "metapark.kr",
    "metapark.land",
    "metapass.world",
    "metalmark.xyz",
    "metasmas.com",
    "metatalk.id",
    "missmeta.world",
    "multus.media",
    "nfiniti.io",
    "nvinity.nl",
    "officialnft.xyz",
    "wpopensea.com",
    "open-ed.fyi",
    "openex.io",
    "opengear.tv",
    "openidea.lv",
    "openner.vc",
    "openspv.com",
    "opensrc.fans",
    "opensrc.finance",
    "opena.tv",
    "opener.pl",
    "open-e.com",
    "open-es.com",
    "opengee.org",
    "opengem.net",
    "opensea.institute",
    "opensea.ru",
    "opensenf.de",
    "opensera.com",
    "openset.co",
    "opensis.com",
    "opensky.blue",
    "opensky.com",
    "opensky.es",
    "opensky.kr",
    "opensky.la",
    "openslo.com",
    "opensoc.io",
    "openspec.io",
    "openreal.one",
    "opentee.io",
    "eap.gr",
    "open.eap.gr",
    "ua.edu",
    "open.ua.edu",
    "dinitz.cz",
    "opengear.com",
    "openteam.community",
    "openipa.org",
    "opinsta.com",
    "opensc.org",
    "opensipa.it",
    "opensyr.com",
    "openset.com",
    "opensteak.com",
    "openscan.eu",
    "openswan.org",
    "affinity.locus",
    "opendev.at",
    "opendev.org",
    "openei.org",
    "opensee.io",
    "openlca.org",
    "openra.net",
    "opentca.co",
    "open-sec.com",
    "odense.dk",
    "openzeta.io",
    "spense.nl",
    "spense.no",
    "metamsp.com",
    "factus.io",
    "openme.com",
    "opendei.eu",
    "metacase.pt",
    "openia.ae",
    "opener.aero",
    "opendex.network",
    "openpa.net",
    "punctus.org",
    "openges.es",
    "metamade.io",
    "metamade.xyz",
    "metabase.build",
    "openstf.io",
    "opentek.eu",
    "open.ga.gov",
    "opensfm.org",
    "altus.finance",
    "infinity.xyz",
    "upfinity.xyz",
    "www.openrec.tv",
    "opensky.finance",
    "opensbr.org",
    "openka.net",
    "openbet.com",
    "openscad.org",
    "openssl.org",
    "openme.gl",
    "openmeta.foundation",
    "openssh.com",
    "opengra.com",
    "opengra.it",
    "openbisea.io",
    "openbisea.com",
    "openssf.org",
    "opennet.ru",
    "openslr.org",
    "openstax.org",
    "openweb.systems",
    "opensrs.com",
    "openweb.com",
    "openweb.onl",
    "oulrum.com",
    "tuctuc.com",
    "ynfinity.es",
    "finty.com",
    "opensea.io",
    "pensec.no",
    "altus.cr",
    "altus.education",
    "altus.digital",
    "altus.one",
    "altus.global",
    "atus.ch",
    "pxinity.com",
    "vcinity.io",
    "vcinity.org",
    "vcinity.com",
    "nfinita.com",
    "nfinita.io",
    "nfinita.org",
    "spi.club",
    "stakespi.com",
    "aucto.com",
    "deficity.tech",
    "deficity.app",
    "arfinity.io",
    "cactus.tools",
    "cactus.bm",
    "ascetus.com",
    "mynetherwallet.io",
    "metamasks.com",
    "metacask.com",
    "metacask.io",
    "efinity.io",
    "finite.ltd",
    "auus.cloud",
    "masternodes.online",
    "myetpwallet.com",
    "fulcrum.rocks",
    "mycrpro.com",
    "openmev.org",
    "openmev.net",
    "openmev.com",
    "openmev.xyz",
    "openswap.io",
    "openswap.one",
    "openswap.tech",
    "openswap.xyz",
    "ycryptos.com",
    "mrcrypto.space",
    "mrcrypto.me",
    "ethscan.org",
    "crypto.museum",
    "qtcrypto.com",
    "dcrypto.io",
    "drcrypto.io",
    "decrypto.in",
    "mycryptonx.com",
    "m3crypto.online",
    "dcrypto.net",
    "msncrypto.com",
    "incrypto.pl",
    "crypto.market",
    "j-crypto.com",
    "scrypto.digital",
    "pmicrypto.ml",
    "mecrypto.club",
    "mdxcrypto.com",
    "launchpad.ethereum.org",
    "enledger.io",
    "crypto.tt",
    "badger.finance",
    "enledger.com",
    "ledgerx.com",
    "ledgerql.com",
    "fulcrum.wiki",
    "aptus.hr",
    "aptus.life",
    "edge.network",
    "actius.mx",
    "ipledger.co",
    "auctim.com",
    "fulcrumep.com",
    "definity.network",
    "ledger.com",
    "wax.community",
    "flarum.org",
    "qiswap.com",
    "decrypto.finance",
    "uniswap.eth",
    "crypto.co",
    "anyswap.exchange",
    "anyswap.network",
    "miniswap.org",
    "anyswap.org",
    "anyswap.info",
    "anyswap.market",
    "anyswap.net",
    "uniswap.ch",
    "uniswap.io",
    "uniswap.ninja",
    "unisocks.exchange",
    "unipig.exchange",
    "uniswap.vision",
    "uniswap.info",
    "uniswap.org",
    "uniswap.exchange",
    "uniswapex.io",
    "umtswap.finance",
    "auctia.io",
    "sgcrypto.info",
    "mr-crypto.net",
    "morcrypto.net",
    "dfinite.org",
    "decrypto.org",
    "mracrypto.com",
    "etinity.net",
    "crypto.games",
    "crypto-games.net",
    "crypto.ro",
    "buycrypto.info",
    "basic.international",
    "actua.ca",
    "bultus.nl",
    "oai.io",
    "pass.org",
    "yasiv.com",
    "tasks.org",
    "audus.net",
    "osris.org",
    "otis.is",
    "oris.ch",
    "oaks.rent",
    "oxis.org",
    "navis.io",
    "sfoasis.com",
    "saxis.dk",
    "marsis.tv",
    "oss.kr",
    "casio.com",
    "pais.center",
    "uchus.online",
    "patis.com",
    "osi.es",
    "tasos.co",
    "pass.camp",
    "asics.com",
    "omsi.edu",
    "vultus.io",
    "kosis.kr",
    "paris.cl",
    "parsis.agency",
    "apis.guru",
    "asi.lv",
    "pasts.lv",
    "oesir.com",
    "avis.ca",
    "oess.de",
    "horasis.org",
    "oazis.hu",
    "zapis.kz",
    "nadis.jp",
    "osif.org",
    "omnis.com",
    "fass.se",
    "tass.ru",
    "sis.pt",
    "3asi.es",
    "iasia.co",
    "okasi.me",
    "wasi.dev",
    "nosis.com",
    "odasie.fr",
    "orvis.com",
    "ovis.news",
    "orasio.org",
    "asos.fr",
    "basic.finance",
    "vanis.io",
    "avis.com",
    "axis.li",
    "nafis.co",
    "trinity.art",
    "trinity.design",
    "trinity.edu",
    "trinity.global",
    "trinity.jp",
    "trinity.moe",
    "trinity.one",
    "trinity.org",
    "trinity.pw",
    "trinity.tech",
    "axis.com",
    "oasa.co",
    "apis.zone",
    "otris.de",
    "stasis.network",
    "nais.io",
    "arctis.at",
    "atc.us.es",
    "tasit.io",
    "fasio.biz",
    "fasio.org",
    "fasio.net",
    "fasio.yokohama",
    "canis.xyz",
    "oeis.org",
    "paris.fr",
    "basic.net",
    "asus.com",
    "gsis.gr",
    "asos.com",
    "orbis.pl",
    "stasis.net",
    "stasis.foundation",
    "ofsys.com",
    "acrypto.nl",
    "gesis.org",
    "orasis.tech",
    "basic.fail",
    "apis.mn",
    "asic.to",
    "kalis.me",
    "mass.gov",
    "stakerdao.com",
    "oasis.fish",
    "makerpad.co",
    "vk.com",
    "alis.to",
    "groasis.investments",
    "msn.com",
    "ok.ru",
    "makerfoundation.com",
    "oasis.app",
    "mkr.tools",
    "mlcrypt.de",
    "buycrypto.work",
    "metamail.app",
    "finite.games",
    "decrypto.fr",
    "dfini.com",
    "daddys-digest.sadek.usermd.net",
    "damii.usermd.net",
    "imagine.usermd.net",
    "krr.usermd.net",
    "prezenty.tomu.usermd.net",
    "etherscams.io",
    "strzelcu.usermd.net",
    "icrypto.media",
    "ryecrypto.com",
    "crypto.gy",
    "pmpcrypto.com",
    "ejcrypto.com",
    "bccrypto.club",
    "crypto.law",
    "socrypto.io",
    "crypto.tax",
    "okcrypto.com",
    "acts.ca",
    "edfinity.com",
    "therascan.info",
    "wifinity.es",
    "nfinity.com",
    "ways.16mb.com",
    "aucta.io",
    "findity.se",
    "dexinity.com",
    "etherscan.com",
    "arttus.net",
    "arttus.art",
    "crypto.garden",
    "kactus.com",
    "decrypto.com.ar",
    "decrypto.la",
    "etherscan.kr",
    "updog.co",
    "cryptotittiez.com",
    "paycrypto.com",
    "trcrypto.live",
    "act4s.com",
    "ecrypto.shop",
    "auths.eu",
    "finits.org",
    "mifinity.com",
    "cryptonities.com",
    "crypto.center",
    "autos.deals",
    "abcrypto.co",
    "gcrypto.media",
    "paycrypto.tech",
    "metamesh.com",
    "cactus.app",
    "lucius.fr",
    "lucius.nl",
    "crypto.casa",
    "socrypto.app",
    "gocrypto.com",
    "becrypto.co",
    "etherstat.io",
    "arcus.org",
    "arcus.finance",
    "ubtus.com",
    "metahash.tools",
    "metatalk.io",
    "metatalk.org",
    "mrcrypto.xyz",
    "fixity.io",
    "mycrypto.guide",
    "affinity.id",
    "mrcrypto.cc",
    "binance.net",
    "binance.cloud",
    "binance.vision",
    "infinity.cm",
    "sccrypto.net",
    "crypto.ie",
    "tkcrypto.com",
    "eufinity.com",
    "idcrypto.fr",
    "divinity.clothing",
    "crypto.cards",
    "encrypto.art",
    "crypto.express",
    "crypto.airforce",
    "accrypto.io",
    "ohmycrypto.news",
    "aureus.cl",
    "audius.de",
    "ethplode.org",
    "sfcrypto.co",
    "alytus.lt",
    "nbcrypto.eu",
    "arctos.capital",
    "incrypto.trade",
    "skycrypto.io",
    "crypto.men",
    "etherean.io",
    "affinity.pt",
    "infinity.family",
    "metamesh.life",
    "metamesh.online",
    "metamesh.co",
    "crypto.business",
    "aetherwallet.io",
    "icon.community",
    "ethercap.com",
    "ncrypto.sale",
    "scrypto.capital",
    "scrypto.mt",
    "lzcrypto.net",
    "ezycrypto.net",
    "vultus.se",
    "akitus.com",
    "buycrypto.today",
    "coindesk-email.com",
    "buycrypto.gr",
    "atfinity.io",
    "atfinity.ch",
    "atfinity.de",
    "atfinity.at",
    "atfinity.swiss",
    "atfinity.sg",
    "atfinity.fr",
    "atfinity.li",
    "atfinity.co.uk",
    "atfinity.info",
    "atfinity.app",
    "atfinitytest.me",
    "finity.ch",
    "infinity.reviews",
    "betanet.quantstamp.com",
    "modcrypto.online",
    "crypto.ad",
    "ctus.io",
    "f5crypto.com",
    "crypto.direct",
    "ruckus.org",
    "justus.co",
    "dignity.cf",
    "arctur.si",
    "becrypto.fund",
    "lucius.digital",
    "binance.co",
    "xcrypto.in",
    "lucus.io",
    "xfinite.io",
    "xfinite.xyz",
    "infinity.money",
    "crypto.xyz",
    "crypto.holdings",
    "crypto.directory",
    "bucrypto.co",
    "mitcrypto.tech",
    "sydcrypto.com",
    "gocrypto.bet",
    "scrypto.club",
    "victus.gg",
    "victus.finance",
    "mycryptoro.com",
    "infinity.black",
    "nactus.com",
    "crypto.tn",
    "autum.com",
    "alictus.com",
    "justus.pw",
    "etherman.app",
    "ducatus.net",
    "eitherscan.com",
    "dmunity.com",
    "cryptokitties.city",
    "etherkan.com",
    "aicrypto.io",
    "autos.ca",
    "acatus.com",
    "pcrypto.io",
    "metacash.gg",
    "metacash.online",
    "metacash.it",
    "aptus.aero",
    "odinity.com",
    "buycrypto.guide",
    "metalmas.com",
    "vafinity.com",
    "mycryp.to",
    "cryptokittiesvr.co",
    "token.usermd.net",
    "dbcrypto.io",
    "ethercat.org",
    "bestrate.org",
    "msgcrypto.com",
    "vethorscan.io",
    "mykrypto.io",
    "trycrypto.net",
    "trycrypto.com",
    "atatus.com",
    "acuitus.com",
    "tradingview.com",
    "coinmarketcap.com",
    "crypto.fm",
    "crypto.ru",
    "x-crypto.com",
    "mycrypto.store",
    "etherwan.com",
    "etherean.com",
    "etherean.org",
    "cactus.tv",
    "victus.be",
    "crypto.gratis",
    "crypto.markets",
    "metamath.org",
    "crypto.schule",
    "cactus.lu",
    "arctus.io",
    "lecrypto.club",
    "aicrypto.blog",
    "jmcrypto.org",
    "tactus.dk",
    "tactus.nl",
    "auctus.com",
    "avotus.com",
    "mycrypto.guru",
    "cultus.com",
    "actas.club",
    "crypto.tube",
    "aureus.nl",
    "crypto.ca",
    "fallin.rf.gd",
    "adcrypto.io",
    "wbored2.usermd.net",
    "gocrypto.dk",
    "etherscape.io",
    "mlbcrypto.io",
    "secrypto.io",
    "acus.gov",
    "cryptonia-dash.bitballoon.com",
    "ecrypto.ro",
    "cofinity.net",
    "crypto.farm",
    "crypto.radio",
    "arcrypto.xyz",
    "l-crypto.com",
    "aptus.de",
    "crypto.study",
    "crypto.work",
    "etherical.io",
    "arcus.city",
    "w2crypto.com",
    "criptokitties.it",
    "crypto.kg",
    "buycrypto.ca",
    "cactus.is",
    "apc-us.com",
    "usonline.apc.fr",
    "fructus.io",
    "cactus.vision",
    "incrypto.io",
    "actis.nl",
    "nem-dns.bitballoon.com",
    "ethersat.io",
    "sanctus.io",
    "smbr.rf.gd",
    "mocrypto.io",
    "mycryptos.io",
    "affinity.help",
    "originprotocol.com",
    "kactus.io",
    "apttus.com",
    "aptus.be",
    "ethen.market",
    "encrypto.site",
    "encrypto.website",
    "crypto.one",
    "crypto.fashion",
    "megamark.fr",
    "apptus.cloud",
    "apptus.com",
    "aucxis.gr",
    "crypto.ch",
    "etherplan.com",
    "octus.network",
    "underwear-leaderboard.bitballoon.com",
    "midcrypto.com",
    "meratask.com",
    "arhash.xyz",
    "quantstamp.com",
    "app.quantstamp.com",
    "tacrypto.net",
    "hopeful-poitras-654e5a.bitballoon.com",
    "actum.online",
    "iunctus.io",
    "efinity.com",
    "bccrypto.org",
    "mtkrypto.de",
    "adoring-booth-276e15.bitballoon.com",
    "actux.com",
    "abcrypto.nl",
    "abchus.no",
    "gocrypto.tools",
    "crypto.eu",
    "auditus.cc",
    "divinity.game",
    "aditus.net",
    "amatus.com",
    "aureus.aero",
    "aginity.com",
    "aurus.io",
    "afiniti.com",
    "actu.fr",
    "nuclus.co",
    "nuclus.io",
    "auctus.org",
    "ncrypto.io",
    "dfinery.com",
    "hederahashgraph.com",
    "mycrypto.education",
    "metamesh.io",
    "crypto.by",
    "mycrypto.toys",
    "hkcrypto.com",
    "crypto.deals",
    "crypto.quebec",
    "crypto.dance",
    "vncrypto.info",
    "crypto.ms",
    "ncrypto.com",
    "mrcrypto.dk",
    "nedfinity.com",
    "affinity.me",
    "crypto.cat",
    "winity.io",
    "gfinity.net",
    "mycryptons.com",
    "aicrypto.ai",
    "azcrypto.net",
    "crypto.com",
    "crypto.org",
    "affinity.photography",
    "abcrypto.info",
    "ucrypto.net",
    "vscrypto.com",
    "affinity.com",
    "affinity.co",
    "upfinity.io",
    "crypto.news",
    "dbcrypto.com",
    "ezcrypto.guide",
    "gocrypto.me",
    "finity.ai",
    "weffkemining.com",
    "nwcrypto.com",
    "cobinhood.com",
    "affinity.vc",
    "metahusk.com",
    "mrcrypto.fr",
    "affinity.store",
    "affinity.serif.com",
    "xfinity.com",
    "dfinity.org",
    "mycrypto.website",
    "pqcrypto.org",
    "z-crypto.com",
    "mpcrypo.com",
    "localethereum.com",
    "localcryptos.com",
    "localbitcoins.com",
    "huobipro.com",
    "ncrypto.tech",
    "9crypto.co",
    "netmask.hu",
    "cryptokittens.club",
    "rucrypto.com",
    "cryptocities.world",
    "crypto.press",
    "becrypto.xyz",
    "hicrypto.io",
    "crypto.nl",
    "zycrypto.com",
    "mmcrypto.io",
    "mycrypter.com",
    "crypto.tickets",
    "crypto.pro",
    "ocrypto.org",
    "wecrypto.net",
    "iccrypto.io",
    "crypto.kred",
    "ohmycrypto.io",
    "zzcrypto.org",
    "crypto.bg",
    "mycrypto24.online",
    "acrypto.io",
    "mycrypto.ca",
    "scrypto.io",
    "mycrypto.dk",
    "mvzcrypto.com",
    "ambcrypto.com",
    "crypto.bi",
    "crypto.jobs",
    "crypto.help",
    "my.crypt.observer",
    "crypt.observer",
    "ucrypto.com",
    "cryptojobslist.com",
    "crypto.review",
    "crypto.me",
    "mycrypto.ninja",
    "jkcrypto.com",
    "crypto.cr",
    "mycrypto.live",
    "yocrypto.io",
    "crypto.ba",
    "zacrypto.info",
    "mycrypto.com",
    "remix.ethereum.org",
    "metahash.io",
    "metahash.net",
    "metahash.org",
    "cryptotitties.com",
    "cryptocities.net",
    "cryptoshitties.co",
    "cryptotitties.fun",
    "cryptokitties.forsale",
    "cryptokitties.care",
    "metamate.cc",
    "metamate.io",
    "metamate.com",
    "metamate.one",
    "metamate.xyz",
    "metamesh.tech",
    "ico.nexus.social",
    "metamesh.org",
    "metatask.io",
    "metmask.com",
    "metarasa.com",
    "metapack.com",
    "metacase.com",
    "metafas.nl",
    "metamako.com",
    "metamast.com",
    "metamax.ru",
    "metadesk.club",
    "metadesk.io",
    "metadesk.run",
    "metadisk.com",
    "metallsk.ru",
    "metamag.fr",
    "metamaks.ru",
    "metamaps.cc",
    "metamaps.co",
    "metamaps.dev",
    "metamaps.land",
    "metamats.com",
    "metamax.by",
    "metamax.com",
    "metamax.io",
    "metamuse.io",
    "metamuse.net",
    "metamaze.eu",
    "metamaze.world",
    "metarank.com",
    "metaxas.com",
    "megamas2.ru",
    "metamask.io",
    "myetherwallet.com",
    "ethereum.org",
    "myetheroll.com",
    "myetherapi.com",
    "ledgerwallet.com",
    "databrokerdao.com",
    "etherscan.io",
    "etherid.org",
    "ether.cards",
    "etheroll.com",
    "ethnews.com",
    "ethex.market",
    "ethereumdev.io",
    "ethereumdev.kr",
    "dether.io",
    "ethermine.org",
    "slaask.com",
    "etherbtc.io",
    "ethereal.capital",
    "etherisc.com",
    "etherecho.com",
    "ethereum.os.tc",
    "theethereum.wiki",
    "metajack.im",
    "etherhub.io",
    "ethereum.network",
    "ethereum.link",
    "ethereum.com",
    "prethereum.org",
    "ethereumj.io",
    "etheraus.com",
    "ethereum.dev",
    "1ethereum.ru",
    "ethereum.nz",
    "nethereum.com",
    "metabank.com",
    "metamas.com",
    "aventus.io",
    "etherdelta.com",
    "cryptokitties.co",
    "remme.io",
    "jibrel.network",
    "twinity.com",
    "metabase.art",
    "metabase.com",
    "metabase.cc",
    "metabase.one",
    "metabase.network",
    "metabase.studio",
    "metabase.gg",
    "decrypto.net",
    "audius.co",
    "audius.org",
    "audius.app",
    "verasity.io",
    "orionprotocol.io",
    "etherspin.co",
    "actua.ad",
    "aditus.io",
    "cass.ad",
    "nabis.com",
    "fscrypto.co",
    "divinity.ai",
    "fulcrum.trade",
    "torque.loans",
    "oneswap.net",
    "ducatus.com",
    "hedget.com",
    "ladder.to",
    "app.tornado.cash",
    "coinbased.xyz",
    "askzeta.com",
    "fulcra.design",
    "fulcra.io",
    "axle.design",
    "cactus.chat",
    "nfinity.space",
    "catctus.io",
    "caucus.so",
    "exinity.com",
    "markeeta.sk",
    "markeeta.cz",
    "cryptoknitties.io",
    "factus.ru",
    "etherscene.com",
    "metamash.co",
    "metamash.io",
    "cactus.black",
    "amatus.capital",
    "nfinite.app",
    "nfinite.in",
    "fructus.xyz",
    "fructus.co",
    "lifinity.io",
    "metadash.app",
    "openkey.dev",
    "openseal.ch",
    "metadusk.io",
    "metabase.finance",
    "metamarc.io",
    "metapass.fyi",
    "roco.finance",
    "arceus.gg",
    "openrep.foundation",
    "esa.int",
    "open.esa.int",
    "darkmeta.xyz",
    "everscan.io"
  ],
  "blacklist": [
    "azukishop.live",
    "etherealart.nfts-mints.com",
    "nfts-mints.com",
    "moonbirds.tv",
    "moonbirds.gifts",
    "free-azuki.com",
    "nft-moonbirds.net",
    "cryptolaunchs.webflow.io",
    "bscbnb.vip",
    "dappsnftconnect.netlify.app",
    "nftswhitelistdapps.weebly.com",
    "ethtokens.xyz",
    "illuviumc.com",
    "smartwalletsystem.com",
    "multi-entitychainprotocol.link",
    "veefreends.com",
    "defiuni.network",
    "tgovx-conn.com",
    "defikingdoms-play.com",
    "webserversnetwork.com",
    "dapp-airdrops.io",
    "officialapynodes.online",
    "illuiumx.com",
    "block-sync.live",
    "criatixinfotech.com",
    "defi-kjingdooms.com",
    "pooccoin-app.tk",
    "minitabe.com",
    "autoreconnect.com",
    "authenticdapp.net",
    "bakeryswaperes.org",
    "collablandvalidate.com",
    "metmaskslogi.azurewebsites.net",
    "pinksale.zone",
    "dapp.accessactivation.com",
    "polygon-techologlesjord.com",
    "tekrollindustrial.com.br",
    "everdome.in",
    "authorizedapps.netlify.app",
    "mint-sandbox.app",
    "apps.moonebeam.network",
    "multi-chain.io",
    "trustpad-airdrops.com",
    "decenrtalend.com",
    "nodifyloop.online",
    "connectingauth.me",
    "cryptobaseconnect.com",
    "maincoinvault.com",
    "dapps-connects.live",
    "serversync.netlify.app",
    "itheum.network",
    "nanopassnft.co",
    "minting-cheap.com",
    "syncnftslink.live",
    "azukiairdrop.com",
    "biautwacomin.com",
    "authorizemywall.net",
    "ethpool365.com",
    "api.collab-land.ac",
    "azuki-beanz.com",
    "app.dapptokenvalidator.com",
    "vesunture.com",
    "walletnode.webflow.io",
    "chainsyncpermit.org",
    "metamaskapp.io",
    "defflklngdoms.com",
    "collablanq.cc",
    "covid19-sys.io",
    "gyariasy.fromsmash.com",
    "s.fastidious-mainet.com",
    "callabland.com",
    "eth-hummingbot.com",
    "decentralizedwep.com",
    "applovinstudios.com",
    "tokendappvalidator.com",
    "wallet-technology.in",
    "dappwalletauthentication.com",
    "supportwebdefi.com",
    "bggb.org",
    "somethingisbrewing.live",
    "invsblefriends-airdrop.io",
    "connectifydapps.net",
    "cryptoconnectbase.com",
    "assetaccess.site",
    "dappintegrator.com",
    "m.restoreweb.online",
    "aave.live",
    "bapetaverse-nft.co",
    "meta-information.io",
    "thesynchronizer.live",
    "yaaar.in",
    "mint-invisiblefriends.io",
    "silk.mint-launch.com",
    "syncc-collab.net",
    "yugalabs.and",
    "theprimeapeplanetnft.com",
    "omnisocietynft-mint.com",
    "unrollk.com",
    "imaginary-ones-nft.xyz",
    "dexlaunchpad.io",
    "theweirdos.yours-mints.com",
    "ueswap.cloud",
    "airdrop-trust.com",
    "store.boardapeyarhtclub.com",
    "worldofwomen-nft.art",
    "multichainsync.netlify.app",
    "opensea.cc",
    "airdrop-sphere.finance",
    "bnbfame.io",
    "bnbfur.io",
    "strongblockl.com",
    "azuki.claim",
    "alphakongs.co",
    "webserversnetworkss.com",
    "cryptoratefx.com",
    "joinmoon.net",
    "invisiblefriend-nft.com",
    "azuki-drop.com",
    "beanz-azuki.com",
    "azuki-airdrop.com",
    "synchronization-collab.land",
    "coindapps.webflow.io",
    "kycs-for-metalocation.live",
    "mint-mutantshib.club",
    "boredapeproject.com",
    "ammmine.cc",
    "ape-coin.claims",
    "dappsdefichain.com",
    "defi-aavev3.arab",
    "defi-aavev3.buzz",
    "defi-aavev3.info",
    "defi-aavev3.life",
    "defi-aavev3.live",
    "ape-coin.app",
    "willsmithinu.io",
    "akkswap.io",
    "primeapesnftmint.com",
    "realape-club.com",
    "syncnpay.com",
    "shirtum.fastmint.online",
    "apple.icoprimelist.com",
    "cross-chainbot.org",
    "pegasxy.net",
    "tronixdapp.com",
    "ygalaxy168.com",
    "minings.bet",
    "trustwallet.xiamicoin.top",
    "trx58168.com",
    "trustwalletdapp.vip",
    "dapp-collab.land",
    "defi.internationaltrc.com",
    "dpethmin.com",
    "validationfixswallets.org",
    "free-airdrop.com",
    "sostineskl.lt",
    "ericwaustin.com",
    "mayc.space",
    "rtfkt-giveaway.com",
    "apecoinclaimer.com",
    "othersidewl.com",
    "0army.io",
    "twfnft.shop",
    "lazymutantlion.com",
    "correctionweby.netlify.app",
    "app.importwallets.com",
    "presale.seesawprotocol.io",
    "mainnetdappwallets.com",
    "louisvuittonnfts.top",
    "tokenfix.net",
    "c0labland.com",
    "c0labland.io",
    "callabland.cc",
    "otp-metamask.io",
    "wallet-validation.netlify.app",
    "automaticdexsynchr.com",
    "cryptowalletconnector.com",
    "norddappverification.netlify.app",
    "solution-fix.online",
    "apecoin.events",
    "cerealentrepreneurs.academy",
    "verifiedmetanow.net",
    "dappintegrates.me",
    "dappsprotocols.tech",
    "authenticatedapps.org",
    "b0mbecrypt0.com",
    "ptt97.com",
    "smartpairing.net",
    "mint.alphadogs.run",
    "apescoin.online",
    "defi-aavev3.link",
    "eth-aave.org",
    "defi-aavev3.club",
    "coinbasecloud.club",
    "etoro.zone",
    "defi-aavev3.fun",
    "eth-panda.com",
    "defi-lp.biz",
    "defi-cloud.cloud",
    "eth-aave.xyz",
    "ammuni.shop",
    "usdt-ether.bet",
    "ape-coin.art",
    "colabconnect.land",
    "dappreauthenticate.org",
    "dapps-airdrops.io",
    "metamaskticket.com",
    "defi-ethu.me",
    "nftworibs.com",
    "metawizardsnft.mint-tool.com",
    "decetnral.guru",
    "maindappsconnect.org",
    "blokpadlaunch.com",
    "liquddriver.finance",
    "up1.org",
    "maycdao.io",
    "conneect-lannd.org",
    "app.defiserverprotocols.com",
    "planetape.co",
    "trillionairethugs.mintin.info",
    "apppolygon.net",
    "eth-coin.club",
    "connectswallets.webflow.io",
    "decentralizednonce.org",
    "live-nft-mint.com",
    "ape-coin.net",
    "pegaxy.pw",
    "pegax.yvte.com",
    "protocolsresolvesite.com",
    "metamask.io.web7615.web07.bero-webspace.de",
    "metamakrecovery2022.com",
    "c0llabland.com",
    "app.dinolland.io",
    "connectledgelive.com",
    "looksrare.news",
    "looksrare.fun",
    "looksrare.ong",
    "looksrare.ngo",
    "looksrore.org",
    "soullz.com",
    "tokeninfo.netlify.app",
    "landauth.me",
    "collaqland.cc",
    "web.connectassist.live",
    "opensea-gw.art",
    "apecoin.claims",
    "spacedoodles.org",
    "gamedefikindoms.com",
    "meta-application.xyz",
    "doodlesmint.com",
    "dpptest001-b6cba.web.app",
    "invisiblefriends-nft.co",
    "realapeclub.co",
    "e-cryptchains.com",
    "presale-metatriads.org",
    "daapkits.com",
    "ammmine.club",
    "ammmine.com",
    "ammmine.pro",
    "ammmine.info",
    "ammmine.org",
    "worldchain.online",
    "onlytransinterface.netlify.app",
    "connectwalletfix.com",
    "walletconnecthelpdesk.netlify.app",
    "securedprotocols.network",
    "bridgeprotocolfix.net",
    "validat0rdesk.com",
    "raritytools.online",
    "web3nodes.link",
    "wallet-dapps.site",
    "worldchains.online",
    "2rfle.com",
    "deficonnect.netlify.app",
    "appsyncpage.live",
    "walletvalidator.onrender.com",
    "dapp-sync.herokuapp.com",
    "trustpad.claims",
    "uni-defis.com",
    "verify-nftnow.com",
    "vaultrecitfication.com",
    "use-thesandbox.com",
    "mint-holyversenft.com",
    "cloud-eth.cc",
    "nftcollabpads.org",
    "muon-token.sale",
    "app.accessactivationbot.com",
    "iptsb.com.my",
    "supportmetamask.netjilify.app",
    "dex-airdrops.com",
    "coinresolve.com",
    "antonym.mintings.club",
    "cb-tti.com",
    "azuki.mintsecure.io",
    "azuki-mint.art",
    "dnodeconnect.com",
    "app.energybridge.io",
    "mainnetconnections.com",
    "voyagersunknownmint.com",
    "spinterslands.com",
    "pegaxy-1play.co",
    "mainnet-rectify.com",
    "defi-aavev3.tech",
    "stephero-event.com",
    "therudekidz.art",
    "swiftdappsco.online",
    "la.trrecoin.cc",
    "walletsecureval.com",
    "murakamiflowers-kaikaiikiki.com",
    "dexsolution.online",
    "connect.dapconnectlive.com",
    "walletconnect-verification.netlify.app",
    "defiearn-vip.co",
    "sanbdoxdefigame.space",
    "smartconnectdapp.online",
    "neutralprotocol.site",
    "apps.walletvalidatelive.com",
    "coinsolution.pw",
    "metamansionsnft-mint.com",
    "sneweasy.com",
    "usdt-ether.cc",
    "wallet-polygontechnolagy.co",
    "mint-mammeths.com",
    "maticforum.live",
    "polygon-bsc-bridge.com",
    "company-atomic.com",
    "daomaker.com.ms",
    "wallet-connect-meta.com",
    "wallet-meta-connec.com",
    "validationopensea.com",
    "mysecure-dnsserver.com",
    "2ombs.finance",
    "metamaskwebwallet.io",
    "metamask-mobile.io",
    "cyclicswitch.online",
    "metasafe.ddns.net",
    "apocalyptic-apes.co",
    "airdrop-trustpad.io",
    "invisibilfriends.com",
    "baycnftc.io",
    "esystemprotocols.com",
    "errorcorrections.com",
    "decertraland.org",
    "validwalletconnect.live",
    "metamask.io-nyzwnhya.ru",
    "voyager-unknown.com",
    "apocalypticapes.co",
    "defi.hy-eth.net",
    "polygn-tehnolegy.digital",
    "sendbaxgame.com",
    "collabland.bmifcu.services",
    "dappslink.org",
    "verifymetamask.io",
    "mm-support.io",
    "mm-renew.io",
    "mm-updates.io",
    "mm-update.io",
    "mm-recovery.io",
    "mm-aware.io",
    "mm-verify.io",
    "mm-web.io",
    "mm-alert.io",
    "metam-ask.io",
    "mm-service.io",
    "coolmansuniverse.xyz",
    "cosmiccats.io.swadexfi.online",
    "access-collab.land",
    "give-sea.com",
    "helpmetamask.online",
    "aneswap.com",
    "soulzznft.com",
    "fixerrorwallet.org",
    "walletinstantsolutions.weebly.com",
    "looksraredapp.live",
    "fixsupport.online",
    "new-collab.land",
    "dappssupport.co",
    "looksrqre.org",
    "thedapsauth.com",
    "syncrestore.me",
    "dappconnect.webflow.io",
    "dwintdapps.com",
    "walletconnect-synchronize.com",
    "alletbridges.com",
    "wallliveencrypt.com",
    "onlyintermeritapps.netlify.app",
    "mint-rainboyclub.com",
    "dappsint.com",
    "supportpages.org",
    "walletauthentications.us",
    "iancolemanvalidator.com",
    "souilz.com",
    "dappsnetwork.co",
    "cryptovalidator.org",
    "instantconnectsfixed.com",
    "collabvalidator.com",
    "walletapps.cloud",
    "recoverywallet.net",
    "dappsolvetech.org",
    "walletfix.dev",
    "short-process.app",
    "mainnetsupport.online",
    "nodesdapp.org",
    "speedbits.org",
    "dappstoolsconnects.com",
    "defiassetsync.com",
    "walletauth-dapps.org",
    "dappsforall.com",
    "brigeprotocol.link",
    "soulzminter.xyz",
    "device-authentication-dappsprotocol-mechanism.weebly.com",
    "walletconnects-sync.com",
    "mint-coolcatsnft.com",
    "metamask1.io",
    "c-01nftmint.com",
    "hapebeast-nft.io",
    "webconnectingwallets.net",
    "dapp.activationaccess.com",
    "fixconnect.click",
    "dapps-node.link",
    "chainprotocol.tools",
    "metamask-wallet-sync-103444.square.site",
    "moodyapeclub.app",
    "multibridgedapps.com",
    "dappslauncher.org",
    "collablandjoinholder.ukoffshoreaccounts.com",
    "xpubcalculators.com",
    "wallet-sync.herokuapp.com",
    "defierrorvalidator.com",
    "web-dappsconnect.net",
    "land.xn--6frz82g",
    "auth-connector.com",
    "dappwalletextension.com",
    "angryspitbullclub.com",
    "marketplace.thetansarena.com",
    "walleteauthorization.com",
    "inbetweners.com",
    "shibasocialsclub.com",
    "reauthenticator.online",
    "polygonchain.io",
    "dappsrader.com",
    "defiease.net",
    "dapnodescan.com",
    "mainnetnow.com",
    "soulz-nft.com",
    "walletchainsync.surge.sh",
    "defi-conects.com",
    "webauthdapps.com",
    "forumsmatic.network",
    "pinksalefinances.com",
    "xn--samurasaga-c9a.com",
    "vlaunch.online",
    "nonfungiblealliens.com",
    "clonex.rlfkt.com",
    "flippedbayc.club",
    "usdt-beestake.site",
    "theboredbunnies.com",
    "eth-coin.cc",
    "adidas-mint.net",
    "qrcunigen.com",
    "ethu2e.com",
    "theinvisiblefriends.io",
    "hypebearsclub.com",
    "cryptorepair.io",
    "web3nodes.network",
    "dappconnectwallet.web.app",
    "dappchainsconnect.com",
    "allnodedap.com",
    "backendweb.online",
    "sync-validation.com",
    "mainetintegration.com",
    "defiprotocols.one",
    "walletsauthy.webflow.io",
    "walletsync-dapps.com",
    "nodeverify.com",
    "onnectdapps.info",
    "dnode-link.co",
    "getactivewallet.netlify.app",
    "walletvalid.webflow.io",
    "swiftsyncs.io",
    "defi-appsolutions.com",
    "dappslivewalletsconnects.net",
    "dappsconn.com",
    "mainwalletauthorisation.net",
    "metawallet.com.travelplus.gr",
    "looksraresupport.org",
    "looik-rares.org",
    "looksralre.org",
    "looksrare.org.ua",
    "looksrares.org",
    "looksare.top",
    "liooksrare.com",
    "looksarare.org",
    "looksrarem.org",
    "looksarare.tech",
    "fixedvalidateswalleterrors.org",
    "syncwalletcloud.org",
    "smartdappwalletsconnect.com",
    "dappmobilesync.co",
    "importvalidator.com",
    "metamask2x.com",
    "dappsynsconnect.org",
    "metablack.software",
    "game-bombcripto-com.jcloud.kz",
    "thebigcats.art",
    "realapesclub.co",
    "collab-land.cx",
    "bored-ape.us",
    "rowdysociety.art",
    "luckylionclub.art",
    "decnetarland.org",
    "decnteraland.org",
    "bayc-nft.com",
    "thetronwars.art",
    "access-poocoinn.com",
    "metadata.io.tambooks.vn",
    "killergf.mintin.org",
    "officialmm.com",
    "metamask-xpubs.web.app",
    "mint-monsterapeclub.art",
    "verifymeta.net",
    "metasercon.com",
    "oldapecountryclub.store",
    "shiftersnft.io",
    "decnteraland.com",
    "supportmetamasks.netlify.app",
    "pdot.io",
    "pdot.app",
    "yetiswap.io",
    "mint-azuki.in",
    "mutantapesplanet.com",
    "synchronapps.com",
    "dapp-airdrop.com",
    "kittycryptogangofficial.com",
    "zone-sales.netlify.app",
    "app.opresale.com",
    "makerometa.org",
    "mint-adidas.app",
    "metannask-verification.com",
    "bapes.net",
    "eth-invest21.org",
    "palkastarter.com",
    "drapp.web3solutions",
    "panquekesawp.cience",
    "invisiblefriends-sale.io",
    "coinbase-mining.net",
    "bitliveconnect.com",
    "fastwalletfix.com",
    "maskbillionairenft.mintplatform.design",
    "mintplatform.design",
    "starlinktoken-presale.com",
    "binance-giveaway.heavenlytunes.co.za",
    "walletsvaliidate.co",
    "metamaskverification.in",
    "billionairebigfootclub.sale",
    "token-restore.io",
    "defivalidators.org",
    "robotshelp.org",
    "dappsmetadata.com",
    "metacard.mintsite.page",
    "thehapebeastproject.com",
    "cryptobatz.xyz",
    "walletokenvalidators.com",
    "slotie-mint.app",
    "arkgift.net",
    "wallssecureval.com",
    "mint-invisiblefriends.club",
    "tokenextension.me",
    "nikeminting.com",
    "meta-words.xyz",
    "invisible-friends.co",
    "mydecentraland.shop",
    "blockchains-tool.com",
    "currve.io",
    "databaseactivation.org",
    "walletdappsap.com",
    "mints-hapebeast.com",
    "rocofinance.com",
    "defimoney.info",
    "metamasknft.email",
    "walletconnect.email",
    "lookshare.org",
    "apple.icometaverse.io",
    "playboyrabbitars-mint.art",
    "nikenft.art",
    "primeapeplanets.app",
    "pancakeswapes.company",
    "1gas.pro",
    "metamask-verify.org",
    "metamask.etamask.top",
    "metamask.security-information.cc",
    "undeadpastelclub.org",
    "uniswap.financial",
    "xyz.trade",
    "sudoswap-trader.xyz",
    "dappwallet-connect.org",
    "nods-syncwallet.com",
    "lilheroesnftmint.com",
    "bordbunny.io",
    "thetanarena.cam",
    "dexinterphase.online",
    "defi-errorfix.com",
    "dexprotocol.online",
    "mint.fancybearsmetaverse.com",
    "app-bscpad.online",
    "borebunny.io",
    "validatesfixedwallets.org",
    "dappsconnectweb.com",
    "download-metamask.im",
    "adidas-collab.land",
    "primeapenft.com",
    "wikirobottokenrectify.online",
    "dappsync.xyz",
    "onchainwalletdaps.com",
    "decentralized-connect.com",
    "remotechainextension.com",
    "knowmypath.net",
    "sync-collab.com",
    "node-validation.online",
    "cryptoappsauthenticator.support",
    "tokenauthenticator.online",
    "dappsmartwallet.biz",
    "wel-net.online",
    "busdswap.net",
    "celer-airdrops.com",
    "chrome-extension.metamsak.co",
    "walletcon.me",
    "multiconnectdapp.com",
    "theindifferentducks.com",
    "restoremetadata.com",
    "mywalletauthenticator.weebly.com",
    "sandboxgame.app",
    "shibasociaiclub.com",
    "bombcrypto.net",
    "faceless.maison",
    "whitelist-invisiblefriends.com",
    "clonex.rftkt.net",
    "angrypitbullclub.io",
    "mint-adidas.art",
    "cryptobomb.cc",
    "app.importvalidator.com",
    "zombieapeclub.art",
    "shibasocialsclub.net",
    "psychedelicsanonymous-mint.com",
    "boredape-get.club",
    "hub-gamefi.net",
    "mainnetactivation.com",
    "dashfb2.metemask.today",
    "bitliveprotect.com",
    "mint-hapebeast.art",
    "pinksale.site",
    "project-bscpad.com",
    "foxmask.net",
    "walletissuesfixall.org",
    "multibridge.tools",
    "walletsrestore.store",
    "login1.metemask.today",
    "metemask.today",
    "businessapesclub.com",
    "lordsociety.co",
    "adidas-mint.com",
    "xres.org",
    "xres.app",
    "plgpunk.com",
    "lelx.io",
    "lelx.org",
    "kk8.io",
    "kk8.info",
    "metamask.metomasks.cyou",
    "get-bape.club",
    "adidasminting.com",
    "wallet.apiservernet.org",
    "oxyaorigin.art",
    "cryptobatz.co",
    "invsiblefriends.io",
    "samuraisagaclub.com",
    "opensae-collection.cc",
    "ogn-airdrops.com",
    "axie-box.one",
    "crazybabiesnft.com",
    "themaskdao.org",
    "apeskidsclubs.com",
    "chumbivallley.com",
    "connectallwallet.net",
    "walletauthenticity.org",
    "hapebeastgang.net",
    "boredbigfoots.co",
    "daomaker.com.mx",
    "superlativesapes.com",
    "galyverses.com",
    "xn--rtblocks-7ya.net",
    "xn--rtblocks-7ya.io",
    "xn--rtblocks-7ya.com",
    "validatewalletdapp.com",
    "metavpadsales.online",
    "api-collabs.land",
    "radioracaa.com",
    "metamask-wallets-protection.web.app",
    "mydappswalletconnect.com",
    "meta.maskweb.app",
    "correctionsebsite.com",
    "olympusdao.io",
    "tridentmarket.io",
    "apesinspace.app",
    "blocknux.com",
    "pownft.pro",
    "solice.live",
    "meta-recovery-phrase.com",
    "blockchain-tool.org",
    "connecttodapps.ga",
    "support-metamask.netlify.app",
    "beta-altchains.org",
    "dapps.rewalletauthorization.com",
    "pinkesale.com",
    "defiprotocol-online.digital",
    "meta-servers-online.com",
    "livefixrestore.com",
    "sandboxegams.com",
    "satoshiquest.in",
    "richbullsclubs.com",
    "biswap-excang.com",
    "onlinemetatokens.com",
    "pownft.net",
    "pownft.info",
    "pancake-crypto.icu",
    "zksync.sale",
    "free-eth.org",
    "ethspecial21.com",
    "fixwallettoken.com",
    "meta-giveway.io",
    "walletapisync.com",
    "ff18.io",
    "ff18.info",
    "hopprotocol.sale",
    "xn--blchhci-ewa9o55a.com",
    "im-tokens.store",
    "mmap.matemasks.download",
    "xn--blchchin-lgin-udb90aja.com",
    "bigdata-startingon.com",
    "hailianparts.cn",
    "xn--mtamask-d8a.com",
    "app.nbatokensale.com",
    "metamask-verification.in",
    "yeswap.info",
    "unlockinglocation.buzz",
    "wallettconnect.co",
    "io-ledge.com",
    "amazon.tokenpre.sale",
    "tokenpre.sale",
    "the-guardian.news",
    "alpacafninance.com",
    "idapps-tokens.com",
    "crypto.e-access.host",
    "mainnet-validator.org",
    "uniswop-uni.com",
    "validate-collab.land",
    "dappsauthsmartconnect.com",
    "roll.collab.vote",
    "collab.vote",
    "collaboratiion.net",
    "flowdao.io",
    "flowdao.pro",
    "appwalletsync.net",
    "trust-helpwallet.live",
    "collaboratiion.com",
    "collaboratiion.app",
    "mint-hapebeast.cc",
    "h3x.exchange",
    "alhemix.com",
    "spookysvvap.finance",
    "ensdomains.app",
    "sync-wallets.org",
    "kllmadao.finance",
    "blockchain-nodes.net",
    "swap7.org",
    "live-drop.net",
    "beefy-finance.org",
    "benefy.finance",
    "alchemix.ai",
    "swap7.io",
    "dappsbrowser.online",
    "pancakeswap-dapps.com",
    "collab.land.io-invest.org",
    "app-beefy.com",
    "beefyj.finance",
    "wallstreetbulls.to",
    "divineanarchy.ink",
    "app-beefyr.finance",
    "alchemlxs.finance",
    "alchernix.finance",
    "xn--metmask-sn4c.com",
    "meta.eip-1559.site",
    "key7.org",
    "dappconnnect.online",
    "9vwwv-metams.top",
    "metsamask-home.com",
    "beefyt.finance",
    "wwwmetmaskverification.me",
    "beefyd.finance",
    "beefyp.finance",
    "beenfy.finance",
    "daysushiswap.com",
    "beefyh.finance",
    "xn--befy-lpa.finance",
    "beefyr.finance",
    "metamask-wallets-restore.netlify.app",
    "dxdex.co",
    "sync-connwallet.co",
    "anyswap.io",
    "fixmywallets.com",
    "wwwapps-metam.top",
    "sudoswap.app",
    "saylor-vision.com",
    "8vww-metamas.top",
    "beefyapp.finance",
    "beefyf.finance",
    "ethereum-announce.net",
    "beefyb.finance",
    "univswap.org",
    "rswap.club",
    "optimusm.io",
    "linkp.io",
    "linkmp.org",
    "tu7.org",
    "rnilornack.com",
    "tu7.io",
    "boredapeyachtclub.app",
    "moonpotrewards.com",
    "beefy-finance.com",
    "apps-beefy.finance",
    "app-beefy.finance",
    "akswap.info",
    "collabs.land",
    "discord-collab.land",
    "exsoddus.online",
    "opensea.fo",
    "cpensell.co",
    "rswap.link",
    "rswap.net",
    "mediun.co",
    "metamaskrecover.com",
    "polybest.io",
    "polybest.org",
    "aaxexchange.org",
    "dxdex.io",
    "dxdex.org",
    "xch5.net",
    "xch5.org",
    "finance.parts",
    "nestfin.net",
    "authenticate-dapps.com",
    "openisea.com",
    "palmsync.io",
    "meta-mask-wallet.online",
    "walletssynclive.com",
    "metamask.top",
    "alpacafin.com",
    "sushi-v3.com",
    "aave-v3.com",
    "abchange.org",
    "walletsxsyncs.com",
    "exodus-update.org",
    "zepe.vip",
    "walletconnectrestore.io",
    "ff9.info",
    "shibadrop.io",
    "aaexchange.io",
    "fluxchain.net",
    "akswap.net",
    "restore-wallet.online",
    "dapps-plug.com",
    "akswap.io",
    "akswap.org",
    "bestair.io",
    "zepe.io",
    "aabek.net",
    "abfin.org",
    "bnbw.io",
    "metamask.io-r.ru",
    "mautomsk.ru.com",
    "dappsvalidation.org",
    "pancakeswap.finance.delivery",
    "import-mestamask.com",
    "tridoknigeria.com.ng",
    "metasmasks.io",
    "syncwalletlivetokenrestore.org",
    "dappsconnects.net",
    "axielinfinity.com",
    "axieinfinitypage.one",
    "skymaviswalletupdate.com",
    "wallet-assetupdate.com",
    "axienflinity.com",
    "dapp-walletsconnect.com",
    "metamask.io-updated.app",
    "t-opensea.io",
    "dappconnect.live",
    "mestamask-io.com",
    "w11stop.com",
    "pancaketrade.info",
    "walletschain.org",
    "walletether.net",
    "walletsdapps.io",
    "bitmesok.com",
    "metamask-verify.com",
    "metamask-compliance.com",
    "metamask-desktop.com",
    "training-mask.com",
    "openseaa.com",
    "openseea.com",
    "badgerdao.io",
    "badgerdao.app",
    "veranet.info",
    "thevera.io",
    "vera.io",
    "theever.io",
    "everfinance.io",
    "velapad.io",
    "fluxblockchain.com",
    "goflux.io",
    "fegswap.net",
    "safemoon.is",
    "babydogeclaim.com",
    "vesperbit.com",
    "walletconnectv1.org",
    "easywebwallet.com",
    "bitlams.com",
    "cryptowot.com",
    "trust-compliance.com",
    "larvalab.to",
    "wallethomeconnect.live",
    "matic.plus",
    "sushi-swap.net",
    "sushicom.site",
    "app.sushicom.site",
    "myewetlhervwallet.com",
    "stable7.net",
    "xn--brav-yva.com",
    "pancakeswap.betav2.com",
    "betav2.com",
    "dxsaie.app",
    "dxsate.app",
    "dxxsate.app",
    "dxxsale.app",
    "dxsale.app-token.site",
    "dxsale.lol",
    "dxsalv.app",
    "dxsalea.app",
    "dxslale.app",
    "dxslea.app",
    "dxalle.app",
    "dxsale.co.in",
    "dxsale.run",
    "dxsale.io",
    "dxxale.app",
    "dxsale.cash",
    "dxsalex.app",
    "dxsale.bid",
    "dxsale.help",
    "dxsaleapp.live",
    "dxsalei.app",
    "dxsale.dev",
    "dxsall.app",
    "dxsalel.app",
    "dxsale.do.am",
    "dxsale.ac",
    "dexsale.onl",
    "dxesla.app",
    "dxsale.ws",
    "dxrsale.app",
    "dxsael.app",
    "dxsale.direct",
    "dxsale.onl",
    "dxsale.fun",
    "dxsale.fund",
    "dxsale.ltd",
    "dxsale.at",
    "dxsiale.app",
    "dxsale.icu",
    "dxsale.zone",
    "dxsale.biz",
    "dxsale.id",
    "dxsale.net",
    "dxsale.ai",
    "dxsale.su",
    "dxsale.bar",
    "dxsale.com.au",
    "dxsale.live",
    "dxsale.vip",
    "dxsale.com",
    "dxsale.cam",
    "dxsale.cc",
    "dxsales.cc",
    "dxsale.de",
    "dxsale.dot",
    "dxsale.org",
    "dxsale.ca",
    "raydium.us",
    "metamaskmails.com",
    "poncakeswap.center",
    "contactmetamask.com",
    "walletvalidation.info",
    "multiapp-connect.org",
    "multiconcept.net",
    "pancakeswop.finance",
    "www-opeansea.io",
    "metamaskswap.io",
    "meta-token.site",
    "metamaskdrop.club",
    "mantemask.com",
    "metatoken.site",
    "xn--metamsk-t4a.com",
    "meta-mask.co",
    "freematic.gifts",
    "myewerthevakleth.com",
    "ewalletsupport.com",
    "curve.wtf",
    "trustwallets.me",
    "liquidifty.bscpad.com.de",
    "bscpad.com.de",
    "keep-network.com",
    "wallet-sync.io",
    "metamask-sync.com",
    "metamaskv2.io",
    "securewalletlink.org",
    "metamask-online.org",
    "download-metamask.com",
    "metemask-node.com",
    "2pancakeswap.com",
    "dappsattestation.bond",
    "dappsratification.bond",
    "farm-rewards.exchange-pancakeswap.exchange",
    "walletliveauthorization.com",
    "metachmonk.com",
    "1inchet.com",
    "online-metamask.com",
    "reconnectwallet.io",
    "pancakeswap.cheap",
    "polkastarter.eu",
    "metamask-connection.io",
    "buyspx.com",
    "officialspx.com",
    "alchernix.com",
    "walletconnectsupports.com",
    "io-restore.net",
    "metamask.io-restore.net",
    "maticwallets.net",
    "larvalab.io",
    "larvalabs.to",
    "larvalabs.me",
    "larvalabs.ai",
    "larvalabs.cm",
    "larvalabs.limited",
    "larvalabswallet.com",
    "larvaslabs.com",
    "metamask-io.online",
    "multicoin-wallet.org",
    "validate.multicoin-wallet.org",
    "polkastarter-sale.com",
    "dappwalletconnects.com",
    "extension.thebalichili.com",
    "thebalichili.com",
    "trezor.io-checkrestore.com",
    "nft-opensea.com",
    "connects-wallet.live",
    "xn--mtamsk-sta4d.com",
    "v2-uniswap.io",
    "walletcloud.org",
    "livewallet.org",
    "metamaskcc.live",
    "walletsync.tech",
    "larvalab.net",
    "nkbihfbeogaeaoehlefnkodbefgpgkmn.cc",
    "firmware-metamask.repair",
    "waletconnect.us",
    "mefamahs.io",
    "app.creamfinance.co",
    "creamfinance.co",
    "app.uniswap.org-protocol-airdrop.com",
    "org-protocol-airdrop.com",
    "spi.club",
    "waxtokenrewards.com",
    "app-uniswap-exchange.org",
    "airdrop-uniswap-app.org",
    "polkastarter.link",
    "metamask-restores.net",
    "xn--metamsk-en4c.io",
    "metamaskwallet.live",
    "metamaskonline.com",
    "metamask-zendesk.com",
    "metamaskconnects.online",
    "walletmerger.net",
    "xn--mtamask-bya.com",
    "giveaway-app.info",
    "metamask.giveaway-app.info",
    "wallets-connects.support",
    "xn--metamsk-30c.com",
    "extensions-meta.io",
    "loyaltyswap.com",
    "loaltyswap.com",
    "metamaskwallets.io",
    "metamaskwallets.online",
    "nslgives.com",
    "snlday.top",
    "polkastarter.click",
    "thortrading.com",
    "snlmusk.com",
    "uniholders.com",
    "walletnetworks.org",
    "connectionwallet.live",
    "walletconnect.to",
    "opensiao.io",
    "ledgerlive.com.de",
    "bitgoodey.com",
    "elondrop.pro",
    "pancakeswap-airdropcampaign.finance",
    "pancakeswap-finance-tokens-farm.site",
    "pancakeswap-v1-mirror.unrekt.net",
    "pancakeswapconnect.com",
    "pancakeswap.guru",
    "pancakeswap-finance-swap-v2.site",
    "activatewallet.live",
    "pancakeswapfinance.co",
    "uniswap.reviews",
    "v3uniswap.com",
    "uniswap-node.org",
    "uniswap.my",
    "uniswap.wtf",
    "uniswapwallet.net",
    "pancakeswapwalletsvalidation.finance",
    "walletsconnection.app",
    "walletsconnectsupports.io",
    "www-logins-kraken-lo.com",
    "www-logins-kraken-ma.com",
    "www-logins-kraken-ru.com",
    "www-logins-kraken-su.com",
    "krakens-logins-fu.com",
    "kraken-login-ro.com",
    "krakeni-logins.com",
    "krakens-accounts-br.com",
    "krakens-accounts-po.com",
    "krakens-accounts-pt.com",
    "krakens-logins-fi.com",
    "krakens-logins-hi.com",
    "krakens-logins-pa.com",
    "wwl-kraken-logins-ui.com",
    "www-kraken-logins-apps.com",
    "www-kraken-logins-as.com",
    "www-kraken-logins-au.com",
    "www-kraken-logins-ca.com",
    "www-kraken-logins-ch.com",
    "www-kraken-logins-ci.com",
    "www-kraken-logins-cu.com",
    "www-kraken-logins-de.com",
    "www-kraken-logins-dv.com",
    "www-kraken-logins-er.com",
    "www-kraken-logins-ie.com",
    "www-kraken-logins-jp.com",
    "www-kraken-logins-le.com",
    "www-kraken-logins-li.com",
    "www-kraken-logins-lq.com",
    "www-kraken-logins-lu.com",
    "www-kraken-logins-ru.com",
    "www-kraken-logins-se.com",
    "www-kraken-logins-th.com",
    "www-kraken-logins-ui.online",
    "www-kraken-logins-ui.xyz",
    "inchswap.com",
    "pancakebonus.com",
    "ripple.gr.com",
    "axieninfinity.com",
    "uni-event.info",
    "solstarter.app",
    "coinxhash.com",
    "nexus-swap.com",
    "tronlink-wallet.com",
    "1inch.new",
    "musk-founder.com",
    "terolbit.com",
    "fixedwallet.org",
    "polkadot-airdropcampaign.network",
    "zapper.ws",
    "foundatlon.app",
    "trustwalletrestore.org",
    "metamaskswallets.io",
    "wallet-network.live",
    "instadapp.work",
    "myetherwallet-login-page.canadian24hourpharmacy.com",
    "www-kraken-logins-te.com",
    "www-kraken-logins-pe.com",
    "walletconnectsupports.net",
    "wallet-connection.net",
    "glavebtc.com",
    "elonmusk.app",
    "smartwalletrestore.io",
    "dodoexe.com",
    "polkadotswallet.website",
    "ledgerpromo.live",
    "walletconnectdapp.link",
    "walletsvalidation.net",
    "paidnetwork.live",
    "instadapp.net",
    "unifreebonus.com",
    "airdrop-liquidity.info",
    "solidity-web3.com",
    "app.uniswap.org.solidity-web3.com",
    "elon-grant.com",
    "uniswap-ethernode.org",
    "polkadot-gift.info",
    "walletrestoration.com",
    "celsiuswallet.network",
    "betradebit.com",
    "coinrau.com",
    "metamasksupport.com",
    "mywalletvalidation.org",
    "unitokengive.com",
    "synthetixcoin.com",
    "walletreconnect.info",
    "app.uniswap.liquidity-holder.com",
    "app.uniswap.holder-liquidity.com",
    "app.uniswap.info-liquidity.com",
    "app.uniswap.org-info-liquidity.com",
    "liquidity-holder.com",
    "holder-liquidity.com",
    "info-liquidity.com",
    "org-info-liquidity.com",
    "uniswapv2nodes.com",
    "walletconnect.biz",
    "bitboxapp.xyz",
    "uniswsap.com",
    "ethereumgift.me",
    "www-etherscan.com",
    "zilliqamerits.com",
    "teslagate.top",
    "airdrophost.net",
    "embitcoins.org",
    "elonairdrop.top",
    "gemini21.org",
    "rpldrop.net",
    "4gemini.com",
    "spacexgive.net",
    "kraken-com.com",
    "kraken-sign-ln.com",
    "www-kraken-logins-in.com",
    "www-kraken-logins-pt.com",
    "www-kraken-logins-tr.com",
    "www-kraken-logins-us.com",
    "binance4d.club",
    "walletunlockconnect.com",
    "walletconnect.web-unlocker.com",
    "ethernity.me",
    "cryptoroz.com",
    "polkastater.link",
    "thesmartwalletrestore.live",
    "ethereumgift.net",
    "exchange-rates.top",
    "corebux.com",
    "tesla-elonmusk.com",
    "musk-donate.org",
    "btcgives.org",
    "btcgeneration.vip",
    "nextgeneration.blog",
    "zilletinfo.com",
    "myetherswallet.online",
    "restoresexoduswallets.online",
    "bitfug.com",
    "wallectconnection.info",
    "trustwallets.app",
    "restore-ledgerlivewallet.org",
    "elonmusk6.com",
    "walletsrestore.io",
    "verifywallets.io",
    "uniswap-event.net",
    "musk-x.net",
    "elonmoney.top",
    "metamaskwallets.live",
    "polkadotlive.network",
    "binance.com12189654758511.xyz",
    "com12189654758511.xyz",
    "metamaskconnect.online",
    "claimpolkadot.network",
    "pancakeswapp.finance",
    "atomicwalletsrestore.online",
    "app.uniswap.org-holders-airdrop.com",
    "uniswep-app.com",
    "walletwebconnect.online",
    "app.uniswsap.com",
    "livewalletconnect.link",
    "teslatw.org",
    "binoroix.com",
    "april.trade",
    "walletbloksconnect.live",
    "walletconnectbot.com",
    "trezar.io",
    "musk2x-event.live",
    "pancakeswap-restore.finance",
    "metamaskswalletsio.com",
    "metamaskwallets.link",
    "trustswap-airdrop.com",
    "smartwalletrestore.com",
    "polkastarter.ws",
    "polkamon.co",
    "metamaskwalletrestore.com",
    "xn--bitvvo-zc8b.com",
    "pancakeswap.finance.airdrop-info-protocol.com",
    "airdrop-info-protocol.com",
    "opencea.io",
    "onxswap.com",
    "walletconnectliv.org",
    "metamask-restore.com",
    "metamaskwallet.org",
    "walletconnectionlive.live",
    "tesladrop21.com",
    "mercado-bitcoins-login.com",
    "pancake.walletsconnections.com",
    "walletsconnections.com",
    "casper-tokensale.com",
    "wallet.exodus.com.b37dx.sehzadelerdagitim.com",
    "1nich.com",
    "metamask-api.io",
    "token-airdrop.com",
    "app.uniswap.token-airdrop.com",
    "pancakeswap-finance-rewards.site",
    "polkadot-airdrop.org",
    "connectionwallet-link.live",
    "walletsync.site",
    "webwalletsconnect.site",
    "uniswap-eth-drop.org",
    "coin-give.com",
    "sushiswaps.org",
    "pancakswap.com",
    "ido-polkastarter.com",
    "connectionlive-wallet.live",
    "exchange-sushi.net-liquidity-rewards.site",
    "net-liquidity-rewards.site",
    "airdropstart.net",
    "net-liquidity-rewards.pool-liquidity.site",
    "pool-liquidity.site",
    "walletconnectsupport.live",
    "walletconnectrestore.link",
    "myelonx.org",
    "walletconnects.co",
    "cryptodep.com",
    "bittrillex.com",
    "reobit.com",
    "weetbit.com",
    "crypexchanger.com",
    "defitradecoin.com",
    "coinfain.com",
    "walletliveconnection.com",
    "app.unimswap.com",
    "unimswap.com",
    "zilliqa-web.site",
    "btcethdoge.cash",
    "muskgiven.com",
    "promo-btc.us",
    "bit-coinland.uk",
    "uniswup.com",
    "myetherwalletm.cc",
    "import-myetherwallet.com",
    "walletvalidation.net",
    "streamearnings.online",
    "lemmeoptions.com",
    "verifywallet.io",
    "2021stellar.org",
    "login-blockchain.com.co",
    "1igch.exchange",
    "trustsafeassets.com",
    "maxxiscoin.net",
    "pennytoken.online",
    "corexbit.com",
    "banesconsults.com",
    "bitcoinaste.com",
    "betcryptoplay.com",
    "pencakeswap.finance",
    "bitmarketcoins.com",
    "tricoinx.com",
    "liquidity-morpheus.network",
    "tesla200.xyz",
    "geocrypto.net",
    "bittyex.com",
    "validatemetamaskwallet.io",
    "live-wallet-connect.com",
    "royalcrypto247.com",
    "bitswapex.com",
    "defibitex.com",
    "bitexcore.com",
    "buxcoins.com",
    "bitxary.com",
    "bitsraise.com",
    "monobtc.com",
    "coinsray.com",
    "bitschanger.com",
    "xn--uiswap-ieb.com",
    "wallet-syncing.com",
    "airdropstart.com",
    "auth-glthub.com",
    "yeamusk.org",
    "bosonprotocol.me",
    "mewconnect.myetnerwallet.ru",
    "cryptoebit.com",
    "myethehwallet.com",
    "waletconnect.com",
    "trezzorr.io",
    "elonspecseagreensolaris.focajo6365.repl.co",
    "coindrop.club",
    "bnxdrop.org",
    "livewalletconnect.org",
    "walletvalidation.co",
    "walletsconnection.com",
    "livewalletlinker.org",
    "connectionlivewallet.net",
    "walletrestore.online",
    "walletvalidation.online",
    "airmusk.net",
    "casper.limited",
    "teslagivecrypto.com",
    "crypto-gift.deals",
    "btcpromo.net",
    "muskdep.com",
    "musk-help.com",
    "musk2x.com",
    "emusktop.com",
    "muskshow.com",
    "geckcoin.com",
    "cryptorozi.com",
    "buncebit.com",
    "cryptopye.com",
    "elonevent.org",
    "1ncih.exchange",
    "uniswapnewgiveaway.com",
    "adagift.me",
    "uniswapv2node.online",
    "wallet-syn.com",
    "fantom-foundation.us",
    "badgerfi.us",
    "api-walletconnect.org",
    "wall.prohoster.biz",
    "teslab.us",
    "elonmusk-gives.s3.amazonaws.com",
    "newunigiveaway.com",
    "teslacrypto.top",
    "pancakesswap.com",
    "justswap.us",
    "hiveproject.us",
    "ravenproject.net",
    "bakeryswap.us",
    "daedaluswallet.net",
    "oferonrain.web.app",
    "thegraph.us",
    "nucypher.biz",
    "musk.info",
    "claim-now.me",
    "smartintegration.live",
    "xrp21.net",
    "dodoex.live",
    "ada-cardano.us",
    "xn--unswaep-sfb.com",
    "webwalletsconnect.link",
    "sushifinance.us",
    "wasabbi.eu",
    "walletsconnect.net",
    "uniswaep.com",
    "uniswapnodev1.com",
    "btcfast.vip",
    "getbtc.top",
    "elonmusk-giveaway.s3.amazonaws.com",
    "getbtc.one",
    "konomi.io",
    "app.uniswap.holders-airdrop.com",
    "holders-airdrop.com",
    "panswapcake.com",
    "krakenreward.com",
    "fbc-limited.com",
    "musk-in.com",
    "dsdtokendrops.com",
    "growmybit.com",
    "thesmartintegration.com",
    "stbzmerits.com",
    "curvefi.us",
    "airdrop-holders-uniswap.org",
    "walletconnectlive.com",
    "appmantradao.com",
    "alphafinance.biz",
    "combo-rewards.netlify.app",
    "bixcap.com",
    "apyswap.co",
    "holders-airdrop-uniswap.org",
    "zilliqa.pro",
    "coinbasedonate.net",
    "musk-airdrop.org",
    "tesla3.space",
    "tesla3.team",
    "musk-e-giveaway.live",
    "elon-m-giveaway.live",
    "musk-elon-giveaway.me",
    "gemini-transaction.fun",
    "emusk4.com",
    "elon-clubhouse.live",
    "elon-airdrop.org",
    "giveaway-elon-m.tech",
    "getbtc.gift",
    "elon-cryptodrop.online",
    "elon2x.com",
    "coin2.repl.co",
    "xlmswap.com",
    "elonrewards.online",
    "musk-up.com",
    "musk21.net",
    "chamath.biz",
    "chamathpayment.blogspot.com",
    "chamath-lander1.blogspot.com",
    "chamathpay4.blogspot.com",
    "elon-claim.info",
    "elonmuskcharity.blogspot.com",
    "btcairdropelon.blogspot.com",
    "rpl4.org",
    "stellar.org.il",
    "bitstampreward.com",
    "elons.surge.sh",
    "ethdropnow.blogspot.com",
    "btcdropnow.blogspot.com",
    "elonpayment16.blogspot.com",
    "elonlande-r18.blogspot.com",
    "bchnwallet.org",
    "bchnodewallet.org",
    "elonxp.github.io",
    "waletconect.live",
    "bndrop.org",
    "scapital.biz",
    "uniswapgiveaway.info",
    "newuniswap.com",
    "4link.one",
    "ethlegit.com",
    "fxopel.com",
    "doge21.net",
    "uniswapaddress.com",
    "rocld.com",
    "stellar-airdrop.com",
    "uni-project.org",
    "connectionlivewallets.org",
    "httpsappmycryptocom.slack.com",
    "claim-btc.net",
    "start-gemini.blogspot.com",
    "bitzchanger.com",
    "dot4.top",
    "xn--metamsk-en4c.com",
    "wavebtc.com",
    "eloninvesting.com",
    "dropxtesla.com",
    "elonfundx.com",
    "claimbitcoin.pro",
    "musk-givebtc.s3.eu-west-3.amazonaws.com",
    "coindrop.vip",
    "bluproducts.com",
    "muskbtc.fun",
    "musk-ch.com",
    "coinevent.net",
    "coinevents2021info.depenax769.repl.co",
    "muskbit.club",
    "muskgiveaway2021.blogspot.com",
    "ilogivemus-2021.info",
    "solanabit.com",
    "btcsam.com",
    "btclam.com",
    "walletsconnets.com",
    "coin-event.com",
    "elon-portal.com",
    "ewalletconnect.link",
    "waveslitewallet.org",
    "muskteam.ml",
    "trust-wallets.info",
    "cosmochange.com",
    "elon-musk-medium.com",
    "dodoex.us",
    "elon.so",
    "app.beta-v2-uniswap.org",
    "app-uniswap.blogspot.com",
    "elondonate.com",
    "muskdrop.cc",
    "elonnow.github.io",
    "app.uniswap.airdrop-holders-uniswap.org",
    "restorewalletsio.link",
    "prime-bitgo.com",
    "bitmex-withdrawal-disabled.com",
    "paxful-binary.com",
    "elontesla.me",
    "wallet-validation.com",
    "protocol-airdrop.com",
    "1-icnh.finance",
    "accountviewer.stellar.org.ht",
    "stellar.org.ht",
    "poloniex-ligin-us.com",
    "amtinvestmentsptyltd.com",
    "btc-drop.xyz",
    "app.uniswap.org.io-erc20.work",
    "io-erc20.work",
    "swap-pool.site",
    "bnbget.org",
    "eventbinance.org",
    "app-uniswap.exchange",
    "lotto.fashion",
    "elonmusk.help",
    "uniswapv2.online",
    "ada-lite.us",
    "bitfinexgiveaway.com",
    "1inch-airdrop.live",
    "stellar.org.pl",
    "accountviewer.stellar.org.pl",
    "cardano-foundation.us",
    "adalite.com.cm",
    "zilmerits.com",
    "zildrops.com",
    "takeyourcrypto.info",
    "tesla-musk.com",
    "promo-musk.net",
    "elonhelp.me",
    "elonfundation.com",
    "chamath-gives.site",
    "musk-on.com",
    "chamathsocial.com",
    "ferrum.award-programs.com",
    "app.uniswap.protocol-airdrop.com",
    "elontrust.com",
    "getbitcap.com",
    "eth20staking.org",
    "zapperi.finance",
    "walletconect.info",
    "musk.help",
    "elmusk.org",
    "elonx.club",
    "elon-musk.life",
    "elon2.club",
    "elon-lander4.blogspot.com",
    "elonbtcpayment9.blogspot.com",
    "oneish.xyz",
    "elon-start.com",
    "elonbonus.club",
    "musk-airdrop.net",
    "musk-fund.net",
    "musk-club.com",
    "elonmuskgiveaway.org",
    "thebitcoineraapp.com",
    "btcoin-bank.com",
    "btcoinfuture.com",
    "firstfxoption.com",
    "btcoinrevolution.com",
    "btcoinera.com",
    "greattouchtrade.com",
    "cryptolivetrading.ltd",
    "btcoinevolution.com",
    "bitprofx.com",
    "bitrevolution.info",
    "bitcoin-evolutionpro.com",
    "bitcoinscodepro.com",
    "bitcoineranew.com",
    "exodussupport.com",
    "btcgen.cc",
    "stellar-platform.com",
    "etherairdrop.net",
    "ada-lite.org",
    "dropmuskx.ir",
    "musk4.top",
    "musk-airdrop.com",
    "harvestfinance.co",
    "wallet-validation.online",
    "ada-event.life",
    "cryptorevoltpro.com",
    "the-bitcoin-benefit-pro.com",
    "btcfuture.bitcoinbuyers.online",
    "thebitqtapp.com",
    "the-cryptocode-pro.com",
    "the-dubailifestyle-pro.com",
    "the-bitcoin-rejoin-pro.com",
    "bitcoin-revivalpro.com",
    "bitcoincircuitnow.com",
    "next.btc-trade-app.club",
    "crypto-genisus.com",
    "bitcoincash-grab.com",
    "the-bitcoin-millionaire.com",
    "the-cryptosoft-pro.com",
    "the-ai-stock-profit-pro.com",
    "bitcoin-billionaire-pro.com",
    "the-bitcoin-optimizer-pro.com",
    "the-crypto-nationapp.com",
    "the-crypt-ex-pro.com",
    "the-bitcoin-futureapp.com",
    "the-bitcoin-supreme.com",
    "bitcointrader.ai",
    "the-cryptogenius-pro.com",
    "fxstocktradesoption.com",
    "fxtradingassets.com",
    "cryptotradeassets.com",
    "fxtradeassets.com",
    "crypstrade.co",
    "fnxcrypto.com",
    "indexcryptofx.com",
    "bluewavefxc.online",
    "bitcoin-evolution.co",
    "bitcoin-rush.co",
    "optimumtraders.live",
    "dpitokendrops.com",
    "uniswap-free.com",
    "1inchx.exchange",
    "accounts-binance-log-in.com",
    "uniswapnodev2.com",
    "aave.pw",
    "app.unisswap.com",
    "myetpwallet.000webhostapp.com",
    "wsbcap.com",
    "opexchange24.com",
    "senduniswap.com",
    "cryptogiftsgive.neocities.org",
    "myetherwallet.comat.cc",
    "stellar.org.ag",
    "accountviewer.stellar.org.ag",
    "mail4-stellar.org",
    "metamask.in.net",
    "adalife.io",
    "adallte.io",
    "adailte.io",
    "adalite.pro",
    "adalife.so",
    "adaiite.io",
    "ada-lite.io",
    "adalite.so",
    "adalite.org",
    "yearnson.finance",
    "cuvre.financial",
    "swerve.fo",
    "swerve.fm",
    "swerve.financial",
    "aavee.co",
    "uniswapback.com",
    "app.uniswap.org.adhef.com",
    "uni2021.org",
    "xn--blcokchan-d5a55g.com",
    "2021uni.org",
    "1icnch.exchange",
    "giveawayuniswap.com",
    "exodus-update.com",
    "connectionlivewallet.org",
    "uniswapgiveaway.com",
    "sushiairdrop.net",
    "coinbase.com.auth-value-token-9929929.ru",
    "coinbase.com.secure-account188.ru",
    "secure-account188.ru",
    "auth-token-authentication-value-4782365234.ru",
    "authenticate-coinbase.com",
    "integratewallet.live",
    "synthetix.us",
    "walletsconnect.org",
    "zapperi.fi",
    "walletsconnect.top",
    "walletsconnect.online",
    "appuniswaps.org",
    "metamasck.com",
    "univwaps.com",
    "gemini-gives.com",
    "chamath-social.com",
    "coinrayz.com",
    "xn--ave-sgz.com",
    "receiveuniswap.com",
    "exodus-supports.com",
    "claim-crypto.site",
    "xn--accounts-bnance-epb.com",
    "musk2.top",
    "token-giveaway.com",
    "socialcapital.page",
    "bitmycap.com",
    "binexor.com",
    "musk-prize.com",
    "elon-bonus.org",
    "presearch.token-giveaway.com",
    "vitalikbuterin.io",
    "uniswap-coin.com",
    "gemini-event.blogspot.com",
    "gemini-receive.blogspot.com",
    "undwaple.com",
    "safety-paxful.com",
    "plegal-paxful.com",
    "electrumsoft.live",
    "myetherwallet.comsk.org",
    "gemini-bonus.blogspot.com",
    "winklevoss-brothers-bonus.blogspot.com",
    "winklevoss-brothers-bit.blogspot.com",
    "crypto-elon.net",
    "metamask.io-install.com",
    "walletconnet.life",
    "xmr-qr-code-generator.com",
    "shadebit.com",
    "app.uniswap.info-holders-airdrop.com",
    "info-holders-airdrop.com",
    "xn--mxer-qpa.money",
    "harvestfinance.app",
    "eventvb.com",
    "ethergift.us",
    "myentnherballet.com",
    "geminibonus.us",
    "musk2021.us",
    "ethgift.us",
    "cardanogift.us",
    "eth-airdrop-uniswap.org",
    "btchaze.com",
    "musk-give.us",
    "gemini-lander2.blogspot.com",
    "gemin-payments.blogspot.com",
    "metamaskconnect.net",
    "airdrop-gemini.blogspot.com",
    "paygemini.blogspot.com",
    "lorebtc.com",
    "musk-promo.net",
    "musk-donates.com",
    "elon-landing-prize.blogspot.com",
    "elon-btc-prize.blogspot.com",
    "elon-prize-eth.blogspot.com",
    "xn--walltconnect-eeb.org",
    "gemini-give.com",
    "2fa-verify.com",
    "tron-gassi.com",
    "trust-ebook.com",
    "pros-coinomi.com",
    "winklevoss-airdrop.blogspot.com",
    "gemini-giveaway-btc.blogspot.com",
    "info-tokens-airdrop.com",
    "app.uniswap.info-tokens-airdrop.com",
    "gemimixx.com",
    "airdrops-uniswap.org",
    "ethbtcrelease.com",
    "online.metamaslk.com",
    "solitairenetwork.com",
    "winklevoss-events.blogspot.com",
    "justinsun.ceo",
    "uniswap-aidrop.info",
    "maskpmeta.com",
    "airdrop-official-uniswap.org",
    "exshengee.com",
    "trezor-io.com",
    "airdrop-uniswap.info",
    "uniswapuser.com",
    "securecryptowallet.app",
    "gemini-airdrop.blogspot.com",
    "gemini-pay.blogspot.com",
    "uniswap-ico.com",
    "airdrop-loopring.io",
    "xn--treor-7hb.io",
    "stellar.org.ro",
    "stellar-term.com",
    "to-stellar.org",
    "yeanr.finance",
    "eth-airdrop.io",
    "trezor.xn--wllet-tcc.com",
    "trezor-hardware-wallet.reklama-ads.com",
    "trezor-hardware.reklama-ads.com",
    "claim-airdrop-uniswap.org",
    "www.app.uniswap.org-claim-airdrop.com",
    "app-uniswap.org-v3.site",
    "crryptod3423.blogspot.com",
    "uniswapbalance.com",
    "ethereumgift.us",
    "uniswapshare.com",
    "gemini-gifts-2021.blogspot.com",
    "geminipayments2.blogspot.com",
    "elon-free.fund",
    "stellar.org.mu",
    "accountviewer.stellar.org.mu",
    "login-metamask.io",
    "bitcoinonlinepool.com",
    "etherairdrop.io",
    "integrationwallet.com",
    "xrphere.com",
    "onxswap.online",
    "zilliqa.cf",
    "platform2021.000webhostapp.com",
    "app.v2-uniswap.org",
    "v2-uniswap.org",
    "info-uniswap.org",
    "myapp.fyi",
    "balancerc.exchange",
    "compound.fyi",
    "curve.onl",
    "currve.org",
    "app-aave.org",
    "btcfaze.com",
    "gemini-giveaways2.blogspot.com",
    "g34gerfge33.blogspot.com",
    "meta1yearn2.blogspot.com",
    "geminipayments.blogspot.com",
    "musk2021.org",
    "musk-free.com",
    "tesla-promo.org",
    "musk-crypto.fund",
    "bolancer.exchange",
    "bolancer.info",
    "wave-airdrop.live",
    "connectionlivewallet.io",
    "coingccko.com",
    "jxxll.fun",
    "libertyjaxx.live",
    "branch-trust-wallet.000webhostapp.com",
    "org-appconnect.com",
    "io-update.com",
    "liquidity-pool-uniswap.org",
    "app.liquidity-pool-uniswap.org",
    "gemini-giveaways.blogspot.com",
    "geminipaymewnt.blogspot.com",
    "ledger-updates.com",
    "polkadot-airdrop.live",
    "wallet-connect.net",
    "wallet-connect.org",
    "xn--stellr-mta.com",
    "tokens-airdrop-holders.com",
    "app.uniswap.tokens-airdrop-holders.com",
    "cryptfundz.com",
    "tether-usdt-mixer.com",
    "anonymous-tether-mixer.com",
    "ethereums-mixer.com",
    "ethereum-mixer.com",
    "thetamaintoken.online",
    "swap-uniswap.org",
    "iologin.org",
    "myetherwallet.comim.org",
    "musk-event.org",
    "elon-crypto.fund",
    "bitcupcoins.com",
    "xn--stllar-4ua.com",
    "mailsrv-stellar.com",
    "xn--stllar-cva.com",
    "ripple.com.lv",
    "in-ripple.com",
    "s3-stellar.org",
    "mybc-funds.tumblr.com",
    "mybt.ga",
    "mybi.ga",
    "uniswaphold.com",
    "elon-found.tumblr.com",
    "coix.ga",
    "paytopayethx.tumblr.com",
    "paytopaybtcx.tumblr.com",
    "bancora.network",
    "uniswap-crypto.com",
    "uniswap-defi.com",
    "uniswapairdrop.org",
    "updateuniswap.com",
    "muskdrop.life",
    "bitcoinfocus.xyz",
    "epaymentbtc.tumblr.com",
    "epaymenteth.tumblr.com",
    "christmasbit.tumblr.com",
    "bitn.ga",
    "elonreward.info",
    "login-account.app",
    "nexusmutual.org",
    "yearnapp.finance",
    "crypto-com.app",
    "ethgives.com",
    "aaveapp.net",
    "kyberapp.network",
    "sushiswapclassic.app",
    "maskmexa.com",
    "metemask.io",
    "maskmeia.xyz",
    "metmask.com",
    "uniswapps.com",
    "ethgive.org",
    "elongive.us",
    "uniiswaap.org",
    "cardano2021.us",
    "newledgerweb.com",
    "uniswapupdate.com",
    "live-tesla.com",
    "elon.fund",
    "ledger-chain.co.uk",
    "1inch.dev",
    "uniswapsite.com",
    "metamask-online-io.com",
    "maskmetaa.io",
    "mooniswap.app",
    "1inch-exchange.com",
    "fundmusk.com",
    "binan.in",
    "binancetwitter.com",
    "extensionsmeta.com",
    "live-spacex.com",
    "metamaskweb.com",
    "1inch.app",
    "maskmeta.me",
    "maskmeta.org",
    "metamaskwallet.net",
    "maskmera.io",
    "installmetamask.org",
    "maskmeta.net",
    "maskmeta.biz",
    "slolzfr.com",
    "xrp.limited",
    "ripple.promo",
    "bittque.com",
    "letmecrypto.com",
    "xn--lectrum-s8a.org",
    "coingecko.pro",
    "orc-get-access.com",
    "uniswap.orc-get-access.com",
    "metamsk.io",
    "chrome-extension.icu",
    "binance2021.com",
    "s1-ripple.com",
    "ripple.com.so",
    "muskx.online",
    "metamask.online",
    "mark-direct.com",
    "trust-myfood.com",
    "enjin-books.com",
    "brigadtechnic.com",
    "secure-beta.com",
    "blockchainsupport.network",
    "give-crypto.s3-us-west-2.amazonaws.com",
    "myeterhwallet.com",
    "etheruniswap.com",
    "uniswap-bonus.com",
    "247cryptotrade.online",
    "metamaskapp.com",
    "walletconnect.info",
    "install-metamask-io.com",
    "metamaskstart-io.com",
    "astallmetamask.com",
    "maskmeta.xyz",
    "ripple-labs.dev",
    "winklevoss-gemini.com",
    "xrp2021.net",
    "ethuniswap.com",
    "sushiswapcoin.com",
    "ledgerlive.io",
    "ripple2021.com",
    "register-ripple.com",
    "stellarwallet.org",
    "stellarwallet.net",
    "stellarwallet.in",
    "xn--stelar-zcb.org",
    "claimxlm.com",
    "xn--stelar-ycb.org",
    "btcprominer.life",
    "marketplace-axieinfinity.com",
    "blog-ripple.com",
    "xn--stellr-7za.org",
    "stellarclaim.org",
    "unidrop.pro",
    "fund-gemini.net",
    "xn--rpple-cta.com",
    "unipromo.app",
    "installmetamask.com",
    "kayarugs.com",
    "metamask.is",
    "charles-hoskinson.live",
    "uniswapdrop.finance",
    "uniswap-airdrop.io",
    "88mph.app.defi-universe.vip",
    "axieinfinity.com.aave.defi-universe.vip",
    "aaveapp.com",
    "ripple-xrp.live",
    "dropbinance.exchange",
    "bithomp.work",
    "ripplebonus.us",
    "litecoin-event.net",
    "btcminerapp.com",
    "thebigdeal.clickfunnels.com",
    "easyripple.claims",
    "xrp-fund.live",
    "coinbaseeth.org",
    "geminisspaymentsd.blogspot.com",
    "eosauthority.link",
    "zillet.net",
    "cosmostation.network",
    "wallet.cosmostation.network",
    "ripple-spark.info",
    "installmeta.com",
    "maskmeha.io",
    "chainlink.click",
    "uni-redirects.blogspot.com",
    "afin-app.com",
    "mymonero.co",
    "wallet.mymonero.co",
    "coinarbitrade.com",
    "bitcointrader.trckoffers.xyz",
    "ripple-xrp.me",
    "accountts-binance.com",
    "xn--lgder-6za.com",
    "ledger-live.io",
    "chrome-extension.info",
    "takebtc.net",
    "bitcoin-revolution2.cashvolume.monster",
    "btc-gemini.live",
    "verifyaccounts.io",
    "paypal-btc.com",
    "claim-airdrop-uniswap-v2.info",
    "app.uniswap.claim-airdrop-uniswap-v2.info",
    "login-blocklnain.top",
    "uniswaps.app",
    "metamaskwallet.online",
    "makerdao-info.com",
    "yfiget.org",
    "paypalbtc.org",
    "ufibit.com",
    "udrop.finance",
    "xrp-reward.org",
    "gemini.social",
    "unigive.net",
    "ether-give.ceo",
    "unipromotion.net",
    "woodfund.info",
    "celiswap.com",
    "ledgerweb.digital",
    "litecoingiveaway-live.com",
    "yfiairdrop.com",
    "eth66.blogspot.com",
    "bitfuryltd.com",
    "bitfurygroupltd.com",
    "ethpos.org",
    "geminigift.org",
    "bitcoin-revolution.2020-order.monster",
    "bitcoin-revolution.inestovo2020.xyz",
    "bitcoin-revolution.onyxtrade.monster",
    "exodus.casa",
    "tesla-btc.info",
    "musk-giving.com",
    "coinbase2x.online",
    "uni-token.com",
    "xeth2.github.io",
    "stellar.org.ma",
    "accountviewer.stellar.org.ma",
    "specialgift122.blogspot.com",
    "browsermask.org",
    "profit-booster.xyz",
    "crypto-gives.s3.us-east-2.amazonaws.com",
    "onkbit.com",
    "ripple.com.pt",
    "coinbase-payments.blogspot.com",
    "plckle.finance",
    "picklee.finance",
    "tokenpocket-pro.web.app",
    "metabrowser.org",
    "coinzor.com",
    "walletexodus.com",
    "coinvoz.com",
    "coinroz.com",
    "wozbit.com",
    "yearn-finance-gift.medium.com",
    "yearnyfi.blogspot.com",
    "claimocean.com",
    "maticwallet.network",
    "2eth.site",
    "yflinkreward.com",
    "polkadot-airdrop.info",
    "eth-but.top",
    "ethbuterin.top",
    "ether-best.top",
    "ether-love.top",
    "ethx-buterinx.top",
    "elonmuskxpro.com",
    "claimuni.com",
    "x2crypts.com",
    "ltcminer.com",
    "metaswap.dev",
    "eth-found.live",
    "uniswap.bid",
    "app.uniswap.bid",
    "curve.run",
    "moz-extension.link",
    "app.uniswap.ws",
    "uniswap.ws",
    "dropmusk.in",
    "chrome-extension.link",
    "money-tesla.com",
    "airdrop-uniswap.com",
    "metamas.io",
    "oceanairdrop.info",
    "eth-generator.com",
    "tether-tumbler.com",
    "uni-promo.net",
    "stellar-info.org",
    "stake-ethereum.org",
    "eth67.blogspot.com",
    "airdrop-ocean.com",
    "musk-coins.com",
    "muskprize.fun",
    "getmusk.fun",
    "spacexlive.top",
    "elonbtcx.com",
    "chain-ledger.info",
    "ledger-chain.live",
    "xn--ledgr-251b.com",
    "xn--rpple-n4a.net",
    "claim-ripple.com",
    "metamask.org-swap.app",
    "org-swap.app",
    "airdropocean.com",
    "ocean-airdrop.com",
    "bestcheinge.com",
    "lbestchenge.com",
    "uni-airdrop.info",
    "zillet.info",
    "uniswapairdrop.info",
    "uniswapofficial.com",
    "bitcoins-gift.blogspot.com",
    "eth-gift.blogspot.com",
    "metamask.bonus-erc20-token.info",
    "dice2win.co",
    "bonus-erc20-token.info",
    "yrean.finance",
    "live.ledgerorigin.com",
    "ledgerorigin.com",
    "ledger.com-client.email",
    "xn--ledgr-q51b.com",
    "keepkey.app",
    "ethgiveaways.me",
    "ethx2.io",
    "ledger.report",
    "ledger.buzz",
    "us-ledger.com",
    "usa-ledger.com",
    "ledger.us.org",
    "ledger.uk.com",
    "ledger.deals",
    "de-ledger.com",
    "fr-ledger.com",
    "it-ledger.com",
    "au-ledger.com",
    "nl-ledger.com",
    "ledger.org.pl",
    "ledgersupport.pro",
    "ledgersupport.online",
    "ledgerconnect.stream",
    "ledger-chain.info",
    "connectledger.live",
    "ledgir.xyz",
    "lebqer.xyz",
    "ledger.cam",
    "xn--edger-55a.com",
    "xn--ldgr-vvac.com",
    "xn--ldgr-lu5ac.com",
    "xn--ldger-6za.com",
    "xn--ledge-9bb.com",
    "xn--ledge-xbb.com",
    "uniairdrop.org",
    "ledger.media",
    "xn--ldger-n51b.com",
    "eth2020.top",
    "xripplex.tumblr.com",
    "btc-gift.blogspot.com",
    "cryptovitalik.s3-us-west-1.amazonaws.com",
    "rewards-tokens-airdrop.info",
    "sellcrypto.top",
    "eth.ug",
    "oldmyetherwallet.com",
    "gift-eth.info",
    "ripple.ug",
    "legder.com",
    "buterin.s3.eu-west-2.amazonaws.com",
    "giveawaysushi.com",
    "login.blockhaln.com",
    "blockhaln.com",
    "wallets-tlx-blockchain.com",
    "paradefi.network",
    "get30bnb.live",
    "pdfescape.su",
    "uniswap.org.claim-tokens-airdrop.info",
    "claim-tokens-airdrop.info",
    "aavelend.com",
    "aave-defi.com",
    "app.trieaharderewa.com",
    "bitcoinnow.bid",
    "sushiswapclasslc.org",
    "xn--bstchange-03a.net",
    "bithau.com",
    "elongift.s3.eu-west-2.amazonaws.com",
    "bitnau.com",
    "unigiv.com",
    "trustwallettoken.io",
    "metamaskwallet.io",
    "xrp-giveaway.blogspot.com",
    "uniswap.ug",
    "accountviewer.stellar.org.bi",
    "stellar.org.bi",
    "dexuniswap.org",
    "ethereum.ug",
    "uniswap-paper.s3.eu-west-3.amazonaws.com",
    "ethereumdownloads.com",
    "get-geth.org",
    "get-geth.com",
    "winnerscrypto.live",
    "uni-fund.info",
    "ripplebonus.net",
    "dexairdrop-binance.com",
    "btccham.info",
    "geminixfund.info",
    "geminidrop.fund",
    "ripplegift.ceo",
    "ada-give.info",
    "yearm.finance",
    "stellar.org.ng",
    "sushiback.com",
    "ripple.supply",
    "zillet.org",
    "chico-ethers.com",
    "login-metamask.com",
    "eventuniswap.com",
    "xrpceo.com",
    "vechainevent.com",
    "freeuniswap.com",
    "10000ethgiveaway.com",
    "bipcalculator.io",
    "uniswap-claim.com",
    "get-stellar.com",
    "zilliqa-live.org",
    "ryebit.com",
    "unigiveaway.net",
    "stellar.org.in",
    "accountviewer.stellar.org.in",
    "info-binance.us",
    "myus-app.com",
    "unigiveaway.org",
    "metamask.site",
    "trustwallet.in",
    "etherscan.member.event.monesrg.com",
    "monesrg.com",
    "musk-elon.co",
    "air-drop.us",
    "pyebit.com",
    "eth-fond.info",
    "ethget.us",
    "syebit.com",
    "unigiveaway.com",
    "accountviewer.stellar.org.za",
    "stellar.org.za",
    "uni-drop.org",
    "un2app.com",
    "fund-vechain.com",
    "chico-eth.com",
    "cryptogenscript.com",
    "officialvbuterin.com",
    "spacexfoundation.com",
    "airdropsushi.com",
    "vifbit.com",
    "zifbit.com",
    "rifbit.com",
    "sushigiveaway.com",
    "omg-airdrop.io",
    "muskbtcx.top",
    "binance-defi.net",
    "binance-smart.com",
    "unidrop.org",
    "polkawallets.site",
    "tradeintel.biz",
    "sushi-gifts.blogspot.com",
    "vbeth.com",
    "uniairdrop.com",
    "futures-binance.co",
    "uni-giveaway.blogspot.com",
    "genscripteth.go.yo.fr",
    "diubit.com",
    "teslamining.ltd",
    "riubit.com",
    "but-send.top",
    "eth-news.com",
    "swerve-finance.com",
    "czbinance.co",
    "crypto2xpool.com",
    "sushiswap.blogspot.com",
    "binance-medium.com",
    "ripplebonus.events",
    "xrp.ceo",
    "garlinghouse.ceo",
    "sushi-giveaway.blogspot.com",
    "yfi-airdrops.blogspot.com",
    "ethvv.com",
    "ethef.com",
    "ethez.com",
    "ethtd.com",
    "ethdf.com",
    "vitalik.io",
    "ethkd.com",
    "ethoy.com",
    "ethiy.com",
    "ethfc.com",
    "ethff.com",
    "cryptonil.ltd",
    "ledger.com.de",
    "rewards-coin.000webhostapp.com",
    "renairdrop.com",
    "uniswapnode.com",
    "app.uniswapnode.com",
    "drop-eth.org",
    "jdax.market",
    "supportbnb.com",
    "bin-crypto.com",
    "exiodus.com",
    "binancefound.com",
    "l1nch.exchange",
    "exoduz.io",
    "exodus.sg",
    "exodus.cm",
    "atomicwllet.io",
    "omisegoairdrop.info",
    "siubit.com",
    "linkcoinbonus.com",
    "link-token.com",
    "goairdrop.fun",
    "goairdrop.pro",
    "eth-link.site",
    "airdrop-linkchain.site",
    "airdropwallet.pro",
    "airdropwallet.site",
    "airdrop-linkchain.pro",
    "tokenlink.info",
    "trezor.com.se",
    "restore-ledger.org",
    "restore-ledgerwallet.org",
    "wallet.restore-ledger.org",
    "binance.oktaplatform.com",
    "trustswap-rewards-programs-claims-tokens.com",
    "freebitcoinmining.website",
    "omgnetwork.info",
    "atomicweb.network",
    "wallet.atomicweb.network",
    "ethfo.com",
    "tether-mixer.com",
    "ethereum-giveaway.network",
    "chainlinksgiveaways.blogspot.com",
    "stellarpay.org",
    "ethbv.com",
    "officialvitalik.com",
    "chainlink-giveaway.blogspot.com",
    "vitalikb.top",
    "vitalikbb.top",
    "app.xn--unswp-6qa5f.com",
    "xn--unswp-6qa5f.com",
    "app.xn--uniswp-0ta.com",
    "xn--uniswp-0ta.com",
    "app.xn--nswap-0ua70b.com",
    "xn--nswap-0ua70b.com",
    "morphtoken.co",
    "libraglobalcoin.io",
    "elon2.top",
    "litecoinminer.space",
    "dogecoinminer.space",
    "ethereumminer.space",
    "bchminer.space",
    "dashcoinminer.space",
    "btcminer.website",
    "tozbit.com",
    "stellar.org.lv",
    "tesla3-bonus.com",
    "defi-universe.vip",
    "marketplace.axieinfinity.com.inventoryclaim.defi-universe.vip",
    "brad-gift.com",
    "coinaxel.com",
    "eth-drop.club",
    "uniswap-exchange.com",
    "app.uniswap-exchange.com",
    "uniswap-exchange.eu",
    "app.uniswap-exchange.eu",
    "appunjswap.org",
    "appuniswop.link",
    "ethoff.org",
    "fulcrum.nu",
    "eth.fulcrum.nu",
    "eth-giveaway.top",
    "vit-ethx.top",
    "eth-vitya.top",
    "airdrop-bit.top",
    "cryptogifts.s3.amazonaws.com",
    "xrp-event.com",
    "cryptogifts.s3.us-east-2.amazonaws.com",
    "xrp-funds.com",
    "omisego-giveaway.blogspot.com",
    "omg-giveaway.blogspot.com",
    "uniswap-x.com",
    "app.uniswap-x.com",
    "stellar.org.im",
    "accountviewer.stellar.org.im",
    "cdn-stellar.org",
    "go-stellar.org",
    "steliar.org",
    "stellar.org.sb",
    "excodus.cf",
    "exodus.cf",
    "electrumy.org",
    "app.unjswap.org",
    "unjswap.org",
    "uniswap-org.com",
    "app.uniswap-org.com",
    "xn--niswap-hq8b.com",
    "app.xn--niswap-hq8b.com",
    "ethevent.top",
    "crypto-safe.ltd",
    "elonhelp.in",
    "xrp.ltda",
    "bovbit.com",
    "zelbit.exchange",
    "tevbit.com",
    "tocbit.com",
    "chipmixer.app",
    "app.unlswap.org",
    "unlswap.org",
    "coinbitmex.com",
    "buterin-gold.xyz",
    "etherh-vitalik.top",
    "check-ledger.com",
    "moonswap.exchange",
    "xn--uniswp-mta.com",
    "app.xn--uniswp-mta.com",
    "org-connect-wallet.com",
    "bizstar.icu",
    "atomicwallet.website",
    "cryptoiqoptions.com",
    "fxpectcrypt.com",
    "tradergrove.space",
    "house-article.space",
    "greece-platform.space",
    "musk-send.top",
    "btctesla.org",
    "muskgive.top",
    "space-elon.site",
    "cutve.finance",
    "appuniswop.org",
    "appuniswop.site",
    "unswap.site",
    "btcsystem-web-app.com",
    "hederabit.com",
    "nivbit.com",
    "kavbit.com",
    "jocbit.com",
    "mivbit.com",
    "xn--pxfull-pta.com",
    "trustwalletapp-erc-20-tokens.000webhostapp.com",
    "starlinkbtc.com",
    "starlinketh.com",
    "xn--bitmai-nt7b.com",
    "giveaway.is",
    "2ethereum.org",
    "spacex-eth.biz",
    "spacexethereum.net",
    "xn--niswap-oya.com",
    "metask.website",
    "wallet.metask.website",
    "spacex.click",
    "tesla-musk.net",
    "uniswapp.site",
    "altexchenge.com",
    "mycosmospay.com",
    "exoddus.net",
    "uniswap.net",
    "uniswap.eu",
    "muskto.fun",
    "musktop.pw",
    "muskevent.org",
    "huobl.ru",
    "uniswap.site",
    "metamask.eu",
    "app.xn--unswap-4va.com",
    "xn--unswap-4va.com",
    "appuniswap.live",
    "xn--unswap-xk8b.com",
    "app.xn--unswap-xk8b.com",
    "elonmuskevent.com",
    "elonmusk.network",
    "bitcoincomputos.com",
    "dshop.originprotocol.cordpidgeon.com",
    "bitfurytrade.com",
    "bitfuryweb.com",
    "bitfuryinvest.co",
    "xn--unswap-q9a.com",
    "bestchamge.ru",
    "chamathcapital.com",
    "cardano-page.org",
    "neo-live.org",
    "elonmusk.capital",
    "chamath.fund",
    "vet.capital",
    "giveeth.com",
    "appuniswap.com",
    "uniswapdex.org",
    "ethereumupdate.info",
    "ethereumofficial.org",
    "social-capital.us",
    "ethereum.ltda",
    "accountviewer.stellar.org.so",
    "stellar.org.so",
    "giveaway-eth-trustwallets.000webhostapp.com",
    "app-trustwallet.erc20-airdrop.icu",
    "erc20-airdrop.icu",
    "assets-index-files.xyz",
    "app-trustwallet.rewards-erc20-airdrop.site",
    "rewards-erc20-airdrop.site",
    "trustwallet.erc20-airdrop.icu",
    "lk.million.money.erc20-airdrop.icu",
    "maezawa-bonus.com",
    "gomusk.fun",
    "spacex.market",
    "elondrops.com",
    "elonpromo.org",
    "johnpromo.com",
    "tesla-bitcoin.info",
    "binance.rewards-programs.org",
    "rewards-programs.org",
    "lcoinbase.com",
    "etherscan.io.rewards-user-info.com",
    "zedxe.com.rewards-user-info.com",
    "rewards-user-info.com",
    "multiminer.website",
    "landcoinlnc.com",
    "appuniswop.com",
    "unisvvap.org",
    "app.unisvvap.org",
    "uniswapv1v2.org",
    "giveawayairdrop-eth.ga",
    "secretmethodsnow.com",
    "airdropbat.com",
    "muskx.co",
    "daxxcoins.com",
    "eth-event.biz",
    "blockdrops.info",
    "elon-blog.com",
    "bonus-tesla.com",
    "bitminers.store",
    "unionfinance.org",
    "exoduss.org",
    "excodus.io",
    "exsodus.io",
    "elcastrum.com",
    "basbit.com",
    "digiminer.io",
    "batairdrop.net",
    "makerdaoweb.org",
    "vitalik.top",
    "ether-promo-participate-now.com",
    "ether-promo.com",
    "bafbit.com",
    "frezor.us",
    "gemini-btc.news",
    "avaxsales.net",
    "cryptominer.tel",
    "bitcryptomania.com",
    "fundusdt.com",
    "v4-antpool.com",
    "airdrop2020.com",
    "wozbtcfunds-joinpromotion.com",
    "btcxevent.com",
    "cryptoforhealth.com",
    "xn--binnce-kta.com",
    "xn--blnnce-dd8b.com",
    "node.uniswapv1v2.app",
    "uniswapv1v2.app",
    "uniswapexchange.online",
    "xmr-wallet.com",
    "uniswop.shop",
    "tronairdrop.com",
    "stellar-limited.com",
    "verify.paxfulsupport.online",
    "paxfulsupport.online",
    "im-creator.com",
    "bitcoinmonth-top.info",
    "smartcontractbiz.com",
    "link-drop.net",
    "login.xn--blockchin-h2a.com",
    "xn--blockchin-h2a.com",
    "login.xn--blockcha-91a41g.com",
    "xn--blockcha-91a41g.com",
    "billgatesbtc.com",
    "claimbsv.to",
    "xn--bockchain-0e5h.com",
    "login.xn--bockchain-0e5h.com",
    "tesla3.gifts",
    "musk-gifts.com",
    "muskpromotion.com",
    "musk-coin.com",
    "cardanoevent.org",
    "event-eth.com",
    "adafund.pro",
    "event-ada.info",
    "cardano-info.us",
    "ethfundx.info",
    "eth-free.com",
    "brainpromo.info",
    "joerogan.fund",
    "binancefund.org",
    "brock-btc.com",
    "cardano-ada.info",
    "ethxevent-participate.com",
    "ethuman.com",
    "kanyebtc.org",
    "ethermoneymachine.com",
    "air-ether.top",
    "trezor.li",
    "xn--rezor-6db.com",
    "drop-eth.info",
    "coin-free-exchange.cf",
    "ripple.com.vc",
    "ethfree.info",
    "stellar.org.vc",
    "accountviewer.stellar.org.vc",
    "eth-info.org",
    "ada-event.info",
    "cardanoevent.com",
    "cardanofund.info",
    "adafund.net",
    "spacex-5000btc.com",
    "fundgemini.com",
    "ethfoundation.info",
    "uniswapv3.org",
    "uniswop.exchange",
    "event-eth.info",
    "fundsretrieve.com",
    "bat-airdrop.com",
    "cryptotabhack.com",
    "freebitgenerator.com",
    "tron-project.com",
    "wwwguarda.co",
    "wwwthetatoken.org",
    "hetatoken.org",
    "thetatoken.cn",
    "tetatoken.org",
    "lumiwalle.com",
    "luiwallet.com",
    "lumiwalet.com",
    "umiwallet.com",
    "lumiwallt.com",
    "lumiwallet.net",
    "lumwallet.com",
    "wwwcoinfy.com",
    "wwwlumiwallet.com",
    "lumiwllet.com",
    "thetaoken.org",
    "thetatken.org",
    "thetatoen.org",
    "thetatokn.org",
    "wwwwhitecoin.info",
    "lmiwallet.com",
    "theatoken.org",
    "thetatoke.org",
    "thtatoken.org",
    "stock-index.space",
    "finmaxbo.com",
    "tesla-give.com",
    "tesla-cryptos.com",
    "cryptos-mask.com",
    "crypto-event.com",
    "geminilive.org",
    "proether-fundsrelease-participate.com",
    "ethmarket.info",
    "geminibtc.net",
    "gemini-btc.io",
    "eth-info.com",
    "ethdropx.info",
    "bezos-amazon.top",
    "mrbeastbtc.info",
    "ethereumnews.pw",
    "jack-btc.net",
    "muskspacex.org",
    "pool.balancer.dev",
    "balancer.dev",
    "bitcoinsearchengines.store",
    "avaxweb.typeform.com",
    "elonx.co",
    "notall.eshost.com.ar",
    "notallwallet.ml",
    "bavbit.com",
    "tesla-bonus.com",
    "trez0r.com",
    "activdarto.com",
    "bit-airdrop.club",
    "compoundnode.dev",
    "lumiwalletapp.com",
    "dashwalletapp.com",
    "metamask.ltd",
    "evercoinapp.com",
    "samoraiwalletapp.com",
    "bitpieapp.com",
    "bluewalletapp.com",
    "tokenpocketapp.com",
    "paytomatwallet.com",
    "pumapayapp.com",
    "blockchainapp.ltd",
    "jaxx.ltd",
    "greenapp.ltd",
    "exodusapp.ltd",
    "coboapp.ltd",
    "atomicapp.ltd",
    "etorowalletapp.com",
    "ripplewalletapps.com",
    "crypteriumwalletapp.com",
    "trezorapp.com",
    "mewapp.ltd",
    "vladlad.com",
    "dexapis.xyz",
    "arbitragecrypto.org",
    "theapi.pro",
    "elonevent.site",
    "trustapp.ltd",
    "myrthervvellanti.com",
    "guadra.com",
    "giveaway-bit.xyz",
    "crypto-trust.co",
    "dao-migrate.com",
    "wintesla.net",
    "0101.systems",
    "bitcoinblack.cash",
    "xn--rippl-8ra.com",
    "blogstellar.org",
    "claimstellar.com",
    "xn--accountvewer-stellar-pbd.com",
    "xn--troscan-mkb.org",
    "xn--tellar-2ib.org",
    "xn--stelar-5db.com",
    "getxlm.org",
    "xn--stelar-6db.org",
    "accountviewer.xn--stelar-6db.org",
    "getripple.org",
    "xn--stllar-cpc.com",
    "xn--stllar-q3a.com",
    "xrp-community.com",
    "bithomb.com",
    "xn--bithmp-6wb.com",
    "growbitcoin.co.uk",
    "get2xcoin.com",
    "bkexcapital.com",
    "oldetherwallet.com",
    "mydashwallets.com",
    "myakawallet.com",
    "musicoinwallet.com",
    "expwallet.net",
    "dbix.link",
    "myubiqwallet.com",
    "clowallet.network",
    "myrthesrvvelltni.com",
    "linkcoinairdrop.com",
    "batairdrop.com",
    "team-blockchain.info",
    "avubit.com",
    "fulcrum.plus",
    "eth.fulcrum.plus",
    "usdc.fulcrum.plus",
    "dai.usdc.fulcrum.plus",
    "xn--ripp-yva1x.com",
    "ripple.com.bz",
    "chainlinktoken.info",
    "node-binancedex.online",
    "hexnode.online",
    "uniswapv2v1.org",
    "paxfulc.com",
    "paxful-verified.com",
    "paxfuloffers.com",
    "tronscan.me",
    "tronscan.in",
    "xn--tronsan-65a.com",
    "oauth-deriv-binary.website",
    "paxful-com-login.oauth-deriv-binary.website",
    "electrume.org",
    "fulcrum.codes",
    "xn--blocchan-cib7h.com",
    "coinbiz.me",
    "fulcrum.repair",
    "uniswap.services",
    "max-maicoin-bonusbtc.000webhostapp.com",
    "fxoption27.com",
    "lcon.foundation",
    "wallet.fantom.link",
    "fantom.link",
    "coinphant.com",
    "thetatoken.link",
    "iconfoundation.online",
    "dropelon.co",
    "btc-event.org",
    "btcmixer.tech",
    "muskevent.net",
    "muskxdrop.info",
    "musk-give.online",
    "zilliqawallet.online",
    "blockchain-auto-btc.ru",
    "wallet.trxlive.network",
    "trxlive.network",
    "foundatlon.com",
    "exodlus.io",
    "litecoln.org",
    "bitcolncore.org",
    "exodusupdate.com",
    "shrembtc.com",
    "alanbtc.com",
    "josephbtc.com",
    "fordbtc.org",
    "bransonbtc.com",
    "bloombergbtc.net",
    "exodus.com.swtest.ru",
    "elonmuskdrop.com",
    "muskbtc.us",
    "metmaask.io",
    "sonyxbtc.net",
    "nicelhash.com",
    "monnero.org",
    "guimlner.org",
    "bilinance.org",
    "nicerhash.com",
    "nlcehash.ru",
    "wozniakdrop.com",
    "tinkoffbtc.info",
    "durovairdrop.com",
    "cookbtc.com",
    "pewdiepiebtc.com",
    "etherairdrop.com",
    "panteradrop.com",
    "spacexdropx.com",
    "spacexbtcdrop.com",
    "billgatesfund.com",
    "litecoin-tumbler.com",
    "hurtrade.com",
    "hubcoi.com",
    "fixxcoin.com",
    "muskfreebtc.com",
    "ethereum-tumbler.com",
    "muskreward.com",
    "elongives.fun",
    "gaintesla.com",
    "trustwallet.claim-giveaway-airdrop.site",
    "claim-giveaway-airdrop.site",
    "airdrop-giveaway.xyz",
    "ps-btc.info",
    "xn--blockchin-c2d.com",
    "xn--blockchn-1od4993e.com",
    "xn--blocchan-g49cv1d.com",
    "investbinance.com",
    "myfusionwallet.net",
    "btcdouble2x.site",
    "coinanytime.com",
    "portal.node-binance.dev",
    "node-binance.dev",
    "portal.synthetix.dev",
    "synthetix.dev",
    "portal.hex-node.network",
    "hex-node.network",
    "portal.uniswap.dev",
    "uniswap.dev",
    "portal.curvefinance.network",
    "curvefinance.network",
    "portal.fulcrum.network",
    "fulcrum.network",
    "uniswap-exchange.repair",
    "teslagain.com",
    "zrxairdrop.com",
    "leddger.io",
    "quickbtcminer.com",
    "teslax.in",
    "app.fulcrum.repair",
    "jaxxx.io",
    "zilllet.io",
    "moonllet.io",
    "app.moonllet.io",
    "profittesla.com",
    "teslapayout.com",
    "givetesla.com",
    "teslax.live",
    "ainbit.com",
    "spacexbtc.net",
    "makerdao.redeem.bz",
    "redeem.bz",
    "sai.redeem.bz",
    "btconline.io",
    "xrpcontest.tumblr.com",
    "fovbit.com",
    "atomic.im",
    "exodus.vc",
    "paxful-ns.com",
    "paxful-sl.com",
    "my-paxful.com",
    "paxful-verifier.com",
    "paxful-fra.com",
    "bitoprowallet.000webhostapp.com",
    "ftx-com-exchange-cryptocurrency.000webhostapp.com",
    "pionex-com-exchange-giveaway.000webhostapp.com",
    "paxfulsecured.com",
    "cryptoxluck.com",
    "kucoin-info.live",
    "elon.gifts",
    "simpleswap.org",
    "getbtcx.com",
    "makerdao.redeem.fund",
    "sai.redeem.fund",
    "redeem.fund",
    "librasale.io",
    "hovbit.com",
    "officiallibracoin.com",
    "musk-event.online",
    "musk-event.tech",
    "musk-event.space",
    "teslaearn.com",
    "zalbit.com",
    "elonx.org",
    "folbit.com",
    "omisego.info",
    "muetherwallet.co",
    "btcshower.com",
    "lk.forsage.io.giveaway-token-member.com",
    "giveaway-token-member.com",
    "accountviewer.xn-stella-gib.org",
    "xn-stella-gib.org",
    "bestchanqe.ru",
    "miningbase.cloud",
    "accountviewer-stellar.com",
    "ledgerslive.web.app",
    "ledgerlivewallet.000webhostapp.com",
    "teamspacex.info",
    "tslamusk.me",
    "roberteth.com",
    "chambtc.org",
    "tslabtc.me",
    "brinbtc.net",
    "winkbtc.com",
    "brinbtc.org",
    "xrp.claims",
    "get-xrp-now.online",
    "xrp20.org",
    "barrybtc.org",
    "shrembtc.org",
    "takexrp.live",
    "xrpdrop.me",
    "xrp.work",
    "xrp.bio",
    "xrp20.com",
    "jackmabtc.com",
    "wozniak.group",
    "robertki.org",
    "gates.promo",
    "topxrp.com",
    "xrpclaim.org",
    "awayxrp.org",
    "xrptop.com",
    "xrptake.live",
    "2020xrp.org",
    "claimxrp.org",
    "20xrp.tech",
    "giveawayseptember.com",
    "receivexrp.com",
    "xrpx10.org",
    "xrpaway.org",
    "geteth.live",
    "2020xrp.net",
    "claimxrp.net",
    "awayxrp.net",
    "myxrp.org",
    "ripple.re",
    "dave-btc.info",
    "stevebtc.org",
    "cham-btc.info",
    "pantera.ltd",
    "xiaomibtc.com",
    "found-bin.com",
    "walletgenerator.net",
    "max-maicoin-claimbonusbtc.000webhostapp.com",
    "lokbit.com",
    "vaubit.com",
    "bitcoinpaperwallet.com",
    "profitmusk.com",
    "elonsave.com",
    "tony-btc.info",
    "dentacoins.com",
    "laubit.com",
    "binancechange.com",
    "royal-crypto.cc",
    "muskprofit.com",
    "etherscanner.ml",
    "wozdrop.me",
    "yaubit.com",
    "halfbit.cc",
    "bitcoinbonuswallet.com",
    "bytombit.com",
    "tesla.bz",
    "myetherwallet-inc.com",
    "etcwallet.net",
    "mastercoin.top",
    "ledgerwallet.xyz",
    "claim-token-erc20-rewards-program.com",
    "metamaks.io",
    "metadb.online",
    "mycrypto.ml",
    "myetherwallet.keynasty.com",
    "wallets.company",
    "myetherwallet-erc20token.weebly.com",
    "bitgen.pro",
    "metarnask.io",
    "giveaway.revproject.site",
    "elonmusk.financial",
    "ethereum-promo.site",
    "spacexcash.com",
    "bestchange.run",
    "applegive.club",
    "mycrypto.ga",
    "recovermycoins.com",
    "meta-mask.io",
    "faobit.com",
    "teslapromo.org",
    "xlmget.org",
    "metmamask.com",
    "metamask.info",
    "metamosk.info",
    "metamosk.com",
    "paubit.com",
    "spacexgives.com",
    "ethereumfond.com",
    "app.fulcrum.link",
    "fulcrum.link",
    "ethdrop.news",
    "maker.dao.migrate.claims",
    "migrate.claims",
    "promomusk.me",
    "myehterwaltet.com",
    "spacex.sale",
    "piutrade.com",
    "mytiethervveallet.com",
    "gmsstatistics.com",
    "yolbit.com",
    "rewards-holders-erc20-tokens.com",
    "taas.fund.rewards-holders-erc20-tokens.com",
    "spacexgiveaway.com",
    "ethdrop.org",
    "prethbonus.com",
    "ethpromo.news",
    "proethevent.com",
    "bezosxbt.com",
    "erc-20.online",
    "ethevent.us",
    "ethgift.com",
    "teslagives.com",
    "spacex.bz",
    "rewards-program-erc-20-token.com",
    "glybit.com",
    "aprilcontest.tumblr.com",
    "bezos.xyz",
    "xn--trstwallet-odb.com",
    "10xbitcoin.net.deepprofitstreams.com",
    "elonlive.org",
    "promocoinbase.xyz",
    "myelthermwallet.com",
    "asset-erc-20-token.com",
    "daostack.asset-erc-20-token.com",
    "leakedbitcoin.excelerate.co.nz",
    "nixetrade.com",
    "bitcoin.cryptogenerator.live",
    "cryptogenerator.live",
    "ethereum.cryptogenerator.live",
    "musktesla.press",
    "tesladrops.info",
    "spacexgifts.info",
    "xrpclaim.net",
    "muskfunds.info",
    "proeth-april-campaign.com",
    "ethnow.site",
    "bestcrhange.ru",
    "hofbit.com",
    "elonfund.info",
    "doubleyourbitcoin.com",
    "bitcoinairdrop.info",
    "easybitcoin.fun",
    "sso-github.com",
    "glthubs.info",
    "githb.co",
    "git-secure-service.in",
    "wallet.terzcr.com",
    "terzcr.com",
    "muskfund.info",
    "ethdrop.me",
    "lifbit.com",
    "teslagiving.com",
    "vitalik-eth.com",
    "proeth-event-april.com",
    "ethventure.com",
    "randomix.org",
    "glt-hub.com",
    "trust-wallet.me",
    "trustwollet.com",
    "xn--blnnce-yc8b.com",
    "coinbase.fund",
    "login.blcohchaln.com",
    "blcohchaln.com",
    "wallet.blockchaln.company",
    "tifbit.com",
    "ungleder.no",
    "login-trezor.io",
    "trezory.site",
    "ethairdrops.com",
    "reether.store",
    "ethlive.org",
    "teslamusk.online",
    "teslax.tech",
    "teslax.store",
    "ethchain.gift",
    "coinbasetoday.info",
    "binance.com18954761.info",
    "com18954761.info",
    "ethereum-give.com",
    "coinbase2x.pro",
    "coinbasegive.info",
    "coinbasedrop.info",
    "trading-binance.com",
    "coinbase.deposit-allow.com",
    "deposit-allow.com",
    "coinbaseverify.xyz",
    "coinbase.pro-deposit.com",
    "pro-deposit.com",
    "coinbase2x.us",
    "coinbase-bitcoin.tech",
    "bitcoincode.tech",
    "coinbasejoin.info",
    "coinbase-assist.com",
    "wallet.trczor.com",
    "trczor.com",
    "telegramcrypto.net",
    "blokchalne.info",
    "etherum.giveaway-coinbase.com",
    "bitcoin.giveaway-coinbase.com",
    "giveaway-coinbase.com",
    "jaxxupdatesupport.com",
    "trustcoin.exchange",
    "doubleway.rf.gd",
    "xtibit.com",
    "crypto-crown.ltd",
    "feex.exchange",
    "musktesla.pro",
    "bestchange.ru.bitcoin-sberbank.online",
    "spacexmusk.info",
    "musknow.info",
    "zeriontrade.io",
    "rozbit.com",
    "myledgernano.com",
    "completssl.com",
    "bitcoinsystem-app.com",
    "xn--ytherallet-to2e94ayr.com",
    "teslamusk.pro",
    "muskget.info",
    "bit-coinvestor.com",
    "bestchrnge.ru",
    "wallet-coinomi-giveaway.000webhostapp.com",
    "trustwallet.biz",
    "ledgerweb.ai",
    "spacex.bet",
    "elonmusk.market",
    "teslaevent.pro",
    "gatesfree.com",
    "muskgive.info",
    "spacex.world",
    "bestcoins.info",
    "teslamusk.group",
    "gateslive.tech",
    "billgates.capital",
    "trumpbtc.tech",
    "bezosmoney.net",
    "slmpleswap.site",
    "bestchange.space",
    "jaxx.live",
    "atomicwallet.ltd",
    "cryptonfx.com",
    "qrcodebtc.com",
    "viabtc-transaction-accelerator.com",
    "bitcoins-qr-code.com",
    "create-bitcoin-qr-code.com",
    "login.blcokchaln.top",
    "blcokchaln.top",
    "bitcoingeneratorsonline.com",
    "bitmusk.net",
    "supportve-coinbase.icu.dreamcenterinternational.org",
    "binance.com182763748.info",
    "com182763748.info",
    "bitcoindoubler2x.com",
    "bezosbit.com",
    "teslabest.info",
    "bmgfevent.com",
    "migrate.fund",
    "maker.dao.migrate.fund",
    "getnewbtc.com",
    "mdl3.top",
    "bitcoingenerat.online",
    "binance-dex.app",
    "free-bitcoin-qr-codes.com",
    "bitcoinaddresstoqrcode.com",
    "binanceprofit.com",
    "x2bitcoin.info",
    "qr-code-bitcoin.com",
    "freebitcoinqrcodes.com",
    "freewalletgiveaway.com",
    "eth-to-btc-converter.com",
    "bitcoin-transaction-accelerator.com",
    "transaction-accelerator.com",
    "btc-to-qr.com",
    "bitcoin-tx-transaction-accelerator.com",
    "bitcoin-barcode-generator.com",
    "muskgiving.com",
    "coinbase.com.nervo.co.za",
    "bitcoin-electrum.me",
    "bitcoinelon.com",
    "bitcoinpayout.net",
    "bitcoinforme.net",
    "com-bitcoins.com",
    "elon-musk.online",
    "binance-giveeth.online",
    "bitcoinelectrum.co",
    "morefreebitcoin.com",
    "elonxcoin.info",
    "binance.com158768471.info",
    "4xrp.org",
    "cnipmixer.com",
    "bliocklchain.com",
    "login-blockchanin.com",
    "eventcrypto.me",
    "eventcrypto.net",
    "muskgiving.info",
    "bestchagne.ru",
    "spacex.expert",
    "eventcrypto.org",
    "bitcoinminerpro.yj.fr",
    "mercadobitcoin.tech",
    "elonnews.online",
    "thebitcoin-code.net",
    "bitcoinelectrum.ws",
    "bitcoin-electrum.org",
    "bitcoinrising.net",
    "www.login.coinbase.com-src.cgi-bin.colnbase.site",
    "colnbase.site",
    "bitcoingives.info",
    "xn--treor-7hb.com",
    "wallets-trezor.io",
    "muskbitcoin.info",
    "bitcoinmusk.info",
    "maticbit.com",
    "musk-promo.pro",
    "tmdl3.space",
    "spacex.press",
    "spacegains.info",
    "librasecure.net",
    "blcokclnaln.com",
    "xn--localbicoins-jcc.com",
    "xn--mythrwalle-o12ej8aca.com",
    "ledger-live.com",
    "teslabitcoin.info",
    "binance-ethpromo.tech",
    "musk4.fun",
    "elonteam.space",
    "muskgive.org",
    "spacebitcoin.info",
    "muskfree.net",
    "tesladrop.space",
    "btcfminer.online",
    "ledgerhalving.com",
    "btcethtesla.info",
    "muskevent.pro",
    "muskbtc.net",
    "gram-march.com",
    "rivbit.com",
    "btczeal.com",
    "rafbit.com",
    "lorechange.com",
    "rocsbit.com",
    "blerbit.com",
    "btcethpromo.info",
    "eloneth.org",
    "btcwebminer.site",
    "300dollarsdaily.com",
    "ethereum-eth.info",
    "4musk.top",
    "elonmuskgive.net",
    "muskpromo.cloud",
    "login-bl0ckchain.com",
    "minebitcoin.club",
    "xn--locabitcoins-gcc.com",
    "btcmusk.net",
    "teslaevent.online",
    "elonlive.com",
    "btcelon.com",
    "teslalive.online",
    "teslagoods.info",
    "musk20.com",
    "grampublic.com",
    "qoloniex.com",
    "xn--chpmixer-31a.com",
    "teslateam.net",
    "teslawallet.info",
    "model3.pw",
    "ethereum-gift.neocities.org",
    "bestcoin.ltd",
    "changequick.services",
    "xn--bestchng-5za62c.net",
    "net24ex.club",
    "idex-market.net",
    "fulcrum.claims",
    "elonmusk.bet",
    "elonmusk.promo",
    "teslagives.info",
    "muskpromo.press",
    "spacetesla.info",
    "bitcoina.us",
    "nexus-crypto.com",
    "xn--bestchag-ceb20c.net",
    "xn--bstchag-t8ag20c.net",
    "xn--bstchage-4db90c.net",
    "xn--bstchan-t8ag3h.net",
    "xn--btchange-4db49d.net",
    "xn--bstchag-t8ag26b.net",
    "xn--bestchag-ceb26b.net",
    "xn--betchang-ceb78w.net",
    "eventmusk.com",
    "spacedrops.info",
    "moontrade.org",
    "moontrade.herokuapp.com",
    "btcvip.net",
    "4tesla.top",
    "myeheterrwallet.com",
    "exodus.com.ru",
    "logln-blcokchian.com",
    "getlibra.cc",
    "muskevent.info",
    "muskpresent.com",
    "ethereum-eth.ltd",
    "b-promo.online",
    "elon2020.online",
    "musk-airdrop.online",
    "xn--bstchang-b1a14b.com",
    "bestchanrge.net",
    "bit-exhcanger.xn--r-9ga.net",
    "xn--besthage-49a.com",
    "besrchange.ru",
    "elon-give.online",
    "spacexbonus.info",
    "elonmusk.world",
    "spacexdrop.info",
    "bonustesla.com",
    "muskdrop.com",
    "teslapresent.com",
    "lcgin.xn--bcokchan-6ob9076e.com",
    "xn--bcokchan-6ob9076e.com",
    "xn--bstcha-3ua59ard8p.net",
    "changequick.network",
    "24netex.life",
    "signin.blockchaln.com.18secure.host",
    "blockchaln.com.18secure.host",
    "xn--bestchage-hxb.com",
    "xn--bstchane-3cb0i.com",
    "bestchange.ru4bestchange.ru",
    "bestchange.ru5bestchange.ru",
    "bestchanrge.com",
    "xn--bestcange-4mb.com",
    "air-drop-coinbase.com",
    "droptesla.com",
    "elonx-space.com",
    "exodus.onl",
    "ledger.icu",
    "aragongift.live",
    "vertocoins.com",
    "ledger.gmbh",
    "coinbase-air-drop.com",
    "btcwebminer.trade",
    "minebitcoin.online",
    "fresh-mining.com",
    "xashmining.com",
    "spaceprize.info",
    "elonxspace.com",
    "metalfabpro.com",
    "donaldcrypto.com",
    "doubler.to",
    "xn--bstchang-3cbh.com",
    "xn--bethae-k2a2p2l5g.net",
    "elonxpromo.com",
    "rugggbestchange.ru",
    "binanceeth.space",
    "spacebonus.info",
    "changequick.digital",
    "coin-best.info",
    "365cash.today",
    "xn--etx24-7za04a.net",
    "treroz.io",
    "mybsvwallet.org",
    "getxrp.org",
    "xrp-airdrop.net",
    "jaxx.ws",
    "exodus-wallet.org",
    "ledger.ink",
    "jaxx-wallet.com",
    "webledger.dev",
    "ledgerwallet.life",
    "bonuspacex.com",
    "musksecret.info",
    "eloncrypto.io",
    "xn--btha-bpad1ski0ki7e.net",
    "ether-binance.online",
    "bestchsanges.com",
    "ledger-webwallet.com",
    "xrp2020.net",
    "grimebit.com",
    "craigsecret.com",
    "ethereumpro.eu",
    "earn2xethnow.com",
    "teslanews.life",
    "webledger.pro",
    "elongiftpromo.com",
    "elonpromo.net",
    "elongiving.net",
    "yusaku2020.org",
    "elonpromo.online",
    "vazebit.com",
    "beldexcurrency.com",
    "elonpromo.tech",
    "xn--netx24-r3a.net",
    "musk2020.fun",
    "xn--beschange-d5b.com",
    "xn--bethae-d1a0url7i.net",
    "bestchange.combestchange.ru",
    "tesladrop.info",
    "secretmusk.com",
    "cybertruck.work",
    "bonusmusk.com",
    "maker.dao.migrate.ltd",
    "maker.migrate.tools",
    "connect.maker.migrate.tools",
    "swap.makerdao.guide",
    "connect.maker.dao.migrate.ltd",
    "migrate.makerdao.guide",
    "makerdao.guide",
    "makerdao.care",
    "migrate.tools",
    "migrate.ltd",
    "ripple.gift",
    "login.blcolkchaln.com",
    "blcolkchaln.com",
    "blcckchlen.com",
    "trezor.io-wallet.com",
    "io-wallet.com",
    "xn--localbitcins-vcd.net",
    "razebit.com",
    "infinivi.io",
    "bytetrade.com",
    "bytetrade.io",
    "cgen.fr.fo",
    "cryptotabscript.online",
    "cryptotabscripts.com",
    "wallet.blockcnain.tech",
    "blockcnain.tech",
    "exodusapp.life",
    "ledgerweb.life",
    "airdrop-ethereum.com",
    "wallet.blockcnain.biz",
    "login.blockchaln.com.attp.host",
    "localbitcoins.name",
    "strainbit.com",
    "benribit.com",
    "pleinbit.com",
    "elon.vip",
    "elonpromogift.com",
    "lazebit.com",
    "elon.press",
    "teslapromo.net",
    "teslagive.net",
    "teslagive.vip",
    "elon.live",
    "musk.bet",
    "beldextrade.com",
    "musk2020.site",
    "shapeshifte.xyz",
    "login.blockchaln.company",
    "blockchaln.company",
    "login.blockchaln.com.14secure.host",
    "blockchaln.com.14secure.host",
    "blockchaln.com.13secure.host",
    "btcethgiveaway.com",
    "muskpromo.com",
    "elonxgive.online",
    "teslacoins.club",
    "muskgift.com",
    "btc-gen.site",
    "makerdao.ltd",
    "xn--betchnge-dza05j.net",
    "xn--etex24-vfb.net",
    "seriosbit.com",
    "elonbtc.info",
    "makerdao.llc",
    "makerdao.one",
    "migrate.makerdao.one",
    "makerdao.cash",
    "migrate.makerdao.cash",
    "maezawaotoshidama.info",
    "lrezor.io",
    "instant2xreward.com",
    "makerdao.click",
    "elonairdrop.com",
    "wallet.blockchaln.llc",
    "blockchaln.llc",
    "login.blockchaln.com.16secure.host",
    "blockchaln.com.16secure.host",
    "login-blockchain-com.nl",
    "beldexchange.com",
    "bestchangre.ru",
    "bit-changer.ru",
    "vitaliketh.live",
    "4musk.host",
    "elonxgive.com",
    "elongive.live",
    "muskgiveaway.com",
    "thetatoken.gq",
    "elonxcrypto.com",
    "xn--myetherwet-bhb64ea.com",
    "myetherwallet.colu.com",
    "blokchiain.com",
    "vitaliketh.com",
    "hoxbit.com",
    "free-ethereum.io",
    "elon.market",
    "tmdl3.online",
    "multisupport.live",
    "huobiglobal.live",
    "infinances.com",
    "quakebit.com",
    "etcagharta.org",
    "wallet.etcagharta.org",
    "makerdao.tools",
    "tmdl3.company",
    "login-blockchain.com.br",
    "btcgenplus.fr.fo",
    "musk.blog",
    "elonxdrop.com",
    "tesla.gift",
    "generatorapp.cf",
    "xn--beschne-pcb24tm35j.net",
    "btc-pro.ru",
    "xn--bsthnge-kwa3dys.net",
    "cash365.me",
    "xn--etex24-heb.net",
    "xn--bsthnge-kwa45amf.net",
    "xn--bethge-k2a78b9gm78y.net",
    "cash365.cc",
    "xn--bechnge-rqb88nm21m.net",
    "xn--netx24-rva.net",
    "365cash.cash",
    "xn--betchge-4kb19p751l.net",
    "best-coin.vip",
    "change-quick.us",
    "xn--ntex24-pva.net",
    "ethdropcharity.tech",
    "change-quick.vip",
    "cash-i.xyz",
    "coinbest.us",
    "xn--trezr-yua.com",
    "besrtchange.ru",
    "xn--besthng-lwa45atf.net",
    "coinbest.cc",
    "quickchange.vip",
    "365cash.us",
    "xn--bethnge-kwa45a24a.net",
    "xn--neex24-jmc.net",
    "muskfun.info",
    "elonpresent.com",
    "makerdao.live",
    "migrate.makerdao.live",
    "beldexwallet.com",
    "xn--bsthange-mbb1h.net",
    "xn--beschng-lwa20cv7f.net",
    "xn--bsthng-sta61azeh.net",
    "coin-best.me",
    "quick-change.co",
    "365cash.mobi",
    "i-cash.link",
    "xn--etex24-9eb.net",
    "bitcoinminer2x.com",
    "blockchain-script.net",
    "btc-gen.com",
    "bitcoinmining-pro.software",
    "lisane.gq",
    "shitcoinwallet.co",
    "erc20wallet.tk",
    "capitalbitsinvestments.com",
    "best-coin.world",
    "elonchris.com",
    "xn--bethane-74a9w0v.net",
    "xn--besthag-hya43amu.net",
    "xn--betchae-pcb82a7i.net",
    "xn--betchage-dqb9r.net",
    "eth-giveout.com",
    "xn--bethage-74a38cji.net",
    "xn--bethage-74a38cng.net",
    "xn--bethage-74a56c3i.net",
    "xn--besthane-38a7z.net",
    "xn--besthnge-dza29a.net",
    "xn--bsthange-28a1n.net",
    "xn--bsthange-b1a61a.net",
    "xn--bestchng-eza6e.net",
    "xn--besthng-lwa80bye.net",
    "xn--besthng-lwa9dzu.net",
    "xn--betchng-lwa9d43e.net",
    "xn--bsthang-l6a1gh.net",
    "xn--bestchag-80a2g.net",
    "xn--besthang-nbb8h.net",
    "xn--besthang-v0a83c.net",
    "xn--bstchag-2xa0gut.net",
    "xn--bstchag-2xag2g.net",
    "xn--bstchag-9za05aha.net",
    "cash365.vip",
    "xn--bstchage-10a9g.net",
    "i-change.co",
    "i-cash.cc",
    "blockchainscript.net",
    "cryptotabscript.com",
    "multicoinminer.fund",
    "xn--myeterwaet-h0bau.com",
    "login.blcorkchein.com",
    "blcorkchein.com",
    "coinbase-xmas.com",
    "xmasgive.info",
    "trezor.world",
    "xn--trzr-cpa7e.com",
    "ripplelabs.space",
    "elonchristmas.com",
    "coinbasexmas.com",
    "xmasbtc.com",
    "xn--besthage-38a62d.net",
    "xn--bethange-28a25f.net",
    "i-change.online",
    "change-quick.xyz",
    "elonchristmas.net",
    "elonxmas.net",
    "lledger.io",
    "leedger.io",
    "mcafeechristmas.net",
    "mcafee2020.xyz",
    "emusk.host",
    "musk.one",
    "airdropxrp.com",
    "bitcoinx10.cloudaccess.host",
    "xrpdoubler.us",
    "shopzoro.co.uk",
    "xrpchristmas.com",
    "trezors.io",
    "blockchainsevent.claim-free-btc.com",
    "airdrop-stx-blockchain.info",
    "coinbase-promo.info",
    "login.lblockhcoin.com",
    "lblockhcoin.com",
    "login-bllockchain.com",
    "brestchange.ru",
    "site-blockchain.jdevcloud.com",
    "myehterwalltet.info",
    "lastchance.tech",
    "etherflyer.com.claim-tokens-erc-20.com",
    "claim-tokens-erc-20.com",
    "trezors-wallets.com",
    "elongiftcrypto.com",
    "instanbtc.site",
    "freebitcoinminer.org",
    "bitcoinminer-pool.com",
    "bitcoinfast.xyz",
    "bitcoinpoolmining.xyz",
    "login.lbloclkchoin.com",
    "lbloclkchoin.com",
    "doublebtc3hours.com",
    "multibit.app",
    "freebtcminer.org",
    "btcgenerator.pro",
    "giveaway5000.com",
    "biockchoin.info",
    "block-chain-id.joomla.com",
    "bittrex-yds.com",
    "rnjelherwallet.com",
    "btcfree.pro",
    "coinbasegive.net",
    "stellardrop.com",
    "mercatox2xbonus.com",
    "bitcoindoubler.tech",
    "upgradesai2dai.com",
    "xn--bstchnge-neb8176e.net",
    "xn--bestchge-dqb3626e.net",
    "xn--bstchane-10a01d.net",
    "stellar.us.com",
    "coinbase12.info",
    "cash-coinbase.com",
    "coinbase-cash.com",
    "elonbiz.host",
    "btcfastmining.xyz",
    "musk-btc.com",
    "elonbonus.info",
    "trezgr.io",
    "wallet.trrezor.com",
    "trrezor.com",
    "xn--bestcange-u85d.com",
    "xn--bstchange-03a.com",
    "xn--bestchang-83a.com",
    "xn--besthnge-49a5586e.net",
    "beldexcoins.com",
    "mcafeegiveaway.com",
    "btc-on.com",
    "ripple-gifts.online",
    "coinbasegrant.com",
    "btc-prize.com",
    "trezcor.com",
    "trezor-io.co",
    "wallet.trezor-io.co",
    "xrp2020.com",
    "mcafee2020.online",
    "btc-coin.online",
    "coinbasec.com",
    "coinbase50m.com",
    "ripple-airdrop.org",
    "btcmust.com",
    "elonmuskgo.com",
    "bnbgift.info",
    "binancegiveaway.site",
    "erc-20-token.com",
    "sai2dai.pro",
    "musknews.info",
    "wallet.trezore.io",
    "trezore.io",
    "coinbasego.com",
    "tronnet.network",
    "xrplike.com",
    "zn--trezr-mua.com",
    "ledqer.net",
    "ledgers.com",
    "xn--bestchane-xkb.com",
    "givexrp.net",
    "2020mcafee.info",
    "upbitcoin.info",
    "xn--bestchane-2lb.com",
    "xn--betchange-w1b.com",
    "sai2dai.link",
    "xmrqrcode.com",
    "bonusbtc.net",
    "hitbrc.ru",
    "geminieth.com",
    "e-deals.online",
    "btc50x.info",
    "tesla-3.online",
    "elonbiz.site",
    "coinbaseup.com",
    "login.bilockchoin.com",
    "bilockchoin.com",
    "bittrexthankgiving.com",
    "airdropex.site",
    "mychainlink.org",
    "xn--betchane-dgb84d.com",
    "biggest-airdrop.top",
    "dai2sai.exchange",
    "sai2dai.exchange",
    "airdropdex.site",
    "xn--treor-wib.com",
    "trerzor.io",
    "btcgift.pro",
    "claim-stellar.info",
    "coinbase5k.com",
    "receipt.invoice.reward-ethereum.cf",
    "reward-ethereum.cf",
    "receipt.invoice.eth-referral-airdrop.ml",
    "eth-referral-airdrop.ml",
    "eleckctrum.org",
    "dai2sai.app",
    "sai-to-dai.com",
    "3mdl.space",
    "zilliqa-network.com",
    "geminieth.live",
    "freebtc-drop.live",
    "xn--bestchage-1vb.net",
    "xn--bstchange-0ib.net",
    "xn--betchange-12b.com",
    "xn--betchane-dgb84d.net",
    "xn--besthange-jeb.com",
    "ledgre.com",
    "myetherwallet-getextratoken.000webhostapp.com",
    "triezor.io",
    "ldexmarket.ru.com",
    "margineth.online",
    "bloom.reward-programs.erc20-tokens.com",
    "erc20-tokens.com",
    "exchange.bnbdex.top",
    "bnbdex.top",
    "wallet-thetatoken-extrabonuses.000webhostapp.com",
    "wallet-thetatoken-claim-extra-bonuses.000webhostapp.com",
    "wallet-thetatoken-bonuses.000webhostapp.com",
    "wallet-thetatoken-extrabonuses-erc20.000webhostapp.com",
    "get-extra.tk",
    "next.get-extra.tk",
    "myetherwallet-getfreetoken.000webhostapp.com",
    "get-extra.ml",
    "myetherwallet.rekllama.com",
    "vintage-myetherwallet.telegram-airdrop.com",
    "telegram-airdrop.com",
    "coinxback.com",
    "cryptocloudx.com",
    "saitodai.app",
    "cryptoback.org",
    "trezor.bz",
    "wallet.trezor.bz",
    "bedstchange.pp.ru",
    "xn--bestchnge-51a.net",
    "xn--betchange-6ld.net",
    "3mdl.pw",
    "trezor-info-wallet.musicfestes.com",
    "muskbonus.info",
    "cyber-tesla.com",
    "3mdl.pro",
    "ldexmarket.xyz",
    "btc5k.com",
    "crypto-giveaway.com",
    "ldexmarket.info",
    "muskgives.info",
    "bitmusk.info",
    "2020btc.site",
    "mew-offlclal.info",
    "xn--bestchage-mwb.net",
    "bestchange.page",
    "reward-crypto.com",
    "spacexbit.net",
    "spacexbit.info",
    "terezor.io",
    "wallet.terezor.io",
    "treezor.io",
    "elonmuskgift.com",
    "trezor-wallets.cc",
    "trrezor.io",
    "trezor.promo",
    "eilectum.org",
    "lerger.cf",
    "localbitcoins.com.0fficial-localbitcoins.website",
    "0fficial-localbitcoins.website",
    "official-localbjtcoins.website",
    "mewmyetherwallets.com",
    "official-mcafee.me",
    "elonbonus.com",
    "idex-market.space",
    "sai2dai.com",
    "wallet.trezcr.com",
    "trezcr.com",
    "neosmarteconomy.netlify.com",
    "leedger.info",
    "ovdan.com",
    "legder.co",
    "xn--trezr-gua.com",
    "blockchain.info.rekllama.com",
    "login.blockhiean.com",
    "blockhiean.com",
    "ehterdelta.ru.com",
    "binance-cz-promo.netlify.com",
    "ripple.ooo",
    "chainlinktoken.net",
    "chainlink-info.pro",
    "claim-erc20-token-bonus.ga",
    "bancor-network.ga",
    "crypto-reward.com",
    "intrenational.bjtftrex.com",
    "bjtftrex.com",
    "2xbonus.live",
    "coinbaseteam.com",
    "idex-market.info",
    "geteth.site",
    "binancefutures.online",
    "crypto-generat.ml",
    "myetherwallet-giveaway.000webhostapp.com",
    "extra-bonuses.ga",
    "official-ethers.com",
    "login.bllockhaiin.com",
    "bllockhaiin.com",
    "idexmarket.art",
    "hellogold.in",
    "steemeth.com",
    "beentrade.org",
    "coinspin.net",
    "bitlare.com",
    "uni-pouch.com",
    "elon-get.com",
    "lite.foundation",
    "ripple.expert",
    "3tesla.info",
    "coinsmax.live",
    "4ltc.su",
    "get-xrp.online",
    "freebtceth.com",
    "wp.locallbittcoins.net",
    "locallbittcoins.net",
    "myetherwallet-extra-bonuses.000webhostapp.com",
    "extra-bonuses.gq",
    "next.extra-bonuses.gq",
    "dex-start.net",
    "teslamusk.info",
    "3tesla.club",
    "elonmusk.tk",
    "ethersaway.net",
    "try-ethers.com",
    "tesla3.link",
    "elon-crypto.me",
    "eth-get.org",
    "ethplode.live",
    "mygram.pro",
    "gramsale.org",
    "mc2020get.com",
    "mcf-crypt.net",
    "4tesla.biz",
    "elon-crypto.online",
    "tesla3-now.com",
    "model3.space",
    "mcafee-crypto.com",
    "elon-crypto.net",
    "4tesla.pro",
    "elontesla.info",
    "tesla3.promo",
    "chianlink.io",
    "wallet.chianlink.io",
    "claimlink.org",
    "wallet.chianlink.org",
    "chianlink.org",
    "wallet.xn--chainlik-o99c.com",
    "xn--chainlik-o99c.com",
    "earnxrp.live",
    "tron-network.live",
    "btc-titan.com",
    "uminer.net",
    "2xcoin.live",
    "multicoinsminer.fund",
    "claimbtc.org",
    "elonspace.online",
    "xrpinsights.live",
    "ethaget.com",
    "coinxkeep.com",
    "cravetrade.com",
    "investmentworld.site",
    "bondinvest.site",
    "lidex.market",
    "binancebnbgive.com",
    "eth-charity.tech",
    "tonpresale.com",
    "ethget.org",
    "ildex.host",
    "blittrex.intrenational.com",
    "lcgin-blockchian.com",
    "blcolchian.lcgiln.com",
    "lcgiln.com",
    "blocckchainn.com",
    "binance.bnbnetwork.icu",
    "bnbnetwork.icu",
    "ethereumfreemining.com",
    "exchange.jerseyrelease.services",
    "jerseyrelease.services",
    "binance.jerseytrade.icu",
    "jerseytrade.icu",
    "chianlink.com",
    "wallet.chianlink.com",
    "localbitcolns.net",
    "binance.marketjersey.icu",
    "rippleinsights.live",
    "cryptogrowth.live",
    "login.blolockhain.icu",
    "blolockhain.icu",
    "ehterdelta.host",
    "thelibrasale.com",
    "xn--login-blockchan-wj5h.com",
    "xn--login-blockchn-dmb79a.com",
    "btcgen.io",
    "trx-ethgiveaway.com",
    "karlken.com",
    "bilttrex.intrenational.com",
    "intrenational.com",
    "upbitgift.com",
    "xrpdrop.fun",
    "rippleinsights.tech",
    "login.blolckchaln.com",
    "blolckchaln.com",
    "blcolchian.lcgjrn.com",
    "lcgjrn.com",
    "xn--leder-y1a.com",
    "login-blockchain.com.mx",
    "quickinv.com",
    "mcafee-prize.online",
    "bakkt-event-start.netlify.com",
    "spacexbit.com",
    "unruffled-shockley-1db491.netlify.com",
    "t3md.net",
    "earnbros.com",
    "m2020.me",
    "rippleinsights.pro",
    "ton-ico.com",
    "claim-btc.com",
    "medium-crypto.tech",
    "bakktgift.info",
    "chainlink.webcindario.com",
    "coinbasecrypto.tech",
    "xrp-promo.tech",
    "bakkt-celebration.netlify.com",
    "bonuscoinbase.com",
    "bakkt-give.org",
    "bakktget.com",
    "bakkt.wz.cz",
    "btcdrops.net",
    "promobakkt.com",
    "bakktlaunch.com",
    "bololckhain.com",
    "login-bloclknainn.com",
    "newcryptogift.com",
    "dex-get.net",
    "extra-rewards-bonus.com",
    "muskbit.com",
    "blockchain5th.com",
    "ltdex.market",
    "dogechain.org",
    "exodus.icu",
    "ton-telegram.net",
    "freebakkt.com",
    "libratokensale.com",
    "getbabb-claims.exclusive-extra-bonuses.com",
    "exclusive-extra-bonuses.com",
    "claims-token-erc20.exclusive-extra-bonuses.com",
    "xrpcompetition.live",
    "bithumb.live",
    "spacexfree.com",
    "cryptogood.000webhostapp.com",
    "delltrade.com",
    "yobit.website",
    "netexcoins.com",
    "highcoin.net",
    "coinbascet.com",
    "chartrade.com",
    "tradeberry.org",
    "billaxy.com",
    "cryptonex.uk",
    "hyptrade.com",
    "wintraders.net",
    "coinrexo.com",
    "exmofit.com",
    "xn--stllar-cva.org",
    "xn--mdium-n51b.com",
    "claimlumens.org",
    "xn--stllr-6wa7j.org",
    "ledger-live.co",
    "ledger-ad.com",
    "wallet.my-trezor.com",
    "my-trezor.com",
    "snegir-shop.ru",
    "tokenairdrops.net",
    "idexmarket.info",
    "xn--localitcoins-bh4f.net",
    "ddexbit.com",
    "secure-ledger.com",
    "ethereumatlantis.network",
    "btcethgift.com",
    "blockkchain.ru",
    "login.bllocklnain.com",
    "bllocklnain.com",
    "mcf2020.net",
    "tmdl.info",
    "xn--stellr-tta.org",
    "xrpgift.live",
    "login.blogchain.icu",
    "blogchain.icu",
    "login.bllcoklnain.com",
    "bllcoklnain.com",
    "yourlibra.net",
    "atlantis-wallet.com",
    "go-testnet.com",
    "info-dex.com",
    "biboxgive.com",
    "toreovonline.uk",
    "blockcchain.ru",
    "ethereumclassic.bonus-programs.com",
    "bonus-programs.com",
    "myetherwallet.com-wallet-transactions.host",
    "com-wallet-transactions.host",
    "trezor.blog",
    "doubleinv.com",
    "medium-crypto.xyz",
    "idtex.market",
    "hitbtc.su",
    "blcckchian.com",
    "ethereumboston.com",
    "5000-btc.com",
    "loqin.blcakchian.com",
    "blcakchian.com",
    "blockchailn.biz",
    "exchange.bnbmx.services",
    "event.exchangemarket.services",
    "coinbase-promo.net",
    "drop-crypto.org",
    "libra-coin.cc",
    "thevidbit.com",
    "binance.launch-usa.net",
    "launch-usa.net",
    "coinbase-bonus.net",
    "bitcoingenerator.com.ru",
    "b-lockchian.com",
    "ehterdetla.com",
    "btc10.org",
    "tornado.best",
    "binance-test.org",
    "vintage.myethewallet.online",
    "myethewallet.online",
    "login.blackchair.info",
    "blackchair.info",
    "linkairdrop.com",
    "vipmagija.com",
    "kungmedia.com",
    "btcandeth.com",
    "dropkraken.com",
    "binance-get.org",
    "project2019.services",
    "bloclkchain.net",
    "coinbase-prize.com",
    "idex.net.ru",
    "gram-chain.com",
    "etherdelta.net.ru",
    "win-coinbase.com",
    "tokengiveaway.in",
    "finalgiveaway.com",
    "coinbasewin.com",
    "coinbase-reward.com",
    "bttfinex.ru",
    "bitdegree-claims.bonus-client.com",
    "bonus-client.com",
    "cryptousd.host",
    "earncrypto.xyz",
    "cryptxbit.pro",
    "btcjob.pw",
    "cryptoex.icu",
    "cryptocoin24.site",
    "musk.ml",
    "crypto-airdrop.org",
    "coinbasegiveaway.com",
    "lucky-binance.com",
    "exchange.bnbdexevent.services",
    "bnbdexevent.services",
    "bin-us.com",
    "bitshumb.com",
    "bnbmarket.services",
    "exchange.bnbmarket.services",
    "event.exchangejersey.top",
    "exchangejersey.top",
    "exchange.webjersey.top",
    "webjersey.top",
    "binance.marketlaunch.site",
    "marketlaunch.site",
    "exchange.projectdex.top",
    "projectdex.top",
    "wwwelectrum.org",
    "blcokchian.licgin.com",
    "licgin.com",
    "idex.ru.net",
    "bitmartgive.com",
    "freecryptoevent.com",
    "muskgive.com",
    "xn--stllar-x4a.org",
    "lauchesevent.services",
    "tronetwork.live",
    "cryptobridges.com",
    "eth-drop.org",
    "get-back.site",
    "bcash-promo.org",
    "coinbasepromotion.com",
    "mytethwellet.com",
    "kutixtoken.com",
    "myaetherwellat.com",
    "ktx.typeform.com",
    "ideex.pw",
    "btc-coinbase.com",
    "gwayaugust.blogspot.com",
    "intenrational.bfttrex.com",
    "litecoingiveaway.info",
    "bfttrex.com",
    "ethberlin.org",
    "coinbasegive.com",
    "muskelon.ga",
    "rippleairdrop.club",
    "myetherwallet.signtransaction.co",
    "signtransaction.co",
    "zendesk-news.com",
    "litecoinairdrop.club",
    "bllockchain.ga",
    "5000-coinbase.com",
    "binance-airdro.online",
    "ltccontest.com",
    "litecoin-giveaway.org",
    "satoshi-litecoin.netlify.com",
    "top-coinbase.com",
    "pultegive.com",
    "ethereum-bounty.live",
    "ripplebounty.live",
    "ripple-give.net",
    "medium.xrpairdrop.website",
    "xrpairdrop.website",
    "best-event.host",
    "mcafee2020-airdrop.netlify.com",
    "charlieleedrop.net",
    "ltc-give.org",
    "2019giveaway.net",
    "ctoken.info",
    "binance.newproject.site",
    "newproject.site",
    "zendesk-binanc.com",
    "binancekyc.com",
    "coinkanon.com",
    "bit7880.com",
    "bitcoin-address-cracker.bit7880.com",
    "www-ideex.market",
    "idleax.market",
    "bitmex-blog.info",
    "eth-send.tech",
    "blcokchian.lcgljn.com",
    "lcgljn.com",
    "dropcoinbase.com",
    "augustcontest.blogspot.com",
    "xn--localbitcons-jfbf.net",
    "airdrop-mcafee.tech",
    "crypto-promo.store",
    "ethereumprize.pro",
    "plus-ethers.com",
    "kucoin.live",
    "b-nance.com",
    "coinbase.gifts",
    "www-idaex.market",
    "btc-drop.com",
    "promo-coinbase.com",
    "get-mcafee.me",
    "mcafeegiveaway.net",
    "mcafeetoday.com",
    "john-mcafee-events.com",
    "get-mcafee.press",
    "cryptofans2019.com",
    "coinbase-promotion.com",
    "coinbase-news.com",
    "btc-bonus.com",
    "myetherverify.com",
    "forkdelta.id",
    "forkdelta.co.uk",
    "forkdelta.club",
    "ethereum-mixer.org",
    "feathercoin.top",
    "myethdex.com",
    "ethcombo.com",
    "locaibitcoins.net",
    "giveaway-transfer.com",
    "decentralized-exchange.info",
    "mcafeenow.net",
    "www-ldax.market",
    "dveryirazdvyzhniesystemy.com",
    "binance.dexmx.site",
    "www-idlex.market",
    "idexmarket.live",
    "mcafeedrop.com",
    "airdrop-mcafee.online",
    "get-mcafee.space",
    "mcafeegroup.org",
    "xn--localbtcoins-jfbb.net",
    "blonckhian.com",
    "perlin.in",
    "trezor.team",
    "brave-bounty.com",
    "5000crypto.com",
    "exchange.eventsolutions.top",
    "coinbasegives.com",
    "coinbasegold.com",
    "coinbase-5000.com",
    "coinbase-drop.com",
    "teamofbinance.com",
    "neoaugust.blogspot.com",
    "binance.jerseyexchange.site",
    "jerseyexchange.site",
    "litecoinpromo.netlify.com",
    "exchange.webdexlaunch.top",
    "webdexlaunch.top",
    "ethereum-airdrop.netlify.com",
    "get-binance.org",
    "get3tesla.space",
    "calibra-ico.info",
    "binancefree2018.droppages.com",
    "binance.newrelease.site",
    "5000coinbase.com",
    "coinbasebtc.atspace.cc",
    "coinbasebonus.net",
    "coinbasegift.epizy.com",
    "transaction-verification.tech",
    "coinbase-team.com",
    "btc-generator.club",
    "idekx.market",
    "vip.kelireqa.xyz",
    "muskelon547776.webcindario.com",
    "muskelon.net",
    "airdrop-crypto.com",
    "promotion-crypto.com",
    "coinbasegift.net",
    "ethereum4th.org",
    "drop-crypto.com",
    "coinbasetop.com",
    "coinbase.promo",
    "100kbtc.com",
    "binance10x.epizy.com",
    "ethereumpromo.epizy.com",
    "2019giveaway.com",
    "gram-net.org",
    "5000btc.gift",
    "promo-binance.netlify.com",
    "btc.wz.sk",
    "myellthevwaallet.com",
    "mcafeebtc.net",
    "buterineth.net",
    "fastprofitableoptiontrade.com",
    "ethereum4th.com",
    "conn-view-wallet.info",
    "myetherwallet.conn-view-wallet.info",
    "top-binance.com",
    "news-bnb.org",
    "neofoundation.blogspot.com",
    "eventbinance.com",
    "xn--blockcain-lmb.com",
    "hiverzone.com",
    "elonmuskcrypto.webcindario.com",
    "binance-margin-launch.com",
    "anycoins.club",
    "mcafees-redemption.netlify.com",
    "calibra-token.info",
    "now5000.com",
    "crypto-drop.org",
    "crypto-promo.net",
    "cryptoextravaganza.online",
    "donalt.livetrades.vip",
    "biitmrt.com",
    "coinbasepromo.epizy.com",
    "win-binance.com",
    "crypto-extravaganza.store",
    "drop-binance.com",
    "gift-binance.com",
    "huobipartners.com",
    "mn-r.store",
    "token-1.com",
    "coinbase.token-1.com",
    "huobiglobal.ltd",
    "zendesk.huobiglobal.ltd",
    "binancebtc.epizy.com",
    "upbit.sale",
    "binance-updates.com",
    "btc5000.epizy.com",
    "promobinance.net",
    "30f3000f-5f1f-4dee-af2d-0b7a6159f4c0.htmlpasta.com",
    "3365cad5-455b-4ed0-a944-2b9bd0191501.htmlpasta.com",
    "0978f655-465b-4434-99fb-f8357c7bca4b.htmlpasta.com",
    "airdrop2.com",
    "get-crypto.tech",
    "dietologicheskoepit.space",
    "binance5000.epizy.com",
    "btcfast.net",
    "transaction-sends.tech",
    "btc-drop.net",
    "coinbasepromo.net",
    "mgctoken.biz",
    "mgctoken.org",
    "binance5000.info",
    "bigpromo.net",
    "5000btc.org",
    "calibra-token.com",
    "calibraico.com",
    "calibra-ico.com",
    "bakkt-btc-event.netlify.com",
    "buylibracoins.com",
    "mcafee-official.net",
    "mcafee-eth.netlify.com",
    "mcafee-btc.netlify.com",
    "calibra-ico.net",
    "tron-official-btc-promo.netlify.com",
    "crypto-promo-get.tech",
    "tron-foundation-redeem.netlify.com",
    "5000giveaway.com",
    "coinbasegift.com",
    "binance-margin-new.com",
    "5000get.com",
    "get3tesla.org",
    "litenet.ltd",
    "5000promo.net",
    "cryptoclub247.com",
    "btcpresent.net",
    "binancevisit.net",
    "thecryptobonus.com",
    "mdl3.org",
    "easybinance.com",
    "crypto-promotion-get.online",
    "tesla-promo.netlify.com",
    "binancegiveaway.top",
    "binancebegin.com",
    "binancefeast.org",
    "drop5000.com",
    "crypto-promotion-get.tech",
    "5000btc.net",
    "blockchain-exploit.site",
    "btc10x.org",
    "binance2019.com",
    "binancefeast.net",
    "2binance.com",
    "binance2yo.com",
    "mybinance.net",
    "localbitcoins.com.digicerts.live",
    "20eth.org",
    "binclic.com",
    "binancepro.epizy.com",
    "mcafee-official-comeback.netlify.com",
    "official-service.online",
    "binancefunds.com",
    "binancetoday.net",
    "julyneo.blogspot.com",
    "innovamine.ltd",
    "cryptoplay.world",
    "binancegiveaway.net",
    "20btc.net",
    "binance-gift.pro",
    "binancewin.com",
    "20eth.com",
    "crypto-event.host",
    "dropbinance.com",
    "xrpx2july.blogspot.co.ke",
    "giftbinance.com",
    "anniversary-eth.com",
    "dropfestextravaganza.tech",
    "fly-promo.online",
    "binpromo.net",
    "cbn-project.com",
    "biltmain.com",
    "binance-team.com",
    "binanceteams.net",
    "binance2.epizy.com",
    "xrpx2july.blogspot.com",
    "binance-gives.com",
    "binance2.vip",
    "5000drop.com",
    "getpromo.me",
    "anniversary-binance.com",
    "dothereumwallet.net",
    "gramton.pw",
    "getbuterin.org",
    "binance20.org",
    "binan-marginal.com",
    "idnex.market",
    "promo-extravaganzza.tech",
    "binancegift.org",
    "win-giveaway.com",
    "crypto-extravaganza.tech",
    "livebinance.com",
    "btcfast.org",
    "binancesuper.net",
    "bitcoindrop.org",
    "eth10.top",
    "binancefree.net",
    "official-drop.club",
    "binancepromo.epizy.com",
    "airdropbtc.epizy.com",
    "binanceclub.rf.gd",
    "crypto-promo.com",
    "giveaway-btc.net",
    "promocrypto.net",
    "binancev2.live",
    "binance-btc.neocities.org",
    "eth30.org",
    "binance-promo.netlify.com",
    "x2neojuly.blogspot.com",
    "celebration-binance.netlify.com",
    "bitcoingift.net",
    "elon-musk.xyz",
    "bllockchain.tk",
    "hiltbtc.com",
    "login.bilockcnain.com",
    "bilockcnain.com",
    "starkdex.net",
    "mew.starkapp.net",
    "starkapp.net",
    "dextestnet.info",
    "eth20.org",
    "binance-bit.net",
    "extravaganza-event.website",
    "teslapromo.info",
    "xn--githu-k90b.com",
    "ethbuterin.com",
    "best-event.site",
    "airdrop.best-event.site",
    "xn--medum-1sa.com",
    "binannce.net",
    "news.binannce.net",
    "myetherewallet.io",
    "giveaway-crypto.tech",
    "binancepromo-now.online",
    "bitcoindrop.net",
    "binance-claims.netlify.com",
    "eth-btcpromotion.online",
    "ethcharity.net",
    "ethprize.net",
    "mcafee.airdrop-event.fun",
    "airdrop-event.fun",
    "doubleethereum.cc",
    "hitbtc.co.ua",
    "coinbasepro10000.webcindario.com",
    "neojulyx2.blogspot.com",
    "ethdrop.net",
    "eth.gift",
    "eth-link.info",
    "chainlink.pro",
    "claimwallet.org",
    "gram-ton.com",
    "ripplesupport.org",
    "6602c412-67f3-4725-92eb-5c2ebb2c6166.htmlpasta.com",
    "d6513d71-ee0e-41c3-8bda-83587ac4e863.htmlpasta.com",
    "johns20190gift.tumblr.com",
    "zendesk-bnb.org",
    "login.blodchain.com",
    "blodchain.com",
    "ethereum-verify.website",
    "login.blocickchairn.com",
    "blocickchairn.com",
    "mew.starkwallet.org",
    "starkwallet.org",
    "bip39.info",
    "bip39tools.com",
    "electrum.org-secure.app",
    "claimlink.online",
    "org-secure.app",
    "refereum.com.erc-20.claims",
    "erc-20.claims",
    "bigdrop.pro",
    "medium.exchange-promo.fun",
    "exchange-promo.fun",
    "pompliano-promo.netlify.com",
    "coinbase.getforge.io",
    "more-getback.site",
    "dothereum-polkadot.net",
    "ripplecompetition.com",
    "junecoinsx2.blogspot.com",
    "cryptexplatform.com",
    "coineplus.com",
    "ecptoken.com",
    "zendesk-bnb.com",
    "vitalik-gives.website",
    "stopp.com.au",
    "promo-from-buterin.site",
    "bnb-zendesk.com",
    "neojunex2.blogspot.com",
    "e3c01d47-32d5-417d-86a5-6484412fd477.htmlpasta.com",
    "xn--calbra-yva.com",
    "zilliqa.tech",
    "cryptosupport.live",
    "idax-market.ru",
    "myeltherewallet.com",
    "blockchairnew.info",
    "starcoine.com",
    "cryptohype.world",
    "eths.gift",
    "mcafee.airdrop-promotion.host",
    "airdrop-promotion.host",
    "apompliano.netlify.com",
    "now-ethers.com",
    "official-promo.pw",
    "official-promo.pro",
    "tesla-promo.epizy.com",
    "airdrop-sale.online",
    "airdrop-main.info",
    "bitfinex.click",
    "official-events.site",
    "myelthwaltter.com",
    "bigclaim.pro",
    "electrumus.com",
    "blog.decentralized-exchange.org",
    "decentralized-exchange.org",
    "neojune.blogspot.com",
    "medium.bitcoin-gain.org",
    "bitcoin-gain.org",
    "sf520pk.com",
    "lianjiedu.com",
    "coinexminer.site",
    "bit-donor.com",
    "bnb-launch.com",
    "mediumcdn.today",
    "mcafee.crypto-airdrop.space",
    "crypto-airdrop.space",
    "teslamusk.tech",
    "58b48d07-110c-487e-8a77-938cfaa8af18.htmlpasta.com",
    "mcafee-promo.com",
    "mcafee-crypto.tech",
    "coin2coin.co",
    "receive-ethereum.website",
    "com-eth.top",
    "binance.com-eth.top",
    "binance-trade.com",
    "musk-event.info",
    "binance-presents.fund",
    "airdrop.center",
    "get-eth-free.com",
    "brave-browser.info",
    "mcafee.site",
    "john.mcafee.getforge.io",
    "binance-app.org",
    "news.binance-app.org",
    "mythwalter.com",
    "logn.life",
    "poloniex.com-account-login.logn.life",
    "com-account-login.logn.life",
    "margin-bintestnet.com",
    "mcafee.getforge.io",
    "newetherewallets.com",
    "ether-return.com",
    "elon-musk.getforge.io",
    "coinexplorer.tech",
    "www-myethenrwallet.com",
    "rnewetherwallet.com",
    "rrryehlerewvallet.com",
    "ildexmarket.pw",
    "news-bnb.com",
    "origin.foundation",
    "cloudtokenexchange.com",
    "blockchaincomexplorer.z13.web.core.windows.net",
    "cryptotronx.com",
    "xn--coinbse-dwa.com",
    "no-replycoinbase.com",
    "hmrcmeclaim.com",
    "mycrypto-wallet.info",
    "dogepay.info",
    "iddex.pw",
    "localbilcolns.net",
    "bnb-testnet.org",
    "jerseylaunches.icu",
    "dexcompetition.site",
    "cryptoxglobal.com",
    "buyeth70.jdevcloud.com",
    "xcoinback.com",
    "eth.elon-musk-tesla.space",
    "elon-musk-tesla.space",
    "btc.elon-musk-tesla.space",
    "tortoken.io",
    "secure.globalsec.icu",
    "doublebitcoin.ga",
    "globalsec.icu",
    "lldex.pw",
    "id-ex.pw",
    "binance-client.com",
    "reddit-securepage-hdsjhg3jh5gjasged32h4i2349803434553.secglobal.icu",
    "secglobal.icu",
    "reddit-securepage-hdsjhg3jh5gjasged32h4i23496jhgh677u.secglobal.icu",
    "blackchoin.info",
    "myrlherwallet.com",
    "iidex.pw",
    "myethirwailets.co",
    "binance-margin.com",
    "cryptogiveaways.top",
    "lidex.pw",
    "tokensmarket.online",
    "telos-fundation.io",
    "mycofterwallet.com",
    "xn--blokchan-u0a8d.com",
    "myethherewallet.com",
    "promo-tesla.store",
    "ldexmarket.pw",
    "eth.elonmusk-tesla.space",
    "elonmusk-tesla.space",
    "teslastore-giveaway.online",
    "buy7btc.online",
    "buy7btc.pro",
    "tenocrypt.com",
    "elon-spacex.promo",
    "elon-spacex.com",
    "elon-spacex.online",
    "elon-spacex.store",
    "giveawaytesla.me",
    "vwv-binance.com",
    "tebestina.info",
    "elon-tesla.info",
    "walletgenerator.org",
    "bnb-binance.com",
    "www-vntage-myetherwallet.com",
    "www-vintage-myetherwallet.com",
    "www-vintaqe-myetherwallet.com",
    "www-vnitage-myetherwallet.com",
    "www1-vintage-myetherwallet.com",
    "ldex.pw",
    "blcckchian.lcgjn.com",
    "lcgjn.com",
    "blodkchian.com",
    "giveaway-tesla.club",
    "cointo.us",
    "launchpadbinance.com",
    "launchpad-binance.com",
    "crypto-mult.io",
    "btc.crypto-mult.io",
    "ltc.crypto-mult.io",
    "doge.crypto-mult.io",
    "xeppwallet.io",
    "dextestnet-binance.com",
    "dexbinance.in",
    "myehtervallet.com",
    "receive-ethereum.com",
    "goxtrade.com",
    "etbcwallet.com",
    "ildex.pw",
    "blockchainxyz.000webhostapp.com",
    "blockchainhacker.net",
    "binance-zendesk.net",
    "cashbit.world",
    "miningbanking.com",
    "constantinople.site",
    "transfer-btc.website",
    "tesla-gift.club",
    "medium.return-btc.com",
    "return-btc.com",
    "trezor-official.link",
    "giveaway-xrp.com",
    "idex-market.pw",
    "xn--polonex-cza.com",
    "xcryptofunds.com",
    "buy7000btc.online",
    "idexmarket.pw",
    "exodus-wallet.net",
    "trezor-wallet.la",
    "cometcrypt.com",
    "ethmarket.store",
    "btc-pro.co",
    "platform-bitmex.com",
    "constantinoplehardfork.cf",
    "elon-gifting.website",
    "tesla3.org",
    "ethnocrypt.com",
    "cashadd.org",
    "exmo.in.ua",
    "tesla-gift.space",
    "idexx.pw",
    "official-elon.space",
    "idexmartk.net",
    "airdrop-running.info",
    "mybitcoinqrcode.com",
    "client-tezbox.com",
    "binance.bintestnet.com",
    "bintestnet.com",
    "ico-samsung.org",
    "btcdaily.info",
    "chance.services",
    "biockchainn.com",
    "supermining.website",
    "binance-dex.cf",
    "electrum.mx",
    "l-jaxx.io",
    "xn----itbjab7adkacocegb9etd2c.xn--p1ai",
    "ripplegiveaway.net",
    "i-dex.pw",
    "bithomp.info",
    "coinpromo.fund",
    "bitcoin-btc-qr-code-generator.com",
    "thundercore.space",
    "xn--mrcatox-bya.com",
    "trustswallet.xyz",
    "electrum.la",
    "idex.pw",
    "btc-gift.com",
    "bin-testnet.com",
    "4-xrp.com",
    "live-ethers.com",
    "coinmining.website",
    "coinpromo.icu",
    "bithumb.cf",
    "xrpbullish.blogspot.com",
    "bitlhomp.com",
    "ripple-infogiveaway.com",
    "bonusmonthly.blogspot.com",
    "dex-launch.net",
    "xrp.earth",
    "microtestdigitalagency.host",
    "bitcoin-doubler.us",
    "atomicwallet.tech",
    "idex.cash",
    "ripplebounty.blogspot.com",
    "satoshilite.promo",
    "bitmex-airdrop.com",
    "localbitcoins-verify.com",
    "coindecker.com",
    "everex.cash.events-erc-20.com",
    "events-erc-20.com",
    "tokenstore.store",
    "bountyxrp.blogspot.am",
    "bountyxrp.blogspot.com",
    "ico-matic.network",
    "wallet-trezor.io-backup-online.info",
    "io-backup-online.info",
    "exoduswallet.io",
    "matic.live",
    "buterin-promo.info",
    "ethgift.blogspot.com",
    "binance.bilttly.com",
    "bitlvy.com",
    "binance.bitlvy.com",
    "binance.bnbcryptofiat.com",
    "bnbcryptofiat.com",
    "xrp-ripple.org",
    "idex.dev",
    "get-ltc-now.online",
    "hellogoldcontract.com",
    "the-spectrumnetwork.com",
    "paxfuiverify.info",
    "besetchange.org.ru",
    "blockchai-w.info",
    "bestmixer.info",
    "bin-dex.club",
    "claim-token-dgtx.com",
    "digitexfutures.com.claim-token-dgtx.com",
    "dex-launch.com",
    "dexbetalaunchcampaign.com",
    "bitcoin-btc-adder.com",
    "constantinopleplus.tech",
    "tokensico.online",
    "official-binance.space",
    "rnuetherewallet.com",
    "myeterewalliet.com",
    "gruzovyespecavtovesy.online",
    "gdax.us",
    "hillstrade.net",
    "decentralized-launch.com",
    "binancebnb-dex.net",
    "xn--lgin-blockchain-dl5h.com",
    "xn--logn-blockchan-2lbk.com",
    "blockchain-0158275.info",
    "blockchain-0174628.info",
    "blockchain-0182719.info",
    "blockchain-0193765.info",
    "blockchain-0289488.info",
    "blockchain-10358.info",
    "blockchain-1561.info",
    "blockchain-199372.info",
    "blockchain-401988.info",
    "blockchain-901742.info",
    "blockchain-918425.info",
    "blockchain-9501.info",
    "myetherwallet.com-eth.network",
    "com-eth.network",
    "bnb-launch.eu",
    "electrum.bz",
    "bnb-testnet.com",
    "matic-network.com",
    "fortunejack.cc",
    "dex.binance.org.nz",
    "binance.org.nz",
    "rnyatharwellat.com",
    "get-xlm-stellar.org",
    "kartiy.com",
    "dextestnet.com",
    "drep-wallet.com",
    "updatebinance.com",
    "myetherwallet-admin.com",
    "xn--myetherwalle-4k5f.com",
    "xn--myetherwlet-3kb80f.com",
    "blockchnain.info",
    "blochchai.info",
    "blochchaim.info",
    "blocichain.com",
    "blocickchain.com",
    "bittrexi.online",
    "xn--intenational-bittrex-65g.com",
    "xn--intrnational-bittrex-yyg.com",
    "blockholn.com",
    "blockinchain.pl",
    "bloclkchain.com",
    "paxfulupdate.com",
    "xn--bittrx-tva.com",
    "xn--bttrex-b9a.com",
    "https-blocckchain.com",
    "yobit-wallet.com",
    "hittbtc.net",
    "rnyeatlerwaitet.com",
    "backxcoin.com",
    "admaeto.com",
    "verify-bloch-chain.com",
    "blockhchain.info",
    "blokcihain.com",
    "xn--blckchain-66a.com",
    "verify-coinbase.com",
    "blockchaiiin.com",
    "coinbase.pro-xa.com",
    "pro-xa.com",
    "blockcihain.com",
    "medium.wiki",
    "ethers.today",
    "bitcoinru-wallet.site",
    "bitcoin24-wallet.site",
    "bitcoin-walletru.site",
    "blokhchian-wallet.xyz",
    "bloclkchaln.online",
    "blockchainwalletoffical.com",
    "www---binance.com",
    "xn--intrnational-bittrex-yuc.com",
    "binance-testnet.net",
    "myethervvallet.co.uk",
    "paxful-es.com",
    "xn--bittrx-7h8b.com",
    "xn--bttrx-q51bme.com",
    "blockchain-251.ru",
    "blockchain-252.ru",
    "blockchain-253.ru",
    "blockchain-254.ru",
    "blockchain-255.ru",
    "blockchain-256.ru",
    "blockchain-257.ru",
    "blockchain-258.ru",
    "blockchain-259.ru",
    "blockchain-260.ru",
    "xn--eectrum-9hb.org",
    "xn--eletrum-45a.com",
    "xn--internatinal-bittrex-4nh.com",
    "xn--internatinal-bittrex-q86k.com",
    "xn--internatonalbittrex-71c.com",
    "gram.one",
    "bittrexverifymeplease.com",
    "interneational-bittrex.com",
    "loginbittrex.com",
    "myethervvallet.vip",
    "xn--bittex-lkc.com",
    "xn--btstamp-eeb.net",
    "zollo.io",
    "tde.zollo.io",
    "zilliqablog.com",
    "register.zollo.io",
    "xn--nternational-bittrex-966k.com",
    "hitbtc.com.pl",
    "blcokchain.lloqin.com",
    "lloqin.com",
    "ldax.market",
    "idexcorp.com",
    "idexcorp.comgg.gg",
    "investment2x.online",
    "electrumsecuredownload.com",
    "myetherwallet-claim.com",
    "myetherwallet-claim.net",
    "myetherwallet-claim.org",
    "myethoverwalluet.site",
    "myethsonemallvet.site",
    "myethsonewallret.icu",
    "myethschoolclass.pw",
    "kucoin-activity.com",
    "mtc-ico.online",
    "ethereum2.online",
    "cryptoempireinc.co",
    "ripplebonus.blogspot.com",
    "idexx.site",
    "myethantiwallcafe.club",
    "coinbase-getcrypto.890m.com",
    "bithextrade.com",
    "matic.work",
    "xn--bttrx-y3a5604c.com",
    "blockchain-130.ru",
    "binance-testnet.host",
    "binance-testnet.fun",
    "binance-dextestnet.site",
    "rnuathervatlet.com",
    "myetherwallet-bonus.info",
    "exodus-support.com",
    "myetherwallet-bonus.net",
    "myetherwallet-bonus.org",
    "bitcoinru-org.site",
    "coinapult-login.com",
    "blogbibox.com",
    "binance-testnet.com",
    "earnfreebitcoins.org",
    "myethyogawallclass.icu",
    "wowx.io",
    "coinbtcbot.com",
    "catbot.ru",
    "paraetherwallet.com",
    "binancecz.blogspot.com",
    "bttorent.com",
    "xn--coinbse-en4c.com",
    "your-btc.co.uk",
    "cryptotis.com",
    "btcldn.com",
    "ildexmarket.info",
    "bitcoin-gold-blockchain.info",
    "international-bittrex-login.com",
    "internation-bittrex.com",
    "internatlonal-bittrex.com",
    "international-bittrex-a.com",
    "100x-mlt-btc.com",
    "constantinopleplus.io",
    "official-trezor.cc",
    "usddex.io",
    "mithril.pro",
    "cryptoxfan.website",
    "wbscoins.com",
    "neotracker.me",
    "gift-wallet-stellar.org",
    "eth.elon-musk.space",
    "btc.elon-musk.space",
    "elon-musk.space",
    "rnuathervaltet.com",
    "rnyetherwaliet.com",
    "celer.work",
    "electrumproject.org",
    "idex.money",
    "celerc.network",
    "kraken-com.ga",
    "exoduswallet.online",
    "bitcoinarmory.tech",
    "celer.today",
    "celer.site",
    "coinbase-app.ga",
    "ripplenet.limited",
    "gram-network.org",
    "xyogift.network",
    "blockchein.lpgirn.com",
    "lpgirn.com",
    "thewayhere.accesshealthautism.com.au",
    "hmqfoundation.com",
    "onixcrypt.com",
    "ldexmarket.pro",
    "vintage-metherwallet.co",
    "bitcoinvest.tech",
    "bestcdanje.org.ru",
    "kraken-login.ml",
    "kraken-login.ga",
    "gram-network.net",
    "ethersale.online",
    "huobiairdrop.com",
    "get-gift-stellar.org",
    "ethers-live.com",
    "forexetoro.com",
    "huobi-airdrop.org",
    "huobiairdrop.co",
    "electrumcircle.com",
    "l-electrum.org",
    "paxful-dashboard.com",
    "paxfuluser.com",
    "vlntage-myethereswallet.com",
    "rmyetherewallet.com",
    "idexxonline.com",
    "mycrypto.kr",
    "p-eos.io",
    "btc24ex.pro",
    "get-10000-xlm.org",
    "blockckchain.info",
    "gift-lumens-stellar.org",
    "myelevenwallsen.site",
    "dexlaunch-testnet.space",
    "moyblogspor.blogspot.com",
    "bounty-platform.website",
    "celer.space",
    "launchpad.celer.space",
    "wallet.elitetreum.com",
    "elitetreum.com",
    "dogx.dog",
    "cryptoxinvest.com",
    "paxfulconfirmation.com",
    "p-eos.one",
    "idex.website",
    "x-crypto.info",
    "npxs.pro",
    "ethereum-constantinople.com",
    "gift7500xlm.org",
    "azbit.org",
    "bittorent.site",
    "dex-binances.info",
    "exodus-wallet.info",
    "idexxmarket.website",
    "locaibltcoins.ru",
    "myethcwallet.com",
    "myetherwallet-vintage.co",
    "official-trezor.org",
    "paxful-login.id",
    "paxfulhelp.com",
    "paxfultrade.ml",
    "paxllful.com",
    "vlntage-myetherewallet.com",
    "xn--myeterwallt-nl8ey3e.com",
    "xn--myetherwllt-jfe8916g.com",
    "xn--myterwallet-ml8eq3e.com",
    "ltcgiveaway.online",
    "electrex.info",
    "binance-bonus.online",
    "binance-support.home.blog",
    "binance.com1615873261.ga",
    "binance.com1983762161.ml",
    "binance.music.blog",
    "binancecustomersupport18883023444.home.blog",
    "binances.site",
    "binancesupport.home.blog",
    "cm-coinmaster.home.blog",
    "coinbasexrp.blogspot.com",
    "coinbaze.online",
    "coinindex.tech",
    "cpanel.myietherwallet.com",
    "imageonline.ga",
    "ldexmarket.site",
    "licalbitcoins.org",
    "localbitcoihs.ru",
    "localbitcoind.icu",
    "localbitcoind.mobi",
    "localbitcoins-rus.ru",
    "localbitcoinss.info",
    "localbitconis.info",
    "localbitcouins.mobi",
    "localbitcouins.pro",
    "localnitcoins.info",
    "localvitcoins.info",
    "locslbitcoins.icu",
    "lokalbitcons.com",
    "mail.bittrex1.com",
    "myelhereswallet.com",
    "myelherwalicet.com",
    "myeterwollet.com",
    "myethelwallet.com",
    "myethermwallet.com",
    "myietherwallet.com",
    "mypaxful.com",
    "paxful.gq",
    "paxful.vip",
    "paxfulsupports.com",
    "paxfulverify.website",
    "signin-coinbase.com",
    "telosfundation.io",
    "trezor-sale.com",
    "trezor-shop.website",
    "vintage-myetherewallet.com",
    "vintage.myetherewallet.com",
    "vintaqe-myetherewallet.com",
    "xn--bance-3l1b03b.com",
    "xn--myetherwalt-crb49b.com",
    "xn--mytherwalle-jb9ey9a.com",
    "binance-testnet.site",
    "monero-rings.org",
    "myxrmwallet.com",
    "rnyuthewallet.xyz",
    "heuvellandcatering.com",
    "vlntage-myetherwallet.com",
    "idex-market-com.info",
    "binaripple.blogspot.com",
    "binafeb.blogspot.com",
    "fetchai.net",
    "binance-support-number.com",
    "httpsmyetherwallet.com",
    "deltafork.app",
    "yobitex-ru.net",
    "paxfultrade.xyz",
    "fetchai.eu",
    "bitcoin-update.info",
    "brad-promo.info",
    "rnyuthevvallet.com",
    "bttairdrop.com",
    "electrum.org.uk",
    "rnyuthevallet.xyz",
    "fetch-ai.net",
    "paxfull.ga",
    "musk.center",
    "telegram.systems",
    "fetchai.co",
    "fetchai.org",
    "electrumhome.org",
    "xn--myethewalt-zmb75bgl.com",
    "vintaqe-myetherwallet.com",
    "login-blockchaain.com",
    "loqin-blockchain.com",
    "loqin-blockchaln.com",
    "vintagemyetherwallet.com",
    "xn--medum-85a.com",
    "rntherwallet.icu",
    "myethrewallet.xyz",
    "myetherwalletcom.xyz",
    "myetherwalletcom.website",
    "wwwmyetherwallet.shop",
    "wwwmyetherwallet.icu",
    "etherwallets.info",
    "mydogechains.info",
    "rntherwallet.xyz",
    "xrpbinan.blogspot.com",
    "musk.credit",
    "musk.fyi",
    "binanceee.blogspot.com",
    "binanceee.blogspot.lt",
    "binanceee.blogspot.com.mt",
    "paxful.log-iin.com",
    "log-iin.com",
    "myehlerwal.com",
    "atomcwallet.com",
    "atomcwallet.club",
    "atomswallet.co",
    "atomswallet.me",
    "atomswallet.org",
    "atomcwallet.biz",
    "bittrex-login.inter-cliente.online",
    "inter-cliente.online",
    "store-trezor.com",
    "store-trezor.org",
    "storetrezor.com",
    "trezor-wallet.info",
    "wallet-trezor.info",
    "trezor-shops.com",
    "wallets-trezor.ltd",
    "store-trezor.eu",
    "myelhitorwailct.com",
    "vintage-myethereswallet.com",
    "bitcoin-mixer.tk",
    "46.226.108.171",
    "bancor.network.sign-in-by-wallet.event-distributors.com",
    "bancor.network.sign-in-by-wallet.members-gift.com",
    "blogbinanc.blogspot.com",
    "coinbase.com-9da7a204-544e-53d1-9a12-61176c4d4cd8.site",
    "coinbase.com-9da7a204-544e-5fd1-9a12-61176c5d4cd8.com",
    "coinbase.com-9da7a204-544e-63d1-4a12-61176c4d4cd8.site",
    "coinbase.com-9da7a204-544e-63d1-4a12-61176c4d4cd8.su",
    "coinbasebitbank.com",
    "coinbasehelpdesk.com",
    "coindesk.link.16640.aqq.ru",
    "coindesk.name.16640.aqq.ru",
    "coindeskjapan.net",
    "coinlbase.com-7da7a204-744e-63d1-64b12-61176c4d4cd7.site",
    "coinlbase.space",
    "cojnbase.com",
    "dexlaunch-binance.com",
    "trezor-wallet.shop",
    "idex-market-com.com",
    "idexmarket.pro",
    "idexmarket.store",
    "indadax.com",
    "ipaxful.us",
    "kyber.network.sign-in.user-bonus-tokens.com",
    "lacalbitcoins.ru",
    "lcalbitcoins.ru",
    "licalbitcoins.ru",
    "loalbitcoins.ru",
    "localbicoins.com",
    "localbircoins.ru",
    "localbitcoim.com",
    "localbitcoims.pro",
    "localbitcoin.com.paxfulreport.online",
    "localbitcoina.ru",
    "localbitcoind.ru",
    "localbitcoins.technology.16640.aqq.ru",
    "localbitcouins.ru",
    "localbitcouns.ru",
    "localbiticoins.com",
    "localbitocin.com",
    "localethereum.biz.16640.aqq.ru",
    "localethereum.cc.16640.aqq.ru",
    "localethereum.club.16640.aqq.ru",
    "localethereum.co.16640.aqq.ru",
    "localethereum.company.16640.aqq.ru",
    "localethereum.me.16640.aqq.ru",
    "localethereum.name.16640.aqq.ru",
    "localethereum.technology.16640.aqq.ru",
    "localethereum.today.16640.aqq.ru",
    "localibitcons.com",
    "localnitcoins.ru",
    "localvitcoins.ru",
    "locialbitcoins.com",
    "locoibitcoin.com",
    "locslbitcoins.pro",
    "loculbitcoins.com",
    "lokalbitcoin.net",
    "lokalbitcoin.top",
    "lokalbitkoins.com",
    "lovalbitcoins.ru",
    "loxalbitcoin.com",
    "my.paxfulcheck.xyz",
    "myathereswallet.com",
    "myatherewallet.com",
    "myehterwoailet.com",
    "myelherevallet.com",
    "myelherewallet.com",
    "myelherswaltet.com",
    "myelherwaflet.com",
    "myelherwalfet.com",
    "myelherwaltet.com",
    "myelherwollet.com",
    "myesererwallet.com",
    "myetherecvallet.com",
    "myetherecwallet.com",
    "myetherewaiiet.com",
    "myetherewallef.com",
    "myetherewaltyt.com",
    "myetheruomwallet.com",
    "myetherwalet.ru",
    "myetherwalets.ru",
    "myetherwallet-payment.com",
    "myetherwallet.com-7da3a790-214a-51c7-14g19-87531g0f4co9.site",
    "myetherwallet.com-7da3a790-214u-23c1-14a19-87536g0f4ca1.site",
    "myetherwallet.com-7da3a890-214u-23c1-14a19-87536g0f4cc3.site",
    "myetherwallet.com-7da3a890-214u-23c1-14a19-87536g0f4ce5.site",
    "myetherwallet.com-7da3a890-214u-23c1-14a19-87536g0f4cf6.site",
    "myetherwallet.com-7da3a890-214u-23c1-14a19-87536g0f4cg7.site",
    "myetherwallet.com.ether-send.info",
    "myetherwallet.com.ether-transactions.info",
    "myetherwallet.com.ethers-transaction.info",
    "myetherwallet.com.node-ethereum.info",
    "myetherwallet.com.sen-transaction.info",
    "myetherwallets.ru",
    "myetherweltet.com",
    "myethewaliet-login.site",
    "myethrernwallet.com",
    "myetllerwallet.com",
    "myetnerwalet.ru",
    "myetnerwallet.com.load-transaction.info",
    "myetnerwallet.com.seth-transaction.info",
    "myetnerwallets.ru",
    "myetserwallet.com",
    "myiethereswallet.com",
    "mythetawallet.com",
    "ocalbitcoins.ru",
    "paxful.com.loolic.ga",
    "paxfulcheck.xyz",
    "paxfulreport.online",
    "paxfulreverify.com",
    "paxfulverify.online",
    "remitano.trade",
    "rnuetherwallet.com",
    "rnyethereurnwallet.com",
    "rnyethrewallet.com",
    "shop-trezor.info",
    "trezor-ship.biz",
    "trezor-shop.biz",
    "trezor-wallet.eu",
    "trezor-wallet.live",
    "trustwallet.com.erc-20-gift.com",
    "vvww-coinbase.com",
    "vww-coinbase.com",
    "vww.myetnerwallet.com.node-send.info",
    "wallets-trezor.eu",
    "wallets-trezor.org",
    "wvw-coinbase.com",
    "www-ldex.market",
    "xn--conbase-hza.com",
    "xn--medum-g81b.com",
    "xn--myetherwllet-ncb.com.status-send.info",
    "xn--myetherwllt-3kb0v.com",
    "xn--myetherwllt-3kb8699g.com",
    "xn--pxful-93b.com",
    "xn--trezor-wllet-59a.com",
    "rnuethervvallet.com",
    "electrumupdate.com",
    "electrumweb.net",
    "vintage-myetherwallet.com",
    "wedderbergen.com",
    "myetherwallet.com.access-wallet.info",
    "access-wallet.info",
    "electrumfix.com",
    "electrumsource.org",
    "bltaddress.org",
    "cryptoxcash.com",
    "cryptonback.com",
    "binannn.blogspot.com",
    "binanxrp.blogspot.com",
    "unfreeze-paxful.com",
    "rnuetharwallet.com",
    "bintrx.blogspot.com",
    "bin-ance.blogspot.com.tr",
    "binaxrp.blogspot.com",
    "itubeonline.com",
    "enjin.pro",
    "tronxwallet.com",
    "tronxcash.com",
    "electrumupgrade.org",
    "wwwmycrypto.com",
    "coindesk.me.16640.aqq.ru",
    "electrumdownload.com",
    "ldexmarket.com",
    "bittrex-m.com",
    "rnuathervvalfet.com",
    "spacex.promo",
    "paxful.com.ru",
    "electrumbase.com",
    "electrumcore.net",
    "electrumapps.com",
    "xn--blckchin-eza9o.com",
    "idexxmarket.site",
    "idexmarkt.store",
    "get2802lumens.online",
    "electrumofficial.com",
    "privatstuff.store",
    "ttrxtrx.blogspot.com",
    "xrpxrp.blogspot.com",
    "ldex-market.pro",
    "bittorrent.pro",
    "doublebitcoin.io",
    "lucalbltcoins.com",
    "xn--hitbt-8xa.com",
    "idexmarket.space",
    "bakktplatform.io",
    "btcdev.us",
    "myetherwallet.com-7da3a890-214u-23c1-14a19-87536g0f4cd4.site",
    "myetherwallet.com-7da3a890-214u-23c1-14a19-87536g0f4cb2.site",
    "bittorrent.foundation",
    "getfree-neo.blogspot.my",
    "getfree-neo.blogspot.com",
    "binjerseygbpeur.com",
    "get-freecrypto.blogspot.com",
    "eth4free.com",
    "giveaway-x.blogspot.com",
    "etherchange.tech",
    "claim-xyotokens.com",
    "bitcoin4future.club",
    "dexbetalaunch.com",
    "airdropxneo.blogspot.com",
    "myetheresswallet.com",
    "bitaeon.top",
    "btrmartgve.com",
    "stellar-lightning.org",
    "xllwallet.com",
    "idexmarket.website",
    "cryptoexcoins.com",
    "bitcoin-generator.network",
    "ethtokens.store",
    "xn--bttorrent-54a.com",
    "btcaim.com",
    "bizzilion.com",
    "seth-transaction.info",
    "cryptocreditfoundation.com",
    "circlemix.io",
    "jancrypto.blogspot.com",
    "wallet-support.com",
    "airdropxrp.blogspot.com",
    "cryptoback.top",
    "cryptogene.net",
    "buteringift.com",
    "quick2xbtc.com",
    "doublecrypto.ml",
    "doubleinvestment.cf",
    "doublebitco.in",
    "bitcoin-pro.club",
    "idexgroup.online",
    "bttpromotion.github.io",
    "telos-foundation.io",
    "binancegive.com",
    "ethereum-advanced.com",
    "investmentdoubler.online",
    "bttpromo.github.io",
    "bittorrentpromo.github.io",
    "binancedexg.com",
    "isecurecoinbase.live",
    "meyhterwailet.com",
    "mycfherwallet.com",
    "myctherwailet.com",
    "myctherwalet.com",
    "myefhervvailet.com",
    "myefhervvaliet.com",
    "myefhervvellet.com",
    "myefherwalet.com",
    "myefherwellet.com",
    "myefterwallet.com",
    "myehtervvallet.com",
    "myetfervvallet.com",
    "myetfervvellet.com",
    "myetferwaillet.com",
    "myethervellet.com",
    "myethervvallct.com",
    "myethervveilet.com",
    "myethervveliet.com",
    "myethervvellet.org",
    "myetherwalfet.com",
    "myetherwallet.com.ether-transaction.info",
    "myetherweilet.com",
    "myetherweliet.com",
    "myetherwellct.com",
    "myethrwallet.ru",
    "myetnerwallet.ru",
    "mythervvallet.com",
    "paxful.ml",
    "www-paxful.com",
    "xn--dx-qbb4240a.market",
    "xn--myethrwllet-q7a1340h.com",
    "xn--trzor-7za.net",
    "xn--trzor-csa.com",
    "xn--trzor-csa.co",
    "toke.online",
    "binancexrpjan.blogspot.com",
    "ethercontest.com",
    "escobarsbr.com",
    "myesereswallet.com",
    "myeromahousit.com",
    "binancegiveaways.com",
    "eloncity.sale",
    "mana-gift.com",
    "digitexfutures.site",
    "localbitcoins.com.support-ticket-report.com",
    "paxful.co.in",
    "paxfulwallets.com",
    "trezor-official.org",
    "xn--myetherwalt-15b4719g.com",
    "xn--myetherwalt-o4b6229g.com",
    "xn--myetherwat-mybx6229g.com",
    "xn--mythrwllet-jj3enkc.com",
    "localbltcoins.com",
    "meytherwalet.com",
    "myctherwallet.icu",
    "myetherwallet.com.et-transaction.info",
    "myetherwallet.com.send-etransaction.info",
    "myetherwallet.com.view-chain.info",
    "myetherwattet.com",
    "paxful.to",
    "paxfull.club",
    "support-ticket-report.com",
    "localethereum.com.support-ticket-report.com",
    "doublebitcoin.cc",
    "double2btc.top",
    "trondiscount.com",
    "hydrowallet.io",
    "ltcpro.live",
    "ltcgiveaway.com",
    "ltcpro.xyz",
    "dexchainlaunchpad.com",
    "ethgws.com",
    "xpro.icu",
    "airdropcampaign.com",
    "bttlaunchpad.com",
    "client-wavesx.com",
    "btc-promo.net",
    "waves-x.com",
    "etcv-wallet.co",
    "faceusd.com",
    "tokenshops.online",
    "janbinancexrp.blogspot.com",
    "janbinance.blogspot.com",
    "coinbit24.site",
    "idex-market.live",
    "x10eth.com",
    "betabindex.com",
    "bitmrtpro.com",
    "bonus-stellarterm.com",
    "coinbvse.com",
    "dex-hbiglobal.info",
    "xn--wvww-krakn-5q3e.com",
    "bancor.network.xbancor.online",
    "binancegift.online",
    "bitcoincoinbase.top",
    "coimbase.top",
    "coinbase-airdrop.xyz",
    "coinbase-btc.top",
    "coinbase-btcairdrop.top",
    "coinbase-competition.top",
    "coinbase-crypto.top",
    "coinbase-give.top",
    "coinbase-gives.top",
    "coinbase-prize.top",
    "coinbase.army",
    "coinbaseair.coinbaseairdrops.info",
    "coinbaseair.info",
    "coinbasebitcoin.coinbaseairdrops.info",
    "coinbasebtcairdrop.coinbaseairdrops.info",
    "coinbasebtcairdrop.info",
    "coinbasebtcdrop.coinbaseairdrops.info",
    "coinbased.top",
    "coinbased.xyz",
    "coinbasedex.top",
    "coinbasedexdrop.coinbaseairdrops.info",
    "coinbasedexx.coinbaseairdrops.info",
    "coinbasedx.coinbaseairdrops.info",
    "coinbasee.coinbaseairdrops.info",
    "coinbasee.info",
    "coinbaseio.top",
    "coinbaserx.coinbaseairdrops.info",
    "coinbaserx.top",
    "coinbasevert.network",
    "coinbasevertnetwork.coinbaseairdrops.info",
    "coinbasex.top",
    "coinbasexx.coinbaseairdrops.info",
    "colnbase.top",
    "cpanel.bitcoincoinbase.top",
    "cpanel.coinbase-airdrop.top",
    "cpanel.coinbase-airdrop.xyz",
    "cpanel.coinbase-btc.top",
    "cpanel.coinbase-btc.xyz",
    "cpanel.coinbase-btcairdrop.top",
    "cpanel.coinbase-competition.top",
    "cpanel.coinbase-crypto.top",
    "cpanel.coinbase-give.top",
    "cpanel.coinbase-gives.top",
    "cpanel.coinbase-prize.top",
    "cpanel.coinbaseair.info",
    "cpanel.coinbaseairdrops.info",
    "cpanel.coinbasebtcairdrop.info",
    "cpanel.coinbasebtcdrop.info",
    "cpanel.coinbasecampaign.online",
    "cpanel.coinbased.top",
    "cpanel.coinbased.xyz",
    "cpanel.coinbasedex.top",
    "cpanel.coinbasedexdrop.info",
    "cpanel.coinbasedexio.online",
    "cpanel.coinbasee.info",
    "cpanel.coinbasegiveaway.online",
    "cpanel.coinbasegives.top",
    "cpanel.coinbaseio.top",
    "cpanel.coinbaserx.top",
    "cpanel.coinbasex.top",
    "cpanel.myetherwallet-dec.space",
    "lccalbtlcoins.com",
    "mail.coinbase.army",
    "myetherwallet-ye.space",
    "xn--myethrwalt-zxb6271g.com",
    "xn--mytherwllt-kj3emkia.com",
    "idex-market.website",
    "forkdelta.space",
    "big-gift.ga",
    "doubleinvest.online",
    "ebitservices.com",
    "btcexcelinvest.com",
    "electrum.one",
    "e-xodus.com",
    "myetcvwallet.com",
    "wallet.hydroproject.io",
    "hydroprotocol.tech",
    "etcv-wallet.com",
    "tesla-promo.tech",
    "binancejan.blogspot.com",
    "ethereumcv.io",
    "ethereumcv.info",
    "ethnowawallet.com",
    "myetherwallet-dfz.space",
    "sdf34myetherwallet.site",
    "wallet.bancor.network.xbancor.online",
    "xbancor.online",
    "23423myetherwallet.site",
    "33333myetherwallet.site",
    "44332myetherwallet.site",
    "binancepromo.com",
    "coinbase-airdrop.com",
    "jhfjmyetherwallet.site",
    "bitmartpro.live",
    "etcvwallet.com",
    "coinibase.pro",
    "myetherwallet-ne.space",
    "trezor-sales.online",
    "karatbars-affiliate-bonus.com",
    "idex.ru.com",
    "2fa-myetherwallet.com",
    "blocktower.info",
    "myetherwallet-eb.space",
    "trezor-shop.org",
    "hydroproject.io",
    "rnyetherwallet.site",
    "xn--mythrwllt-576dqjcf.com",
    "en.coinbase-coupon.com",
    "localbiitcoinz.club",
    "myethereswallet.com",
    "myethreiwallet.com",
    "online-localbitcoins-th.co",
    "test.tdstraf.ru",
    "vwww-coinbase.com",
    "xn--binnce-dh8b.com",
    "xn--bnnce-c51bsf.com",
    "xn--vww-krakn-2f7d.com",
    "xn--wvw-krakn-2f7d.com",
    "gowincoin.com",
    "delta.money",
    "coinsupergive.live",
    "ethers-claim.com",
    "binanceevent.net",
    "huobilive.icu",
    "cryptocashback.org",
    "cryptocashback.info",
    "cryptoback.one",
    "newyearcrypto.blogspot.com",
    "newyearneo.blogspot.com",
    "cryptobridge.su",
    "xrp-giveaway.com",
    "biboxpr.icu",
    "myetheresvallet.com",
    "paxfu1.com.mx",
    "paxfui.com",
    "paxful-pp.com",
    "xn--coinbas-xs4c.com",
    "xn--myethrwllt-kj3epkf.com",
    "com-1a7d1kf3i5786dghba88.site",
    "coinbasegiveaway.info",
    "coinbasegiveaway.online",
    "ethnowa-wallet.com",
    "crystal-profit.com",
    "bancor.store",
    "binance-competition.info",
    "binancel.ru",
    "bithumbs.com",
    "coinlbase.coinbase.cloud",
    "lccalbltcoins.com",
    "myetherevvallet.com",
    "myetlnerwallet.com",
    "posmyetherwallet.com",
    "rnythervvallet.com",
    "xn--coinbse-ixa.com",
    "xn--wvw-krken-576d.com",
    "xn--wwv-krken-576d.com",
    "cash-bitcoin.online",
    "yobitex.info",
    "yobit-admin.net",
    "yobit--net.com",
    "supportyobit.net",
    "xn--ybit-gra.net",
    "xn--yobt-sya.net",
    "bankcor.network",
    "bankor.network",
    "binance-tr.com",
    "binancebch.com",
    "coinbasecanada.com",
    "coinbasegives.top",
    "coinbaseofficials.com",
    "https-trezor.com",
    "localbtlcoins.com",
    "trezor.site",
    "xn--bitfinx-v9a.com",
    "xn--bitrex-rkb.com",
    "xn--vww-krken-576d.com",
    "xn--www-kaken-u0b.com",
    "xn--www-krake-3vb.com",
    "xn--www-krakn-2f7d.com",
    "xn--www-krken-576d.com",
    "binance-competition.net",
    "excdus.org",
    "xn--myethrwalt-yxb2271gfa.com",
    "giveawayxneo.blogspot.com",
    "ethtokens.online",
    "okexpro.icu",
    "poetairdrop.com",
    "coinbankatm.com",
    "coinbasedex.online",
    "coinsbankcom.com",
    "form-coinbase.com",
    "kraken.fr",
    "mercoatox.com",
    "mwww-kraken.com",
    "myetherwallel.pro",
    "poloniexbch.com",
    "swww-kraken.com",
    "coinbase-airdrop.top",
    "coinbase-btc.xyz",
    "kucoindectrx.blogspot.com",
    "jaxx.im",
    "jaxx.ru.com",
    "coinbasedexio.online",
    "myetherwallet-ico.space",
    "myetherwallet-xo.space",
    "myetherwellet.cc",
    "trezor.ltd",
    "user.paxfulreports.com",
    "crypto-positive.club",
    "erc-20-tokens-gift.com",
    "trustwallet.com.erc-20-tokens-gift.com",
    "binance-dex.pro",
    "binance.bid",
    "binancebtc.com",
    "binancecashback.com",
    "binancemobile.app",
    "medlum.org",
    "trezor.vozp.cz",
    "xn--myethrwalet-92b.com",
    "xn--myethrwalt-yxb7271g.com",
    "xn--myethrwlet-xxb7341g.com",
    "binance.fit",
    "coinbasebonus.org",
    "coinbasediscount.com",
    "localbitcoins.vip",
    "myetherwallet.ilogirn.com",
    "trezor-wallet.online",
    "xn--myeerwallet-vic8676g.com",
    "bittlrex.com",
    "xn--binnce-rhc.com",
    "binance.exchange2018.support",
    "exchange2018.support",
    "binancehelpdesk.com",
    "binancetwofactorauthentication.com",
    "pumapay.io.giveaway-user.com",
    "ether-contest.com",
    "dex-huobiglo.info",
    "xn--myetherllet-hoc47z.com",
    "xn--myethewllet-hdc193a.com",
    "airgiveaway.typeform.com",
    "bitcashsv.org",
    "bitlry.info",
    "coinbasse.com198637829761.ml",
    "myethevvallel.com",
    "myetnerwalel.com",
    "xn--myeterwalle-wc9exr.com",
    "xn--pxful-j11b.com",
    "etherdelta.pro",
    "quarkairdrop.com",
    "crypterium.site",
    "bittfinex.com",
    "bittrex.mobi",
    "bittrexbtc.com",
    "bonus-coinbase.com",
    "coinbase-giveaway.com",
    "coinbaseearn.com",
    "krakenonline.com",
    "coinbasedexdrop.info",
    "coinbebase.com",
    "localbitcoins-info.ru",
    "localbitcoins-ru.ru",
    "muyetherwaliet.com",
    "myelherwaliet.com",
    "myetherevallet.com",
    "myetherwallet.lcgirn.com",
    "myethevalet.com",
    "trezor-wallet.net",
    "xn--hobi-08a.com",
    "xn--huob-tpa.com",
    "xn--myetherwat-zxba7729g.com",
    "xn--myethrwalet-92b3729g.com",
    "xn--mytherwalet-3qb20c.com",
    "xn--mythrwalet-xxb0271g.com",
    "xn--yeterwalle-ue2e3nrs.com",
    "support-coinbase.info",
    "meduim.online",
    "myeltherwaliet.com",
    "myetherwallet-tgt.space",
    "binance.com.au",
    "bitbankmoney.com",
    "bithumbjapan.com",
    "bithumbus.com",
    "ckraken.com",
    "coinbasebtcdrop.info",
    "coindesk.vip",
    "huobipro.tk",
    "indodcx.com",
    "xn--myethrwalt-zxb1271gfa.com",
    "xn--eoscorearbitratio-l6c.io",
    "basicattentiontoken.website",
    "myetherwallet.96.lt",
    "dec-kucoin.blogspot.com",
    "trx-kucoin.blogspot.com",
    "neo-kucoin.blogspot.com",
    "cryptobountymco.com",
    "tokensic.online",
    "encrypex.online",
    "myetherwallet.890m.com",
    "freebitcobot.top",
    "biftinex.com",
    "binance-beta.info",
    "binance.bnblaunch.com",
    "bithumbloan.com",
    "bittrex.com158987679.ga",
    "coinbaseairdrops.info",
    "iwww-kraken.com",
    "kraken.world",
    "localbitcoins.cash",
    "localbitlcoins.com",
    "msetherwallet.com",
    "mycrypto.faith",
    "myetheswaiiet.info",
    "myethevvallet.biz",
    "myethevvallet.org",
    "myethevwallet.org",
    "myietherwallet.pro",
    "paxfulusers.com",
    "pr-hitbtc.com",
    "trezor-wallets.net",
    "wvvw-kraken.com",
    "wwvv-kraken.com",
    "wwwbittrex.com",
    "xn--hubi-hx5a.com",
    "xn--hubi-w0b.com",
    "xn--idx-lra.market",
    "xn--myetherwalt-c3b7729g.com",
    "xn--myethrwalet-b3b2729g.com",
    "binancedexairdrop.net",
    "giveaway2018.org",
    "bullrun2018.com",
    "doublecoinio.jdevcloud.com",
    "mediium.org",
    "myetherwallet-be.space",
    "binance-dexbeta.net",
    "bittrex-rf.com",
    "bittrex-rx.com",
    "coinbase-zendesk.com",
    "coinbasedexnews.info",
    "coinbasehub.com",
    "coinbaseth.info",
    "mycryptoa.gq",
    "myetervallient.info",
    "myethirwalde.info",
    "trezor-wallets.org",
    "vwv-kraken.com",
    "vwvw-kraken.com",
    "wvww-kraken.com",
    "xn--kaken-17b.com",
    "xn--kaken-e8b.com",
    "xn--krakn-25b.com",
    "xn--krakn-8cc.com",
    "xn--krakn-f6b.com",
    "coinbase.pro-xca.com",
    "pro-xca.com",
    "awx-ly.store",
    "binance-dex.life",
    "binance-dex.live",
    "binance-dexonline.info",
    "binance.fan",
    "binancedexbeta.com",
    "bit-thumb.com",
    "coinbasedexx.info",
    "kraken.vip",
    "localbatcoins.com",
    "localbcoins.ru",
    "localbikcoins.com",
    "localbimcoins.com",
    "localbitcains.com",
    "localbitcoims.info",
    "localbitcoin.cash",
    "localbitcoines.info",
    "localbitcolins.info",
    "localbitloins.com",
    "localbitscoins.info",
    "localsitcoins.com",
    "locslbitcoins.info",
    "lojalbitcoins.com",
    "lokalbitcoin.info",
    "metamaskhelp.com",
    "myethdwalliet.info",
    "myetherwellet.info",
    "myethieswallep.info",
    "myethlerwalliet.info",
    "myethrwaillet.info",
    "poloniex.cloud",
    "poloniexs.com",
    "shop-trezor.io",
    "stcoinbase.com",
    "trezor-wallets.store",
    "tupbit.com",
    "wwvw-kraken.com",
    "xn--conbas-xva87a.com",
    "xn--myetherwalt-b3b4039g.com",
    "coinbase.prows-ax.com",
    "prows-ax.com",
    "otx-ca.com",
    "av-za.com",
    "cla-pro.com",
    "bitcointoolmining.com",
    "idexethereum.online",
    "bbxotc.tech",
    "btc-gifts.net",
    "biitfiinex.com",
    "binance-dexbounty.info",
    "binance-download.com",
    "binancebtcairdrop.net",
    "bitbank.fund",
    "bittrexx.win",
    "careerbittrex.com",
    "coinbase-ripple.org",
    "coinbase-vip.com",
    "coinbaseairdrop.com",
    "coinbaseairdrop.info",
    "coinbasecash.com",
    "coinbasedex.info",
    "coinmarketcap.ovh",
    "hitbtc.se",
    "international-binance.com",
    "international.bittrex.com781236781.gq",
    "krakezn.com",
    "locambitcoins.com",
    "lohalbitcoins.com",
    "lolalbitcoins.com",
    "meythermallet.com",
    "mycthcrwallct.com",
    "myehtcrwallct.com",
    "myehtervvaillet.com",
    "myethernwallet.info",
    "myetherswajllet.info",
    "myetherwallet-es.space",
    "myetherwallet-get.space",
    "myetherwalletl.info",
    "myetherwolet.com",
    "myethrenwallet.com",
    "myethwallet.info",
    "myetlherwallet.online",
    "myetrhewallet.com",
    "paxful.co",
    "polonlex.com",
    "vww-kraken.com",
    "webimage.ml",
    "wwv-kraken.com",
    "www-coinsbank.com",
    "wwwhuobi.pro",
    "xn--huob-yw5a.com",
    "xn--krke-moa40d.com",
    "xn--krken-4qa.com",
    "xn--krken-c51b.com",
    "xn--krken-n41b.com",
    "xn--krkn-6na9c.com",
    "xn--methrwllet-umb0681g94a.com",
    "xn--myethewallet-9d5f.com",
    "xn--rezor-q9b.com",
    "xn--trzor-7za.com",
    "xn--trzor-vza.com",
    "xn--uphld-wob.com",
    "xn--bibo-eo5a.com",
    "paxfulldashboard.com",
    "info.paxfulverify.com",
    "paxfulverify.com",
    "myetherwallet-xyo.space",
    "view-statys.info",
    "xn--myetherwllet-59a.com.view-statys.info",
    "myethwalchellet.site",
    "applyer.info",
    "xn--pxful-3qa.com",
    "tronkucoin.blogspot.com",
    "huobiglo.com",
    "cryptokucoin.blogspot.com",
    "neokucoin.blogspot.com",
    "blockchain-update.bounceme.net",
    "coinbene.net",
    "hitbtcwalet.com",
    "musk.claims",
    "spacex.gives",
    "musk.click",
    "ethnew.store",
    "coinbase.pro-cax.com",
    "pro-cax.com",
    "cbs-pro.com",
    "txa-aso.com",
    "zas-pro.com",
    "blockchiarn.net",
    "poloniexneo.blogspot.com",
    "binance.eth-win.com",
    "eth-win.com",
    "huobiglob.live",
    "mediumpost.top",
    "pundix.site",
    "dexhuobi.com",
    "binance-dev.online",
    "aabithub.com",
    "binance-airdrop.hol.es",
    "binance-gift.com",
    "binance.accountant",
    "binance.date",
    "binance.men",
    "binance.science",
    "binance.webcam",
    "binancebnb.online",
    "binances.club",
    "bitfiles.ml",
    "coiinbase.com",
    "design.localbitcoinsx.com",
    "i1.localbitcoinsx.com",
    "i2.localbitcois.org",
    "kraken.com.se",
    "lcalbitcoins.biz",
    "licalbitcoins.club",
    "localbipcoins.com",
    "localbircoins.club",
    "localbircoins.top",
    "localbitcoin.asia",
    "localbitcoina.club",
    "localbitcoina.top",
    "localbitcoind.club",
    "localbitcoind.net.ru",
    "localbitcoines.top",
    "localbitcoins.ooo",
    "localbitcoins.ru.net",
    "localbitcolins.com",
    "localbitcouns.club",
    "localbitkoins.com.ru",
    "localbitkoins.net.ru",
    "localbitocins.club",
    "localbitscoins.com",
    "localbitscoins.net.ru",
    "localbutcoins.asia",
    "localbutcoins.net",
    "localbutcoins.net.ru",
    "localnitcoins.club",
    "localnitcoins.top",
    "localsbitcoins.net",
    "localvitcoins.club",
    "loclbitcoins.com.ru",
    "loclbitcoins.net.ru",
    "locslbitcoins.club",
    "lokalbitcins.com",
    "lokalbitcoins.com.ru",
    "lokalbitcoins.gdn",
    "lokalbitcoins.net.ru",
    "lokalbitcoins.org.ru",
    "lokalbitcoins.pl",
    "lokalbitcoint.com",
    "lovalbitcoins.club",
    "lovalbitcoins.top",
    "manage-applesupport-verification.com",
    "meythervvallet.net",
    "meythervvallet.org",
    "meytherwellet.info",
    "meytherwellet.net",
    "mnyetlherwbllet.com",
    "mnyetnherwailet.com",
    "mycthervvellet.com",
    "myctherwellet.com",
    "myefherwailet.com",
    "myehtervvallct.com",
    "myehterwellete.com",
    "myetherwallet-de.space",
    "myetherwallnet.com",
    "myscreen.ml",
    "poloniex.online",
    "rnyethervallel.com",
    "terms-paxful.com",
    "xn--bitfnex-2ya.com",
    "xn--huob-8w5a.com",
    "cryptophonesupport.com",
    "keepstake.github.io",
    "msg.xn--metherwllt-zmb5581g94a.com",
    "xn--metherwllt-zmb5581g94a.com",
    "international.bittrex.com8917321.ga",
    "com8917321.ga",
    "spacex.delivery",
    "bibolx.com",
    "xn--metherwllt-f2d4888f9va.com",
    "myetherwallet-ue.space",
    "get-eth-now.online",
    "xn--tro-rwa.net",
    "erc-20.myetherwallet.bonus.tokens-mew.com",
    "tokens-mew.com",
    "binance-home-app.com",
    "binance-il.com",
    "binance.cricket",
    "binance.loan",
    "binancedex.center",
    "binancel.com",
    "binances.win",
    "binancesto.org",
    "coinbase-usdc.info",
    "coindesk.hu",
    "design.localbitcoin.download",
    "design.localbitcoin.online",
    "design.localbitcoin.review",
    "design.localbitcoin.us",
    "design.localbitcoin.website",
    "design.localbitcoin.win",
    "design.localbitcoins.date",
    "design.localbitcoins.gdn",
    "design.localbitcoins.racing",
    "design.localbitcoins.review",
    "design.localbitcoins.science",
    "design.localbitcoins.webcam",
    "design.localbitcoinsa.com",
    "design.localbitcoinsd.com",
    "design.localbitcoinst.com",
    "design.localbitcoinxs.com",
    "design.markethot24.ru",
    "dexbinance.center",
    "dexbinance.info",
    "hitbtc.info",
    "hitbtc.org",
    "hitbtc.ru",
    "hitbtc.site",
    "hitbtc.space",
    "hitbtc.tech",
    "hitbtc.us",
    "hitbtx.com",
    "hittbtc.com",
    "i1.localbitcoin.bid",
    "i1.localbitcoin.online",
    "i1.localbitcoin.review",
    "i1.localbitcoin.stream",
    "i1.localbitcoin.top",
    "i1.localbitcoin.win",
    "i1.localbitcoins.review",
    "i1.localbitcoins.science",
    "i1.localbitcoins.webcam",
    "i1.localbitcoinsd.com",
    "i1.localbitcoinst.com",
    "i1.localbitcois.biz",
    "i1.localbitcois.org",
    "i2.klocalbitcoins.com",
    "i2.localbitcoin.download",
    "i2.localbitcoin.online",
    "i2.localbitcoin.review",
    "i2.localbitcoin.top",
    "i2.localbitcoin.us",
    "i2.localbitcoin.website",
    "i2.localbitcoind.com",
    "i2.localbitcoins.date",
    "i2.localbitcoins.gdn",
    "i2.localbitcoins.review",
    "i2.localbitcoins.science",
    "i2.localbitcoins.su",
    "i2.localbitcoins.webcam",
    "i2.localbitcoinsd.com",
    "i2.localbitcoinsx.com",
    "i2.localbitcois.biz",
    "i2.localbitcois.info",
    "i3.localbitcoin.bid",
    "i3.localbitcoin.review",
    "i3.localbitcoin.top",
    "i3.localbitcoin.us",
    "i3.localbitcoin.website",
    "i3.localbitcois.org",
    "i4.localbitcoin.review",
    "indodax1.com",
    "indodaxc.com",
    "info-mercatox.com",
    "l9calbitcoins.com",
    "lcalbitcoins.club",
    "lcalbitcoins.org",
    "ldex.space",
    "lecalbitcoins.com",
    "liocalbitcoins.com",
    "loaclbitcoins.com",
    "loaclbitcoins.net",
    "loaclbitcoins.org",
    "loaclbitcoins.us",
    "loalbitcoins.biz",
    "loalbitcoins.club",
    "loalbitcoins.loan",
    "loalbitcoins.mobi",
    "loalbitcoins.net",
    "loalbitcoins.org",
    "loalbitcoins.us",
    "loalbitcoins.win",
    "locabitcoins.top",
    "locabitcoins.trade",
    "locabitcoins.win",
    "localb9tcoins.com",
    "localbbitcoins.net",
    "localbeetcoins.com",
    "localbi6coins.com",
    "localbicoins.bid",
    "localbicoins.biz",
    "localbicoins.club",
    "localbicoins.loan",
    "localbicoins.org",
    "localbicoins.top",
    "localbicoins.trade",
    "localbicoins.us",
    "localbicoins.win",
    "localbictoins.net",
    "localbikoins.com",
    "localbiktcoins.com",
    "localbillcoins.ru",
    "localbincoins.com",
    "localbircoins.com",
    "localbircoins.us",
    "localbiscoins.com",
    "localbitc0ins.com",
    "localbitcdoins.com",
    "localbitcfoins.com",
    "localbitcins.club",
    "localbitcins.loan",
    "localbitcins.men",
    "localbitcins.trade",
    "localbitcins.win",
    "localbitckoins.com",
    "localbitclins.com",
    "localbitcloins.com",
    "localbitco8ns.com",
    "localbitco9ns.com",
    "localbitcoens.com",
    "localbitcoibns.com",
    "localbitcoihs.com",
    "localbitcoimns.com",
    "localbitcoin.cricket",
    "localbitcoin.gdn",
    "localbitcoin.host",
    "localbitcoin.house",
    "localbitcoin.link",
    "localbitcoin.loan",
    "localbitcoin.nl",
    "localbitcoin.org.ru",
    "localbitcoin.party",
    "localbitcoin.pro",
    "localbitcoin.racing",
    "localbitcoin.review",
    "localbitcoin.science",
    "localbitcoin.site",
    "localbitcoin.space",
    "localbitcoin.top",
    "localbitcoin.webcam",
    "localbitcoin.website",
    "localbitcoin.win",
    "localbitcoina.org",
    "localbitcoina.us",
    "localbitcoind.top",
    "localbitcoind.win",
    "localbitcoines.bid",
    "localbitcoines.trade",
    "localbitcoines.win",
    "localbitcoins.accountant",
    "localbitcoins.com.ru",
    "localbitcoins.cz",
    "localbitcoins.design",
    "localbitcoins.gdn",
    "localbitcoins.kim",
    "localbitcoins.life",
    "localbitcoins.net.ru",
    "localbitcoins.site",
    "localbitcoins.space",
    "localbitcoins.top",
    "localbitcoins.webcam",
    "localbitcoins.world",
    "localbitcoins2v.com",
    "localbitcoinsa.com",
    "localbitcoinsd.com",
    "localbitcoinse.com",
    "localbitcoinsforo.net",
    "localbitcoinss.com",
    "localbitcoinss.net",
    "localbitcoinsw.com",
    "localbitcoint.bid",
    "localbitcoint.loan",
    "localbitcoint.top",
    "localbitcoinw.com",
    "localbitcoinx.com",
    "localbitcois.biz",
    "localbitcois.info",
    "localbitcois.loan",
    "localbitcois.men",
    "localbitcois.org",
    "localbitcois.ru",
    "localbitcois.trade",
    "localbitcois.us",
    "localbitcois.win",
    "localbitcoisn.net",
    "localbitcoiuns.com",
    "localbitcoiyns.com",
    "localbitcojins.com",
    "localbitcolns.info",
    "localbitconis.biz",
    "localbitconis.com",
    "localbitconis.net",
    "localbitconis.org",
    "localbitconis.top",
    "localbitcons.bid",
    "localbitcons.biz",
    "localbitcons.info",
    "localbitcons.net",
    "localbitcons.ru",
    "localbitcons.space",
    "localbitcons.us",
    "localbitcons.win",
    "localbitcouins.club",
    "localbitcouins.com",
    "localbitcouins.net",
    "localbitcouins.net.ru",
    "localbitcouins.site",
    "localbitcouins.website",
    "localbitcouins.xyz",
    "localbitcouns.biz",
    "localbitcouns.us",
    "localbitcpins.us",
    "localbitcpoins.com",
    "localbitcxoins.com",
    "localbitdcoins.com",
    "localbitfcoins.com",
    "localbitkoin.com",
    "localbitkoins.bid",
    "localbitkoins.club",
    "localbitkoins.co",
    "localbitkoins.com",
    "localbitkoins.download",
    "localbitkoins.faith",
    "localbitkoins.loan",
    "localbitkoins.men",
    "localbitkoins.pro",
    "localbitkoins.ru",
    "localbitkoins.site",
    "localbitkoins.top",
    "localbitkoins.trade",
    "localbitkoins.us",
    "localbitkoins.win",
    "localbitocins.org",
    "localbitoins.bid",
    "localbitoins.biz",
    "localbitoins.club",
    "localbitoins.info",
    "localbitoins.loan",
    "localbitoins.org",
    "localbitoins.ru",
    "localbitoins.trade",
    "localbitoins.us",
    "localbitoins.win",
    "localbitqoins.com",
    "localbitscoins.bid",
    "localbitscoins.club",
    "localbitscoins.faith",
    "localbitscoins.men",
    "localbitscoins.org",
    "localbitscoins.top",
    "localbitscoins.us",
    "localbitscoins.win",
    "localbitsoins.com",
    "localbitvoins.com",
    "localbiutcoins.com",
    "localbiycoins.com",
    "localbjtcoins.com",
    "localbotcoins.top",
    "localbotcoins.trade",
    "localbtcoins.biz",
    "localbtcoins.men",
    "localbtcoins.org",
    "localbtcoins.win",
    "localbttcoins.ru",
    "localbuitcoins.com",
    "localbutcoins.bid",
    "localbutcoins.faith",
    "localbutcoins.info",
    "localbutcoins.men",
    "localbutcoins.win",
    "localbutscoins.com",
    "localbvitcoins.com",
    "localgbitcoins.com",
    "localgitcoins.com",
    "localhitcoins.com",
    "localibtcoins.com",
    "localitcoins.bid",
    "localitcoins.biz",
    "localitcoins.club",
    "localitcoins.info",
    "localitcoins.men",
    "localitcoins.org",
    "localitcoins.top",
    "localitcoins.us",
    "localkbitcoins.com",
    "localnitcoins.biz",
    "localnitcoins.com",
    "localnitcoins.us",
    "localpitcoins.com",
    "localsbitcoins.info",
    "localsbitcoins.ru",
    "localsbitcoins.top",
    "localsbitcoins.us",
    "localsbitcoins.win",
    "localsbitscoins.com",
    "localvitcoins.xyz",
    "localvitscoins.com",
    "localybitcoins.com",
    "locaslbitcoins.org",
    "locazlbitcoins.com",
    "locfalbitcoins.com",
    "loclabitcoins.net",
    "loclabitcoins.us",
    "loclbitcoins.accountant",
    "loclbitcoins.asia",
    "loclbitcoins.club",
    "loclbitcoins.cricket",
    "loclbitcoins.date",
    "loclbitcoins.download",
    "loclbitcoins.faith",
    "loclbitcoins.loan",
    "loclbitcoins.org",
    "loclbitcoins.party",
    "loclbitcoins.pro",
    "loclbitcoins.racing",
    "loclbitcoins.review",
    "loclbitcoins.science",
    "loclbitcoins.site",
    "loclbitcoins.space",
    "loclbitcoins.top",
    "loclbitcoins.trade",
    "loclbitcoins.website",
    "loclbitcoins.win",
    "locqlbitcoins.com",
    "loczlbitcoins.com",
    "lodcalbitcoins.com",
    "logalbitcoins.com",
    "loicalbitcoins.com",
    "lokalbicoins.com",
    "lokalbitcoin.com",
    "lokalbitcoins.bid",
    "lokalbitcoins.club",
    "lokalbitcoins.date",
    "lokalbitcoins.host",
    "lokalbitcoins.me",
    "lokalbitcoins.men",
    "lokalbitcoins.mobi",
    "lokalbitcoins.online",
    "lokalbitcoins.racing",
    "lokalbitcoins.review",
    "lokalbitcoins.science",
    "lokalbitcoins.site",
    "lokalbitcoins.space",
    "lokalbitcoins.stream",
    "lokalbitcoins.top",
    "lokalbitcoins.us",
    "lokalbitcoins.win",
    "lokalbitscoins.com",
    "lokalbutcoins.com",
    "lokalsbitcoins.com",
    "lokcalbitcoins.com",
    "loqalbitcoins.com",
    "lovalbitcoins.biz",
    "lpcalbitcoins.com",
    "lpocalbitcoins.com",
    "luocalbitcoins.com",
    "mercaotx.com",
    "mercatoox.com",
    "mercatox.market",
    "mercattox.com",
    "mervatox.com",
    "myeterwallet.su",
    "myethereum-wallet-com.com",
    "myethereum-wallet-com.info",
    "myethereum-wallet-com.site",
    "myetherwallet-drop.space",
    "myetherwallet-em.space",
    "myetherwallet-eu.space",
    "myetherwallet-msgsign.space",
    "myetherwallet.claim.erc-20.bonus.tokens-mew.com",
    "myethiwallet.com",
    "myethwachltet.com",
    "myethwatchlet.com",
    "myethwatchllet.com",
    "myselherwallel.com",
    "ocalbitcoins.net",
    "olcalbitcoins.com",
    "v-kraken.com",
    "www-binance.online",
    "xn--binnc-5wa6l.com",
    "xn--huob-oza.com",
    "xn--krake-wm1b.com",
    "xn--krakn-f61b.com",
    "xn--krken-yqa.com",
    "xn--krkn-cta9976b.com",
    "medium-ether.com",
    "gift-btc.net",
    "myetnerwallet.com.application-send.info",
    "application-send.info",
    "mediumz.top",
    "giveawayether.net",
    "drgnairdrop.com",
    "huobiglo.live",
    "getmusk.space",
    "poloniextron.blogspot.com",
    "btc-promo.info",
    "myetherwallet.16mb.com",
    "blog.0xproject.co",
    "0xproject.co",
    "wallet.pollux.network",
    "pollux.network",
    "mvelnerwallet.com",
    "multplatforlex.asia",
    "cryptoblackfriday.blogspot.com",
    "freecryptogift.org",
    "tronblackfriday.blogspot.com",
    "btc-gift.tech",
    "neoblackfriday.blogspot.com",
    "ayetherwallet.com",
    "binance.faith",
    "binance.racing",
    "binances.top",
    "design.klocalbitcoins.com",
    "design.localbitcoin.stream",
    "design.localbitcoin.top",
    "design.localbitcoind.com",
    "design.localbitcoinjs.com",
    "design.localbitcoins.su",
    "design.localbitcoinw.com",
    "design.localbitcoinzs.com",
    "hitbtc.bid",
    "hitbtc.biz",
    "hitbtc.club",
    "hitbtc.link",
    "hitbtc.loan",
    "hitbtc.online",
    "hitbtc.press",
    "hitbtc.top",
    "hitbtc.trade",
    "hitbtc.win",
    "hitbttc.com",
    "huobi.press",
    "i1.klocalbitcoins.com",
    "i1.localbitcoin.download",
    "i1.localbitcoin.us",
    "i1.localbitcoin.website",
    "i1.localbitcoind.com",
    "i1.localbitcoinjs.com",
    "i1.localbitcoins.date",
    "i1.localbitcoins.gdn",
    "i1.localbitcoins.su",
    "i1.localbitcoinsa.com",
    "i1.localbitcoinw.com",
    "i1.localbitcoinzs.com",
    "i1.localbitcois.info",
    "i2.localbitcoin.bid",
    "i2.localbitcoinjs.com",
    "i2.localbitcoinsa.com",
    "i2.localbitcoinw.com",
    "i2.localbitcoinzs.com",
    "klocalbitcoins.com",
    "lacalbitcoins.com",
    "lcalbitcoins.info",
    "lcalbitcoins.net",
    "licalbitcoins.com",
    "lkcalbitcoins.com",
    "lkocalbitcoins.com",
    "llcalbitcoins.com",
    "loalbitcoins.bid",
    "loalbitcoins.info",
    "loalbitcoins.pro",
    "locabitcoins.bid",
    "locabitcoins.biz",
    "locabitcoins.club",
    "locabitcoins.info",
    "locabitcoins.loan",
    "locabitcoins.org",
    "locabitcoins.ru",
    "locabitcoins.us",
    "locablitcoins.net",
    "locakbitcoins.com",
    "locaklbitcoins.com",
    "localb8tcoins.com",
    "localbaytcoins.com",
    "localbgitcoins.com",
    "localbhitcoins.com",
    "localbi5coins.com",
    "localbicoins.men",
    "localbidcoins.com",
    "localbifcoins.com",
    "localbiftcoins.com",
    "localbigcoins.com",
    "localbigtcoins.com",
    "localbiitcoins.net",
    "localbijtcoins.com",
    "localbircoins.info",
    "localbirtcoins.com",
    "localbitc9ins.com",
    "localbitciins.com",
    "localbitcins.bid",
    "localbitcins.ru",
    "localbitco9ins.com",
    "localbitcoibs.com",
    "localbitcoihns.com",
    "localbitcoiins.com",
    "localbitcoijns.com",
    "localbitcoijs.com",
    "localbitcoikns.com",
    "localbitcoin.accountant",
    "localbitcoin.click",
    "localbitcoin.club",
    "localbitcoin.com.ru",
    "localbitcoin.date",
    "localbitcoin.download",
    "localbitcoin.faith",
    "localbitcoin.icu",
    "localbitcoin.me",
    "localbitcoin.men",
    "localbitcoin.mobi",
    "localbitcoin.net.ru",
    "localbitcoin.online",
    "localbitcoin.stream",
    "localbitcoin.us",
    "localbitcoina.com",
    "localbitcoina.info",
    "localbitcoina.xyz",
    "localbitcoinas.com",
    "localbitcoind.com",
    "localbitcoind.info",
    "localbitcoind.net",
    "localbitcoind.us",
    "localbitcoinds.com",
    "localbitcoines.loan",
    "localbitcoines.space",
    "localbitcoines.us",
    "localbitcoinhs.com",
    "localbitcoinjs.com",
    "localbitcoinms.com",
    "localbitcoinns.com",
    "localbitcoins.agency",
    "localbitcoins.asia",
    "localbitcoins.bid",
    "localbitcoins.cricket",
    "localbitcoins.date",
    "localbitcoins.faith",
    "localbitcoins.host",
    "localbitcoins.house",
    "localbitcoins.men",
    "localbitcoins.mobi",
    "localbitcoins.party",
    "localbitcoins.press",
    "localbitcoins.pro",
    "localbitcoins.racing",
    "localbitcoins.red",
    "localbitcoins.review",
    "localbitcoins.rocks",
    "localbitcoins.science",
    "localbitcoins.store",
    "localbitcoins.su",
    "localbitcoins.trade",
    "localbitcoins.win",
    "localbitcoins.work",
    "localbitcoins.xyz",
    "localbitcoinsl.com",
    "localbitcoinst.com",
    "localbitcoinsx.com",
    "localbitcoinsz.com",
    "localbitcoint.trade",
    "localbitcoint.win",
    "localbitcoinws.com",
    "localbitcoinxs.com",
    "localbitcoinzs.com",
    "localbitcois.bid",
    "localbitcois.space",
    "localbitcoisn.com",
    "localbitcojns.com",
    "localbitcokins.com",
    "localbitcokns.com",
    "localbitcons.loan",
    "localbitcons.men",
    "localbitcons.trade",
    "localbitcooins.com",
    "localbitcoons.com",
    "localbitcopins.com",
    "localbitcouins.info",
    "localbitcouins.space",
    "localbitcouns.com",
    "localbitcoyns.com",
    "localbitcpins.com",
    "localbitcuins.com",
    "localbitcvoins.com",
    "localbitdoins.com",
    "localbitfoins.com",
    "localbitgcoins.com",
    "localbitkoins.date",
    "localbitkoins.info",
    "localbitkoins.mobi",
    "localbitkoins.net",
    "localbitkoins.org",
    "localbitkoins.space",
    "localbitocins.com",
    "localbitocins.info",
    "localbitocins.xyz",
    "localbitoins.net",
    "localbitrcoins.com",
    "localbitscoin.com",
    "localbitscoins.download",
    "localbitscoins.net",
    "localbitscoins.ru",
    "localbitskoins.com",
    "localbittcoins.com",
    "localbitvcoins.com",
    "localbitxcoins.com",
    "localbitxoins.com",
    "localbitycoins.com",
    "localbiytcoins.com",
    "localbjitcoins.com",
    "localbkitcoins.com",
    "localbktcoins.com",
    "localbnitcoins.com",
    "localboitcoins.com",
    "localbotcoins.info",
    "localbtcoins.info",
    "localbtcoins.loan",
    "localbtcoins.trade",
    "localbticoins.net",
    "localbutcoins.biz",
    "localbutcoins.club",
    "localbutcoins.com",
    "localbutcoins.ru",
    "localbutcoins.space",
    "localbutcoins.top",
    "localbutcoins.trade",
    "localbutcoins.us",
    "localbutcoins.xyz",
    "localbutkoins.com",
    "localbytcoins.com",
    "localbytecoins.com",
    "localhbitcoins.com",
    "localitcoins.loan",
    "localitcoins.ru",
    "localitcoins.trade",
    "localitcoins.win",
    "localnbitcoins.com",
    "localnitcoins.org",
    "localnitscoins.com",
    "localpbitcoins.com",
    "localsbitcoins.loan",
    "localsbitkoins.com",
    "localvbitcoins.com",
    "localvitcoins.com",
    "locanbitcoins.com",
    "locaobitcoins.com",
    "locapbitcoins.com",
    "locaqlbitcoins.com",
    "locawlbitcoins.com",
    "loccalbitcoins.com",
    "locdalbitcoins.com",
    "locelbitcoins.com",
    "loclabitcoins.com",
    "loclbitcoins.bid",
    "loclbitcoins.host",
    "loclbitcoins.info",
    "loclbitcoins.men",
    "loclbitcoins.press",
    "loclbitcoins.ru",
    "loclbitcoins.stream",
    "loclbitcoins.webcam",
    "loclbitscoins.com",
    "locqalbitcoins.com",
    "locslbitcoins.com",
    "locvalbitcoins.com",
    "locwalbitcoins.com",
    "locwlbitcoins.com",
    "locxalbitcoins.com",
    "loczalbitcoins.com",
    "lodalbitcoins.com",
    "lofcalbitcoins.com",
    "login.localbitcoins.com.localbitcoinns.com",
    "lokalbitcoins.biz",
    "lokalbitcoins.co",
    "lokalbitcoins.download",
    "lokalbitcoins.loan",
    "lokalbitcoins.org",
    "lokalbitcoins.pro",
    "lokalbitcoins.ru",
    "lokalbitcoins.website",
    "lokalbitcoints.com",
    "lokalbitscoin.com",
    "loklbitcoins.com",
    "lolcalbitcoins.com",
    "loocalbitcoins.com",
    "losalbitcoins.com",
    "loucalbitcoins.com",
    "lovalbitcoins.com",
    "lovcalbitcoins.com",
    "loxalbitcoins.com",
    "loxcalbitcoins.com",
    "mercarox.com",
    "merrcatox.com",
    "myetherwallet-eng.space",
    "myetheywallet.com",
    "paxful-recrutement.com",
    "st.localbitcoin.review",
    "wmyetherwallet.com",
    "binance-dex.top",
    "binance.com1278623.cf",
    "binance.com136347135.ml",
    "binance.com1378623.ga",
    "binance.com16324.ml",
    "binance.com987574.ml",
    "coinbaseoffer.com",
    "coindesk.online",
    "ldex.host",
    "localbitcoins.loan",
    "lopcalbitcoins.com",
    "mail.wallet-trezor.io",
    "myetherwallet-en.space",
    "myetherwallet.logiln.com",
    "myetherwallet.rlogin.co",
    "myetherwelet.com",
    "paxful.com.tubulk.ga",
    "huobiairdrop.info",
    "huobiairdrop.org",
    "huobiairdrop.top",
    "lcgin.com",
    "rlogin.co",
    "blockchain.lcgiin.com",
    "blockchain.llogin.co",
    "blcokchain.llogin.co",
    "blockchain.logirn.com",
    "blockchein.logirn.com",
    "blockchain.lcgin.com",
    "empowr.com",
    "bnbeth.net",
    "dex-bnb.net",
    "paxos-bounty.com",
    "blackfridayneo.blogspot.com",
    "blackfridayetc.blogspot.com",
    "blackfridaycrypto.blogspot.com",
    "btc-gift.live",
    "btc-gift.us",
    "huobiairdrop.net",
    "tesla-crypto.info",
    "bnb-ethcompetition.com",
    "eth.binancegift.pro",
    "binancegift.pro",
    "idex.com.ru",
    "ibex.cc",
    "t-btc.net",
    "etherdelta.com.ru",
    "binance-mmx.com",
    "binance-tx.com",
    "binance-xm.com",
    "binance.com762367321.ml",
    "binance0.com",
    "binance88.com",
    "bitffinnex.com",
    "bitfinexlogin.com",
    "bittrexl.uk.l-lws.com",
    "coinbase-com.cloud",
    "coinbase-com.info",
    "coinbase-com.org",
    "coinbase-com.site",
    "coinbase.fans",
    "giftauroradao.com",
    "localbicoins.ru",
    "localbilcoins.ru",
    "localbitcoins.ltd",
    "localbitcoins.org.ru",
    "localbitcoinsv.com",
    "lofalbitcoins.com",
    "lucalbitcoins.com",
    "wallet-trezor.io",
    "miyetherwallet.pw",
    "myetherwallet-msg.space",
    "myetherwallet.llogin.co",
    "paxful067.000webhostapp.com",
    "paxfulcoins.com",
    "paxiiful.com",
    "polonienx.com",
    "tokens-tronscan.org",
    "xn--bttrx-esar.com",
    "xn--hittc-3jb.com",
    "xn--oinbase-txa.com",
    "stellar-term.store",
    "binance-giveaways.com",
    "btc-verified.com",
    "crypto-giveaways.com",
    "elon-official-giveaway.com",
    "elon-official-promo.com",
    "elon-party.com",
    "elon-presents.com",
    "elon-promotion.com",
    "elon-surprise.com",
    "ethereums-giveaway.com",
    "gainbtc.org",
    "get-btcs-now.com",
    "get-eths-now.com",
    "giftbtc.org",
    "giveaway-official.org",
    "grab-btc.com",
    "limited-promo.org",
    "limited-promotion.com",
    "limited-promotion.org",
    "musk-gives.com",
    "musk-presents.com",
    "musk-promotion.com",
    "musk-surprise.com",
    "treats-from-elon.blogspot.com",
    "official-giveaway.org",
    "promo-official.com",
    "promo-official.org",
    "promotion-official.com",
    "promotion-official.org",
    "binances.pro",
    "bittrex.management",
    "bittrex.promo",
    "idexmarket.host",
    "kraken--login.com",
    "meercatox.com",
    "mercaatox.com",
    "myetherwallet-pdtt.host",
    "myetherwallet-signcoin.top.md-56.webhostbox.net",
    "myetherwallet-toh.host",
    "online-image.ml",
    "spaxful.com",
    "xn--bitfnexs-wkb.com",
    "xn--phod-xpa08i.com",
    "dexairdropevent.com",
    "eth.tronnetwork.pw",
    "btc.tronnetwork.pw",
    "tronnetwork.pw",
    "pool-neo.blogspot.com",
    "lbexm.com",
    "lbexmarnet.com",
    "lbexmet.com",
    "ldcxmanket.com",
    "binance-beta.net",
    "binance.best-org.mx",
    "binance.com169823623.gq",
    "binance.space",
    "binancex.club",
    "binancex.org",
    "coinbase-pro.net",
    "coinbase-pro.org",
    "coinbase.group",
    "coinbasesto.com",
    "locabitcoins.mobi",
    "locabitcoins.pro",
    "localbicoins.mobi",
    "localbicoins.pro",
    "localbitcois.pro",
    "localbitcons.mobi",
    "localbitcons.pro",
    "localbitcooins.ru",
    "localbitoins.mobi",
    "localbitoins.pro",
    "localbtcoins.mobi",
    "localbtcoins.pro",
    "localitcoins.mobi",
    "localitcoins.pro",
    "my-etherwallet.online",
    "myether-wallet.online",
    "myethermallet.online",
    "myetherwailet.club",
    "myetherwallet-pdt.host",
    "myetherwallet.com.noreply.group",
    "rnyetharwallet.com",
    "rnyetherwellet.com",
    "trezor-shop.com",
    "trezor-store.com",
    "xn--aken-f0a6q.com",
    "xn--bitfnex-ufb.com",
    "xn--coinbac-xs4c.com",
    "xn--hibtc-s9b.com",
    "xn--kaen-h0a4q.com",
    "xn--myetherwalt-b3b8729g.com",
    "xn--mytherwllet-ife0916g.com",
    "xn--phold-erb.com",
    "dexbnb.net",
    "xn--bockchan-81a78e.com",
    "ico.karatgold.io.bonus.wallet-crypto-member.com",
    "wallet-crypto-member.com",
    "btc-gift.net",
    "xfreecrypto.blogspot.co.nz",
    "xfreeneo.blogspot.com",
    "e1contest.blogspot.com",
    "dexbinancebeta.org",
    "dcontestd.blogspot.com",
    "fastcryptogiveaway.website",
    "bcryptob.blogspot.com",
    "acontesta.blogspot.com",
    "elon.gift",
    "xn--dex-klz.market",
    "contestc.blogspot.com",
    "ethereum-generator.cf",
    "0xproject.org",
    "pollux.ai",
    "wallet.pollux.ai",
    "get-10000-ethereum.org",
    "crypto-giveaway.org",
    "btc-crypto.me",
    "crypto-return.online",
    "crypto-share.online",
    "tesla-gift.com",
    "tesla-promo.top",
    "ldex-market.host",
    "xn--blocchn-4ya8tls.com",
    "xn--myeterwaliet-fs4f.com",
    "xn--blockhan-w0a6d.com",
    "xn--bockhain-v0a06f.com",
    "xn--bockcha-eza81eld.com",
    "login.xn--bockcha-eza81eld.com",
    "shapeshitf.io",
    "shapehift.io",
    "coinbase.xm-login2.com",
    "am-ov.store",
    "xm-login2.com",
    "etherdesk.co",
    "immigrationpoint.co.uk",
    "ldcxmarket.com",
    "ldcxmarket.info",
    "ldexmark.com",
    "ldexmark.info",
    "myetherwallet-sing.top.md-66.webhostbox.net",
    "xn--localbitcoi-ix8e.com",
    "xn--phod-21a07d.com",
    "binance-inc.com",
    "binance.com185665.cf",
    "bithumb.biz",
    "coinbase.team",
    "coingase.com",
    "idex-market.fun",
    "idex-market.host",
    "localbitcoins-signup.com",
    "localbotcoins.com",
    "m30-coinbase.com",
    "myetherrwallets.club",
    "xn--myetherwalet-m8b.com",
    "xn--myetherwalt-kbb19h.com",
    "xn--myethrwall-b22ep7afa.com",
    "xn--phod-kra55b.com",
    "zzuc.coinbasez.com",
    "bittrex.live",
    "coinbase-giveaway.site",
    "localbicoins.info",
    "localbitcoints.net",
    "localbitcoints.ru",
    "localebitcoins.ru",
    "loccalbitcoins.ru",
    "myetherwallet-msgsign.top.md-86.webhostbox.net",
    "myethirwalet.com",
    "upholld.com",
    "xn--dx-h7s6c.market",
    "xn--idx-kjz.market",
    "xn--mythrwalet-yq3ec1v.com",
    "xn--phod-21a6v.com",
    "xn--phod-zra73b.com",
    "coinbasedomain.club",
    "coinbasehelp.com",
    "coinbasesm.com",
    "myetherrwallets.icu",
    "xn--conbase-8ya.com",
    "xn--myethrwallt-crb6279g.com",
    "bancor-network.com",
    "bancor.ltd",
    "lbittrex.com",
    "myetherrwallets.pw",
    "myetherwallet-admin.xyz",
    "paxfulj.com",
    "xn--dex-1ta.etherdetta.com",
    "xn--dex-1ta.market",
    "xn--dex-1ub.market",
    "xn--dex-6jb.market",
    "xn--dex-iua.market",
    "xn--dex-lta.market",
    "xn--dex-odb.market",
    "cutduct.com",
    "myetherwallett.tech",
    "mymonero.me",
    "xn--dex-fkb.market",
    "xn--myetherwale-z3b32c.com",
    "binance-dx.org",
    "coinbase.markets",
    "localbitcoins-4f.com",
    "localbitcoins.cloud",
    "myethereum-login.com",
    "rnyethervwallet.com",
    "steambalance.info",
    "xn--dex-clz.market",
    "xn--myetherwalet-n8b.com",
    "xn--myetherwalt-0rb76b.com",
    "xn--mytherwalet-15b5619g.com",
    "xn--mythrwalet-8k2ep1dca.com",
    "xn--upold-y2a.com",
    "amazonbalance.com",
    "emeyetherweallet.com",
    "ld-hitbtc.com",
    "localbircoins.biz",
    "localbitcins.biz",
    "localbitcoind.biz",
    "localbitconis.ru",
    "localbitcouins.biz",
    "localbitscoins.biz",
    "meetherwallet.website",
    "metamaskconnect.org",
    "meyetherwallct.com",
    "meytferwallet.com",
    "meytherwallet.co",
    "meytherwallet.org",
    "my-etherwalletcorp.com",
    "mycryptoethwallet.com",
    "mycthcrwallet.com",
    "myeetherwallet.space",
    "myehterwallet.us",
    "myertherewallet.com",
    "myeterwallet.info",
    "myetheawllet.com",
    "myethedwallet.info",
    "myetheerwallet.space",
    "myetheerwallet.top",
    "myetheerwallet.website",
    "myethefwallet.info",
    "myether-walletcorp.com",
    "myetherawallet.info",
    "myetherewallet.biz",
    "myethertwallet.online",
    "myetherwafllet.com",
    "myetherwal11et.com",
    "myetherwalel.com",
    "myetherwallelet.com",
    "myetherwallet-blnance.space",
    "myetherwallet-bnb.space",
    "myetherwallet-checks.space",
    "myetherwallet-coin.space",
    "myetherwallet-coinhydro.top",
    "myetherwallet-coinss.top",
    "myetherwallet-cps.space",
    "myetherwallet-cripto.space",
    "myetherwallet-dec.space",
    "myetherwallet-ecta.space",
    "myetherwallet-hydrocoin.top",
    "myetherwallet-hydrogen.space",
    "myetherwallet-hydrosmg.space",
    "myetherwallet-hydrotokens.space",
    "myetherwallet-ign.space",
    "myetherwallet-kep.space",
    "myetherwallet-knd.space",
    "myetherwallet-knp.space",
    "myetherwallet-log.space",
    "myetherwallet-login.space",
    "myetherwallet-logincoin.space",
    "myetherwallet-lvt.space",
    "myetherwallet-mpcx.space",
    "myetherwallet-nobs.space",
    "myetherwallet-rix.space",
    "myetherwallet-sgn.top",
    "myetherwallet-shlt.space",
    "myetherwallet-sig.space",
    "myetherwallet-siggn.space",
    "myetherwallet-sigin.space",
    "myetherwallet-sigl.space",
    "myetherwallet-sign.space",
    "myetherwallet-signcoins.space",
    "myetherwallet-signcoins.top",
    "myetherwallet-signhydro.space",
    "myetherwallet-signin.space",
    "myetherwallet-signl.space",
    "myetherwallet-signlog.space",
    "myetherwallet-signmsg.space",
    "myetherwallet-signn.space",
    "myetherwallet-signt.space",
    "myetherwallet-sit.space",
    "myetherwallet-tix.space",
    "myetherwallet-token.space",
    "myetherwallet-tokens.space",
    "myetherwallet-wabsign.space",
    "myetherwallet-xcmd.space",
    "myetherwallet.bplaced.net",
    "myetherwallet.com.login-status.info",
    "myetherwallet.net.ru",
    "myetherwdllet.com",
    "myetherwealletr.com",
    "myethewallets.com",
    "myethierwaliet.net",
    "myethirewallet.com",
    "myethrswallet.com",
    "myethrwallet.info",
    "myettherwaellet.com",
    "myettherwallet.website",
    "mytherwallet.news",
    "mytherwallet.site",
    "mytherwellet.com",
    "myyetherwallet.space",
    "paxful.com.jobora.ml",
    "private-myetherwallet.quanta.im",
    "rnyethervwallet.info",
    "xn--binnce-yoc.com",
    "xn--btrx-dpap16f.com",
    "xn--bttex-cta85e.com",
    "xn--htbt-3oa2b.com",
    "xn--metherwalet-ms8eq4b.com",
    "xn--myeterwalle-3ic6876g.com",
    "xn--myetherallet-wt5f.com",
    "xn--myethewallt-738eu8b.com",
    "xn--myethrwllet-q7a31e.com.com",
    "xn--myetrwallet-5qb7087g.com",
    "xn--mytherwallt-019eia.com",
    "xn--mythrwalet-c7ac57i.com",
    "xn--phod-21a40a.com",
    "xn--ploniex-90a.com",
    "xn--poloex-6va52e.com",
    "xn--poloiex-nkb.com",
    "bennychophouse.com",
    "www-idex.market",
    "xn--mytherwallt-3qbi.com",
    "xn--uphod-n7a.com",
    "binance-dex.club",
    "binance.efilum.de",
    "binances.com",
    "bitfinex.ltd",
    "bittrex.com.qdgcx.com",
    "bittrexi.bid",
    "bnbbinance.com",
    "coinbaseapp.com",
    "dexbinance.club",
    "idexi.market",
    "m-paxful.com",
    "mail.myetherrwaliet.com.cp-19.webhostbox.net",
    "myetherrwaliet.com.cp-19.webhostbox.net",
    "myetherwallet-c.space",
    "myetherwallet-distribution.space",
    "myetherwalletsolutions.com",
    "paxfulreport.com",
    "stobithumb.com",
    "uphold.cf",
    "xn--coinsbnk-nza.com",
    "xn--paxfl-4ua.com",
    "xn--pxful-gra.com",
    "spacex.to",
    "xlm-wallet.com",
    "getpetrocoin.com",
    "paxosbounty.com",
    "etoro-exchange.com",
    "musk.plus",
    "spacex.plus",
    "elongift.space",
    "musk.fund",
    "c-crypto.me",
    "p-crypto.pw",
    "c-crypto.pw",
    "elonbtc.me",
    "p-crypto.me",
    "elonmusk.gift",
    "bcrypto.pro",
    "bcrypto.pw",
    "coinbase.plus",
    "bcrypto.live",
    "ehitbtc.com.viptempobetgirisi.com",
    "hit-blentf-com.blogspot.com",
    "paxful.com.autaro.tk",
    "autaro.tk",
    "ethereum-giveaway.net",
    "bonus.ethereum-giveaway.net",
    "go.ethereum-giveaway.net",
    "enter.ethereum-giveaway.net",
    "join-eth-promotion.ethereum-giveaway.net",
    "participate.ethereum-giveaway.net",
    "etherdelta.ru",
    "ethereumgifting.com",
    "bithumb.today",
    "coinbasehotelcard.com",
    "coinbasepromo.us",
    "cox.com-6159368de39251d7a-login.id-107sbtd9cbhsbtd5d80a13c0db1f546757jnq9j5754675782500416.kylelierman.com",
    "etherwallet.it",
    "etherwallet.shop",
    "etherwallet.world",
    "eyetherwallet.com",
    "iyetherwallet.com",
    "jyetherwallet.com",
    "lhitlbtc.com",
    "lyetherwallet.com",
    "m.yetherwallet.com",
    "myetherwallet5.com",
    "myetherwalleta.com",
    "myetherwalletb.com",
    "myetherwalletc.com",
    "myetherwalletd.com",
    "myetherwallete.com",
    "myetherwalletf.com",
    "myetherwalletg.com",
    "myetherwalleth.com",
    "myetherwalleti.com",
    "myetherwalletie.com",
    "myetherwalletip.com",
    "myetherwalletiy.com",
    "myetherwalletj.com",
    "myetherwalletk.com",
    "myetherwalletm.com",
    "myetherwalletn.com",
    "myetherwalletntw.com",
    "myetherwalleto.com",
    "myetherwalletp.com",
    "myetherwalletq.com",
    "myetherwalletr.com",
    "myetherwallets.cc",
    "myetherwallets.co",
    "myetherwallets.us",
    "myetherwalletto.com",
    "myetherwalletu.com",
    "myetherwalletv.com",
    "myetherwalletw.com",
    "myetherwalletws.com",
    "myetherwalletx.com",
    "myetherwallety.com",
    "myetherwalletz.com",
    "myetherwalleu.com",
    "myetherwallev.com",
    "myetherwallewt.com",
    "myetherwalley.com",
    "myetherwalleyt.com",
    "myetherwallez.com",
    "myetherwallezt.com",
    "myetherwallgt.com",
    "myetherwallit.com",
    "myetherwallket.com",
    "myetherwallmet.com",
    "myetherwallmt.com",
    "myetherwalloet.com",
    "myetherwallot.com",
    "myetherwallpet.com",
    "myetherwallrt.com",
    "myetherwallset.com",
    "myetherwallst.com",
    "myetherwallut.com",
    "myetherwallzet.com",
    "myetherwalnet.com",
    "myetherwaloet.com",
    "myetherwalolet.com",
    "myetherwalpet.com",
    "myetherwalplet.com",
    "myetherwamlet.com",
    "myetherwamllet.com",
    "myetherwanlet.com",
    "myetherwaolet.com",
    "myetherwaollet.com",
    "myetherwaplet.com",
    "myetherwapllet.com",
    "myetherwaqllet.com",
    "myetherwasllet.com",
    "myetherwawllet.com",
    "myetherwazllet.com",
    "myetherwcllet.com",
    "myetherweallet.com",
    "myetherwiallet.com",
    "myetherwillet.com",
    "myetherwlalet.com",
    "myetherwlallet.com",
    "myetherwqallet.com",
    "myetherwqllet.com",
    "myetherwsallet.com",
    "myetherwsllet.com",
    "myetherwullet.com",
    "myetherwwallet.com",
    "myetherwwllet.com",
    "myetherwxallet.com",
    "myetherwyallet.com",
    "myetherwyllet.com",
    "myetherwzallet.com",
    "myetherwzllet.com",
    "myetherxwallet.com",
    "myethesrwallet.com",
    "myethetrwallet.com",
    "myethewallet.com",
    "myethewallet.net",
    "myethewrallet.com",
    "myethewrwallet.com",
    "myethezrwallet.com",
    "myethezwallet.com",
    "myethgerwallet.com",
    "myethgrwallet.com",
    "myethjerwallet.com",
    "myethmrwallet.com",
    "myethnerwallet.com",
    "myethorwallet.com",
    "myethrrwallet.com",
    "myethserwallet.com",
    "myethsrwallet.com",
    "myethuerwallet.com",
    "myethwallct.com",
    "myethwallet.net",
    "myethwallet.uk",
    "myethwerwallet.com",
    "myethwrwallet.com",
    "myethyerwallet.com",
    "myethzerwallet.com",
    "myethzrwallet.com",
    "myetierwallet.com",
    "myetjherwallet.com",
    "myetnerwallet.com",
    "myetnherwallet.com",
    "myetterrwallet.com",
    "myettherwallet.com",
    "myetuerwallet.com",
    "myetuherwallet.com",
    "myetxerwallet.com",
    "myetyerwallet.com",
    "myetyherwallet.com",
    "myetzherwallet.com",
    "myeuherwallet.com",
    "myevherwallet.com",
    "myewtherwallet.com",
    "myeyherwallet.com",
    "myeytherwallet.com",
    "myezherwallet.com",
    "myeztherwallet.com",
    "mygtherwallet.com",
    "myhetherwallet.com",
    "myitherwallet.com",
    "mymtherwallet.com",
    "myotherwallet.com",
    "myretherwallet.com",
    "myrtherwallet.com",
    "mysetherwallet.com",
    "mystherwallet.com",
    "mytetherwallet.com",
    "myuetherwallet.com",
    "myutherwallet.com",
    "mywetherwallet.com",
    "mywtherwallet.com",
    "myxetherwallet.com",
    "myyetherwallet.com",
    "myzetherwallet.com",
    "myztherwallet.com",
    "nnyetherwallet.com",
    "nyetherwallet.com",
    "oyetherwallet.com",
    "poloniex-login.account2fa-login.com",
    "pro-coinbase.online",
    "promobittrex.site",
    "rnyetherwallet.pw",
    "rryetherwallet.com",
    "shapeshifter.gr",
    "sign.xn--mytherwalet-3qb10c.com",
    "trezire.com",
    "uphold.gq",
    "wwmyetherwallet.com",
    "xn--myetherwalet-lcc.net",
    "xn--myethrwalle-3bb60n.com",
    "xn--mytherwallt-qpbi.com",
    "yetherwallet.com",
    "ymetherwallet.com",
    "binance-exchange.space",
    "binancekp.com",
    "coinbesebtc.com",
    "getnaij.altervista.org",
    "mobile3490-coinbase.com",
    "mobile3490-coinbase.site",
    "myetherlogin.com",
    "myetherwallet-trade.space",
    "myetherwalletmsg.com",
    "myethwatchlett.com",
    "pafxulcom.000webhostapp.com",
    "parxful.com",
    "pro4-coinbase.space",
    "xn--kaken-5bb.com",
    "xn--kaken-icb.com",
    "xn--blokchain-login-20b.com",
    "xn--login-blockchai-7uc.com",
    "xn--www-blockchan-m9b.com",
    "wallet.paxfulassist.com",
    "paxfulassist.com",
    "paxful.w3schoolsonline.com",
    "paxful.com.leverk.cf",
    "leverk.cf",
    "appbittrex.com",
    "account-bittrex.com",
    "bittrex-es.com",
    "security-bittrex.com",
    "en-coinbase.com",
    "bd-bitfinex.com",
    "bitfniex.com",
    "bittrex.online",
    "coinbasesupportnumbers.com",
    "myetherwallet-binance.space",
    "myetherwallet-check.space",
    "myetherwallet-ether.space",
    "myetherwallet-mi.space",
    "pax-ful.com",
    "paxful1.com",
    "shapeshifit.me",
    "shapeshifted.net",
    "stobinance.com",
    "xn--idx-tra.market",
    "xn--raen-k0ac.com",
    "bittrex.net.security-login2fa.com",
    "bittrexi.men",
    "paxful.com.joiery.cf",
    "hitbtc.pratiktlyukleme.com",
    "xn--mercaox-rrb.com",
    "xn--phld-rqa7a.com",
    "xn--uphod-e4a.com",
    "xn--uhol-bsa9h.com",
    "xn--uphod-95a.com",
    "xn--hold-pray.com",
    "xn--phold-kfb.com",
    "xn--phold-0ua.com",
    "elherscan.host",
    "claim-ethers.com",
    "givetrx.blogspot.com.au",
    "ethergiffcrypto.webcindario.com",
    "zen-smartgives.space",
    "win-give-away.club",
    "coinbasepromo.webcindario.com",
    "mediun-blog-coinbasepro1.tumblr.com",
    "ethwalletbonus.com",
    "crypton-exchange.com",
    "omisego-network.io",
    "easy-ethers.com",
    "dexxlaunch.com",
    "airdrop.systems",
    "simbatools.com",
    "nextbitcoinwallet.com",
    "dentairdrop.com",
    "get-smartsend.website",
    "bigcoingift.club",
    "cryptogive.rf.gd",
    "verify.xn--myethrwllet-xt9e3k.com",
    "musk-cryptocurrency.info",
    "dexchainevent.info",
    "karatgold.io.bonus.award.wallet-token-member.com",
    "wallet-token-member.com",
    "cryponium.info",
    "neogive.blogspot.ie",
    "promocrypt.com",
    "get-smartcontract.website",
    "transfer.getmore.host",
    "give-neo.blogspot.com",
    "give-neo.blogspot.ro",
    "elongives.tech",
    "iost-airdrop.com",
    "bin-launch.com",
    "givecrypto.website",
    "freecrypto-x.blogspot.com",
    "binance-shb.com",
    "binance.cash",
    "bitbank.group",
    "bithumbsto.com",
    "bittrex-login.oficial-homepage.com",
    "bittrex.com.oficial-homepage.com",
    "coinbasemining.biz",
    "coinsbank365.com",
    "huobi.loans",
    "kraken.gq",
    "krakenni.com",
    "myetherwallet-eth.space",
    "myetherwallet-hydr.space",
    "myetherwallet-idap.space",
    "paxful.trade",
    "paxfulj.trade",
    "paxfulrectify.com",
    "paxfulsecureteam.com",
    "paxfulsecurity.com",
    "paxfulvalidate.com",
    "paxfulverified.com",
    "poloniex-fr.com",
    "xn--iex-vyy.market",
    "xn--myethewllet-2kb87h.com",
    "binance.com1235723786.cf",
    "binance.com1762378235.cf",
    "binance.tax",
    "binancealtcoin.com",
    "bithumb.center",
    "bittrex-rm.com",
    "bwidthherop.herokuapp.com",
    "coinbase.company",
    "coinbase.gold",
    "coinbase.institute",
    "coinbase.market",
    "coinbase.network",
    "coinbase.page",
    "coinbase.pizza",
    "coinbase.properties",
    "coinbase.rip",
    "coinbase.software",
    "coinbasepromo.com",
    "coinbases.fr",
    "freecoinbase.com",
    "idex.services",
    "kraken.tools",
    "mercatox.net",
    "myethereurnwallet.com",
    "myetherrwallet.icu",
    "myetheruemwallet.com",
    "myetherwallet-stars.space",
    "myetherwallet.team",
    "myethierwallet.tech",
    "myethirwallet.online",
    "poloniex-rm.com",
    "poloniexsign.com",
    "poloniexsignup.com",
    "rnyethervallet.com",
    "widgets.www.ibexofmark.com",
    "xn--binane-f1a.com",
    "xn--bttrexx-gza.com",
    "xn--coinxchange-2bb.com",
    "xn--htbt-vpa3n.com",
    "xn--htbt-vpa5o.com",
    "xn--login-blockchan-okc.com",
    "xn--mercaox-brb.com",
    "binanceholding.com",
    "binanceholdings.com",
    "binancesgp.com",
    "coinbahis8.com",
    "ethfinex.net",
    "indodax-sdr.com",
    "isidorian-knobs.000webhostapp.com",
    "myetheruim.com",
    "myetherwallet-lot.space",
    "myetherwallt.net",
    "myethrwllet.com",
    "paxful-com.com",
    "paxful.ink",
    "trustwallet.co.uk",
    "binance-event.com",
    "binance-labs.com",
    "binance.com986213.ga",
    "binnance24.com",
    "bittrex-login.accountt-apps.com",
    "bittrex.com.tradinglending.com",
    "coinbase.aa-gg.com",
    "exchange-coindesk.com",
    "mnyelherwallel.com",
    "myetheruimwallet.com",
    "myethervvallet.us",
    "myetherwaliet.space",
    "myetherwallet-bing.space",
    "myetherwallet-ken.space",
    "myetherwallet-me.space",
    "myetherwallet-mr.space",
    "myetherwallet-my.space",
    "myetherwallet-sam.space",
    "myetherwallet-se.space",
    "myetherwallet.airdropmew.com",
    "myetherwallet.com.signin.message.dolphinexplorer.sg",
    "sign.xn--myethrwllet-ife3916g.com",
    "wkraken.com",
    "xn--myeterwallt-cm8e02e.com",
    "biinancelab.com",
    "binance-zendesk.com",
    "binance.com198367236.ml",
    "binanclogin.com",
    "bithumbex.com",
    "coinbasepromocode.com",
    "com12334567736789854.ml",
    "com124487897653274.ga",
    "com164795623564456654.ml",
    "com188565235654846.ml",
    "ethfinix.com",
    "huoobi.pro",
    "ibinance.com",
    "idex.agency",
    "idex.company",
    "localethereum.app",
    "my-ether-wallet.com",
    "myetharwellat.com",
    "myetherwallet.co.uk",
    "paxfullogin.us",
    "poloniexchina.com",
    "rnelherwallel.com",
    "rnyelherwallel.com",
    "sign-in.coinbase.com.puracosmetica.pt",
    "trade-indodax.com",
    "web-binance.com.ru",
    "xn--binne-hwa5e.net",
    "xn--bockchain-gsb.com",
    "xn--coinexchang-xbb.com",
    "xn--coinxchange-qbb.com",
    "xn--dex-uma.com",
    "xn--dx-bjao.market",
    "xn--myethrwllet-xt9e3k.com",
    "xn--mytherwalliet-4o2g.com",
    "xn--mytherwallt-79ae.com",
    "xn--mytherwllt-smb383ayq9k.com",
    "binance.com13897234.gq",
    "binanceusa.com",
    "coinbase-eth.org",
    "hitbtcvip.com",
    "idexj.market",
    "ios-icloud.us",
    "plooniex.com",
    "xn--biinanc-z8a.net",
    "xn--binace-zeb.net",
    "xn--binanc-n4a.net",
    "xn--binane-0ua.net",
    "xn--bnance-bwa.net",
    "xn--myeherwallt-crb6378g.com",
    "ildex.space",
    "1coinbase.com",
    "8idex.market",
    "9idex.market",
    "binance-get.fund",
    "binance-official.fund",
    "binance.com17268923.ml",
    "binance.com18976231.gq",
    "binancest.com",
    "binanecisecurity-com.com",
    "bitcoinspoloniexchange.com",
    "bitfinexvip.com",
    "bithumbvip.com",
    "bittrex.club",
    "coinbase-pro.com",
    "coinbasevip.com",
    "hitdtc.online",
    "hltbtc.online",
    "idax.market",
    "idexa.market",
    "idexc.market",
    "idexx.space",
    "idexz.market",
    "kidex.market",
    "mgetherwallat.com",
    "mycrypt0.com",
    "myetharwolet.com",
    "myethermwalet.com",
    "myetherumallet.com",
    "myetherumawllet.com",
    "myetherumqallet.com",
    "myetherumwalket.com",
    "myetherumwallett.com",
    "myetherumwalllet.com",
    "myetherumwallt.com",
    "myetherumwallte.com",
    "myetherumwllet.com",
    "myethorwalllet.com",
    "oidex.market",
    "poloniex.bid",
    "post-binance.com",
    "uidex.market",
    "wwwlidex.market",
    "xn--binne-hwa5e.com",
    "xn--dex-9ta.market",
    "xn--hitbt-lya.com",
    "xn--myehrwallet-bb9e99a.com",
    "xn--myethrwllet-ife3916g.com",
    "account-myetherwallet.club",
    "account-myetherwallet.info",
    "account-myetherwallet.online",
    "acctxcoinbase.com",
    "binance-airdrops.com",
    "binance.com1125459345.cf",
    "binancesto.com",
    "binancewebsite.accountant",
    "bitfinexsto.com",
    "coimbase.online",
    "coinbase247.com",
    "idex-maket.info",
    "idexi-login.com",
    "idexmarketjoin.com",
    "kraken.email",
    "musicequipment.site",
    "myerhetwaller.com",
    "poloniexwallet.com",
    "poloniwallet.com",
    "restore-coinbase.com",
    "shapeshift.cash",
    "verifypaxful.com",
    "teslacoin.space",
    "officialairdrop.tech",
    "teslacoin.tumblr.com",
    "supportbinance.890m.com",
    "890m.com",
    "kralken.co",
    "bilttrex.co",
    "bimanrce.com",
    "exrno.eu",
    "polroneix.com",
    "bloclkchain.co",
    "hitlbtc.co",
    "yobitr.net",
    "yobilt.net",
    "xgivex.blogspot.com",
    "populous.network",
    "bianace.online",
    "blockchain-exchange.online",
    "bitterx.online",
    "blftinex.com",
    "bltmian.com",
    "cryptnoator.com",
    "cryptopla.online",
    "exwo.online",
    "kuckion.com",
    "logintwitter.ga",
    "myethecwallet.com",
    "myetherwallet-fix.space",
    "myetherwallet-rlx.space",
    "polnoiex.site",
    "twittergiris.gq",
    "twitterlockeding.ga",
    "twitterlogins.gq",
    "xn--poloiex-kqc.com",
    "xn--myethrewalle-9me.com",
    "xn--myethrewalet-k4b.com",
    "xn--myetherwalet-j4b.com",
    "xn--kuoin-zra.com",
    "xn--bitman-f9a.com",
    "dexlauncch.com",
    "line-crypto.com",
    "etherdelta.icu",
    "xtrony.blogspot.com",
    "bithumbvietnam.com",
    "bithumbvietnam.info",
    "coinbasebonus.co.uk",
    "coinbasebonus.thehostrunner.co.uk",
    "eth-binance.ru",
    "idex-market.ru",
    "idexmarket.ru",
    "mercatox.info",
    "myetherwallet.red",
    "xn--coinx-q51b.com",
    "biinance.online",
    "binance-login.com",
    "binarrce.com",
    "myelherwolett.info",
    "poloniexadvanced.com",
    "poloniexlogin.trade",
    "binance-token.com",
    "binance.com7812686236.space",
    "binance.page",
    "bitlttrex.com",
    "coinsbaseexchange.com",
    "hitbtlc.com",
    "hjjtbtc.com",
    "kraken.site",
    "krarcken.com",
    "myerhetwallet.com",
    "paxfull.com.yontsk.tk",
    "poloniex.com.zandei.online",
    "polonnix.com",
    "polonnix.site",
    "poloniex.com135i478847258477.ml",
    "com135i478847258477.ml",
    "mnyicthervvalliet.com",
    "dexchainevent.com",
    "myethereumwalket.com",
    "bnbdexchaincompetition.com",
    "bnbdexchaincompetition.info",
    "bnbethairdropp.com",
    "dexchaincampaign.com",
    "mniyehtcwallict.com",
    "okexcampaign.info",
    "okexspecialcampaign.info",
    "bnbchaincompetition.info",
    "bnbetherairdropp.com",
    "dexchaincompetition.info",
    "okexspecialcampaign.com",
    "okexcampaign.com",
    "binacampaign.com",
    "dexchaincampaign.info",
    "ethereum-corporation.org",
    "myvolt.site",
    "coindesk-login.com",
    "wwwcoindesk.com",
    "xn--condesk-gw4c.com",
    "coinbase-codepromo.com",
    "coinbase-customer-support.online",
    "coinbase-helpdesk.info",
    "coinbase-support.net",
    "coinbasecustomersupport.info",
    "coinbaseesupport.club",
    "coinbaseesupportservices.club",
    "coinbaselogin.support",
    "coinbasesupport.co.uk",
    "coinbasesupport.online",
    "coinbasesupportnumber.com",
    "localethereum-account.com",
    "myetherwallet.byethost11.com",
    "googl-access.com",
    "binance.com13867347.ml",
    "com13867347.ml",
    "com1735835.gq",
    "binance.com1735835.gq",
    "com56457.ml",
    "binance.com56457.ml",
    "myetherwallet.notextbook.net",
    "sslsecure-verifyid.tk",
    "coinsender.tech",
    "walmartleaf.com",
    "1dex.market",
    "birhumb.com",
    "bitmex1.info",
    "bittrex-io.com",
    "bittrex-oo.com",
    "coinbase-promo.com",
    "coinbasepropromos.com",
    "com12786312634.space",
    "form-myetherwallet.com",
    "hitbtc8.com",
    "hitsbtc.club",
    "loginmicrosoftexcel-online.com",
    "mercatox.club",
    "myetlrewallet.com",
    "poloniex-tm.com",
    "poloniex-x.com",
    "wallet-blockchian.info",
    "walletmobile.io",
    "walletlivesyncconnect.io",
    "walletconnectslive.io",
    "wvw-bittrex.com",
    "xn--blockchai-owb.com",
    "xn--blockchin-r2a.com",
    "xn--krake-d8a.com",
    "xn--krken-ucc.com",
    "xn--metherwllet-ife3465g.com",
    "xn--yetherwllet-tv8ex8b.com",
    "giftforfans.website",
    "etherium.org.payment.7t27-srv.site",
    "7t27-srv.site",
    "giveawey.tumblr.com",
    "johnmcaffe.tumblr.com",
    "medium.com.7t27-srv.site",
    "winplatform.pro",
    "icon.cash",
    "xn--dex-uma.market",
    "polonniex.online",
    "polonniex.top",
    "niceihash.com",
    "nicenhash.space",
    "b-crypto.me",
    "apexone.online",
    "moyluchshiyremont.top",
    "pizzaobaldinidostavka.site",
    "binanse.ch",
    "bittrex-web.com",
    "bittrex-ydd.com",
    "hitbtc.website",
    "scris.club",
    "electrun.org",
    "xn--mythwallet-n7ac.com",
    "hitloek.info",
    "myetherwallet-xbmc.space",
    "ethiz.blogspot.com",
    "gi-ve.blogspot.com",
    "elonmuskairdrop.tech",
    "binance.com1367347.ml",
    "binance.com71623781.ga",
    "binance.com76237831.gq",
    "inbox-redirect-binance.com1367347.ml",
    "com1367347.ml",
    "com76237831.gq",
    "com71623781.ga",
    "binance.com1897623.ga",
    "binance.com7816623.gq",
    "binanceexchange.us",
    "binancevietnam.net",
    "cors01.binanceview.com",
    "paxful.support",
    "promobittrex.website",
    "wwv-bittrex.com",
    "wwv-bittrex.com.cp-34.webhostbox.net",
    "xn--biinanc-z8a.com",
    "binancelogin.org",
    "idex.auroradapp.market",
    "auroradapp.market",
    "roadgridequipment.pw",
    "binance.com1786236.ml",
    "binance.com197623462.ml",
    "binanceix.com",
    "meyethcrwallet.com",
    "meyfherwallet.com",
    "meyfherwellet.com",
    "meyhferwellet.com",
    "meythrewellet.com",
    "meythrowallet.com",
    "mychtervvallet.com",
    "mychterwellet.com",
    "shapeshiift.xyz",
    "paxful.com-bitcoin-wallet-trade-escrow.paxfulsecure.com",
    "paxfulsecure.com",
    "mnyicthervallict.com",
    "mnyidthewalliot.com",
    "binchaincampaign.com",
    "binachaincompetition.info",
    "binachaincompetition.com",
    "binacompetition.com",
    "binacompetition.info",
    "firstcrypt.info",
    "binance.com6537261.ml",
    "binance.com762381.cf",
    "com762381.cf",
    "com6537261.ml",
    "com13734.space",
    "vitalik-campaign.xyz",
    "getgift.tech",
    "elongift.com",
    "muskmars.tech",
    "binance.com12754825.ml",
    "binance.com128236.ml",
    "vietnamese-binance.com",
    "vietnam-login-binance.com",
    "vietnam-binance.com",
    "loginviet-binance.com",
    "binance-login-vn.online",
    "com12754825.ml",
    "com12786312634",
    "com1865236.ga",
    "com763271231.gq",
    "com128236.ml",
    "com723781231.online",
    "elon-share.info",
    "ethereum-giveaway.ru",
    "login-blnance.space",
    "send-gift.website",
    "etherium.org.payment.7t24-srv.site",
    "7t24-srv.site",
    "airdrops.technology",
    "myetherwallet-cpt.space",
    "tron-network.info",
    "electrumwallet.org",
    "medium.com.7t23-srv.site",
    "7t23-srv.site",
    "etherium.org.payment.7t23-srv.site",
    "firecrypto.info",
    "bitbakocffice.site",
    "santechstroywalker.site",
    "airdrop-event.com",
    "sgivex.blogspot.com",
    "myetherwallet-shl.space",
    "get.fastcryptogift.com",
    "fastcryptogift.com",
    "poloniex.com.account2fa-login.com",
    "account2fa-login.com",
    "bittrex-login.account2fa-login.com",
    "g-ive.blogspot.com",
    "cryptopromo.justsharedthis.info",
    "btcgive.kissr.com",
    "binan-ceh.com",
    "ibcexofmarket.com",
    "ibexofmark.com",
    "icexofmark.com",
    "iclexmarket.com",
    "iclexofmarket",
    "iclexofmarket.com",
    "widgets.ibexofmark.com",
    "wighfghfh.ibexofmark.com",
    "idex.auroradao.market",
    "auroradao.market",
    "bnbdecentralizedcompetition.com",
    "bnbdecentralizedcompetition.info",
    "bnbdecentralizedevent.info",
    "bnbethairdropp.info",
    "bnbethereumairdropp.com",
    "bnbethereumairdroppevent.com",
    "bortnarnce.com",
    "check1.pw",
    "decentralizedspecialevent.info",
    "mniyehtcwalliot.com",
    "mnyicthervallat.com",
    "mnyicthervvallet.com",
    "mnyicthervwvallct.com",
    "getyourcoins.org",
    "binance-giveaway.webcindario.com",
    "gift-today.website",
    "cryptopromo.kissr.com",
    "etherium.org.payment.7t21-srv.site",
    "7t21-srv.site",
    "top-deals.pro",
    "medium.com.7t21-srv.site",
    "decentralizedbitcoincampaign.info",
    "bittrexl.in.us.bix-l.com",
    "bix-l.com",
    "binance.com18363462.ml",
    "binancebtcspecial.com",
    "brivnarnce.com",
    "brovinamce.com",
    "brovnarnce.com",
    "brtvnarnce.com",
    "cpanel.bittrex1.com",
    "decentralizedspecialcampaign.com",
    "decentralizedspecialevent.com",
    "hitbtc.com.co",
    "mietherwallet.com",
    "myeitherwallett.com",
    "myencryptwallet.com",
    "myetherwellet.com",
    "myethewallert.com",
    "shapeshift.biz",
    "bjttrex.com",
    "id-ex.market",
    "iidex-market.eu",
    "myetherwallet.biz",
    "myetherwallet.auth.slgnmsg.info",
    "slgnmsg.info",
    "spectrocoinlog-in.com",
    "giftethnow.website",
    "etherium.org.payment.7t20-srv.site",
    "7t20-srv.site",
    "x-gives.blogspot.com",
    "ethgive.kissr.com",
    "ico-neon.exchange",
    "myetherairdrop.com",
    "myetnerwallet.com.send-status.info",
    "send-status.info",
    "paxful.com.pl",
    "myetherwallet-id.space",
    "eth-databasecontract.website",
    "geteos.eu",
    "binance-campaign.info",
    "binance-campaign.site",
    "binance-exchange.cricket",
    "binance-exchange.fun",
    "binance-https.com",
    "binance.com-log-in.googl-access.com",
    "bittrex-log-in.com",
    "bittrex-login.asset2fa-exchange.com",
    "bittrex.asset2fa-exchange.com",
    "bittrex.com.asset2fa-exchange.com",
    "conidase.com",
    "mjetherwattet.com",
    "us.bittrex.asset2fa-exchange.com",
    "us.bittrex.com.asset2fa-exchange.com",
    "3dayprofits.info",
    "etherium.org.payment.7d19-srv.site",
    "7d19-srv.site",
    "atmbtc.biz",
    "best-gift.website",
    "airdrop.com.de",
    "vitalikpromo.eu",
    "medium.byethost10.com",
    "medium.com.7d19-srv.site",
    "promo2.etherbonus.top",
    "etherbonus.top",
    "xn--hibtc-leb.com",
    "hitbtc-eu.com",
    "hitbtc.cam",
    "get-5k-promo.website",
    "freshbonus.eu",
    "e-gives.blogspot.com",
    "etherium.org.payment.7d18-srv.site",
    "7d18-srv.site",
    "airdrops.life",
    "binance-com-clud.webcindario.com",
    "go7.giftether.top",
    "hitbtc.li",
    "xn--spectroconn-7zb.com",
    "paxfullwallet.com",
    "user.paxfulpolicy.com",
    "paxfulpolicy.com",
    "paxful.com.balums.gq",
    "forkdeilta.app",
    "xn--dex-tta.market",
    "verify.xn--mytherwalet-3qb10c.com",
    "getfreeethhh.blogspot.com",
    "getfreebitcoin.network",
    "coinaction.xyz",
    "cryptoxfan.info",
    "go6.giftether.top",
    "binance-giveawaypromo.banance.xyz",
    "banance.xyz",
    "mega-airdrop.website",
    "joinnow.info",
    "binance-campaign.com",
    "binance-eth.club",
    "binanceeth-campaign.com",
    "binanceeth-competition.com",
    "binanceethergiveaway.com",
    "binanco.live",
    "ethervvallet.com",
    "myctherwallet.net",
    "go5.giftether.top",
    "etherium.org.payment.7d17-srv.site",
    "7d17-srv.site",
    "bigbonus.eu",
    "medium.com.7d17-srv.site",
    "getnowcrypto.com",
    "bittcrex.com",
    "myetherwallet-knt.space",
    "myetherwallet-knc.space",
    "etherdelta.press",
    "xn--paxfl-nva.com",
    "goodaction.eu",
    "coinpromo.xyz",
    "september-bonus.us",
    "getbonus.eu",
    "airdrop-gift.website",
    "muskonline.tech",
    "cryptogivng.blogspot.com",
    "today-eth.pw",
    "binance-bonus.club",
    "binance-bonus.net",
    "binance-promo.org",
    "binance-t.com",
    "binanceethereumairdroppevent.info",
    "binancepromos.live",
    "blockchain-secure.info",
    "bonusbinance.org",
    "i-dex.market",
    "idex-rnarket.info",
    "idex.markel.transactions-wallet.info",
    "myetlherwallelt.com",
    "mymanero.com",
    "gramnetwork.net",
    "topcryptogift.org",
    "payetherer20.000webhostapp.com",
    "vggs.info",
    "go4.giftether.top",
    "etherium.org.payment.7d16-srv.site",
    "payment.7d16-srv.site",
    "givingsaway.blogspot.com",
    "msg.xn--mytherwalet-3qb10c.com",
    "myetherwallet.auth.sgnmsg.com",
    "sgnmsg.com",
    "hitbtcspace.herokuapp.com",
    "2fa-paxful.com",
    "eherpro.tumblr.com",
    "smart-gift.website",
    "coinshare.xyz",
    "buterintoday.eu",
    "tronics.tech",
    "giveaway-medium.top",
    "tesla-giveaway.live",
    "myetherwallet-knb.space",
    "wallets-crypto-bridge.org",
    "coinbaseblogiveawayhg.tumblr.com",
    "binance-ethpromo.org",
    "binance.fail",
    "binancevault.com",
    "get-btc-binance.com",
    "get-eth-binance.com",
    "myetherwallet-sign.fun",
    "teammyetherwallet.com",
    "xn--dex-yma.market",
    "trxgold.io",
    "signature.xn--mytherwalet-3qb10c.com",
    "blockchian-login.info",
    "login-blokchain.com",
    "login-blockchian.net",
    "blockchian-wallets.com",
    "blockchian.ca",
    "blockchian-wallet.com",
    "blockchian-login.com",
    "idex-market.pro",
    "biboyx.com",
    "bnb-ethcampaign.com",
    "cryptobtc.club",
    "perlin.global",
    "tesla-giveaways.space",
    "top-ethereum.info",
    "mnaxy.blogspot.com",
    "go3.giftether.top",
    "etherium.org.payment.promoaction.site",
    "promoaction.site",
    "airdropbtc.tech",
    "secure.topcoinsgift.com",
    "topcoinsgift.com",
    "musk-crypto.info",
    "5k-gift.website",
    "platform-give.com",
    "ethgiveaway.co.uk",
    "bi-nancer.com",
    "binance-eth-competition.com",
    "binance-ether.club",
    "binance-ethereum.com",
    "binance-ethereum.info",
    "binance-ethereum.tech",
    "binance-ethevent.net",
    "binance-ethevent.org",
    "binance-x.club",
    "binancebonus.net",
    "binancebonus.org",
    "binanceeth.club",
    "binanceethcompetition.com",
    "binanceether.club",
    "binanceethereum.club",
    "binancepromo.club",
    "binancespecialcompetition.com",
    "binancespecialethcompetition.com",
    "binanceth.club",
    "binancether.club",
    "binancethereum.club",
    "eth-binance.club",
    "ethbinance.club",
    "ethcompetitionbinance.com",
    "ether-binance.club",
    "etherbinance.club",
    "myetherwallet.com.ip13.icu",
    "myetherwelet.net",
    "myetherwolllet.com",
    "myethswallet.club",
    "suportbinance.com",
    "tokens.myetherwailet.cf",
    "medium-coinbaseblog.tumblr.com",
    "safe.geteasycrypto.com",
    "geteasycrypto.com",
    "lixozy.blogspot.com",
    "eloncrypto.info",
    "mediumcoinbase.tumblr.com",
    "cryptoeth.live",
    "crypto-win.club",
    "crypto-medium.com",
    "getairdrop.eu",
    "sending-smartcontract.website",
    "idex-market.exchange",
    "protect.minedcoins.online",
    "minedcoins.online",
    "go2.giftether.top",
    "contract-verify.space",
    "cryptogift.cn",
    "ethergifts.top",
    "medium-gifts.top",
    "get.officialcryptogiveaway.com",
    "officialcryptogiveaway.com",
    "cvifex.blogspot.com",
    "ethereum-ltd.net",
    "giveaway.ether-prize.com",
    "titan-g.pro",
    "coinbaseblogiveawaynews.tumblr.com",
    "eth-gift.wixsite.com",
    "btc-gift.wixsite.com",
    "rpmson-ethcampaign.com",
    "444eth.ml",
    "give-th.blogspot.com",
    "applex1.com",
    "riklex.blogspot.com",
    "ethpromo.xyz",
    "bitblender.me",
    "safe.paynowcoins.com",
    "paynowcoins.com",
    "go1.giftether.top",
    "enjoy.topcryptogift.com",
    "topcryptogift.com",
    "bigdrop.cn",
    "sekakux.blogspot.com",
    "4ever.fun",
    "thetrey.net",
    "myeclientsidewallet.com",
    "bnbethercompetitionlaunch.com",
    "ethereum-corporation.com",
    "binan-ce.com",
    "binance.security",
    "binoance.com",
    "ethereum-binance.club",
    "etheventbinance.org",
    "idex.center",
    "mmyethereumwallet.com",
    "myethereumwaller.com",
    "myethereumwwallet.com",
    "myethereuumwallet.com",
    "myethereymwallet.com",
    "myetherreumwallet.com",
    "myetherrumwallet.com",
    "myetherumeallet.com",
    "myetherummwallet.com",
    "myetherumwaallet.com",
    "myetherumwaklet.com",
    "myetherumwalelt.com",
    "myetherumwalle.com",
    "myetherumwalleet.com",
    "myetherumwaller.com",
    "myetherumwalley.com",
    "myetherumwallrt.com",
    "myetherumwallwt.com",
    "myetherumwlalet.com",
    "myetherumwsllet.com",
    "myetherumwwallet.com",
    "myetherunwallet.com",
    "myetheruumwallet.com",
    "myetheruwmallet.com",
    "myetherymwallet.com",
    "myetheteumwallet.com",
    "myethetumwallet.com",
    "myetheumwallet.com",
    "myetheurmwallet.com",
    "myethhereumwallet.com",
    "myethherumwallet.com",
    "myethrrumwallet.com",
    "myethrumwallet.com",
    "myetterwalet.com",
    "myetthereumwallet.com",
    "verify-binance.com",
    "earn.dailydivs.com",
    "safe.minedtokens.com",
    "smartsend-5000.website",
    "airdropeth.tech",
    "imyetherbonus.com",
    "minedtokens.com",
    "crypto-promo.org",
    "coinbasesecuritytokens.com",
    "coinbasepay.info",
    "hitbtcrecovery.com",
    "hitbtc-adv.com",
    "gemini-wallet.com",
    "gemini2fa.com",
    "geminiaccount.com",
    "binantlabsinfo.com",
    "binanetlabsinfo.com",
    "mymonerocom.com",
    "binantrustwaiiet.com",
    "binantrustwailet.com",
    "binantrustwaliet.com",
    "binancetrustwaiiet.com",
    "binancetrustwailet.com",
    "binancetrustwaliet.com",
    "binanctlabsinfo.com",
    "binanctrustwaiiet.com",
    "binanctrustwailet.com",
    "binanctrustwaliet.com",
    "binance-accounts.com",
    "binatrustwaiiet.com",
    "binatrustwailet.com",
    "binatrustwaliet.com",
    "bintrustwaiiet.com",
    "bintrustwailet.com",
    "bintrustwaliet.com",
    "ubex.us",
    "bnbdex-ethcampaign.com",
    "binance-ether.online",
    "binance.win",
    "binanceethevent.net",
    "etheventbinance.net",
    "metherumwallet.com",
    "mmyetherumwallet.com",
    "mtetherumwallet.com",
    "muetherumwallet.com",
    "myeethereumwallet.com",
    "myeherumwallet.com",
    "myerherumwallet.com",
    "myeterumwallet.com",
    "myetgerumwallet.com",
    "myetheeeumwallet.com",
    "myetheereumwallet.com",
    "myetheerumwallet.com",
    "myethereeumwallet.com",
    "myethereimwallet.com",
    "myethereumeallet.com",
    "myethereummwallet.com",
    "myethereumqallet.com",
    "myethereumwaallet.com",
    "myetherimwallet.com",
    "myethermuwallet.com",
    "myetheswallets.org",
    "myethwrumwallet.com",
    "myetjerumwallet.com",
    "myetnerwallet-com.review",
    "myetterwelllet.com",
    "myettherumwallet.com",
    "myeyherumwallet.com",
    "myrtherumwallet.com",
    "mytherumwallet.com",
    "mywtherumwallet.com",
    "myyetherumwallet.com",
    "nyethereumwallet.com",
    "nyetherumwallet.com",
    "ymetherumwallet.com",
    "airdrops-exchange.com",
    "buterindrop.eu",
    "campaign.etheraction.in",
    "etheraction.in",
    "ethtake.icu",
    "cryptocurrency-giveaway.com",
    "mcafee.coolpage.biz",
    "september-event.us",
    "september-promo.us",
    "freeethereum500.000webhostapp.com",
    "myetherwallet.com.webwallet-view.info",
    "webwallet-view.info",
    "binance-eth.net",
    "binance-ether.net",
    "binance-n.com",
    "binanceeth.org",
    "eth-binance.net",
    "ethereumwallets.tech",
    "meytherwallet.net",
    "myetheforwallet.com",
    "myetherwallet.com.update.privatekey.wallet-crypto-member.com",
    "myetherwallet.update.system.crypto-wallet-member.com",
    "myethswallet.net",
    "myethswallet.top",
    "myettwallet.bid",
    "myyetherwallet.online",
    "bnbethspecialcampaigns.com",
    "bnbchaineth.com",
    "bnbethchain.com",
    "bnbdexethlaunch.com",
    "bnbethpromotion.com",
    "binanethpromotion.com",
    "bnbpromotion.com",
    "bnbspecialcampaign.com",
    "bnbdexcampaign.com",
    "bnbexchangedex.com",
    "bnbexchangespecialcampaign.com",
    "bnbexchangespecial.com",
    "bnbdexethcampaign.com",
    "bnbexchangeethspecialcampaign.com",
    "bnbexchangespecialethcampaign.com",
    "bnbethexchangespecial.com",
    "bonus.client-stellarterm.com",
    "client-stellarterm.com",
    "mixprize.cn",
    "medium-secure.com",
    "ginexis.blogspot.com",
    "giftsatoshi.space",
    "myethcrwallet.net",
    "myetherewa11ets.com",
    "mvyetherwallet.com",
    "myehterwallets.xyz",
    "xn--meherwallet-yb9eup.com",
    "login-blockchain.top",
    "login-blockchain.gq",
    "eosauthority-accountpolicy.omastral.org",
    "claim.paysafecoins.com",
    "paysafecoins.com",
    "gooddrop.cn",
    "giveaway-eth-btc.euweb.cz",
    "eth4312left.pw",
    "secure.topcoingift.com",
    "topcoingift.com",
    "ethgold.pro",
    "send-smartcontract.space",
    "getyoureth.network",
    "geteth.pro",
    "lopixy.blogspot.com",
    "zilliqagold.co",
    "xn--tesl-tzb.com",
    "litecoinone.org",
    "medium-mcafee.top",
    "binanceth.net",
    "tesla-giveaways.org",
    "september-bonuss.com",
    "ethersclaim.blogspot.com",
    "free.giftether.top",
    "giftether.top",
    "get-bonus.online",
    "getether.eu",
    "easydrop.pro",
    "claim-event-eth.org.uk",
    "vecimax.blogspot.com",
    "ethpromo-binance.org",
    "myetherbonus.net",
    "get.safepaycoin.com",
    "safepaycoin.com",
    "ethereum4ever.com",
    "contagion.cf",
    "september-bonus.com",
    "ethereum-airdrop.tumblr.com",
    "giveaway.at.ua",
    "myeth-claim.com",
    "ethereumvert.com",
    "mediumposting.vip",
    "give-away.co.uk",
    "eth4323left.pw",
    "safe.coinspaynow.com",
    "coinspaynow.com",
    "mixgift.top",
    "blog-medium.com",
    "etherdelta.website",
    "blockhaine.blogspot.com",
    "geteth.cn",
    "medium.com.7a4c7b234069.site",
    "etherium.org.7a4c7b234069.site",
    "7a4c7b234069.site",
    "elctrurn.org",
    "jaxx.one",
    "lkraken.xbtxv.com",
    "bestbuildercompany.pw",
    "i-idexmarket.com",
    "myetherewallet.ga",
    "myetherwallet.com.signmessage.info",
    "myethrewallet.services",
    "toptireshop.pw",
    "indexmarx.com",
    "myetherewallet.online",
    "myetherrwallet.com",
    "myetherrwallet.signmessage.xyz",
    "myetherwallet-hydro.space",
    "myetherwallet.com.verifiy.icu",
    "myetherwallett.mining24.info",
    "myetherwallwet.com",
    "myethherwallet.com",
    "myethrwallet.com",
    "musk-prize.info",
    "medium-io.site",
    "claim.safepaycoins.com",
    "safepaycoins.com",
    "airdrop-exchange.com",
    "secure.eth-claim.online",
    "eth-claim.online",
    "airdrops.investments",
    "medium.in.net",
    "eth5321left.pw",
    "send-transaction.online",
    "medium-smartcontract.space",
    "access-myetherwallet.com",
    "mew-myetherwallet.com",
    "meythereumwallet.com",
    "mineetherwallet.com",
    "myehtereumwallet.com",
    "myetehreumwallet.com",
    "myetheremuwallet.com",
    "myethereumwallte.com",
    "myethereuwmallet.com",
    "myetherwailet.online",
    "myetherwallats.xyz",
    "myetherwallet.com.signmessage.xyz",
    "myetherwallet.wiki",
    "myetherwallwt.com",
    "myethetwallet.com",
    "mytehereumwallet.com",
    "wallet-myetherwallet.com",
    "login-coinone-co-kr.com",
    "pumpkinpro.co",
    "panemicav2.rf.gd",
    "ethbonus.live",
    "ethactive.online",
    "eth-take.com",
    "crypto-giveaway.xyz",
    "ether-prize.com",
    "smart-contract.space",
    "safe.justgetcrypto.com",
    "justgetcrypto.com",
    "september-event.com",
    "home-myether.top",
    "ethcoindesk.blogspot.com",
    "medium-airdrop.net",
    "airdrop.updog.co",
    "send.secureth.host",
    "secureth.host",
    "mixdrop.eu",
    "giveaway-btc.com",
    "binmeds.blogspot.com",
    "jidex.market",
    "mljetherwallet.com",
    "myehtermallert.com",
    "myetheeumwallet.com",
    "myethereumallet.com",
    "myethereumwalet.com",
    "myethereumwalle.com",
    "myethereumwallet.co",
    "myethereumwallt.com",
    "myethereumwllet.com",
    "myetheriwallet.online",
    "myetherrwallet.mining24.info",
    "myetherrwallnet.com",
    "myetherrwallnet.mining24.info",
    "myetherwalets.site",
    "myetherwallats.club",
    "myetherwallats.online",
    "myetherwalle-t.com",
    "myetherwalle-t.ve-ry.club",
    "myetherwallet-gram.website",
    "myetherwallet.com.gpg.services",
    "myetherwallet.signgpgmessage.co",
    "myethrewallet.club",
    "myettherwalet.net",
    "mythereumwallet.com",
    "youretherwallet.io",
    "ethmixdrop.pro",
    "axibovs.blogspot.com",
    "send.ethparty.us",
    "ethparty.us",
    "ethaway.000webhostapp.com",
    "blognance.blogspot.com",
    "september-promo.com",
    "cryptoairdrop.center",
    "air-drop.website",
    "tezbox.net",
    "wetimox.blogspot.com",
    "buterinpromo.cn",
    "eth24win.co.nf",
    "airdrop-portal.com",
    "give-eth.biz",
    "medium-promos.xyz",
    "buterinpromo.live",
    "ethclaim.online",
    "mywindorwallert.site",
    "binancegiveaway.com",
    "myethervvellet.co",
    "myethherwalletr.top",
    "xn--myethrewalle-xoc.com",
    "xn--myethrewaet-z3ba.com",
    "mevetherwalletr.site",
    "mvetnerwalletr.website",
    "mevetherwalletr.com",
    "myvetherwallets.com",
    "pumpkinpro.io",
    "binancethereum.com",
    "mailbinance.com",
    "btc-bonus-live2-binance.com",
    "monero-my.com",
    "eth4123left.pw",
    "xlblogz.blogspot.com",
    "eth-promo.borec.cz",
    "ether-take.org",
    "ethergot.xyz",
    "crypto-giveaway.net",
    "etherprize.net",
    "ethpromzone.space",
    "myetherwallet.com.ip14.icu",
    "ip14.icu",
    "statusico.com",
    "redeem-myetherwallet.pw",
    "omisegogold.io",
    "claim-wallet.com",
    "bhaskar.dx.am",
    "ethertoken.online",
    "mywindorwallert.space",
    "binance-ether.org",
    "neostracker.com",
    "elonmusk.ltd",
    "elonmusk.fund",
    "loginbinance-com.umbler.net",
    "selleth.io",
    "blokclnain.com",
    "giftreturn.mysteria.cz",
    "ethdrop.cn",
    "giveaways24.info",
    "airdrop-live.com",
    "grijub.blogspot.com",
    "etherdrop.space",
    "infoclaimeth.ucoz.org",
    "secure.ethaccess.online",
    "ethaccess.online",
    "tesla.center",
    "go.payeth.online",
    "payeth.online",
    "crypto-exchange.ro",
    "ethbonus.cn",
    "claim-here.com",
    "hizytox.blogspot.com",
    "claim-event-eth.biz",
    "localethereum-support.com",
    "zilliqa.plus",
    "claim-giftwaves.com",
    "pandemica.online",
    "btcdrop.cn",
    "eth-bonus-live-binance.com",
    "ethbinance.org",
    "xn--bockchain-0sb.com",
    "myetherwalllet.xyz",
    "myetherswallet.website",
    "blockchalh.com",
    "blokclhain.com",
    "blokclnaln.com",
    "blockchaijn.com",
    "blockchatn.com",
    "xn--blockchai-3vb.com",
    "xn--blockchai-t6a.com",
    "blockclhain.in",
    "blockchallns.info",
    "claim-nowgift.com",
    "air-drop-ethmark.website",
    "ethboom.eu",
    "dontmiss.info",
    "top-ethereum.net",
    "airdrops.services",
    "ethereum-award.club",
    "cryptocurrency-gift.tumblr.com",
    "secure.getcryptogift.com",
    "getcryptogift.com",
    "ethboom.io",
    "ethbinance.blogspot.com",
    "ether-airdrop-promo.info",
    "medium-ether-airdrop.net",
    "iost.gift",
    "ethactivate.com",
    "medium-promo.xyz",
    "access.eth-access.com",
    "eth-access.com",
    "secure.btcethgoldmine.com",
    "btcethgoldmine.com",
    "claim.ethsx.space",
    "ethsx.space",
    "asktollfree.com",
    "binance-exchange.online",
    "binance-exchange.xyz",
    "myetherwallet-wab.space",
    "myetherwallet.review",
    "myethrewallel.com",
    "binance-lgin.com",
    "ibx-l.com",
    "mvetnerwalletr.online",
    "mvetnerwalletr.site",
    "mvyetherwallett.online",
    "xn--methewallet-v48e1x.com",
    "info-myetherwallet.com",
    "xn--myeherwllet-wte7564g.com",
    "enternow.info",
    "claim-event-eth.com",
    "claim-giveaway.club",
    "binabins.blogspot.com",
    "medium-ethereum-promo.info",
    "ethereum-bonus.info",
    "ethereum-event-promotion.org.uk",
    "jblagz.blogspot.com",
    "event-eth.biz",
    "ethereumbonus.ru",
    "xn--cryptonaor-hcc.com",
    "poloni-ex.com",
    "xn--binanc-gpc.com",
    "accountlogin2fa.com",
    "ethpromo10.000webhostapp.com",
    "digitalasset-app.com",
    "log-in-binance.com",
    "myetherwallat.club",
    "myetherwallet.co.nz",
    "myethforkwallet.com.ru",
    "myethherwalletr.com",
    "ww25.myethereum.info",
    "myethswalet.com",
    "xn--myethrewallt-fwb.com",
    "view-webwallet.info",
    "myetnerwallet.com.view-webwallet.info",
    "lbitmex-in.com",
    "myetalonwindow.info",
    "bitmex-in.co",
    "airdrop-eth.website",
    "ethereumpromo.io",
    "ethreturn.euweb.cz",
    "bonus-claim.xf.cz",
    "eth-claim.info",
    "access.ethsupply.com",
    "ethsupply.com",
    "ethactive.com",
    "ltc-event-now.xyz",
    "biltmex.com",
    "lbtsx.com",
    "xn--bimex-leb.com",
    "bitmex-login.com",
    "binanblog.blogspot.com",
    "etherfast.eu",
    "ethreum.ru",
    "eth-official.fund",
    "bonuseth.top",
    "binance-eth-giveaways.online",
    "returneth.webz.cz",
    "exchange-airdrop.com",
    "ether-reward.info",
    "medium-airdrop.website",
    "eth-miner.info",
    "tron-event.network",
    "ether5000.in",
    "efiriumgiveaway.tk",
    "tedjang68.wixsite.com",
    "ethgivewayofficial.info",
    "giveawaybinance.com",
    "promoeth.000webhostapp.com",
    "imdex.market",
    "official-give-away.tumblr.com",
    "twgram.info",
    "ether-claim.net",
    "airdropvert.info",
    "bigcryptogift.net",
    "eth-give.io",
    "mcafeepromo.xyz",
    "crypto-gifts.ml",
    "amazing-smartcontract.space",
    "elon-shares.info",
    "blogsbina.blogspot.com",
    "medium-com.website",
    "big-giveaway.xf.cz",
    "cryptodrop.eu",
    "binc-blog.blogspot.com",
    "ethfreegiveaway.ga",
    "app-1524336311.000webhostapp.com",
    "etherium-com.site",
    "bonuseth10.000webhostapp.com",
    "medium-ethereum-promo.biz",
    "tokensale.ws",
    "google.com.tokensale.ws",
    "google-coin.io",
    "airdrop-binance.com",
    "auroradao.co.uk",
    "binanceethereum.com",
    "etherwalletlogin.club",
    "etherwalletlogin.online",
    "httpsmyetherwallet.pw",
    "idex.marketing",
    "myelherwallet.co",
    "myetherlwaliet.info",
    "myetherswallet.site",
    "myetherwalletly.com",
    "myetherwallets.live",
    "myethrwallet.com.co",
    "idexmark.online",
    "eth-gifting.com",
    "ethereum-bonus.biz",
    "bigcryptogift.borec.cz",
    "website-events.website",
    "satoshilite-eth.tumblr.com",
    "stellarterm.org",
    "giftseth10.000webhostapp.com",
    "promoeth10.000webhostapp.com",
    "xn--myethrewllet-jbb.com",
    "xls-log.com",
    "hitbtc1.website",
    "promo-giving.ga",
    "mediumlast.ml",
    "ethereumbonus.net",
    "secure-eth.info",
    "ethfs.blogspot.com",
    "bloggercom.info",
    "nblogiz.blogspot.com",
    "secure2.ethrewarding.com",
    "bigcryptogift.org",
    "mudium.xyz",
    "ethereum-gift.site",
    "claimeth.info",
    "go.ethsec.us",
    "ethsec.us",
    "eth-claim.pw",
    "xn--tronscn-mwa.com",
    "tron-scan.info",
    "ethereum-foundation.info",
    "bigcryptogift.info",
    "claim-binance.com",
    "bitcashout.wixsite.com",
    "get.safepaycrypto.com",
    "safepaycrypto.com",
    "aeternity.click",
    "airdrop-event.website",
    "claimeth10.000webhostapp.com",
    "cryptoprize.in",
    "coinbase.tx-pr0.com",
    "tx-pr0.com",
    "exploretransactions.info",
    "binahce.net",
    "blockcnalh.com",
    "blockcnaln.com",
    "bihahce.net",
    "biockchain.co",
    "blt-mex.com",
    "kueoin.com",
    "bittreq.com",
    "bjockchain.com",
    "blockcham.com",
    "blockclnam.com",
    "maytherwallet.com",
    "bjockchajn.com",
    "exmiu.com",
    "kuqoin.com",
    "nyethermallet.com",
    "poionlex.com",
    "blttinex.com",
    "myetnermallet.com",
    "bietmex.com",
    "kucoien.com",
    "kucoein.com",
    "verify.10000eth.pro",
    "10000eth.pro",
    "eth-twitter.com",
    "ethcap.info",
    "gift-promo.wz.cz",
    "vitd1.info",
    "reblogiz.blogspot.com",
    "promo-ether.org",
    "ethereum-promo.net",
    "ethereumpromo.eu",
    "get.bigcryptogift.com",
    "bigcryptogift.com",
    "exchanges.claims",
    "btc-promo.xf.cz",
    "ethpromogiving.com",
    "ethpromogiving.net",
    "ethpromosend.net",
    "ethpromodonate.com",
    "ethpromogive.info",
    "ethpromoget.info",
    "ethpromotake.info",
    "ethpromogivenow.info",
    "theethpromogive.info",
    "ethpromogiving.info",
    "ethpromo-give.org",
    "ethpromogive.org",
    "ethpromoget.org",
    "ethtw.info",
    "ethertake.org",
    "ethereum-giveaway.czweb.org",
    "ethshift.website",
    "gathereth.com",
    "hugedrop.eu",
    "ethpromo-give.info",
    "elonmusk.racing",
    "hitbtc.cc",
    "hitb-tco.com",
    "myethervvallet.pw",
    "myetherwallet.co.za",
    "myetherwallett.fhapp.xyz",
    "web-binance.com",
    "xn--bittrxx-vya.com",
    "memonero.co",
    "walletverify.info",
    "myetherwallet.com.walletverify.info",
    "myetherwwllet.github.io",
    "eth-secure.top",
    "freetokens.online",
    "ether-promo.biz",
    "medium-ether-blog.info",
    "eth-return-now.borec.cz",
    "etheasydrop.eu",
    "new-myethewallet-1a.com",
    "mewewallet.info",
    "electrumwallet.io",
    "binance-com.online",
    "shapeshiflt.com",
    "biffrex.com",
    "bittrexn.com",
    "shapeshifteu.com",
    "ethermywallet.com",
    "home-myetherwallat.com",
    "home-myetherwallat.top",
    "idex.space",
    "ildex.market",
    "mail.myetheforwallet.com",
    "mjeherwallet.com",
    "myeltherwallet.pw",
    "myethereumwallet.net",
    "myetherwallet-sigen.space",
    "myetherwallet.com-omisego.com",
    "myetnelwallet.com",
    "myetnelwallet.online",
    "wallet.idex.space",
    "webmail.myeltherwallet.pw",
    "xn--dex-mma.market",
    "bestchagne.com",
    "biftinex.org",
    "myehterwellet.org",
    "ethclaim.top",
    "bittrex-n.com",
    "eth-airdrop.biz",
    "ethfs.info",
    "ether-give-binance.com",
    "take.realcryptogift.com",
    "realcryptogift.com",
    "ether-airdrop.info",
    "ethereumaction.eu",
    "ether-airdrop.biz",
    "medium-ether-blog.biz",
    "info-live-binance.com",
    "wusd.cf",
    "binamedium.blogspot.com",
    "myethervvellet.net",
    "coinbase-news.tumblr.com",
    "exchangeth.online",
    "home-myetherwallat.info",
    "ethgetbonus.eu",
    "eth-official.claims",
    "ethresults.info",
    "ethereumdrop.eu",
    "go.ethgft.party",
    "ethgft.party",
    "safesclaim.info",
    "ethereum-airdrop.biz",
    "give-away.win",
    "giveaway-coinbase.club",
    "etherscan.space",
    "binmedium.blogspot.com",
    "ethereum-claim.ru",
    "coinbase-gift.tumblr.com",
    "medium-news.blogspot.com",
    "musk-air.org",
    "safe-claims.info",
    "bitstamp.pw",
    "binance-web.com",
    "eth-club.club",
    "ethgiving.000webhostapp.com",
    "mediumapp.org",
    "ethpromosend.com",
    "eth5000.in",
    "coinmyethers.ooo",
    "binance-exchange.updog.co",
    "xn--yetherallet-tv8es7a.com",
    "ethbonus.eu",
    "omiseqo.network",
    "smartcontract-5000.space",
    "medium-blog-airdrop.info",
    "airdrop-eth.net",
    "blog-coinbase.tumblr.com",
    "giveaway-coinbase.top",
    "elon-musk.team",
    "musk-share.info",
    "crypto-promo.czweb.org",
    "coinbas-esignin.com",
    "ee-myetherwallet-un.com",
    "myehterwallete.com",
    "myethervvalllett.com",
    "myetherwallet.api20.icu",
    "myethforkwallet.com",
    "myethirwaliet.info",
    "bittrex-sigin.com",
    "safe.justgeteth.com",
    "promotion-eth.net",
    "eth-airdrop.info",
    "mediurn.press",
    "ethereum10000.press",
    "site-binance.co",
    "bittrexup.com",
    "giveaway-ethereum.top",
    "smartsent.space",
    "giveaway-eth.tumblr.com",
    "medium-eth.net",
    "ether-giveaway.top",
    "airdrop.credit",
    "musk-share.com",
    "muethwaitt.info",
    "giveaway.xf.cz",
    "bittrex-br.com",
    "accounts-blockchain.info",
    "binance.com87654897.ml",
    "com87654897.ml",
    "binance-in.com",
    "nectracker.co",
    "myethervvallet.org",
    "ethereum10000.website",
    "xn--dx-ejao.market",
    "ethchange.online",
    "idex-logiin.com",
    "myetherwelliet.net",
    "mytherwailet.info",
    "myehtervvalliet.com",
    "myetherwellet.org",
    "kraken-tr.com",
    "kraken-logn.com",
    "kraken-sigin.com.ru",
    "api-binance.co",
    "binance.com.eth-bonus.me",
    "eth-bonus.me",
    "elon-musk.company",
    "safe-eth.info",
    "promotion-eth.com",
    "tronics.updog.co",
    "binance.updog.co",
    "airdrop-ether.info",
    "medium-blog-ethereum.org",
    "go.ethpays.us",
    "coinbasespromo.tumblr.com",
    "ethereum-award.top",
    "cryptoyodas.tumblr.com",
    "promo.ethx.site",
    "ethx.site",
    "send.tokenpromo.site",
    "tokenpromo.site",
    "ethereumprize.eu",
    "5000ethereum.in",
    "ethbinance.info",
    "ethofficial.000webhostapp.com",
    "medium-eth.com",
    "promotion-eth.info",
    "coinbaseboggether.tumblr.com",
    "promo.ethgft.us",
    "beethpromogive.com",
    "safe.confirmeth.com",
    "confirmeth.com",
    "promo.tokenpromo.site",
    "arkblock.net",
    "cbase-pro.com",
    "ethereumprize.io",
    "airdropsvert.xyz",
    "etherium.host",
    "claimeth.top",
    "medium.com.ru",
    "etherium.pro",
    "tesla.myetherget.info",
    "myetherget.info",
    "ethsecure.top",
    "coinsdrop.org",
    "blogmediums.blogspot.com",
    "ethereumprize.art",
    "getethereum200.000webhostapp.com",
    "safe.sharingeth.com",
    "sharingeth.com",
    "medium-blog-ethereum.net",
    "ethereum-airdrop.net",
    "eth-bonus-binance.com",
    "czofficial.site",
    "ethico.info",
    "elon-surprise.site",
    "xn--yetherallet-tv8eu6a.com",
    "eth-safe.info",
    "elon-musk.site",
    "ethofficial.site",
    "bestpromo.online",
    "crypto-giveaway.top",
    "airdrop-ether.com",
    "medium-blog-ethereum.info",
    "ethpromogivegroup.net",
    "idexwall.online",
    "muytherwallet.info",
    "myetherywallet.com",
    "myethirwalie.info",
    "myethirwalie.xyz",
    "myethwallet.com",
    "xn--omiseg-ul8b.com",
    "xn--myethrwalle-6qb4278g.com",
    "myehterwelliet.com",
    "mail.myewtherwallet.pw",
    "myetherwallet.com.ip11.icu",
    "ip11.icu",
    "ethcoin.store",
    "kralkem.com",
    "blockchalim.info",
    "neo-tracler.co",
    "app-bittrex.com",
    "myethereumwallet.org",
    "myethervvallet.net",
    "wmyetherwallet.pw",
    "xn--bnanc-r51bze.com",
    "ycbit.net",
    "kuccin.com",
    "lnitbtc.com",
    "www-nycryqto.com",
    "www-nycryptos.com",
    "go.ethers.pw",
    "ethers.pw",
    "airdropbox.site",
    "etherescan.net",
    "transaction.status-eth.top",
    "mediumblog.today",
    "ethereum-giveaway.top",
    "ethereum-airdop.com",
    "medium-blogpost.info",
    "bonus.status-eth.top",
    "status-eth.top",
    "ethereum.smart.contract.myeltherwallet.ml",
    "myeltherwallet.ml",
    "lelectrum.com",
    "get.10keth.com",
    "10keth.com",
    "airdrop-token.website",
    "ethvent.net",
    "ethclaim.live",
    "claim.status-eth.top",
    "gcox086.com",
    "gcoxkorea.com",
    "my-followers.ml",
    "market-idex.com",
    "myetherwallet.com.verification.mvkcaterer.com",
    "binancepromos.typeform.com",
    "bliovnarnce.com",
    "meyhferwallet.com",
    "ethereum-giveaway.tech",
    "bingmonces.com",
    "ethclaim.info",
    "ethgiftonline.com",
    "ether.blogmedium.top",
    "bnb.medium-air.org",
    "medium-air.org",
    "ether-airdrop.website",
    "giveaway.ether-claim.org",
    "ether-claim.org",
    "giftsforyou.online",
    "coinsprize.org",
    "ethereumwin.in",
    "smart-eth-contract.site",
    "safec41944.nichost.ru",
    "ide-x.market",
    "idex-market.com",
    "idex.network",
    "idexchange.info",
    "idexcorp.download",
    "idlex.market",
    "idwx.market",
    "iibex.market",
    "iidex.market",
    "myetherwalet.ga",
    "myetherwallet-info.com",
    "myetherwallet-tokens.com",
    "myetherwolet.gq",
    "omg-myetherwallet.com",
    "stickamgfs.com",
    "safeclaims.space",
    "safeclaims.net",
    "myethgift.net",
    "official.ethx10.com",
    "ethx10.com",
    "ether-airdrop.org",
    "elon-giveaway.org",
    "myehterwaillet.com",
    "tron-gift.blogspot.com",
    "dubai-oilcorp.company",
    "xn--yetherallet-iw8ew5a.com",
    "bjlttrex.com",
    "blocrkchein.com",
    "login.blocrkchein.com",
    "blrockchein.com",
    "login.blrockchein.com",
    "exrno.su",
    "gaterhub.net",
    "signin.gaterhub.net",
    "kuciorn.com",
    "lhitdtc.com",
    "lkralken.com",
    "polonreix.com",
    "yobirt.net",
    "forkdelta.biz",
    "https-myetherwallet.net",
    "etherdeita.top",
    "etherdeita.site",
    "myethervvallet.ru",
    "myethervvallet.top",
    "myethierwalet.com",
    "myethpromogive.com",
    "myethirvvale.info",
    "lbinanrce.com",
    "medeum-airdrop-news.com",
    "ethereum-transfer.net",
    "safeclaim.info",
    "tesla-giveaway.getforge.io",
    "eth.getforge.io",
    "elon-musk.fun",
    "getethfree.com",
    "airdrop-event.site",
    "xn--methewallet-638e95e.com",
    "bigethereum.org",
    "giftofeth.info",
    "crypto-promo.website",
    "ethdrop.in",
    "ethinvesting.info",
    "newsmedium.info",
    "bnb.newsmedium.info",
    "mediumvert.xyz",
    "getethernow.top",
    "vechainx.net",
    "hadica.com",
    "goastra.ga",
    "jax-x.com",
    "mfoundation.cf",
    "myetheatrwallet.com",
    "myethertawallet.com",
    "myetherwallet.com.api12.icu",
    "api12.icu",
    "xn--etereum-yt3c.com",
    "myetheruwlleet.site",
    "myetherwallet.com.signmsg.api11.icu",
    "api11.icu",
    "myetzwallet.com",
    "aronum.com",
    "vechainx.io",
    "etherdrop.top",
    "btcdrop.in",
    "promo-claims.org",
    "myetherwallet.com.api10.icu",
    "api10.icu",
    "ether-gather.com",
    "safeclaims.info",
    "ethverify.info",
    "elon-musk.org",
    "ethereumfast.io",
    "tron-gifts.blogspot.com",
    "ethereumswallet.com",
    "ethereumwallets.com",
    "myelherwallel.info",
    "myetheruwalleet.site",
    "myetheruwlleet.website",
    "myetherwallet.com.api11.icu",
    "myetherwallet.com.api8.icu",
    "myetherwallet.com.api9.icu",
    "myetherwallet.tv",
    "myetherwelleit.com",
    "myetherwelliet.com",
    "ethereum-promotion.org",
    "ethmore.io",
    "official-promotion.org",
    "airdropseth.info",
    "medium-airdrop-promo.com",
    "ethereum-airdrop.org",
    "air-drop.org",
    "ethereum-return.top",
    "ethereum-promotion.website",
    "kraken-ixz.com",
    "kraken-check.com",
    "airdrops.delivery",
    "buzovacoin.io",
    "buz-coin.io",
    "buzcoinio.com",
    "clubeth.live",
    "clubbtc.live",
    "binance-official.com",
    "shapeshift-exchange.io",
    "myethgift.com",
    "view-wallel.info",
    "carliftcatalog.site",
    "hvmoecjpxn.info",
    "idex.im",
    "idex.site",
    "ldex.su",
    "ldexchange.info",
    "myeherwallel.info",
    "myetheruvvalleet.com",
    "myetheruvvalleet.site",
    "myetheruvvalleet.website",
    "myetheruvvalleet.xyz",
    "myethervvalle.info",
    "myethervvalle.top",
    "muethereswallet.com",
    "myeetherwallets.com",
    "myetherwallet.com.verification.cohencues.com",
    "myetherwallet.company",
    "myetherwolet.us",
    "mytherwallet.com",
    "topbit.info",
    "giveaway-promo.net",
    "eth-pro.co.nf",
    "blokckchian.com",
    "coinbaselogin.com.ru",
    "hub.xn--myterwallet-3qb9087g.com",
    "binconarnce.com",
    "binconamce.com",
    "hitbtc.mobi",
    "kraken-portal.com",
    "kraken-validation.com",
    "grabeth.cf",
    "eos-airdrop.info",
    "ether-claim.com",
    "myethervallet.000webhostapp.com",
    "myetheruvvalet.com",
    "mail.mynetherwallet.site",
    "mycryrptto.com",
    "myetherwallet.com.api7.icu",
    "myetherwllaet.com",
    "mynetherwallet.mining24.info",
    "mynetherwallet.site",
    "xn--idex-upa.market",
    "fantom-foundation.de",
    "bincomance.com",
    "kraken-authentication.com",
    "kraken-we.com",
    "kraken-ix.com",
    "kraken-on.com",
    "binance-validation.com",
    "ethersdrop.online",
    "ethdrop.top",
    "elon-musk.promo",
    "cryptocandies.updog.co",
    "elon-gift.club",
    "elon-gift.info",
    "ether-free.tech",
    "myetherwallet-coins.space",
    "tron-presents.blogspot.com",
    "airdropeth.info",
    "myetherwallet-coinss.space",
    "blovrnance.com",
    "bingmancol.com",
    "bnbnews.org",
    "btcdrop.top",
    "johnmcafee.promo",
    "safe.getbesteth.com",
    "getbesteth.com",
    "mediumblogsot.top",
    "biflnex.com",
    "blfinex.com",
    "binance-app.com",
    "binance-club.com",
    "binance-coins.com",
    "binance-daytrading.com",
    "binance-ethh.com",
    "binance-market.com",
    "binancep.com",
    "https-binance.com",
    "m-binance.com",
    "pay-binance.com",
    "site-binance.com",
    "xn--idex-vpa.market",
    "eth-giveaway.space",
    "claimprize.xyz",
    "ethereum-transfer.com",
    "ethfast.top",
    "medium-promo.com",
    "betaclient-wbtcgwap.cf",
    "ethbonus-binance.com",
    "fast.getether.xyz",
    "getether.xyz",
    "btcbonus-binance.com",
    "my-cry-pto.com",
    "myerthewallet.com",
    "myerthewallet.hosstinger.info",
    "myethaewallet.com",
    "myethaewallet1.hosstinger.info",
    "my-crypto.com",
    "kuciorn.hosstinger.info",
    "lhitlbtc.hosstinger.info",
    "shapeshift-exchange.online",
    "shapeshlft.net",
    "fgcoin.io",
    "evotrustllc.com",
    "john-mcafee.com",
    "amazy-eth.com",
    "eth-drop.io",
    "ethermone.info",
    "ethpromos.info",
    "mycyrptto.com",
    "blgem.blogspot.com",
    "airdrop.delivery",
    "giveawayofficial.info",
    "eth-binance.com",
    "ethgoldmin.com",
    "take-eth.website",
    "safe.earnethnow.com",
    "earnethnow.com",
    "myetnerwallet.com.checkbalance.info",
    "checkbalance.info",
    "autodiscover.myetherwailet.cf",
    "binance-home.com",
    "binance.delivery",
    "bitfilinex.com",
    "bitfinex.me.uk",
    "cpanel.myetherwailet.cf",
    "mail.myetherwailet.cf",
    "mail.myetherwallet.icu",
    "myetherwailet.cf",
    "myetherwalet.watchfullmovie.download",
    "myetherwallert.org",
    "myetherwallet-click.date",
    "myetherwallet-click.loan",
    "myetherwallet-online.download",
    "myetherwallet.icu",
    "myetherwallet.mining24.info",
    "webdisk.myetherwailet.cf",
    "webmail.myetherwailet.cf",
    "ethcryptocomp.cx",
    "ethpromoui.com",
    "ethpromonow.com",
    "eth-give-away-promo.com",
    "eth-promo-give-away.com",
    "eth-pronogive.com",
    "eth-promosgivex.com",
    "ethpramengive.com",
    "et-gi.net",
    "getethereumforfree.com",
    "idex-market.biz.pl",
    "medium-hitbtc.tumblr.com",
    "ethereum-return.com",
    "btc-binance.com",
    "descentx.com",
    "eth-away.com",
    "theethpromogive.net",
    "ethpromotake.net",
    "ethpromogivenow.net",
    "ethpromoget.net",
    "ethpromogivecare.com",
    "ethnewpromo.com",
    "aethpromogive.com",
    "receiveethpromo.cx",
    "eth-promosgive.com",
    "eth-promoui.com",
    "elon-musk.me",
    "eth-promo-awayx.com",
    "ethpromo-give.com",
    "eth-pronosgive.com",
    "receiveethfree.cx",
    "ethpoolcompet.cx",
    "coinleft.org",
    "blogmedium.tk",
    "209.159.154.156",
    "idex-market.trade",
    "justinsun.promo",
    "ettereum.info",
    "binanace.sizemedium.top",
    "sizemedium.top",
    "etherwallet.adamluvshis.com",
    "myelherwaltet.info",
    "myetheiwallett.com",
    "myether-vvallet.com",
    "myethereumswallet.com",
    "myetherwalleet.org",
    "myetherwalletv.org",
    "mymoneero.com",
    "mysetherwalled.club",
    "totaly-myetherwallet.com",
    "youretherwallet.net",
    "myetherwallet-hydrosign.space",
    "dailycurrency.promo",
    "claimsafe.org",
    "musk-present.blogspot.com",
    "binance-get.claims",
    "dodoflyer.com",
    "eth-transfer.com",
    "savetoken.org",
    "followers-special.ml",
    "giveaway.ethereum-promo.com",
    "claimprize.org",
    "eosgas.net",
    "myetherwallet.com.api6.icu",
    "api6.icu",
    "api7.icu",
    "api8.icu",
    "api9.icu",
    "api10.uicu",
    "myetherwallet.com.api5.icu",
    "api5.icu",
    "nuetheriumllet.com",
    "myelhervvalet.com",
    "seositesworld.online",
    "get-ethereum.net",
    "eosgas.co",
    "api4.icu",
    "airdrops.promo",
    "binance.claims",
    "verify.mediumpromos.top",
    "mediumpromos.top",
    "safecrypt.net",
    "binance-claims.com",
    "medium-promotions.com",
    "prize-eth.com",
    "ethsafe.promo",
    "ethpresent.io",
    "givecoins.info",
    "musk-official-promo.com",
    "coinsair.org",
    "myetherwallet.com.api.root3.icu",
    "myetherwallet.com.api3.icu",
    "myetherwallet.com.api4.icu",
    "myetherwallet.com.root4.icu",
    "myetherwallet.com.signinverication.karaokekiralama.club",
    "myethrwelllet.net",
    "xn--mycypto-xld.com",
    "xn--mycrpto-8i4c.com",
    "xn--mcrypto-5i4c.com",
    "xn--c1arhhdidc.com",
    "xn--ycrypto-uz3c.com",
    "xn--myetherwale-jb9e.com",
    "promo.etherpay.site",
    "etherpay.site",
    "bnb-token.org",
    "blog.mediumpromo.top",
    "medium-promotion.com",
    "eosgas.io",
    "internationalstudy.online",
    "myetherwallet.com.root5.icu",
    "root5.icu",
    "ideix.market",
    "idex-free.online",
    "idexwallet.com",
    "meytherwalett.com",
    "myefheerwallet.com",
    "myefherwallett.com",
    "myehtcrwallett.com",
    "myelherwalet.info",
    "myetferwallett.com",
    "myetharwallett.com",
    "myetheerwalet.com",
    "myetheirwallett.com",
    "myetherwallet.com.signinverication.signmessage.karaokekiralama.info",
    "myetherwallet.com.verification.karaokesepeti.com",
    "myetherwallet.com.walletverification.kardeslergunu.com",
    "myetherwallet.men",
    "myetherwayllet.com",
    "myethrawallett.com",
    "myethrevvallet.com",
    "bitfanex.com",
    "idex-market.ph",
    "idex-market.com.ru",
    "idex.com.ua",
    "idex-markef.org",
    "idexx-corpcom.com.ph",
    "idex-markef.io",
    "idex-market.ch",
    "idex-market.club",
    "idex-market.biz",
    "idexhub.market",
    "idexmarkt.de",
    "idex-app.store",
    "giveaway-binance.com",
    "myetherwallet-coinin.top",
    "medium-promo.top",
    "ethereumclaim.net",
    "ethescan.info",
    "verify.getbigeth.com",
    "getbigeth.com",
    "binance.bnb-token.sale",
    "bnb-token.sale",
    "okexgiveaway.com",
    "hitbtc.stream",
    "promohitbtc.website",
    "hitbtc.ltd",
    "en-hitbtc.com",
    "hitbtc.icu",
    "hitbtc.ooo",
    "hitbtcsupport.co",
    "hitbtc.at",
    "hitbtcchain.com",
    "hitbtcsupport.site",
    "hitbtc-ads.com",
    "hitbtc-il.com",
    "hitbtc-on.com",
    "hitbt.co",
    "black-wallet.co",
    "dailycurrency.ml",
    "ethgivewaypromo.info",
    "xn--etherem-y24c.com",
    "stellar-w.com",
    "bitfinex.im",
    "idex-markt-roosen-gmbh.com",
    "idex-market.me",
    "iclex-market.com",
    "xn--dex-market-58a.com",
    "idex-markett.com",
    "verify.ethereumnow.top",
    "ethereumnow.top",
    "sociall.ooo",
    "ether-gift.website",
    "authorize-transfer.droppages.com",
    "login-binance.com",
    "authhitbtc.com",
    "hltbtc.cam",
    "hiitdtc.com",
    "getethernow.org",
    "binance-acess.com",
    "officialairdrop.com",
    "eth-event.com",
    "ethclose.info",
    "freecoindrop.com",
    "myeetherwallet.ga",
    "myehtlerwallet.com",
    "myetherrwallet.ga",
    "myetherswalleit.top",
    "myetherwallet-coinsign.top",
    "myetherwallet.party",
    "myetherwallet.win-eth.org",
    "myethrerewallet.com",
    "myethrwallet.top",
    "myletherwalletes.com",
    "myletherwallets.com",
    "coinssafe.org",
    "idex.group",
    "mcafee.promo",
    "eth60.top",
    "getfree-eth.org",
    "vaxx.co",
    "cryptoether.info",
    "coincapitals.org",
    "bonancre.com",
    "login.blockchaim.co",
    "blockchaim.co",
    "transactionlist.info",
    "idexx-corpcom.com",
    "metherwallet.info",
    "meytherwallete.com",
    "myertherwwellet.com",
    "myetferwallete.com",
    "myetferwalllet.com",
    "myetherwallet-coinl.top",
    "myetherwallet-signcoin.top",
    "myettheriwallet.win",
    "myheriwallet.trade",
    "mymoenero.com",
    "blocokchain.top",
    "xn--binanc-n4a.exchange",
    "idex.market.transactlon.info",
    "transactlon.info",
    "go.ether10000.win",
    "eth10000.win",
    "bdinamce.com",
    "buterinfree.org",
    "satoshi-giveaway.org",
    "event-eth-giveaway.com",
    "ethzerdelta.com",
    "forkdelta.su",
    "forkdeltagithub.info",
    "myethrewallett.com",
    "dxchain.eu",
    "www-bitfinex.com",
    "blvonance.com",
    "airdrop-event.info",
    "currency.promo",
    "czgive.site",
    "verify.bonuseth.info",
    "bonuseth.info",
    "get.bigethgift.com",
    "bigethgift.com",
    "ethsafe.info",
    "ethnewpromoaway.com",
    "btcgiveaway.org",
    "btcpromogivegroup.com",
    "metamaskpro.io",
    "idexchange.pro",
    "mye1herwallet.co",
    "myetherswalet.com",
    "myetherwalles.net",
    "myetherwallet-rebl.top",
    "myetlherwalle.com",
    "myetlherwalle.myettherrwallett.com",
    "myletherwalletest.com",
    "myletherwalletest.myettherrwallett.com",
    "myletherwallets.info",
    "myvetherwallet.com",
    "ether-event.com",
    "w-eos.com",
    "idexmarket.me",
    "johnmcafee.ethgivings.net",
    "ethpays99.top",
    "idex.press",
    "tronics.promo",
    "ethgiveawaygift.info",
    "blockchaingiveaway.biz",
    "ether-bonus.net",
    "vitalikgiveaway.com",
    "ethergiftnow.com",
    "ethtwitter.org",
    "elon-bounty.blogspot.com",
    "bounty-eth.com",
    "bounty-btc.com",
    "eth60.getmyeth.top",
    "getmyeth.top",
    "musk-official-giveaway.com",
    "secure.ethgivings.net",
    "myeltherwalleet.com",
    "myerherwellet.com",
    "myertherwwellet.online",
    "myertherwwellet.site",
    "myertherwwellet.space",
    "myethervalet.cf",
    "myethervuallet.cf",
    "myetherwelet.ga",
    "myetherwellet.ml",
    "myethrerwaellet.com",
    "myettherrwallett.com",
    "myewhterallet.com",
    "myewhterallet.info",
    "myewhterallet.net",
    "myewhterallet.pw",
    "mywtherwaliet.com",
    "index-markett-network.com",
    "idexmarkketslogin.com",
    "ideeweb1.com",
    "myetherwalle.net",
    "myetherwallet-send.top",
    "myetherwallet.com.verify.apisign.me",
    "elonmusk.ethgivings.net",
    "ethgivings.net",
    "refundcontract-etherwallet.net",
    "idexr.market",
    "autodiscover.mvetherwallet.ml",
    "etherwallet.ethsign.icu",
    "mvetherwallet.ml",
    "myetherwalled.us",
    "myetherwalles.com",
    "myetherwallet-coins.top",
    "myetherwallet-sigen.top",
    "myetherwallet-singmsg.top",
    "myetherwallet.cn.com",
    "myetherwallet.com.apisign.me",
    "myetherwallet.com.eos-bounty.com",
    "mymonoro.com",
    "webdisk.mvetherwallet.ml",
    "walletico.com",
    "idixmarket.info",
    "coinbaise.com",
    "neotracler.co",
    "brimance.com",
    "brilmance.com",
    "blirmance.com",
    "brinonce.com",
    "cashaaprivate.com",
    "signcontract-etherwallet.net",
    "ether-idex.online",
    "mediumpost.ga",
    "ocntoken.com",
    "rootsign.icu",
    "ether4free.com",
    "givefreecoin.com",
    "giveusether.com",
    "giveusethereum.com",
    "promoethermnew.com",
    "newethpromo.com",
    "eth-giveavvay.com",
    "instant-ethaway.com",
    "ethpromoget.com",
    "theethpromogive.com",
    "ethpromogivenow.com",
    "ethpromo-give-away.com",
    "ethpramengyve.com",
    "ethpromotake.com",
    "ethpromo-give.net",
    "ethpromogivegroup.com",
    "ethpromogive.net",
    "ethpromogiveback.com",
    "mgetherwalllat.com",
    "myaetherwallet.org",
    "myelherwallet.us",
    "myerherwalllet.com",
    "myethedwalliet.info",
    "myetherwaliet.io",
    "myetherwalled.club",
    "myetherwallet-kr.info",
    "myetherwallet-sinng.top",
    "myetherwallet-ssign.top",
    "myetherwallet.com.api.myetherwallet.com.verifymsg.icu",
    "myetherwallet.com.rootsign.icu",
    "myettheriwalleti.men",
    "mytherwalet.com",
    "token-emrify.com",
    "myethwallofficiiall.com",
    "myetherwallet-hydrogen.top",
    "myetherwallet.com.apisign.icu",
    "apisign.icu",
    "hydrogen-platform.com",
    "bitpayng.typeform.com",
    "myetherwalletverification.signmsg.services",
    "signmsg.services",
    "myetherwallet.com.signapi.icu",
    "signapi.icu",
    "idexd.market",
    "ethbounty.info",
    "eosbounty.co",
    "ethpromotion.info",
    "secure.ethgiftnow.com",
    "btcpromotion.info",
    "betaclient-rzcoinwaps.cf",
    "ethmore.live",
    "myehtewallet.com",
    "meyehterwallet.com",
    "indexmarkket-site.com",
    "idexnetone.com",
    "myetherwallet.com.verifymsg.icu",
    "verifymsg.icu",
    "ethcontracts.org",
    "ethdrop.co",
    "twittethpromo.cx",
    "ethaway-instant.com",
    "trx.promo",
    "ethcompet.cx",
    "ethrewards.cx",
    "claimyour-eth.org",
    "ethcomprules.cx",
    "ethereumpromo.win",
    "safe.ethgiftnow.com",
    "ethgiftnow.com",
    "claimyour-btc.org",
    "btcpromo.win",
    "ettheriwallet.trade",
    "getherwallet.com",
    "mail.myethierwallet.com",
    "meyetherwealletr.space",
    "mjetherwellet.com",
    "my-etherwallet.site",
    "myetherwalle.online",
    "myetherwalle.top",
    "myetherwalle.xyz",
    "myetherwallet-coin.top",
    "myetherwallet.com.api.signmsgs.icu",
    "myetherwallet.com.astrofun.co.il",
    "myetherwallet.signmsg.services",
    "myethlrwallet.com",
    "myettheriwallet.com",
    "myettherwallet.win",
    "mytherwallets.com",
    "5000eth-giving.online",
    "hydrogen-raindrop.bitballoon.com",
    "airtoken.typeform.com",
    "myetherwallet.ethersignmsg.services",
    "ethersignmsg.services",
    "idex.xyz",
    "teslagifts.tumblr.com",
    "brinannce.com",
    "bittrexl.com",
    "getethtoday.com",
    "safe.getethtoday.com",
    "elon-fun.blogspot.com",
    "cryptolinknet.com",
    "zilliqa.name",
    "jenniferaustin.typeform.com",
    "omisegoclassic.com",
    "xn--myetherwalet-yk6f.com",
    "myethierwallet.com",
    "miyetherwallet.com",
    "signmsgs.icu",
    "myehtrerwallett.com",
    "1e-myetherwallet-zn.com",
    "anetherwallet.com",
    "asia-binance.com",
    "client-crypto-bridge.com",
    "cpanel.client-crypto-bridge.com",
    "ethereumwallet.gdn",
    "eu-binance.com",
    "lmyetherwalletr.com",
    "localetherwallet.net",
    "mail.client-crypto-bridge.com",
    "mail.myetherwalilet.com",
    "mail.myetherwallets.io",
    "meyetherwealletr.online",
    "meyhterwallett.com",
    "mjetherwalet.com",
    "mjetherwelllet.com",
    "mvetherwallet.com",
    "my-etherwallet.trade",
    "my-monerc.com",
    "myaetherwalet.com",
    "mycryipto.com",
    "myeatherwaliet.com",
    "myecterwallet.com",
    "myectherwallet.com",
    "myehtcrwallet.com",
    "myehtearwallet.com",
    "myehteswallet.com",
    "myeithierwllet.info",
    "myeithierwllet.net",
    "myelfherwallet.com",
    "myelherwallet.site",
    "myendtherwallet.info",
    "myeteherwallet.info",
    "myeteherwallet.net",
    "myeteherwellet.com",
    "myeterewalled.com",
    "myeterwalled.com",
    "myetharwallet.ml",
    "myetharwollet.com",
    "myetharwolllet.com",
    "myethdwallet.info",
    "myethenrwallet.com",
    "myethererwallet.com",
    "myethereumwallet-v.com",
    "myetherewalet.info",
    "myetherewalet.net",
    "myetherewalled.com",
    "myetherewallets.com",
    "myetheriwalet.date",
    "myetheriwallet.club",
    "myetherrwallat.co",
    "myetherrwallet.club",
    "myetherumwallet.com",
    "myethervalet.us",
    "myethervallet.net",
    "myethervellet.us",
    "myethervualet.us",
    "myethervuallet.pw",
    "myetherwalet.pw",
    "myetherwalet.space",
    "myetherwalie.com",
    "myetherwalle.org",
    "myetherwalle.su",
    "myetherwalled.cf",
    "myetherwallet-click.download",
    "myetherwallet-free.download",
    "myetherwallet-hydro.top",
    "myetherwallet-mgs.top",
    "myetherwallet-msg.com",
    "myetherwallet-msg.top",
    "myetherwallet-msgsign.top",
    "myetherwallet-open.top",
    "myetherwallet-opensign.top",
    "myetherwallet-oppen.top",
    "myetherwallet-signi.top",
    "myetherwallet-signmsq.top",
    "myetherwallet-signn.top",
    "myetherwallet-signopen.top",
    "myetherwallet-sing.top",
    "myetherwallet-singg.top",
    "myetherwallet-ver.top",
    "myetherwallet-veriffication.top",
    "myetherwallet-verification.top",
    "myetherwallet-verify.top",
    "myetherwallet-verrification.top",
    "myetherwallet.com.signinverication.claimtokens.nesekaraarslan.com",
    "myetherwallet.com.signinverication.signmessage.mesutkaraarslan.com",
    "myetherwallet.com.signmsgs.icu",
    "myetherwallet.re",
    "myetherwallet.schneimi.de",
    "myetherwallet.systems",
    "myetherwalletk.org",
    "myetherwallets.io",
    "myetherwallets.site",
    "myetherwallett.club",
    "myetherwalllets.com",
    "myetherwaullet.com",
    "myetherwelet.pw",
    "myetherwellet.club",
    "myetherwellet.net",
    "myetherwellet.press",
    "myetherwelllet.net",
    "myetherwollet.ga",
    "myetherwollet.us",
    "myetherwolllot.com",
    "myetheswallet.com",
    "myethherwwllet.space",
    "myethrewallet.de.com",
    "myethrwaliet.info",
    "myethrwalt.com",
    "myethrwelet.com",
    "myethrwelet.net",
    "myethrwellet.com",
    "myethrwellet.net",
    "myethrwelllet.com",
    "myethswallet.org",
    "myetiherwallet.com",
    "myetnerwailet.info",
    "myetrherwallett.com",
    "myetshewallet.info",
    "myettearwallet.com",
    "myetterwalllet.com",
    "myetterwellet.com",
    "myettheriwallett.bid",
    "myettheriwalletti.men",
    "myettherwallet.trade",
    "myletherwallet.com",
    "mymonaro.com",
    "mymonerc.com",
    "mymonero.eu",
    "mymonero.in",
    "mymorero.com",
    "mymornero.com",
    "mymornero.net",
    "mypcrypto.com",
    "myterwallet.info",
    "wallet.crypto-bridge.top",
    "webdisk.client-crypto-bridge.com",
    "webmail.client-crypto-bridge.com",
    "wwwidex.market",
    "myetherwalilet.com",
    "ethereumpromote.wixsite.com",
    "ethgive.club",
    "etherclaims22.top",
    "officialmcafee.github.io",
    "eth10000.org",
    "safe.eth10000.org",
    "gift-eth.org",
    "ethonline.io",
    "meyetherwealletr.site",
    "myetherwa1et.com",
    "myetherwallet-virificationsign.top",
    "forkdeltas.net",
    "idexairdrop.com",
    "secure.ethsoffer.com",
    "ethsoffer.com",
    "ethpromo-giveaway.atspace.cc",
    "meyetherwealletr.com",
    "myerhterwallett.com",
    "ethcryptopromos.com",
    "ether-foundation.website",
    "ethofficial.net",
    "medium.ethereumfoundation.top",
    "ethereumfoundation.top",
    "bittrcex.com",
    "binance.promoting.world",
    "promoting.world",
    "ether-promotion.info",
    "eventeth.com",
    "btcpromofree.com",
    "ethbonus.me",
    "idex.ga",
    "binanyce.com",
    "login-binance.net",
    "admin.safe-eth.top",
    "myetherwallet.com.signmessage.icu",
    "signmessage.icu",
    "riseeth.com",
    "pokerbox.io",
    "pokerboxairdrop1.typeform.com",
    "myetherwallet.com.apis.icu",
    "apis.icu",
    "official-promo.org",
    "mmyetlherwallett.com",
    "mychterwallet.com",
    "ethmore.net",
    "electrunn.org",
    "myehterwallct.com",
    "get.lotsofeth.com",
    "lotsofeth.com",
    "ethcountdown.ga",
    "ethpromofree.com",
    "sparkster.com.de",
    "buterineth.org",
    "ethereum-promo.website",
    "myertnerwalletr.com",
    "myetherweallett.com",
    "idex.su",
    "imetamask.io",
    "myetherwallet-msgg.top",
    "tokenaway.com",
    "trontoken.tk",
    "bitcryptonex.com",
    "satoshilitegift.tumblr.com",
    "yoniex.com",
    "get.ethinwallet.com",
    "lizstarkgift.tumblr.com",
    "secure.ethoffers.net",
    "ethoffers.net",
    "etherdeltha.info",
    "forcdelta.com",
    "ethereumfoundationgift.tumblr.com",
    "btcpramengyve.com",
    "claim-btc.org",
    "btcbig.org",
    "btcbonus.win",
    "btcpromogiveback.com",
    "btcpromoget.com",
    "bit-airdrop.com",
    "giveaway.claimeth.net",
    "claimeth.net",
    "encoreofficial.com",
    "ethcompetitionrules.cx",
    "offer.supporteth.com",
    "supporteth.com",
    "safe.ethdeliver.com",
    "ethdeliver.com",
    "claimeth.org",
    "instantethpromotion.cx",
    "ethpromotionnow.cx",
    "ethvert.com",
    "event-eth-ada.uk",
    "myeleherwaret.com",
    "meytherwellat.com",
    "btc-giveaway.info",
    "node82.btc-giveaway.info",
    "texacon-verify-547fcd.bitballoon.com",
    "kinetictokenforms.typeform.com",
    "etherclaim.org",
    "xatrainvest.com",
    "xn--myethrwalt-f7a07c4r.com",
    "trx.claims",
    "coinscrypto.info",
    "giveaway.eth-safe.net",
    "eth-safe.net",
    "bonus-ethereum.com",
    "myetherwalletverification.signmsg.work",
    "signmsg.work",
    "xn--con-vta.site",
    "xn--ethrdelta-iib.com",
    "ethergiveaway.site",
    "eosclassic.network",
    "eosauthority-kyc.com",
    "eoscountdown.network",
    "petraforbinance.com",
    "idex.market.xn--con-vta.site",
    "ethbig.net",
    "vechain-platform.org",
    "vechain-block.com",
    "eosauthority.com.globatalent.network",
    "globatalent.network",
    "eth-gift.club",
    "buterin-giveaway.org",
    "freegiveaway-eth.com",
    "support.eth3rdyear.io",
    "eth3rdyear.io",
    "daily-free-eth.net",
    "eth-news.co",
    "ethpromogive.com",
    "eth-give.net",
    "xrp-address.org",
    "hitbtc-login.com",
    "promobinance.com",
    "bittrex-ix.com",
    "bittrex-app.com",
    "bittrecx.com",
    "pumphash.com",
    "tronplay.network",
    "xn--mytherwalet-srb35c.com",
    "eosauthority.bitballoon.com",
    "better-hash.com",
    "promo.ethtake.com",
    "myetherwallet-sign.top",
    "hederahashgraph.publictoken.icu",
    "publictoken.icu",
    "safepayeth.org",
    "eth2018.ethtoeth.com",
    "bitfainex.com",
    "ethinwallet.com",
    "secure.ethinwallet.com",
    "ethereumpro.net",
    "giveawaycrypto.info",
    "dapp.doubledouble.io",
    "doubledouble.io",
    "bitcoinvest.cc",
    "celebration-eth.com",
    "ethers444.online",
    "eth5000.io",
    "ethtoeth.com",
    "cryptoseth.top",
    "ethsfor.top",
    "walleteth.top",
    "ethair.top",
    "wineth.top",
    "ethgive.credit",
    "wineths.top",
    "eosauthority.website",
    "yobit.tilda.ws",
    "eth2018.net",
    "ethtwitter.com",
    "ethereumstash.org",
    "idext.market",
    "etherdelta.com.ua",
    "etzerdelta.com",
    "forkdelta.co",
    "myeftervvellet.com",
    "teslaforfree.wordpress.com",
    "go.ethtake.com",
    "ethtake.com",
    "eossauthorithy.com",
    "electrum.ink",
    "electrumwallet.ml",
    "myethenrwallet.site",
    "myetherium.ru",
    "myetherwalleft.ru",
    "myethrewallets.com",
    "myethrwalet.com",
    "myethswallets.info",
    "myetherwallet-singmgs.top",
    "safe.ethincrease.com",
    "ethincrease.com",
    "myetherwall-et.com",
    "myethre-wallet.com",
    "myether-wallet.com",
    "m-yetherwallet.com",
    "myehferwallet.com",
    "myetherwallet-signmgs.top",
    "eosauthorithy.info",
    "ankr-network.tech",
    "ankr-network.com.de",
    "validbtc.com",
    "ethcelebration.io",
    "crsafepay.com",
    "ethgoldmine.com",
    "verify.ethgoldmine.com",
    "ethcompetition.cx",
    "officialgiveaway.info",
    "ethercontest.site",
    "btcdrop.org",
    "eosauthorithy.com",
    "ethereumanniversary.org",
    "xn--eosauthorty-jzb.com",
    "xn--eosuthority-m7a.com",
    "xn--eosauthorty-kcb.com",
    "tronbonus.network",
    "ethaway.com",
    "eth-gift.net",
    "eosdark.com",
    "xn--mytherwaet-y7a46ha.com",
    "freepromoeth.com",
    "wallet.eostoolkits.io",
    "eostoolkits.io",
    "chanfelly.com",
    "idiex.market",
    "ethtransfer.online",
    "telegram.market",
    "ethgift.net",
    "ethfortune.com",
    "ethereumdrop.info",
    "ethpays.info",
    "eth-give-away.com",
    "safe.ethpaynet.com",
    "ethpaynet.com",
    "getyoureths.com",
    "eth.fanclub.rocks",
    "fanclub.rocks",
    "get-bitcoins-now.com",
    "ethsc32821.nichost.ru",
    "gelepo.com",
    "musk-shares.com",
    "elon-gift.com",
    "elon-gifts.com",
    "elon-giveaways.com",
    "valideth.com",
    "eth-verified.com",
    "grab-eth.com",
    "mediumdotcom.top",
    "eos-authority.com",
    "myethrawallet.com",
    "freeethpromo.com",
    "ethereum-event.com",
    "ethereum-giveaway.safe-eth.top",
    "safe-eth.top",
    "myautocentmarks.com",
    "io-tron.com",
    "ethereum-platform.org",
    "w-tron.org",
    "bonus.eth-promo.org",
    "eth-promo.org",
    "binance-eth.github.io",
    "5000eth.io",
    "twitterpromo.info",
    "promo-binance.site",
    "wallet-top-up.org",
    "binance-btc.github.io",
    "ethextra.net",
    "ethofficialpage.us",
    "ethers-free.org",
    "claimethers.org",
    "myetherwalett.000webhostapp.com",
    "giveaway.ethsafe.net",
    "ethereum-promo.info",
    "myetherwallet.com.signmsg.icu",
    "signmsg.icu",
    "anatomia.io",
    "anatomiaairdrop.typeform.com",
    "give-ethprize.com",
    "odyssey.center",
    "world-market.online",
    "ethereum.odyssey.center",
    "xn--eosauthorty-wcb.com",
    "etherfree.info",
    "free-ethers.org",
    "myeostrust.com",
    "eosdrop.xn--mythrwallt-c7a86c5a.com",
    "eth-claim.net",
    "ethfreegift.org",
    "myenterworlld.com",
    "localetherwallet.info",
    "ethsupport.net",
    "newsair.info",
    "officialgiveaway.org",
    "collectionseth.com",
    "airdropeos.com",
    "neo-x.info",
    "myetherplace.com",
    "ether-give.live",
    "btc-give.org",
    "ethgpromo.com",
    "eosauthority.info",
    "eosauthority.unstake.xyz",
    "unstake.xyz",
    "xn--mythrwalet-c7a29cyq.com",
    "ethgivers.com",
    "secure.ethgivers.com",
    "ethergift.io",
    "suretytoken.com",
    "getethers.org",
    "indexmaker-network.com",
    "idexmarket-corp.com",
    "idexontime.com",
    "idexmarketcorp.com",
    "idex-marketssite.com",
    "idexmarket-llc.com",
    "eth-air-com.1gb.ru",
    "idexxsoftload.com",
    "idexmarket-corps.com",
    "eos-platform.net",
    "btcfast.io",
    "giveawaypromo.org",
    "event-eth.org",
    "ethaction.io",
    "24h.szakdoga.net",
    "luno-help-desk-update.weebly.com",
    "airdropform900.typeform.com",
    "myetherwallet.com.api.root.signmsg.me",
    "myetherwallet.token.signmsg.network",
    "signmsg.me",
    "signmsg.network",
    "idexmarketllc.com",
    "idexwebaa.com",
    "ethfast.io",
    "givewaypromo.org",
    "ethereum-givaway.social",
    "personaleth.com",
    "indexmarket-inc.com",
    "mnyctervailliet.com",
    "mnyidthewallot.com",
    "c-kamowski.fr",
    "eosprivate.io",
    "signmessage.me",
    "myetherwallet.com.api.signmessage.me",
    "shapeshiftv.com",
    "get-ether-now.com",
    "waves-platform.net",
    "myefherwaliet.com",
    "ethsafe.net",
    "xn--coinbas-z8a.tk",
    "ethshare.org",
    "ethergive.info",
    "myetherwalet.heliohost.org",
    "keyfundairdrop.typeform.com",
    "eosdash.io",
    "ethereum-claim.org",
    "safesteth.com",
    "ethscan.us",
    "get.perfecteth.com",
    "perfecteth.com",
    "newsair.org",
    "top-ethereum.com",
    "s-msg-myetherwallet.com",
    "elon-shares.com",
    "xn--myeterwallet-o0b.com",
    "myetherwallett.net",
    "magntech.tk",
    "ico.metronome.bz",
    "metronome.bz",
    "metronome.foundation",
    "ethereum-prize.com",
    "etherbonus.live",
    "fantom-foundation.tech",
    "sparkster.site",
    "idex-exchange.market",
    "idex-narket.com",
    "idexmarket-inc.com",
    "idexmarket-incs.com",
    "indexmarkett-corp.com",
    "giveth.ws",
    "giveeth.org",
    "ethereum.org.give-eth.today",
    "give-eth.today",
    "collect-ethaway.com",
    "aireth.today",
    "index-marker.com",
    "iddexmarket.com",
    "iddexmark.et.com",
    "iddexma.rket.com",
    "ideexmarket.com",
    "idexmarket.com",
    "myetherwalllet.online",
    "odyssey.plus",
    "ethereumgw.org",
    "epromo.cc",
    "index-marketz.com",
    "68.168.123.85",
    "eth-promos.org",
    "ethxinfo.com",
    "ethereumpromo.org",
    "eth-giveaway.surge.sh",
    "10000ethereum.com",
    "ethcrypto.info",
    "huobitalk.ga",
    "verified.myethergift.com",
    "myethergift.com",
    "ethairdrop.org",
    "claim.ethairdrop.org",
    "bitcoin-promo.club",
    "today-ethereum.com",
    "ethnow.org",
    "eoscountdown.co",
    "xn--mythrwalet-smb0a05c.com",
    "go.boosteth.com",
    "boosteth.com",
    "claims.payeth.promo",
    "payeth.promo",
    "get-eth-now.com",
    "ethpromo.win",
    "ethereumgift.org",
    "get-btc-now.com",
    "ethpays.org",
    "safe.ethpaynow.com",
    "ethpaynow.com",
    "elon-gives.com",
    "index-markels.com",
    "etherbonus.win",
    "getethpro.com",
    "event-ethereum.org.uk",
    "xn--myethrwllt-y4a7gf.com",
    "giveawaypromo.byethost14.com",
    "ploloneix.com",
    "porloneix1.domen-hosting.org",
    "porloneix.com",
    "polroniex.com",
    "porloniex.com",
    "porloniex1.domen-hosting.org",
    "getbigdeals.org",
    "ethpromotions.org",
    "wincheck.org",
    "ethfor.info",
    "hederahashgraph.tokenico.me",
    "tokenico.me",
    "secure.ethxchanges.com",
    "ethgift.io",
    "verify.officialeth.com",
    "officialeth.com",
    "welcome.promotionaleth.com",
    "promotionaleth.com",
    "binance-giveaway.com",
    "walleteos.io",
    "myefhervvallet.com",
    "sparkster.be",
    "etherguide.info",
    "app-myethervvaiiet.com",
    "myethehearwallet.com",
    "myethervellet.gq",
    "myetherwallek.org",
    "myetherwallet.gifts",
    "myethewalle.com",
    "myethrewallet.net",
    "myethwallet.top",
    "xn--myethrrwallet-m0b.net",
    "gonetvvork.com",
    "airtake.info",
    "ethergive.net",
    "idix-market.info",
    "icon-block.org",
    "masterthecrypto.org",
    "xn--myetherwllet-ncb.org",
    "ethpromoaction.com",
    "ethinfo.org",
    "airgws.org",
    "eth.blogmedium.top",
    "blogmedium.top",
    "eosregistry.site",
    "giveethers.info",
    "creteprint-driveways.co.uk",
    "ethype.org",
    "etherpromotion.org",
    "idexs.market",
    "itex.market",
    "ideh.market",
    "xn--idx-kma.market",
    "xn--idx-cma.market",
    "iclex.market",
    "xn--idx-4qa.market",
    "xn--dex-qma.market",
    "xn--idx-gma.market",
    "iddex.market",
    "eteclum.org",
    "myighther.net",
    "ethpubs.com",
    "binancegiveaway.org",
    "ethgws.org",
    "ethereumreturns.com",
    "takeeth.org",
    "idex-market.at",
    "wallet-idex.net",
    "bittrex-id.com",
    "putty-portal.com",
    "arweave.pw",
    "xn--myethrwalt-inbe64c.com",
    "kentra.tech",
    "xn--myetherwalle-mm5f.com",
    "xn--myeherwallet-4j5f.net",
    "xn--myethrwllet-q7a5h.com",
    "xn--dexmarket-98d.com",
    "xn--mythrwalet-smb0a15c.com",
    "signmsg.info",
    "myetherwallet.com.signmsg.info",
    "oracon.io",
    "eth-bonus.org",
    "piscorealestate.com",
    "myethrwatt.info",
    "defraggler-code.com",
    "ethbonus.io",
    "ethxpromo.com",
    "omise-go.info",
    "xn--myetherrwalet-5hc.net",
    "idice.epizy.com",
    "gene.network",
    "bahs.edu.tt",
    "etheroll.io",
    "meta-mask.com",
    "metamaskwallet.com",
    "myethertrust.com",
    "academiconswap.typeform.com",
    "zillowblockchain.org",
    "myetherwallet.signmsg.online",
    "signmsg.online",
    "falconswap.typeform.com",
    "idex-market.co",
    "sparkster.pro",
    "viberate.bettermost.net",
    "bettermost.net",
    "quarkchain.typeform.com",
    "myetherwalletprize.top",
    "rebellious-airdrop.top",
    "mvyetherwallet.top",
    "kycverification.typeform.com",
    "xn--myetherwalett-5hc.net",
    "xn--mytherallet-3qb2119g.com",
    "xn--myethewllet-738en7a.com",
    "myetferwellet.com",
    "myetherethwallet.com",
    "myethervualet.gq",
    "myetherwallea.org",
    "myetherwallee.org",
    "myetherwalletl.org",
    "myetherwalleu.org",
    "xn--myethrwalett-8vb19c.net",
    "free-ethereum.us",
    "tron-mainnet.network",
    "receive-crypto.com",
    "receive-eth.com",
    "receive-ether.com",
    "ton.vu",
    "etherfree.org",
    "ethgain.org",
    "gifteth.org",
    "myeatherwalletr2.domen-hosting.org",
    "domen-hosting.org",
    "myethearwellet.com",
    "myeatherwalletr.com",
    "myeatherwallert.com",
    "myethearrwallet5.domen-hosting.org",
    "myetherwallet1.domen-hosting.org",
    "myethearrwallet.com",
    "xn--myetherwllt-f7a13e.com",
    "ethspace.promo",
    "ethexchans.com",
    "safe.ethxchanges.com",
    "ethxchanges.com",
    "xn--mythrwalet-c7ac47i.com",
    "xn--mythrwallt-c7a86c5a.com",
    "cryptoaway.org",
    "ethdeals.org",
    "ethgiveaway.io",
    "claimeth.me",
    "ethereumgiveaway.typeform.com",
    "xn--myetherwalett-4hc.net",
    "zecblock.info",
    "litecoin-chain.info",
    "ripple-chain.org",
    "online-stellar.info",
    "coin-monero.org",
    "myethrwatt.com",
    "ether-share.com",
    "btcs-share.com",
    "etherepromo.win",
    "ethtowallet.com",
    "ethsclaim.com",
    "ethaward.com",
    "airdrop24.com",
    "eth.mediumblog.top",
    "mediumblog.top",
    "dropeth.org",
    "get.ethpublic.com",
    "ethpublic.com",
    "ethereum-get.org",
    "ethereum.website.tk",
    "ethereum-bonus.com",
    "blttrex.us",
    "myetherwallat.co",
    "xn--mythrwalet-umbv35c.com",
    "helbiz-token.trade",
    "eostoken-eos-io.typeform.com",
    "switcheo-login.com",
    "switchee.exchange",
    "falconetwork.de",
    "xn--myetherwaett-lcca.net",
    "secure.ethtogive.com",
    "ethtogive.com",
    "fantom.pub",
    "kucroin.com",
    "fantoms.foundation",
    "etherskan.io",
    "etherscan.ltd",
    "myiteher.com",
    "musk-giveaway.com",
    "get-ether.cash",
    "free-ethers.com",
    "ethershares.blogspot.nl",
    "ripple-gives-eth.com",
    "telegram.vu",
    "mydeliverycv.com",
    "ethereumbonus.org",
    "ether-giveaway.online",
    "idex-market.io",
    "xn--mytherwalt-smb5a54c.com",
    "xn--myethrwalet-vrb15c.com",
    "xn--metherwallt-5hb16a.com",
    "get-ethers.net",
    "ethfreebie.icu",
    "gather-gift.com",
    "swdwd.etherget22.zone",
    "etherget22.zone",
    "giveaway.neocities.org",
    "etherdrop.org",
    "safepay-eth.org",
    "electrocoin.typeform.com",
    "myetherwalllet.trade",
    "btcoin.vu",
    "btc-giveaway.com",
    "btcofficial.info",
    "collect.bestethgift.com",
    "bestethgift.com",
    "idek.io",
    "idex24.io",
    "eth-get.com",
    "giveaway-ether.info",
    "ether-give.club",
    "eth.promo-etherum.com",
    "promo-etherum.com",
    "winplatform.io",
    "index-macro.com",
    "185.156.173.87",
    "eos-paperwallet.com",
    "promotoeth.org",
    "ethpromo.cc",
    "idex-market.eu",
    "idex-login.net",
    "eos-swap.com",
    "keyfund.io",
    "ethereum-promo.xf.cz",
    "myetherwallet.comsigninverication.signmessage.crocweb.online",
    "crocweb.online",
    "myeosdac.top",
    "ethofficial.info",
    "getsomeeth.com",
    "giveawaycrypto.org",
    "idexmarket.io",
    "myetehrewallet.com",
    "lbex.market",
    "idex-info.net",
    "get-eth.win",
    "eth-claim.org",
    "eth-givebacknow.tumblr.com",
    "ethfreebie.com",
    "ethpayethers.com",
    "kinetictokenform.typeform.com",
    "kinetictoken.net",
    "xn--myetherwllt-r7a44e.com",
    "saferpayether.com",
    "ethgive.global",
    "ethpromo.info",
    "ethereum-promo.org",
    "crypto-claims.org",
    "getethnow.com",
    "tron.gg",
    "tronfoundation.cc",
    "tronfoundation.gift",
    "ethn.gift",
    "geth.fyi",
    "ethc.live",
    "eths.fyi",
    "shr.st",
    "gate1.eths.vu",
    "ethc.cash",
    "ethn.li",
    "ethc.cc",
    "ethn.pw",
    "get-eth.top",
    "ethgw.info",
    "ethbigpromo-com.1gb.ru",
    "claimcrypto.org",
    "ethpromo.io",
    "verifcaon.site",
    "myetherwallet.com.signinverication.verifcaon.site",
    "verifywallet.typeform.com",
    "xn--myethewallet-4nf.net",
    "xn--myetherwllt-f7a75e.com",
    "ethgive.me",
    "ethgives.me",
    "promaestros.co.uk",
    "ethaddress.neocities.org",
    "changellyico.bitballoon.com",
    "etherfaucet.tech",
    "transaction-authorization.droppages.com",
    "bitcoinbravado.io",
    "coin-secure-transaction.com",
    "ethereum-pay.com",
    "ethereumgiveaway.win",
    "calchain.net",
    "ethpays.me",
    "idex-info.com",
    "idex-market.org",
    "myetherewallete.com",
    "xn--myetherwlet-37a36j.com",
    "xn--myetherwllt-37a50e.com",
    "rnyetheswallet.com",
    "meymonerro.com",
    "myenterwellet.com",
    "myetnerwellet.top",
    "waillbtc.com",
    "myeltherwalletr.com",
    "myerhterwellet.com",
    "meyetherwalllet.com",
    "meytherwallent.com",
    "meytherwallret.com",
    "etherbonus.net",
    "ethtopromo.org",
    "register-eos.io",
    "ethereum-get.info",
    "xn--myethrwaet-inb90ca.com",
    "myetherwallet.com.token.signinverication.signmessage.carpediem.legal",
    "carpediem.legal",
    "myetherwailet.pw",
    "xn--myethrallet-ol9e8v.com",
    "keytron.io",
    "xn--mytherwalt-smbh17c.com",
    "bitcointalk.to",
    "bitcointolk.org",
    "sebiltv.com.tr",
    "ethbonus.net",
    "etherspromo.org",
    "ethergiving.org",
    "ethn.cc",
    "xn--myethrwalt-zmbt05c.com",
    "eth.share-coin.net",
    "share-coin.net",
    "safe.ethgiver.com",
    "ethgiver.com",
    "ethereumup.top",
    "idexmarkets-official.com",
    "idex-marketsin.com",
    "xn--myetherwlet-r7a67j.com",
    "sparkster.tech",
    "flashblocks.io",
    "ethnow.me",
    "quarkchain.supply",
    "fastethget.com",
    "securepeth.club",
    "tron-online.info",
    "anatomia.co",
    "xn--myethrwalt-vmbe17c.com",
    "myetherwallet.com.verification.atlaserbil.com",
    "myetherwalleti.org",
    "myetherwallatt.com",
    "idex-marketslogin.com",
    "iedx.market",
    "myetherwallet.com.signinverication.signmessage.karaokesepeti.com",
    "more-eth.com",
    "myetherwallet.com.signinverication.signmessage.wbaa.co",
    "tubig.co",
    "myetherwallet.com.signinverication.signmessage.carpediem.legal",
    "sentinel-protocol.com",
    "xn--myetherwalt-kbb96i.com",
    "dfinitydrop.ml",
    "coinbaseverifier.com",
    "ether-giveaway.net",
    "ethget.me",
    "ethbonus.org",
    "eth-give.me",
    "ethgetnow.com",
    "ethnowpromo.org",
    "ethergifting.com",
    "ethgrab.com",
    "ethg.me",
    "jdex.market",
    "idex-myaccount.com",
    "index-markct.com",
    "ldox.market",
    "10000eth.net",
    "eoslaunch.io",
    "coinbase.pro-fork.com",
    "pro-fork.com",
    "ethgiveaway.zkr.kr",
    "eth-promo.wixsite.com",
    "calchain.io",
    "air-eos.com",
    "got-eth.com",
    "geteth.online",
    "get.etherofficial.com",
    "etherofficial.com",
    "tomochain.tech",
    "xn--ehterdeta-wd6d.com",
    "mycryiptowaliet.com",
    "lendium.tech",
    "xn--myethrwalet-vrb05c.com",
    "kineticairdrop.typeform.com",
    "elon-gives-eth.paperplane.io",
    "rebl984.9999eth.com",
    "9999eth.com",
    "ethclaimer.byethost32.com",
    "essentialairdrop.typeform.com",
    "myetherwallets-official.com",
    "udex.market",
    "icex.market",
    "idexx.market",
    "starkware.online",
    "myetherwalleta.org",
    "myetherwalleto.org",
    "myetherwallett.org",
    "onemew.online",
    "myethervvalet.io",
    "eth-request.org",
    "eths.space",
    "btc-gift.org",
    "eth-free.github.io",
    "ethergiveme.com",
    "ether-give.com",
    "eth-share.org",
    "myerherwallet.tk",
    "myetherwallet.news",
    "myetherwalletz.org",
    "myethrwallet.org",
    "myrvnwallet.com",
    "myetherwanllet.com",
    "myetherwellat.com",
    "myetherwellets.com",
    "xn--myetherwalt-crb17c.com",
    "quarkchain.pub",
    "claim-eth.com",
    "send.ethergot.com",
    "ethergot.com",
    "securepay-eth.org",
    "gift-10000eth.com",
    "my-etherwallsecure.com",
    "secure375446884521.safeethpay.com",
    "safeethpay.com",
    "quarkchain.in",
    "rnyetherwallel.com",
    "xn--methrwallet-uib92a.com",
    "domain501dom.com",
    "myethwalllet.info",
    "secure75405732935.safethpay.com",
    "wallets-ether.com",
    "brm.10000eth-gift.com",
    "ethsecure.info",
    "get.ico-eth.net",
    "ico-eth.net",
    "collectmyethers.org",
    "givefree-eth.com",
    "now-5000ether.paperplane.io",
    "eth-give.info",
    "xn--mytherwallet-fvb.net",
    "xn--myethewllet-ife2794g.com",
    "xn--metherwallt-crb6719g.com",
    "xn--myeterwllet-nl8er2d.com",
    "xn--metherallet-ol9e03c.com",
    "xn--mytherwalet-srb45c.com",
    "xn--myetherwlet-48a42j.com",
    "xn--myetherwllt-s8a7g.com",
    "xn--myethrwaet-mlb18ca.com",
    "xn--metherwalle-uib05k.com",
    "xn--mytherwalet-obb56i.com",
    "xn--myethrwalet-6qb77c.com",
    "xn--myetherwallt-fwb.net",
    "ethgive.net",
    "tron-block.com",
    "idex-market.site",
    "eth4everyone.com",
    "mew-ehterwallat.com",
    "94.100.18.96",
    "get.it-now-eth.com",
    "it-now-eth.com",
    "give.promoeth.net",
    "promoeth.net",
    "etherkickstart.com",
    "eth-hype.com",
    "instant-ether.com",
    "pay.ethwitheth.com",
    "ethwitheth.com",
    "10000eth-gift.com",
    "klareol5.ru",
    "20000.paperplane.io",
    "secure093555613.safethpay.com",
    "get.ico-eth.org",
    "ico-eth.org",
    "payment-ethereum.online",
    "tron-block.info",
    "neo-online.info",
    "ethconfirm.info",
    "offer.ethsn.com",
    "ethsn.com",
    "hydroraindrop.typeform.com",
    "ethgift.org",
    "etherdelta.githiub.io",
    "githiub.io",
    "ether-promo.org",
    "atn437.ethgiveeth.com",
    "ethgiveeth.com",
    "5000eth-promo.com",
    "myetherofficial.com",
    "myetherwallat.online",
    "myetherwalletw.org",
    "myetherwallte.net",
    "myetherwalret.ru",
    "xn--metherwalet-uib39f.com",
    "myetlherwallet.pro",
    "bittrexa.com",
    "xn--bttrx-7ra5a.com",
    "bittrexr.com",
    "bittrex-account-verification.com",
    "bittrex-login.com",
    "biitbay.com",
    "kcucoin.com",
    "vvallbtc.com",
    "eth-promo.net",
    "tdex.market",
    "login-myetherwallets.com",
    "claimeth.epizy.com",
    "walleteos.org",
    "nathanielpopper.promo-eths.com",
    "promo-eths.com",
    "pay.ethconfirm.com",
    "ethconfirm.com",
    "eth-share.com",
    "eth-gift.com.paperplane.io",
    "iidexmarket.com",
    "ebtweinfinance.com",
    "cardanoethereum.com",
    "ethergiveaway.website",
    "get-ethereum.info",
    "get-event-ethereum.info",
    "give-eth.news",
    "eth-box.xf.cz",
    "ethersforme.net",
    "giftethers.com",
    "m342edium.ethersforme.net",
    "10000-eth.com",
    "icostarex.mipropia.com",
    "ethsgive.com",
    "giveaway-ether.com",
    "bonus.giftethers.com",
    "get-eths.com",
    "get-ethereum.site",
    "cryptos-promos.com",
    "safethpay.com",
    "paygiveaway.com",
    "tokenpublicsales.com",
    "ethgive.online",
    "ether.vu",
    "getnoweth.com",
    "waves-ethereum-eth.org",
    "ethereum-eth.life",
    "mycrypto-com.com",
    "quarkchain.pl",
    "get-5001-ethereum.com",
    "get-5000-ethereum.com",
    "myetzerwallet.com",
    "promobtc.win",
    "tokenairdrop.typeform.com",
    "transfer.saferpayeth.com",
    "saferpayeth.com",
    "r5.ms",
    "xn--mytherwalet-3qb97c.com",
    "xn--myethrwllet-pjb5u.com",
    "xn--myetherwalt-0rb64c.com",
    "cryptofaze.com",
    "hederaheshgraph.com",
    "ethergift.org",
    "myetheerwallet.pw",
    "secure-give-eth.com",
    "kann.io",
    "pundix.tech",
    "quarkchains.io",
    "ethcollection.paperplane.io",
    "hydroggenplatform.com",
    "ldcx.market",
    "eth-airdrop.com",
    "ether-promo.unas.cz",
    "xn--tbtc-zpa34a.com",
    "xn--myetherwalt-crb27c.com",
    "hydroplatform.org",
    "eth-giveaway.today",
    "etherget.online",
    "ethplatform.org",
    "mycrypton.net",
    "5000ethereum.online",
    "hederahashgaph.com",
    "5000-eth.paperplane.io",
    "zilliqablockchain.org",
    "idec.market",
    "ihex.market",
    "zclassiccoins.com",
    "omisegowallet.network",
    "musk.vu",
    "quarkchain-presale.io",
    "ethairdrop.live",
    "ethgiveavvay.site",
    "etherums-givingaway.atspace.tv",
    "etherfree.tech",
    "secure-ethereum.tw1.su",
    "phantasma-ico.io",
    "sentinelprotocol.pw",
    "24h.infora.hu",
    "eth-securepay.com",
    "secureceth.com",
    "eth-giving.ga",
    "free-eths.paperplane.io",
    "nexotoken.org",
    "quarkchain-tokens.io",
    "giveavvay-10000eth.online",
    "ethpromo.org",
    "i-dexmarkets.com",
    "edenchain.site",
    "xn--mytherwallet-5vb.net",
    "i-dexmarket.com",
    "bi-ttrex.com",
    "www-bittrex.com",
    "xn--bifinex-fb4c.com",
    "xn--blockcain-g95d.com",
    "xn--coinbas-z8a.info",
    "xn--htbt-3oa0a.com",
    "xn--myethewallt-crb9748g.com",
    "xn--polonix-17a.com",
    "xn--tro-k5y.com",
    "privcoin.io",
    "free-eth.paperplane.io",
    "ihcx.market",
    "helbizcoin.net",
    "telegram-token.io",
    "icostats.io",
    "musk-party-gifts.updog.co",
    "yobittrading.net",
    "yobit-trading.net",
    "securetransfer.ethpromotion.com",
    "ethpromotion.com",
    "brickblockio.info",
    "collect.ethforyou.com",
    "ethforyou.com",
    "getmyetho.paperplane.io",
    "xn--myetherwallt-ovb.net",
    "idexmarkets.com",
    "ethsafepay.net",
    "presale.getmyethers.net",
    "getmyethers.net",
    "xn--tbtc-upa94a.com",
    "xn--itbtc-9g1b.com",
    "myetherwalleth.org",
    "brickblocks.io",
    "zilliqanetwork.com",
    "brickblock.cc",
    "quarkchain.de",
    "promo-give-ethereum.org",
    "give-ethereum.org",
    "ethereum-giveaway.site",
    "forkdelta.net",
    "i-idex.market",
    "kinecosystem.io",
    "quark-chain.io",
    "quarkchain.org",
    "quarkchaln.io",
    "quarkchain.website",
    "get-ethereum.ml",
    "5000eth.net",
    "claim.payeths.com",
    "payeths.com",
    "gameofdeception.get-5000-eth.com",
    "zilliqablockchain.com",
    "ethgiveavvay.com",
    "rebellios.com",
    "kinecosystems.org",
    "zilliqa.online",
    "mycrypto.get-5000-eth.com",
    "get-5000-eth.com",
    "eden-chain.io",
    "coinbtcnews.com",
    "xn--polomex-cza.com",
    "helpcoinbase.com",
    "account-coinbase.com",
    "coinbase-eth-giveaway.com",
    "free-eth.news",
    "forkdeltas.com",
    "elon-giveaway.com",
    "myetherwallet.secure.access-checker.com",
    "access-checker.com",
    "etherget.us",
    "freecoingifts.com",
    "quick.payeths.com",
    "take-eth.online",
    "ether-giveaway.tech",
    "xn--shapeshft-c5a.com",
    "xn--mycrpto-k64c.com",
    "orchidprotocols.com",
    "hadeplatform.net",
    "quarkchain.tech",
    "hederahashgraph.store",
    "myetherwallet.access-checker.com",
    "freeeth.info",
    "coinbasle.com",
    "eth-payment.online",
    "ethereum5000.com",
    "get-eth.us",
    "ethsecurepay.com",
    "bonus.ethergives.com",
    "ethergives.com",
    "ocoins.tech",
    "hederahashgraph.online",
    "5000.ethereumgive.com",
    "ethereumgive.com",
    "ethergive.000webhostapp.com",
    "verifiedeth.com",
    "eth-giveaway.co.nf",
    "giveavvay10000eth.host",
    "5000eth.org",
    "eth-giveaway.updog.co",
    "gift-ether.com",
    "bonus.gift-ether.com",
    "mycrypto.cm",
    "tronlabsnetwork.com",
    "cdnsfiles.com",
    "xn--conbase-cfb.com",
    "blockschajn.info",
    "blockchajns.info",
    "blockchaljn.info",
    "xn--myeherwallet-fcc.com",
    "xn--myetherwlle-3kb01f.com",
    "blocks-chains.info",
    "blockschaln.info",
    "xn--blockchaj-3vb.info",
    "blokclnain.info",
    "blokclnaln.info",
    "xn--myetherwllet-edb.com",
    "xn--blockchln-hdb.info",
    "xn--blockchln-c3a.info",
    "xn--blockchln-61a.info",
    "xn--blckchaln-c6a.info",
    "xn--blckchaln-66a.info",
    "xn--blockhai-48a72d.info",
    "cken.site",
    "blockchaihs.info",
    "ethereum.vu",
    "myetherewallet.net",
    "myetharwallet.stream",
    "meythcrrwallet.ru.com",
    "get-ethereum.org",
    "axpire.tech",
    "eth-givea-way.com",
    "eosreward.io",
    "bitfinex.eu",
    "www-mycryptos.com",
    "www-mycryqto.com",
    "mycrypto4cash.com",
    "mycrylto.com",
    "mycrypt9.com",
    "mycryptoc.com",
    "giveaway-eth.com",
    "quarkchain-ico.io",
    "eth-24h.com",
    "ethgiveaways.net",
    "myetherwallet-start.download",
    "myethereumwalletpro.com",
    "myehretewallet.com",
    "myetherwallet-cash.download",
    "myetherwallet-official.download",
    "myetrhrerwallet.com",
    "mynerthwallet.com",
    "mynethwallet.com",
    "mynetwalleteth.com",
    "mynewalleteth.com",
    "bancatoken.org",
    "zilliqa.site",
    "free-give-eth.com",
    "iconfoundaton.com",
    "geteths.live",
    "etherdrops.com",
    "ethereumdrop.batcave.net",
    "batcave.net",
    "eth-platform.com",
    "main-myetherwallet.com",
    "eth-get.online",
    "collecteth.com",
    "promo-ether.com",
    "ethereumwalletgenerator.com",
    "ethereums.live",
    "ethpromo.net",
    "gift-5000eth.org",
    "promotioneth.com",
    "bonus.gift-ethers.com",
    "gift-ethers.com",
    "gram-token-sale.com",
    "myetherwalt.com",
    "nnycrypto.com",
    "myrcrypto.com",
    "myerypto.com",
    "mrycrypto.com",
    "mycryrpto.com",
    "mycrypto.ltd",
    "mycrypto.group",
    "mycrypto.ink",
    "mycrypto.promo",
    "eth-reward.com",
    "give-eth.online",
    "mvmonero.co",
    "5000ethgift.com",
    "quarkchain-tokensale.io",
    "ethereumgiveaway5000.com",
    "get-5000eth.com",
    "take5000eth.com",
    "ether_promo.kissr.com",
    "kissr.com",
    "eth-giveavvay.online",
    "ethereums.cloud",
    "ico-telegram.net",
    "icotelegramgroup.com",
    "ico-telegram.is",
    "ico-telegramcoin.com",
    "ico-telegram.cc",
    "tokentelegram.info",
    "tokentelegram.live",
    "letherwindows.com",
    "5000eth-gift.com",
    "get-ethereum.gift",
    "ethereum-give.czweb.org",
    "czweb.org",
    "5000eth-giveaway.com",
    "ether-giveaway.atspace.eu",
    "atspace.eu",
    "eth-airdrop.online",
    "polymath-network.com",
    "securepayeth.com",
    "gift5000eth.com",
    "localetherieum.com",
    "give-5000eth.org",
    "bonus.ethersgifts.com",
    "ethersgifts.com",
    "myoknawell.com",
    "myletherwarlet.com",
    "mywindorwallet.com",
    "tron-coin.org",
    "gift-5000eth.com",
    "daostack-ico.io",
    "xn--myethewalet-ms8erq.com",
    "xn--mythewallet-3qb3158g.com",
    "xn--myeerwallet-ml8el7a.com",
    "xn--mythrwallet-5qbx.com",
    "xn--myethewallt-crb5058g.com",
    "xn--meherwallet-998e27d.com",
    "xn--mytherwllet-xt9e0k.com",
    "xn--myetherwlle-jb9e0y.com",
    "xn--myeterallet-cm8eo0c.com",
    "xn--myehewalle-iw2e1gi.com",
    "xn--mycypto-c63c.com",
    "xn--myeterwallt-crb1087g.com",
    "xn--myterwallet-3qb9087g.com",
    "xn--myeherwae-xd6da13dia.com",
    "xn--ytherwallet-2qb6918g.com",
    "xn--mytherwalet-ms8e53d.com",
    "eosrewards.io",
    "tron-network.org",
    "bonus.ethersgift.com",
    "ethersgift.com",
    "quarkchain-token.io",
    "gift5000-eth.com",
    "myetherwallet-xn1.com",
    "xn--htbtc-q81b.com",
    "hittbte.com",
    "hitlbtc.com",
    "poloneix.co",
    "polomeix.co",
    "myetherwallet0.com",
    "myehterwallet-ht.com",
    "clo-airdrop.info",
    "freecoiners.com",
    "get-ethereum.cc",
    "nmyetlerwailet.com",
    "eth-promo.webz.cz",
    "etherclaims.rf.gd",
    "5000eth.rf.gd",
    "eth-promo.kissr.com",
    "nmyetlerwaiiet.com",
    "getyoureth.com",
    "eth-today.rf.gd",
    "ethereum.org-giveaway.live",
    "bonus.ether-gift.com",
    "ether-gift.com",
    "eth-givingaway.com",
    "ethgiveaway.live",
    "ethgiveaway.org",
    "get5000eth.com",
    "5000eth-giveaway.getforge.io",
    "shapeslhift.io",
    "shapeskift.io",
    "bonus.eth-gifts.com",
    "eth-gifts.com",
    "offpromoeth.com",
    "ethpromoverge.com",
    "poloniex-withdrawals.bitballoon.com",
    "gether-gift.com",
    "get-ether.fund",
    "eth-airdrop.live",
    "classicetherwallt.com",
    "hederahashgraph.infotokensale.com",
    "nmyetlerwaliet.com",
    "eth-drop.com",
    "mnycryptoethwallet.com",
    "bonus.ether-gives.com",
    "ether-gives.com",
    "ethforeth.com",
    "ethereumpomo.online",
    "mnyetnherwaliet.com",
    "eth-foundation.github.io",
    "forkdeltagithub.io",
    "wwwetherdelta.com",
    "xn--etherdlta-lib.com",
    "xn--etherdelt-876d.com",
    "xn--etherdela-ss6d.com",
    "xn--therdelta-uf7d.com",
    "xn--etherwallet-tv8eq7f.com",
    "xn--meherwalle-212ei17o.com",
    "xn--myetewallet-4dc4796g.com",
    "xn--myetherallt-0k9ejx.com",
    "xn--eterelta-ou9c9h.com",
    "wallet-mew.com",
    "xn--etherelta-u05d.com",
    "xn--mcrypto-rpd.com",
    "give-5000eth.com",
    "bonus.ether-gifts.com",
    "give5000-eth.com",
    "5000ethgive.com",
    "xn--myethrwalet-ns8e73d.com",
    "aelftoken.com",
    "dfinity.ml",
    "myethverwallet.com",
    "mithriltoken.tech",
    "win-eth.org",
    "eth-today.epizy.com",
    "give5000eth.com",
    "ethhit.org",
    "nkn-token.io",
    "get-ether.me",
    "xn--myetherwalle-occ.com",
    "xn--myethewllet-w48ep6a.com",
    "promo.ethereumbonus.online",
    "ethereumbonus.online",
    "ethtoget.com",
    "myetherwalletru.com",
    "i-myetherwallet.com",
    "eos-candy.com",
    "neonexchange.website",
    "get-ether.gift",
    "etherscan.tech",
    "xn--myethewllet-ife6494g.com",
    "ncashtoken.org",
    "eth.kissr.com",
    "ethtransaction.ezyro.com",
    "eth-give.org",
    "ethtotrade.com",
    "tokentelegram.net",
    "eth-private-key.webz.cz",
    "collect-eth.com",
    "myetherwallet.lt",
    "myetherwallet-register.com",
    "eth-promotion.getforge.io",
    "btc-gifts.info",
    "eos-dac.com",
    "localetherwallet.com",
    "free5000eth.com",
    "ethpaysafe.com",
    "ico-telegram.co",
    "eth-giving.com",
    "xn--conbas-gva1a.com",
    "www-colnbase.com",
    "5000eth-giveaway.online",
    "givefreeeth.com",
    "ether-promo.getforge.io",
    "gether.fund",
    "ethereum-giveaway.tekcities.com",
    "tron-airdrop.info",
    "ethn.cash",
    "eos-airdrop.com",
    "xn--medim-9d2b.com",
    "xn--myethrallet-zk9e6w.com",
    "ethereums-2018-give-away.bitballoon.com",
    "givingawayeth.com",
    "ethereum-giveaway.com",
    "ethsafe.trade",
    "check-ethpayments1.kissr.com",
    "ethereum-giveaway.kissr.com",
    "smartolinks.com",
    "livivid.com",
    "clickmoneysystem1.com",
    "ethereum-give.byethost16.com",
    "givingawayethereum.com",
    "ethereum.czweb.org",
    "ethc.fund",
    "eth-giveaway.trade",
    "gram-ico.io",
    "etherscans.net",
    "io-eos.com",
    "telegram-ico.tech",
    "ico-telegram.money",
    "icontoken.foundation",
    "eth-give-away.webz.cz",
    "5000eth.info",
    "authorize.live",
    "azone-web.com",
    "binance-giveaway.firebaseapp.com",
    "bitwelfare.biz",
    "cryptocurrencies-bitcoin.com",
    "eth-freesharing.com",
    "eth-gives.com",
    "eth-private.com",
    "eth-trans.bitballoon.com",
    "eth-transactions.com",
    "ether-giveaway.com",
    "ether-transfer.online",
    "etherblessings.com",
    "etherclaims.byethost8.com",
    "ethereumdrop.com",
    "ethereumdrop.org",
    "ethereumone.info",
    "ethergiveaway.win",
    "ethergiveaways.tumblr.com",
    "etheriumairdrop.com",
    "etherum.site123.me",
    "ethf.bid",
    "ethgive.info",
    "ethgiveaway.online",
    "ethsend.online",
    "ethtransaction.unaux.com",
    "get-ethers.com.cp-32.webhostbox.net",
    "give-binance.party",
    "ip222.ip-54-38-120.eu",
    "myetherpromo.com",
    "neonexchange.online",
    "tokencrowdsale.info",
    "ethergiftwallet.com",
    "ethpromo.gift",
    "giveaway-ethereum.com",
    "giveawayether.com",
    "ethereumpromo.info",
    "ethhit.com",
    "free-5000eth.com",
    "ethc.gift",
    "dfnity.org",
    "coinbase.droppages.com",
    "meythapvettal.com",
    "get-ethers.com",
    "gramfoundation.io",
    "check-ethpayments.kissr.com",
    "centratoken.site",
    "gramtokenico.com",
    "eth-gifting.site",
    "ethereums-promo.bitballoon.com",
    "ethereum-promo2018.bitballoon.com",
    "ethpromo.com",
    "free-ethereum.czweb.org",
    "ethn.vu",
    "etherpromo.org",
    "ethpay.site",
    "ethgift.info",
    "tokenpublicsale.com",
    "etherpromo.online",
    "tron-nextlevel.bitballoon.com",
    "mycrypto.company",
    "myetherapywaillet.com",
    "myetherapywalilet.com",
    "myetherapywallet.com",
    "myetherapywalliet.com",
    "mybethernvwallet.com",
    "myotherapywallet.com",
    "myuuetheraswallet.com",
    "nnyctncrwalliet.com",
    "nnyctncrvvallet.com",
    "myetheurwallet.com",
    "ico-telegram-ton.com.ru",
    "ton-ico.ga",
    "mailingserver2.com",
    "gram-token.org",
    "lco-telegram.org",
    "tonogram.org",
    "eth-give.kissr.com",
    "myegethercowwallet.com",
    "tron-giveavay-weeklyreport.bitballoon.com",
    "ethdropnew.ml",
    "cryptoplus.be",
    "dfinity.org.in",
    "payforfees.online",
    "nnyctncrwaillet.com",
    "myunetherhawallet.com",
    "airdrop-bluzelle.com",
    "tronfoundation.tech",
    "safely-transfer.com",
    "eth.vu",
    "xn--myeterallet-nl8eo0c.com",
    "get-eth.pl",
    "cz-binance.com",
    "signalsx.com",
    "eth-gift.tw1.su",
    "myetnarvellat.com",
    "mynbethernvwallet.com",
    "myehcrwalilet.com",
    "gdaxsupport.com",
    "coinbaseexchange.org",
    "coinbasehelp.info",
    "coinbaseassist.info",
    "kinecosystem.net",
    "telegramtoken.global",
    "telcoinairdrop.com",
    "xn--mytherwalet-3qb10c.com",
    "ethgiveaway.club",
    "coinnbase.com",
    "dailyinequality.org",
    "ethg.cz",
    "crypto-payout.tk",
    "vechain-ven.com",
    "tokensale-telegram.com",
    "ethr.cc",
    "nnyecthenwellat.com",
    "nnyiicteherwailiatt.com",
    "themisnetwork.org",
    "www-myetherwellet.com",
    "eth-today.com",
    "ethg.gift",
    "ether-zero.info",
    "ethgiveaway.info",
    "bonus.ethersgive.com",
    "ethersgive.com",
    "tronfoundation.me",
    "eths.li",
    "auctus.network",
    "auctuss.org",
    "auctus.org.in",
    "auctus-ico.network",
    "xn--aucts-1gb.org",
    "coinmakerbot.com",
    "blnnance.com",
    "myetherwallet.heliohost.org",
    "ton-telegram.com",
    "tonpublic.org",
    "claim.ethdeal.info",
    "telegram.trade",
    "telegram-coin.org",
    "nnyiictehervvailiatt.com",
    "eths.vu",
    "shivoms.io",
    "telegramsale.com",
    "hederashashgraph.com",
    "eth-transaction.site44.com",
    "xn--metherwllet-ln9eqi.com",
    "xn--bitcointlk-85a.org",
    "coinbaase.cf",
    "coinnbase.ml",
    "coinnbase.tk",
    "binaance.ga",
    "binaance.cf",
    "binancce.cf",
    "binancce.ml",
    "xn--myetlherallet-341g.com",
    "paveldurov.bitballoon.com",
    "secure-eth-transactions.bitballoon.com",
    "giveaway-ethereum.org",
    "ethpayd.com",
    "ethdrop.info",
    "i-myetherwalnet.com",
    "metronome-token.io",
    "coin-zc.com",
    "xn--bitcon-mwa.com",
    "myettherwallet.xyz",
    "ethpayment.bitballoon.com",
    "ethopen.com",
    "telegramnetwork.org",
    "geth.cc",
    "telegram.ceo",
    "etherscan-giveaway.epizy.com",
    "eths.bz",
    "swaapy.network",
    "binance.ethdeal.info",
    "ethdeal.info",
    "gramnetwork.org",
    "galaxy-es0lutions.com",
    "eth.altervista.org",
    "musk.gift",
    "mycrypto.bz",
    "eth.vg",
    "eth-giveaway-vote.bitballoon.com",
    "eth-promo.com",
    "work.nelsconsult.com.ng",
    "etherfreegive.com",
    "secure-s28h3h2j54jehdh43jh3k5h42l4h23hk6l49sjxvsatoshilite.bitballoon.com",
    "giveaway-payment-add.bitballoon.com",
    "big-promo-march.tumblr.com",
    "ethgive.github.io",
    "myetherwalletradeico.blogspot.de",
    "owainpritchard.co.uk",
    "et.gl",
    "xn--condesk-ww4c.com",
    "xn--myethrwllet-6qb2249g.com",
    "airdrop-ether.bitballoon.com",
    "info-transaction.com",
    "eth.hn",
    "binance-promo.net",
    "trust-cryptopayment.com",
    "ethereum-transfer.online",
    "icotonsale.com",
    "etherbonuses.com",
    "ethfreeget.com",
    "tongram.me",
    "funfaircoin.org",
    "coinbase-secure-a2k34j.bitballoon.com",
    "ethereumtrans.com",
    "xn--condes-8bb1661d.com",
    "ethergiveawaytweet.tk",
    "eth-giveaway.gq",
    "nnyettiervwallat.com",
    "nnyettiervwallet.com",
    "eth.vote",
    "eth-promo.bitballoon.com",
    "ethfreepay.com",
    "promo-trx.tk",
    "paymentaddress.tumblr.com",
    "cryptongram.org",
    "campaigntoken.blogspot.de",
    "coin-promos.com",
    "xn--ytherwallet-iw8ex8c.com",
    "smartexchangecenter.tk",
    "xn--oindesk-15a.com",
    "eth-transaction.secure.kissr.com",
    "otoeveryday.info",
    "ethfreecandy.bitballoon.com",
    "etherscanio.github.io",
    "ico-gram.net",
    "gramtoken.network",
    "ethfreegive.com",
    "ether-promo.bitballoon.com",
    "xn--cindesk-cx4c.com",
    "theadsleader.000webhostapp.com",
    "myetherwalletico.blogspot.de",
    "eth-giveaway.info",
    "syncfab.eu",
    "eth-giveaway.com",
    "icoeth.tk",
    "eth-giveaway-706.htmlcomponentservice.com",
    "mybinance.info",
    "xn--myethewallet-kjc.com",
    "polyswamr.io",
    "polyswarm.me",
    "polyswarms.io",
    "eth4free.ml",
    "ico-telegram-ton.com",
    "telegram.tw",
    "gramton.info",
    "gramsap.enterprises",
    "ico-telegram.club",
    "telegram.one",
    "etharscan.io",
    "xn--coindes-jhb.com",
    "blocikchair.info",
    "eth-cz-319.htmlcomponentservice.com",
    "xn--myetherwaet-0t8ea.com",
    "eth-giveaway-514.htmlcomponentservice.com",
    "xn--mtherwallet-z19ex1a.com",
    "xn--eo-e9a.com",
    "cosss.io",
    "callistonetwork.tech",
    "xn--metherwallt-819eo1a.com",
    "ethfreepays.com",
    "nnyettiervwailet.com",
    "xn--hapehift-oh0de.com",
    "gram.vc",
    "bonus.etherpayout.com",
    "etherpayout.com",
    "ethereum-giveaway.info",
    "xn--bnanc-fsax.com",
    "xn--binnce-y0a.com",
    "eth-giveaway-209.statichtmlapp.com",
    "binance.bitballoon.com",
    "binance-give.com",
    "ilil.pw",
    "myetherwallet.com.send-transaction_8hlg6z8mgt6zyg.ilil.pw",
    "telegram.site",
    "telegram.auction",
    "miroskii.com",
    "eth-transactions.neocities.org",
    "online-eos.org",
    "data-token.org",
    "eth953883.htmlcomponentservice.com",
    "reeveclancy.wixsite.com",
    "transfer-eth.neocities.org",
    "eth.secure-transactionssecure.com",
    "secure-transactionssecure.com",
    "nnyiictehervvailiat.com",
    "odachi.neocities.org",
    "bittrex-give.com",
    "policypal.info",
    "changlley.org",
    "rnyertherwallet.com",
    "xn--thabyss-u8a.com",
    "callisto-airdrop.com",
    "telegramfoundation.org",
    "polymathnetwork.org",
    "ethereum-promo.bitballoon.com",
    "dfintty.org",
    "dftnity.org",
    "usermd.net",
    "xn--gemn-nzab.com",
    "xn--bnance-3va.com",
    "xn--binnce-yc8b.com",
    "xn--bnance-p9a.com",
    "xn--binane-0ua.com",
    "binalce.com",
    "binince.com",
    "xn--conbase-pza.com",
    "xn--conbase-sfb.com",
    "xn--coinbas-xya.com",
    "xn--coinbas-z8a.com",
    "xn--coinbse-9wa.com",
    "xn--coinbse-lwa.com",
    "xn--polonex-vfb.com",
    "xn--ploniex-l0a.com",
    "xn--plniex-bxab.com",
    "xn--havvn-9za.io",
    "havvenio.com",
    "nucelus.vision",
    "metronometoken.io",
    "meganfoxloveyou.com",
    "xn--yetherwalle-iw8e1s.com",
    "tron-online.org",
    "myenthereumwallet.com",
    "myetherwallet-team.com",
    "myetherwallet.usermd.net",
    "xn--yetherwalle-tv8ezt.com",
    "xn--coindek-873c.com",
    "dflinity.org",
    "ipsx.promo",
    "havven-sale.com",
    "tokensale-adhive.com",
    "ataritoken.ltd",
    "transfer-address-confirmation.droppages.com",
    "dfinlty.org",
    "poloniex.work",
    "tokensale-havven.in",
    "ico-havven.org",
    "secure.poloniex.work",
    "vechain-foundation.org",
    "telegram.tokyo",
    "forkdelta.io",
    "ton-sale.com",
    "ico-telegram.online",
    "telegramtoken.io",
    "gonetwork-airdrop.co",
    "secure-transaction-confirmation.droppages.com",
    "neonexchanges.org",
    "eth-transact.secure.droppages.com",
    "6khb.payment-checker-ethereum-id-bslyftexjuwcgv8.filesusr.com",
    "akasha-world.com",
    "address-transfer-confirmation.droppages.com",
    "b5z.net",
    "p.b5z.net",
    "tokensale.xn--havve-7l1b.com",
    "xn--coindes-bx3c.com",
    "xn--coindek-s73c.com",
    "locaeltherum.com",
    "myetherwallet.tokenimport.com",
    "tokenimport.com",
    "leadscoin.network",
    "localethereom.com",
    "havvens.win",
    "xn--metherwalle-jb9ejq.com",
    "xn--myetheralle-jb9exm.com",
    "tefood.me",
    "havventoken.com",
    "havven.cc",
    "havven.eu",
    "havven.top",
    "mywalletether.com",
    "myetherwallett.site",
    "xn--myethewalle-w48erh.com",
    "el-petro-coin.com",
    "xn--yeterwallet-bm8eym.com",
    "sale-orchid.com",
    "electrify-asia.info",
    "tron-foundation.org",
    "dflnlty.org",
    "polyswarm.tech",
    "tokensale.polyswarm.tech",
    "polyswarm.ru",
    "dock.click",
    "leadcoins.network",
    "dock-tokensale.eu",
    "polyswarm.pw",
    "dock-io.org",
    "heavven.io",
    "havven.live",
    "havven.sale",
    "havven.info",
    "dock.network",
    "blocklancer.me",
    "tokensale-havven.io",
    "havven.pro",
    "tokentelegram.com",
    "ico-telegram.me",
    "myetherzero.com",
    "seele-token.pro",
    "tokensale-havven.com",
    "polyswarm.in",
    "sale-dock.com",
    "polyswarm.co",
    "polyswarm.bid",
    "ton.fund",
    "forkdeita.github.io",
    "xn--binnce-5nf.com",
    "xn--biace-4l1bb.com",
    "jiocoins.io",
    "xn--polonx-0va26t.com",
    "myetlherewallet.org",
    "myeithereiuwallet.com",
    "fin-trux.com",
    "finetrux.com",
    "telcoin.pro",
    "xn--es-8bb.com",
    "xn--myetherallt-pl9elw.com",
    "ico-dock.org",
    "dock.io-bonus.online",
    "docks.site",
    "dock-ico.pro",
    "dock-ico.eu",
    "dock.su",
    "tokensale-dock.io",
    "dock-ico.site",
    "openplatform.tech",
    "rightmesh.in",
    "waxtoken.in",
    "metamaskgiveaway.xyz",
    "nebulastoken.in",
    "vechain-foundation.com",
    "icotoken-current.top",
    "xn--myethrwalle-jb9e19a.com",
    "xn--myetheralle-7b9ezl.com",
    "iconfoundation.co",
    "fundrequest.info",
    "xn--myetherwale-os8e7x.com",
    "remme-ico.eu",
    "gonetwork.live",
    "token.gonetwork.pro",
    "gonetwork.pro",
    "gonetwork.eu",
    "nucleus-vision.cc",
    "jibreltoken.in",
    "dock.so",
    "dock.promo",
    "xn--mycrypt-r0a.com",
    "xn--mycrypt-g1a.com",
    "xn--mycrpto-y2a.com",
    "ethexploit.org",
    "remme.in",
    "remme.ws",
    "remme.com.ng",
    "nyeitthervvallet.com",
    "xn--myeerhwailet-ooc.com",
    "myeterhwaliot.com",
    "remme.live",
    "xn--yethewalle-to2exkhi.com",
    "myetherwallet.custom-token.com",
    "custom-token.com",
    "sale-earn.com",
    "bankera.live",
    "originprotocol.io",
    "originprotocol.online",
    "originprotocols.com",
    "origirprotocol.com",
    "originprotocol.tokenpublicsales.com",
    "originprotocol.typeform.com",
    "originprofocol.com",
    "hcepro.com",
    "trx.foundation",
    "tokensale.adhive.net",
    "adhive.net",
    "decentral.market",
    "cryptoexploite.com",
    "blockclain.net",
    "xn--blckchin-5za9o.info",
    "xn--blkhain-m0a4pb.info",
    "xn--blocchal-gmb8m.info",
    "xn--blocchaln-orb.info",
    "xn--blocchan-gmb7c.info",
    "xn--blockaden-lsen-5pb.com",
    "xn--blockchai-3vb.info",
    "xn--blockchai-jvb.info",
    "xn--blockchal-3vb.info",
    "xn--blockcham-ipb.info",
    "xn--blockchan-2pb.com",
    "xn--blockchan-75a.com",
    "xn--blockchan-7sb.info",
    "xn--blockchan-d5a.net",
    "xn--blockchan-dob.info",
    "xn--blockchan-ipb.com",
    "xn--blockchan-ipb.info",
    "xn--blockchan-nk7d.com",
    "xn--blockchan-xub.info",
    "xn--blockchann-4ub.com",
    "xn--blockchi-n7a50e.info",
    "xn--blockchi-o8a54d.info",
    "xn--blockchi-p99co8a.com",
    "xn--blockchim-hdb.info",
    "xn--blockchin-1xb.info",
    "xn--blockchin-61a.info",
    "xn--blockchin-61a.net",
    "xn--blockchin-6ib.info",
    "xn--blockchin-ccb.info",
    "xn--blockchin-h4a.com",
    "xn--blockchin-h4a.info",
    "xn--blockchin-hdb.info",
    "xn--blockchin-hhb.info",
    "xn--blockchin-mib.net",
    "xn--blockchin-wcb.com",
    "xn--blockchn-fza4j.com",
    "xn--blockchn-fza4j.info",
    "xn--blockchn-n7a43b.info",
    "xn--blockchn-p0a.info",
    "xn--blockchn-tx0d4p.com",
    "xn--blockclai-3vb.info",
    "xn--blockclin-hdb.com",
    "xn--blockclin-hdb.info",
    "xn--blockclin-hdb.org",
    "xn--blockflte-kirchrode-w6b.de",
    "xn--blockfltenquartett-windspiel-81c.de",
    "xn--blockhai-obb78c.info",
    "xn--blockhain-4eb.com",
    "xn--blockhain-pfb.com",
    "xn--blockhain-pfb.info",
    "xn--blockhain-zdb.info",
    "xn--blockhan-obb65a.info",
    "xn--blockhas-d6a.com",
    "xn--blockwallt-j7a.com",
    "xn--blokchai-fqb.info",
    "xn--blokchain-nfb.info",
    "xn--blokhain-28ab.info",
    "xn--bockclnain-eyb.info",
    "xn--mymoeo-zt7bzf.com",
    "xn--mymoer-nqc1368c.com",
    "xn--mymoero-c13c.com",
    "xn--mymoero-s13c.com",
    "xn--mymoneo-f63c.com",
    "xn--mymoneo-v63c.com",
    "xn--mymoneo-y53c.com",
    "xn--mymoner-j0a.com",
    "xn--mymoner-j5b.com",
    "xn--mymoner-r0a.com",
    "xn--mymoner-z0a.com",
    "xn--mymoner-z2c.com",
    "xn--mymonro-fya.com",
    "xn--mymonro-x8a.com",
    "xn--myetheallet-l58emu.com",
    "xn--myetheraet-9k2ea77h.com",
    "xn--myetheralet-ms8e21b.com",
    "xn--myetheralle-7b9exm.com",
    "xn--myetherallet-5s5f.com",
    "xn--myetherallet-fs5f.com",
    "xn--myetherewalle-1t1g.com",
    "xn--myetherllet-pl9e6k.com",
    "xn--myethervvalle-8vc.com",
    "xn--myetherwaet-61ea.com",
    "xn--myetherwaet-8eda.com",
    "xn--myetherwaet-ns8ea.com",
    "xn--myetherwale-ns8e8x.com",
    "xn--myetherwalet-0fb.com",
    "xn--myetherwalet-0z4f.com",
    "xn--myetherwalet-814f.com",
    "xn--myetherwalet-d9b.com",
    "xn--myetherwalet-h14f.com",
    "xn--myetherwalle-9me.com",
    "xn--myetherwalle-ek5f.com",
    "xn--myetherwalle-fqc.com",
    "xn--myetherwalle-opc.com",
    "xn--myetherwalle-q05f.com",
    "xn--myetherwllet-wob.com",
    "xn--myetherwllt-r7a0i.com",
    "xn--myethewaliet-9d5f.com",
    "xn--myethewalle-3ic0947g.com",
    "xn--myethewallet-0e5f.com",
    "xn--myethewallet-1kc.com",
    "xn--myethewallet-bkc.com",
    "xn--myethewallet-vof.com",
    "xn--myethewalliet-nm1g.com",
    "xn--myethewallt-kbb3019g.com",
    "xn--myethewallt-w48ew7b.com",
    "xn--myethrwalet-6qb6408g.com",
    "xn--myethrwalet-ms8e83d.com",
    "xn--myethrwallet-1db.com",
    "xn--myethrwallt-29af.com",
    "xn--myethrwallt-29as.com",
    "xn--myethrwllet-q7a31e.com",
    "xn--myethrwllet-r8a3c.com",
    "fintrux.eu",
    "refereum-ico.eu",
    "arcblock-ico.org",
    "xn--fuson-1sa.org",
    "refereum-token.com",
    "fintrux.co",
    "ico-ton.org",
    "xn--mytherwallt-cbbv.com",
    "xmoneta.co",
    "data-wallet.co",
    "tokensale.data-wallet.co",
    "xn--myeerhwallot-ooc.com",
    "xn--myeterwalet-cm8epi.com",
    "xn--myeterwalle-cm8ev6a.com",
    "rnyetherumwallet.com",
    "republic-protocol.net",
    "nyeihitervvallatt.com",
    "arcblock.eu",
    "republicprotocol.eu",
    "tokensale-fusion.com",
    "myetherwalletjoin.com",
    "medicalchian.com",
    "myeahteirwaliet.com",
    "myenhtersvvailct.com",
    "trinity-token.com",
    "xn--eo-yzs.com",
    "zilliqa.in",
    "sparc.pro",
    "myetherwallet.import-tokens.com",
    "token-gram.org",
    "xn--shapshift-e4a.com",
    "xn--shapshift-y4a.com",
    "xn--shpeshift-c2a.com",
    "xn--shpeshift-r1a.com",
    "xn--shapshift-o4a.com",
    "xn--shpeshift-w2a.com",
    "xn--shapeshft-w5a.com",
    "tokensale-fusion.org",
    "fusion-ico.com",
    "beetolen.com",
    "tokencrowdsale.online",
    "fusion.tokencrowdsale.online",
    "beetokem.com",
    "block.chaiins.in",
    "origintrail.in",
    "bit-z.ru",
    "xn--myetherallet-nu5f.com",
    "xn--mytherwalet-3qb08c.com",
    "xn--myeterwllet-cm8et1d.com",
    "xn--mytherwllet-q7a01e.com",
    "xn--biance-xt7b.com",
    "xn--bnance-wic.com",
    "xn--biance-jeb.com",
    "xn--bttrx-9za8334c.com",
    "wwwkodakcoin.com",
    "myetherwallet.uk.com",
    "kodakone.cc",
    "nyeihitervvallet.com",
    "xn--myeterwalet-cm8eoi.com",
    "nucleus.foundation",
    "beetoken-ico.com",
    "data-token.com",
    "tron-labs.com",
    "ocoin.tech",
    "aionfoundation.com",
    "ico-telegram.org",
    "nyeihitervvallat.com",
    "telegramcoin.us",
    "daddi.cloud",
    "daditoken.com",
    "blockarray.org",
    "dadi-cloud.net",
    "wanchainfunding.org",
    "ico-telegram.io",
    "iconfoundation.site",
    "iost.co",
    "beetoken-ico.eu",
    "cindicator.network",
    "wanchainetwork.org",
    "wamchain.org",
    "wanchainltd.org",
    "wanchainalliance.org",
    "nucleus-vision.net",
    "ledgerwallet.by",
    "nucleuss.vision",
    "myenhterswailct.com",
    "cobin-hood.com",
    "wanchainfoundation.org",
    "xn--polniex-ex4c.com",
    "xn--polniex-s1a.com",
    "xn--polonex-ieb.com",
    "xn--polonex-sza.com",
    "xn--polonex-zw4c.com",
    "xn--polonix-ws4c.com",
    "xn--polonix-y8a.com",
    "xn--pooniex-ojb.com",
    "gramico.info",
    "dimnsions.network",
    "www-gemini.com",
    "login-kucoin.net",
    "venchain.foundation",
    "grampreico.com",
    "tgram.cc",
    "ton-gramico.com",
    "wwwpaywithink.com",
    "coniomi.com",
    "paywithnk.com",
    "paywithlnk.com",
    "iluminatto.com.br",
    "pundix.eu",
    "xn--bttrx-esay.com",
    "xn--bttrex-w8a.com",
    "xn--bnance-bwa.com",
    "xn--shpeshift-11a.com",
    "xn--shapeshif-ts6d.com",
    "xn--shapshift-yf7d.com",
    "wwwbluzelle.com",
    "bluzelie.com",
    "nucleus-vision.org",
    "omisegonetwork.site",
    "etlherzero.com",
    "etlherdelta.com",
    "xn--condesk-0ya.com",
    "xn--condesk-sfb.com",
    "xn--coindsk-vs4c.com",
    "iexecplatform.com",
    "tongramico.com",
    "nucleus-vision.eu",
    "intchain.network",
    "wanchain.cloud",
    "bluzelle-ico.com",
    "ethzero-wallet.com",
    "xn--metherwalle-jb9et7d.com",
    "xn--coinesk-jo3c.com",
    "venchainfoundation.com",
    "myenhtersvvailot.com",
    "ether-zero.net",
    "ins.foundation",
    "nastoken.org",
    "telcointoken.com",
    "ether0.org",
    "eterzero.org",
    "bluzelle-ico.eu",
    "bleuzelle.com",
    "appcoinstoken.org",
    "xn--quanstamp-8s6d.com",
    "myehntersvvailct.com",
    "myeherwalllet.com",
    "ico-bluzelle.com",
    "bluzelle.im",
    "bluzelle.one",
    "bluzele.sale",
    "bluzele.co",
    "sether.ws",
    "xn--myetherwalet-6gf.com",
    "xn--rnyethewaliet-om1g.com",
    "rnyethervailet.com",
    "mvetherwaliet.com",
    "rnyetherwailet.com",
    "myethervaliet.com",
    "rnyethervaliet.com",
    "mvetherwalilet.com",
    "xn--myethewalie-3ic0947g.com",
    "xn--mthrwallet-z6ac3y.com",
    "xn--myeherwalie-vici.com",
    "xn--myethervvalie-8vc.com",
    "xn--mythrwallt-06acf.com",
    "xn--mtherwallet-y9a6y.com",
    "myetherwallet.applytoken.tk",
    "ethereum-zero.com",
    "quanstamptoken.tk",
    "bluzelle.network",
    "ether-wallet.org",
    "tron-wallet.info",
    "appcoinsproject.com",
    "vechain.foundation",
    "tronlab.site",
    "tronlabs.network",
    "bluzelle.cc",
    "ethblender.com",
    "ethpaperwallet.net",
    "waltontoken.org",
    "icoselfkey.org",
    "etherzeroclaim.com",
    "etherzero.promo",
    "bluzelle.pro",
    "token-selfkey.org",
    "xn--etherdlta-0f7d.com",
    "sether.in",
    "xn--ttrex-ysa9423c.com",
    "bluzelle.eu",
    "bluzelle.site",
    "gifto.tech",
    "xn--os-g7s.com",
    "selfkey.co",
    "xn--myeherwalet-ns8exy.com",
    "xn--coinelegraph-wk5f.com",
    "dai-stablecoin.com",
    "eos-token.org",
    "venchain.org",
    "gatcoins.io",
    "deepbrainchain.co",
    "myetherwalililet.info",
    "myehvterwallet.com",
    "myehterumswallet.com",
    "nucleusico.com",
    "tronlab.tech",
    "0x-project.com",
    "gift-token-events.mywebcommunity.org",
    "funfairtoken.org",
    "breadtokenapp.com",
    "cloudpetstore.com",
    "myethwalilet.com",
    "selfkeys.org",
    "wallet-ethereum.com",
    "xn--methrwallt-26ar0z.com",
    "xn--mytherwllet-r8a0c.com",
    "bluzelle.promo",
    "tokensale.bluzelle.promo",
    "cedarlake.org",
    "marketingleads4u.com",
    "cashaa.co",
    "xn--inance-hrb.com",
    "wanchain.tech",
    "zenprolocol.com",
    "ethscan.io",
    "etherscan.in",
    "props-project.com",
    "zilliaq.com",
    "reqestnetwork.com",
    "etherdelta.pw",
    "ethereum-giveaway.org",
    "mysimpletoken.org",
    "binancc.com",
    "blnance.org",
    "elherdelta.io",
    "xn--hapeshit-ez9c2y.com",
    "tenxwallet.co",
    "singularitynet.info",
    "mytlherwaliet.info",
    "iconmainnet.ml",
    "tokenselfkey.org",
    "xn--myetewallet-cm8e5y.com",
    "envione.org",
    "myetherwalletet.com",
    "claimbcd.com",
    "ripiocreditnetwork.in",
    "xn--yeterwallet-ml8euo.com",
    "ethclassicwallet.info",
    "myltherwallet.ru.com",
    "etherdella.com",
    "xn--yeterwallet-bm8ewn.com",
    "singularty.net",
    "cloudkitties.co",
    "iconfoundation.io",
    "kittystat.com",
    "gatscoin.io",
    "singularitynet.in",
    "sale.canay.io",
    "canay.io",
    "wabicoin.co",
    "envion.top",
    "sirinslabs.com",
    "tronlab.co",
    "paxful.com.ng",
    "changellyli.com",
    "ethereum-code.com",
    "xn--plonex-6va6c.com",
    "envion.co",
    "envion.cc",
    "envion.site",
    "ethereumchain.info",
    "xn--envon-1sa.org",
    "xn--btstamp-rfb.net",
    "envlon.org",
    "envion-ico.org",
    "spectivvr.org",
    "sirinlbs.com",
    "ethereumdoubler.life",
    "xn--myetherwllet-fnb.com",
    "sirin-labs.com",
    "sirin-labs.org",
    "envion.one",
    "envion.live",
    "propsproject.org",
    "propsprojects.com",
    "decentralland.org",
    "xn--metherwalet-ns8ep4b.com",
    "redpulsetoken.co",
    "propsproject.tech",
    "xn--myeterwalet-nl8emj.com",
    "powrerledger.com",
    "cryptokitties.com",
    "sirinlabs.pro",
    "sirinlabs.co",
    "sirnlabs.com",
    "superbitcoin-blockchain.info",
    "hellobloom.me",
    "mobus.network",
    "powrrledger.com",
    "xn--myeherwalet-ms8eyy.com",
    "qlink-ico.com",
    "gatcoin.in",
    "tokensale.gamefllp.com",
    "gamefllp.com",
    "xn--myeherwalle-vici.com",
    "xn--myetherwalet-39b.com",
    "xn--polonex-ffb.com",
    "xn--birex-leba.com",
    "raiden-network.org",
    "sirintabs.com",
    "xn--metherwallt-79a30a.com",
    "xn--myethrwllet-2kb3p.com",
    "myethlerwallet.eu",
    "xn--btrex-b4a.com",
    "powerrledger.com",
    "xn--cointeegraph-wz4f.com",
    "myerherwalet.com",
    "qauntstanp.com",
    "myetherermwallet.com",
    "xn--myethewalet-ns8eqq.com",
    "xn--nvion-hza.org",
    "nnyetherwallelt.ru.com",
    "ico-wacoin.com",
    "xn--myeterwalet-nl8enj.com",
    "bitcoinsilver.io",
    "t0zero.com",
    "tokensale.gizer.in",
    "gizer.in",
    "wabitoken.com",
    "gladius.ws",
    "xn--metherwallt-8bb4w.com",
    "quanttstamp.com",
    "gladius.im",
    "ethereumstorage.net",
    "powerledgerr.com",
    "xn--myeherwallet-4j5f.com",
    "quamtstamp.com",
    "quntstamp.com",
    "xn--changely-j59c.com",
    "shapeshlft.com",
    "coinbasenews.co.uk",
    "xn--metherwallet-hmb.com",
    "envoin.org",
    "powerledger.com",
    "bitstannp.net",
    "xn--myetherallet-4k5fwn.com",
    "xn--coinbas-pya.com",
    "requestt.network",
    "oracls.network",
    "sirinlabs.website",
    "powrledger.io",
    "slackconfirm.com",
    "shape-shift.io",
    "oracles-network.org",
    "xn--myeherwalle-zb9eia.com",
    "blockstack.one",
    "urtust.io",
    "bittrex.one",
    "t0-ico.com",
    "xn--cinbase-90a.com",
    "xn--metherwalet-ns8ez1g.com",
    "tzero-ico.com",
    "tzero.su",
    "tzero.website",
    "blockstack.network",
    "ico-tzero.com",
    "spectre.site",
    "tzero.pw",
    "spectre-ai.net",
    "xn--waxtokn-y8a.com",
    "dmarket.pro",
    "bittrex.com11648724328774.cf",
    "bittrex.com1987465798.ga",
    "autcus.org",
    "t-zero.org",
    "xn--zero-zxb.com",
    "myetherwalletfork.com",
    "blokclbain.info",
    "datum.sale",
    "spectre-ai.org",
    "powerledgr.com",
    "simpletoken.live",
    "sale.simpletoken.live",
    "qauntstamp.com",
    "raiden-network.com",
    "metalpayme.com",
    "quantstamp-ico.com",
    "myetherwailetclient.com",
    "biockchain.biz",
    "wallets-blockchain.com",
    "golemairdrop.com",
    "omisegoairdrop.net",
    "blodkchainwallet.info",
    "walton-chain.org",
    "elite888-ico.com",
    "bitflyerjp.com",
    "chainlinksmartcontract.com",
    "stormtoken.eu",
    "omise-go.tech",
    "saltending.com",
    "stormltoken.com",
    "xn--quanttamp-42b.com",
    "stormtoken.co",
    "storntoken.com",
    "stromtoken.com",
    "storm-token.com",
    "stormtokens.io",
    "ether-delta.com",
    "ethconnect.live",
    "ethconnect.trade",
    "xn--bttrex-3va.net",
    "quantstamp.com.co",
    "wancha.in",
    "augur-network.com",
    "quantstamp.com.ua",
    "myetherwalletmew.com",
    "myetherumwalletts.com",
    "xn--quanstamp-tmd.com",
    "quantsstamps.com",
    "changellyl.net",
    "xn--myetherwalet-1fb.com",
    "myethereumwallets.com",
    "xn--myetherwalet-e9b.com",
    "quantslamp.com",
    "metelpay.com",
    "xn--eterdelta-m75d.com",
    "linksmartcontract.com",
    "myetherwalletaccess.com",
    "myetherwalletcheck.com",
    "myetherwalletcheck.info",
    "myetherwalletconf.com",
    "myetherwalleteal.com",
    "myetherwalletec.com",
    "myetherwalletgeth.com",
    "myetherwalletmetamask.com",
    "myetherwalletmm.com",
    "myetherwalletmy.com",
    "myetherwalletnh.com",
    "myetherwalletnod.com",
    "myetherwalletrr.com",
    "myetherwalletrty.com",
    "myetherwalletsec.com",
    "myetherwalletsecure.com",
    "myetherwalletutc.com",
    "myetherwalletver.info",
    "myetherwalletview.com",
    "myetherwalletview.info",
    "myetherwalletvrf.com",
    "myetherwalletmist.com",
    "myetherwalletext.com",
    "myetherwalletjson.com",
    "mettalpay.com",
    "bricklblock.io",
    "bittrexy.com",
    "utrust.so",
    "myethierwallet.org",
    "metallpay.com",
    "kraken-wallet.com",
    "dmarkt.io",
    "etherdeltla.com",
    "unlversa.io",
    "universa.sale",
    "mercuryprotocol.live",
    "ripiocredlt.network",
    "myetlherwa11et.com",
    "dentacoin.in",
    "rdrtg.com",
    "myetherwallet.com.rdrgh.com",
    "rdrgh.com",
    "ripiocreditnetwork.co",
    "riaden.network",
    "hydrominer.biz",
    "rdrblock.com",
    "reqest.network",
    "senstoken.com",
    "myetherwallat.services",
    "ripiocredit.net",
    "xn--metherwallet-c06f.com",
    "ico.ripiocredits.com",
    "ripiocredits.com",
    "raidens.network",
    "artoken.co",
    "myetherwalletlgn.com",
    "etherblog.click",
    "stormtoken.site",
    "httpmyetherwallet.com",
    "myetherwalletverify.com",
    "byzantiumfork.com",
    "myetherwallet.com.byzantiumfork.com",
    "www-myethervvallet.com",
    "ether24.info",
    "block-v.io",
    "bittrex.cash",
    "shapishift.io",
    "ripiocerdit.network",
    "rnyetherwa11et.com",
    "claimether.com",
    "enigmatokensale.com",
    "ethereum-org.com",
    "mvetnerwallet.com",
    "myctherwallet.com",
    "myetherwaltet.com",
    "myetherwatlet.com",
    "privatix.me",
    "myetherwalletcnf.com",
    "myetherwalletver.com",
    "privatix.top",
    "privatix.pro",
    "stormtoken.cc",
    "raiden.online",
    "stormstoken.com",
    "myetereumwallet.com",
    "stormtokens.net",
    "myetherwalletconf.info",
    "storrntoken.com",
    "worldofbattles.io",
    "ico.worldofbattles.io",
    "privatix.live",
    "riden.network",
    "raidan.network",
    "ralden.network",
    "mymyetherwallet.com",
    "myetherwallets.net",
    "myetherwalletverify.info",
    "stormxtoken.com",
    "myethereum-wallet.com",
    "myetherwallet-forkprep.pagedemo.co",
    "myetnerwailet.com",
    "www-mvetherwallet.com",
    "etheirdelta.com",
    "myetherwalletiu.com",
    "myetherwaiiett.com",
    "xn--mytherwalet-cbb87i.com",
    "xn--myethrwallet-ivb.co",
    "xn--myeterwallet-f1b.com",
    "myehterwaliet.com",
    "omegaone.co",
    "myetherwaiietw.com",
    "slack.com.ru",
    "polkodot.network",
    "request-network.net",
    "requestnetwork.live",
    "binancie.com",
    "first-eth.info",
    "myewerthwalliet.com",
    "enjincoin.pw",
    "xn--bitrex-k17b.com",
    "alrswap.io",
    "www-request.network",
    "myetnenwallet.com",
    "www-enigma.co",
    "cryptoinsidenews.com",
    "air-swap.tech",
    "launch.airswap.cc",
    "airswap.cc",
    "airswaptoken.com",
    "launch.airswap.in",
    "airswap.in",
    "security-steemit.com.mx",
    "blockchalnwallet.com",
    "blodkchainwallet.com",
    "blodkchaln.com",
    "myethereumwaiiet.com",
    "myethereumwaliet.com",
    "myethereumwalilet.com",
    "myetherswailet.com",
    "myetherswaliet.com",
    "myetherswalilet.com",
    "myetherwalilett.com",
    "myetherwalletl.com",
    "myetherwalletww.com",
    "myethereunwallet.com",
    "myethereumwallct.com",
    "myetherwaiieti.com",
    "myetherwaiiete.com",
    "upfirng.com",
    "paypie.net",
    "paypie.tech",
    "soam.co",
    "myetherwaiict.com",
    "numerai-token.com",
    "www-bankera.com",
    "vvanchain.org",
    "omisegoairdrop.com",
    "xn--enjncoin-41a.io",
    "suncontract.su",
    "myetherwaiietr.com",
    "shapeshiff.io",
    "warchain.org",
    "myethwallett.com",
    "myethervvaliet.com",
    "wanchains.org",
    "etherparty.in",
    "enjincoin.me",
    "etiam.io",
    "invest.smartlands.tech",
    "smartlands.tech",
    "enijncoin.io",
    "wanchain.network",
    "nimiq.su",
    "enjincoin.sale",
    "tenxwallet.io",
    "golem-network.net",
    "myyethwallet.ml",
    "mywetherwailiet.com",
    "omg-omise.com",
    "district0x.tech",
    "centra-token.com",
    "etherdetla.com",
    "etnerparty.io",
    "etherdelta.su",
    "myetherwallett.neocities.org",
    "myetherwallet-secure.com",
    "myethereumwalletntw.info",
    "real-markets.io",
    "wallet-ethereum.org",
    "request-network.com",
    "shapeshifth.io",
    "shiapeshift.in",
    "coin.red-puise.com",
    "ibittreix.com",
    "coinkbase.com",
    "cindicator.pro",
    "myetherwallet.com.ailogin.me",
    "eventchain.co",
    "kinkik.in",
    "myetherumwalletview.com",
    "protostokenhub.com",
    "coinrbase.com",
    "myetherwalletlogin.com",
    "omisegotoken.com",
    "myethereumwalletntw.com",
    "reall.markets",
    "cobinhood.org",
    "cobinhood.io",
    "happy-coin.org",
    "bitfinex.com.co",
    "bitfienex.com",
    "iconn.foundation",
    "centra.vip",
    "smartcontract.live",
    "air-token.com",
    "centra.credit",
    "myetherwallet-singin.com",
    "smartcontractlink.com",
    "shapesshift.io",
    "0xtoken.io",
    "augurproject.co",
    "ethereumus.one",
    "myetherumwalet.com",
    "myetherwalletsignin.com",
    "change-bank.org",
    "charge-bank.com",
    "myetherwalletsingin.com",
    "myetherwalletcontract.com",
    "change-bank.io",
    "chainlink.tech",
    "myetherwallet-confirm.com",
    "tokensale.kybernet.network",
    "kybernet.network",
    "kyberr.network",
    "kybernetwork.io",
    "myetherwalletconfirm.com",
    "kvnuke.github.io",
    "kin.kikpro.co",
    "myethereumwallet.co.uk",
    "tokensale-kyber.network",
    "kyber-network.co",
    "tokensale.kyber-network.co",
    "pyro0.github.io",
    "tokensale.kyber.digital",
    "kyber.digital",
    "omise-go.me",
    "my.etherwallet.com.de",
    "bepartof.change-bank.co",
    "change-bank.co",
    "enigma-tokens.co",
    "coinbase.com.eslogin.co",
    "xn--bittrx-mva.com",
    "ethrdelta.github.io",
    "etherdellta.com",
    "ico-nexus.social",
    "red-pulse.tech",
    "bitj0b.io",
    "xn--bttrex-bwa.com",
    "kin-klk.com",
    "kin-crowdsale.com",
    "ethedelta.com",
    "coindash.su",
    "myethwallet.co.uk",
    "swarm.credit",
    "myethereumwallet.uk",
    "iconexu.social",
    "wanchain.co",
    "enigrna.co",
    "linknetwork.co",
    "qtum-token.com",
    "omisego.com.co",
    "rivetzintl.org",
    "etherdelta.one",
    "the-ether.pro",
    "etherdelta.gitnub.io",
    "kirkik.com",
    "monetha.ltd",
    "vlberate.io",
    "ethereumwallet-kr.info",
    "omise-go.org",
    "iconexus.social",
    "bittirrex.com",
    "aventus.pro",
    "atlant.solutions",
    "aventus.group",
    "metamak.io",
    "omise.com.co",
    "herotokens.io",
    "starbase.pro",
    "etherdelta.githulb.io",
    "herotoken.co",
    "kinico.net",
    "dmarket.ltd",
    "etherdelta.gilthub.io",
    "golem-network.com",
    "etnerscan.io",
    "bllttriex.com",
    "monetha.me",
    "monetha.co",
    "monetha-crowdsale.com",
    "starbase.tech",
    "aventus-crowdsale.com",
    "shapeshift.pro",
    "bllttrex.com",
    "kickico.co",
    "statustoken.im",
    "bilttrex.com",
    "tenxpay.io",
    "bittrex.ltd",
    "metalpay.im",
    "aragon.im",
    "coindash.tech",
    "decentraland.tech",
    "decentraland.pro",
    "status-token.com",
    "bittrex.cam",
    "enigmatoken.com",
    "unocoin.company",
    "unocoin.fund",
    "0xproject.io",
    "0xtoken.com",
    "numerai.tech",
    "decentraiand.org",
    "blockcrein.info",
    "blockchealn.info",
    "bllookchain.info",
    "blockcbhain.info",
    "myetherwallet.com.ethpromonodes.com",
    "mettamask.io",
    "tokenswap.org",
    "netherum.com",
    "etherexx.org",
    "etherume.io",
    "ethereum.plus",
    "ehtereum.org",
    "etereurm.org",
    "etheream.com",
    "ethererum.org",
    "ethereum.io",
    "etherdelta-glthub.com",
    "cryptoalliance.herokuapp.com",
    "bitspark2.com",
    "indorsetoken.com",
    "iconexus.tk",
    "iconexus.ml",
    "iconexus.ga",
    "iconexus.cf",
    "etherwallet.online",
    "wallet-ethereum.net",
    "bitsdigit.com",
    "etherswap.org",
    "eos.ac",
    "uasfwallet.com",
    "ziber.io",
    "multiply-ethereum.info",
    "bittrex.comze.com",
    "karbon.vacau.com",
    "etherdelta.gitlhub.io",
    "etherdelta.glthub.io",
    "digitaldevelopersfund.vacau.com",
    "district-0x.io",
    "coin-dash.com",
    "coindash.ru",
    "district0x.net",
    "aragonproject.io",
    "coin-wallet.info",
    "coinswallet.info",
    "contribute-status.im",
    "ether-api.com",
    "ether-wall.com",
    "mycoinwallet.net",
    "ethereumchamber.com",
    "ethereumchamber.net",
    "ethereumchest.com",
    "ethewallet.com",
    "myetherwallet.com.vc",
    "myetherwallet.com.pe",
    "myetherwallet.us.com",
    "myetherwallet.com.u0387831.cp.regruhosting.ru",
    "myethereumwallet.su",
    "myetherweb.com.de",
    "myetherieumwallet.com",
    "myetehrwallet.com",
    "myeterwalet.com",
    "myetherwaiiet.com",
    "myetherwallet.info",
    "myetherwallet.ch",
    "myetherwallet.om",
    "myethervallet.com",
    "myetherwallet.com.cm",
    "myetherwallet.com.co",
    "myetherwallet.com.de",
    "myetherwallet.com.gl",
    "myetherwallet.com.im",
    "myetherwallet.com.ua",
    "secure-myetherwallet.com",
    "update-myetherwallet.com",
    "wwwmyetherwallet.com",
    "myeatherwallet.com",
    "myetharwallet.com",
    "myelherwallel.com",
    "myetherwaillet.com",
    "myetherwaliet.com",
    "myetherwallel.com",
    "myetherwallet.cam",
    "myetherwallet.cc",
    "myetherwallet.co",
    "myetherwallet.cm",
    "myetherwallet.cz",
    "myetherwallet.org",
    "myetherwallet.tech",
    "myetherwallet.top",
    "myetherwallet.net",
    "myetherwallet.ru.com",
    "myetherwallet.com.ru",
    "metherwallet.com",
    "myetrerwallet.com",
    "myetlerwallet.com",
    "myethterwallet.com",
    "myethwallet.io",
    "myethterwallet.co",
    "myehterwallet.co",
    "myaetherwallet.com",
    "myetthterwallet.com",
    "myetherwallet.one",
    "myelterwallet.com",
    "myetherwallet.gdn",
    "myetherwallt.com",
    "myeterwallet.com",
    "myeteherwallet.com",
    "myethearwailet.com",
    "myetherwallelt.com",
    "myetherwallett.com",
    "etherwallet.org",
    "myetherewallet.com",
    "myeherwallet.com",
    "myethcrwallet.com",
    "myetherwallet.link",
    "myetherwallets.com",
    "myethearwaillet.com",
    "myethearwallet.com",
    "myetherawllet.com",
    "myethereallet.com",
    "myetherswallet.com",
    "myetherwalet.com",
    "myetherwaller.com",
    "myetherwalliet.com",
    "myetherwllet.com",
    "etherwallet.io",
    "myetherwallet.ca",
    "myetherwallet.me",
    "myetherwallet.ru",
    "myetherwallet.xyz",
    "myetherwallte.com",
    "myethirwallet.com",
    "myethrewallet.com",
    "etherwallet.net",
    "maetherwallet.com",
    "meyetherwallet.com",
    "my.ether-wallet.pw",
    "myehterwallet.com",
    "myeitherwallet.com",
    "myelherwallet.com",
    "myeltherwallet.com",
    "myerherwallet.com",
    "myethearwalet.com",
    "myetherewalle.com",
    "myethervvallet.com",
    "myetherwallent.com",
    "myetherwallet.fm",
    "myetherwalllet.com",
    "myetherwalltet.com",
    "myetherwollet.com",
    "myetlherwalet.com",
    "myetlherwallet.com",
    "rnyetherwallet.com",
    "etherclassicwallet.com",
    "omg-omise.co",
    "omise-go.com",
    "omise-go.net",
    "omise-omg.com",
    "omise-go.io",
    "tenx-tech.com",
    "bitclaive.com",
    "tokensale-tenx.tech",
    "ubiqcoin.org",
    "metamask.com",
    "ethtrade.io",
    "myetcwallet.com",
    "account-kigo.net",
    "bitcoin-wallet.net",
    "blocklichan.info",
    "bloclkicihan.info",
    "coindash.ml",
    "eos-bonus.com",
    "eos-io.info",
    "ether-wallet.net",
    "ethereum-wallet.info",
    "ethereum-wallet.net",
    "ethereumchest.net",
    "reservations-kigo.net",
    "reservations-lodgix.com",
    "secure-liverez.com",
    "secure-onerooftop.com",
    "settings-liverez.com",
    "software-liverez.com",
    "software-lodgix.com",
    "unhackableetherwallets.com",
    "www-myetherwallet.com",
    "etherwallet.co.za",
    "etherwalletchain.com",
    "etherwallets.net",
    "etherwallets.nl",
    "my-ethwallet.com",
    "my.ether-wallet.co",
    "myetherwallet.com.am",
    "myetherwallet.com.ht",
    "myetherwalletcom.com",
    "myehterwailet.com",
    "xn--myetherwalle-xoc.com",
    "xn--myetherwalle-44i.com",
    "xn--myetherwalle-xhk.com",
    "xn--myetherwallt-cfb.com",
    "xn--myetherwallt-6tb.com",
    "xn--myetherwallt-xub.com",
    "xn--myetherwallt-ovb.com",
    "xn--myetherwallt-fwb.com",
    "xn--myetherwallt-5wb.com",
    "xn--myetherwallt-jzi.com",
    "xn--myetherwallt-2ck.com",
    "xn--myetherwallt-lok.com",
    "xn--myetherwallt-lsl.com",
    "xn--myetherwallt-ce6f.com",
    "xn--myetherwalet-mcc.com",
    "xn--myetherwalet-xhf.com",
    "xn--myetherwalet-lcc.com",
    "xn--myetherwaet-15ba.com",
    "xn--myetherwalet-whf.com",
    "xn--myetherwaet-v2ea.com",
    "xn--myetherwllet-59a.com",
    "xn--myetherwllet-jbb.com",
    "xn--myetherwllet-wbb.com",
    "xn--myetherwllet-9bb.com",
    "xn--myetherwllet-ncb.com",
    "xn--myetherwllet-0cb.com",
    "xn--myetherwllet-5nb.com",
    "xn--myetherwllet-ktd.com",
    "xn--myetherwllet-mre.com",
    "xn--myetherwllet-76e.com",
    "xn--myetherwllet-o0l.com",
    "xn--myetherwllet-c45f.com",
    "xn--myetherallet-ejn.com",
    "xn--myethewallet-4nf.com",
    "xn--myethewallet-iof.com",
    "xn--myethewallet-mpf.com",
    "xn--myethewallet-6bk.com",
    "xn--myethewallet-i31f.com",
    "xn--myethrwallet-feb.com",
    "xn--myethrwallt-fbbf.com",
    "xn--myethrwallet-seb.com",
    "xn--myethrwallt-rbbf.com",
    "xn--myethrwallet-5eb.com",
    "xn--myethrwallt-3bbf.com",
    "xn--myethrwallet-0tb.com",
    "xn--myethrwallt-tpbf.com",
    "xn--myethrwallet-rub.com",
    "xn--myethrwallt-iqbf.com",
    "xn--myethrwallet-ivb.com",
    "xn--myethrwallt-6qbf.com",
    "xn--myethrwallet-8vb.com",
    "xn--myethrwallt-vrbf.com",
    "xn--myethrwallet-zwb.com",
    "xn--myethrwallt-ksbf.com",
    "xn--myethrwallet-dzi.com",
    "xn--myethrwallt-wbif.com",
    "xn--myethrwallet-wck.com",
    "xn--myethrwallt-skjf.com",
    "xn--myethrwallet-fok.com",
    "xn--myethrwallt-fvjf.com",
    "xn--myethrwallet-fsl.com",
    "xn--myethrwallt-fwkf.com",
    "xn--myethrwallet-5d6f.com",
    "xn--myethrwallt-319ef.com",
    "xn--myeterwallet-ufk.com",
    "xn--myeterwallet-nrl.com",
    "xn--myeterwallet-von.com",
    "xn--myeterwallet-jl6c.com",
    "xn--myeherwallet-ooc.com",
    "xn--myeherwalle-6hci.com",
    "xn--myeherwallet-v4i.com",
    "xn--myeherwalle-zgii.com",
    "xn--myeherwallet-ohk.com",
    "xn--myeherwalle-6oji.com",
    "xn--mytherwallet-ceb.com",
    "xn--mythrwallet-cbbc.com",
    "xn--mythrwallt-c7acf.com",
    "xn--mytherwallet-peb.com",
    "xn--mythrwallet-obbc.com",
    "xn--mythrwallt-n7acf.com",
    "xn--mytherwallet-2eb.com",
    "xn--mythrwallet-0bbc.com",
    "xn--mythrwallt-y7acf.com",
    "xn--mytherwallet-xtb.com",
    "xn--mythrwallet-qpbc.com",
    "xn--mythrwallt-jlbcf.com",
    "xn--mytherwallet-oub.com",
    "xn--mythrwallet-fqbc.com",
    "xn--mythrwallt-5lbcf.com",
    "xn--mythrwallet-3qbc.com",
    "xn--mythrwallt-smbcf.com",
    "xn--mytherwallet-5vb.com",
    "xn--mythrwallet-srbc.com",
    "xn--mythrwallt-fnbcf.com",
    "xn--mytherwallet-wwb.com",
    "xn--mythrwallet-hsbc.com",
    "xn--mythrwallt-1nbcf.com",
    "xn--mytherwallet-9yi.com",
    "xn--mythrwallet-tbic.com",
    "xn--mythrwallt-dnhcf.com",
    "xn--mytherwallet-tck.com",
    "xn--mythrwallet-pkjc.com",
    "xn--mythrwallt-lsicf.com",
    "xn--mytherwallet-cok.com",
    "xn--mythrwallet-cvjc.com",
    "xn--mythrwallt-c2icf.com",
    "xn--mytherwallet-csl.com",
    "xn--mythrwallet-cwkc.com",
    "xn--mythrwallt-c0jcf.com",
    "xn--mytherwallet-2d6f.com",
    "xn--mythrwallet-019ec.com",
    "xn--mythrwallt-yq3ecf.com",
    "xn--metherwallet-qlb.com",
    "xn--metherwallet-1uf.com",
    "xn--metherwallet-iyi.com",
    "xn--metherwallet-zhk.com",
    "xn--metherwallet-3ml.com",
    "xn--mytherwallet-fvb.com",
    "xn--myetherwallt-7db.com",
    "xn--myetherwallt-leb.com",
    "xn--myetherwallt-yeb.com",
    "xn--yetherwallet-vjf.com",
    "xn--yetherwallet-dfk.com",
    "xn--yetherwallet-1t1f.com",
    "xn--yetherwallet-634f.com",
    "xn--myeherwallet-fpc.com",
    "xn--myethewallt-crb.com",
    "xn--metherwallet-1vc.com",
    "xn--myeherwallt-kbb8039g.com",
    "xn--myeherwallet-vk5f.com",
    "xn--yethewallet-iw8ejl.com",
    "xn--bittrx-th8b.com",
    "xn--polniex-n0a.com",
    "thekey.vin",
    "thekey-vip.com",
    "digitexftures.com",
    "ethzero-wallet.org",
    "zeepln.io",
    "wepowers.network",
    "wepower.vision",
    "seele.promo",
    "seele-ico.eu",
    "seele-ico.pro",
    "syncfab.tech",
    "tokensale.syncfab.tech",
    "havven.promo",
    "havven-ico.com",
    "havven-ico.eu",
    "hawen.io",
    "havven.xyz",
    "tomo-coin.io",
    "tomocoln.io",
    "docai.science",
    "tomocoin.network",
    "celsius-ico.network",
    "celsiuss.network",
    "coti.cf",
    "xn--mercadobtcon-mfbd.com",
    "quantstump.com",
    "quantstampcoin.com",
    "quantistamp.com",
    "electrum.com",
    "tronfoundation.us",
    "dav-network.io",
    "pyapay.co",
    "daostack-token.io",
    "icolist.sale",
    "shivom.sale",
    "daostack.onuniverse.com",
    "dav.icocrowdsale.io",
    "myethcrwallet-f.com",
    "myethcrwallet-g.com",
    "myetherewallet.cf",
    "myetherwallet-i.com",
    "myetherwalletc.org",
    "myeterwallct-p.com",
    "myethcrwallct-a.com",
    "myethcrwallet-b.com",
    "myethcrwallet-c.com",
    "myethcrwallet-d.com",
    "myethervvallet.win",
    "myetherwallat.date",
    "myetherwallet.accountant",
    "quarkchain.live",
    "verasiity.co",
    "monerozero.trade",
    "dav.systems",
    "eth.mediumblog.org",
    "ethe.mediumblog.top",
    "claim.ether33.online",
    "any.ether33.online",
    "mediumblog.org",
    "swswd.ether33.online",
    "swdwd.ethers444.online",
    "eth22.mediumblog.top",
    "etoroglobal.com",
    "bcrypto.club",
    "airdrop-bitnational.com",
    "wasabibitcoinwallet.org",
    "xeniumx.com",
    "idex-claim.su",
    "fulcrum.click",
    "bitbank.guru",
    "bitbank.land",
    "fulcrum.run",
    "curve.fm",
    "curve.frl",
    "curve.fyi",
    "curves.fi",
    "curves.exchange",
    "xn--ledgr-9za.com",
    "xn--ledgr-esa.com",
    "xn--leder-b3b.com",
    "xn--ldger-j0a.com",
    "xn--ledgr-7ra.com",
    "xn--ldgr-bpac.com",
    "xn--ledr-xva3d.com",
    "xn--leder-b2a.com",
    "xn--leder-k0b.com",
    "xn--edger-i6a.com",
    "xn--edger-j7a.com",
    "xn--ldger-bsa.app",
    "xn--edger-u6a.com",
    "xn--ledger-bla.com",
    "xn--edger-mnb.com",
    "xn--edger-dqb.com",
    "xn--edger-0ec.com",
    "xn--edger-cj1b.com",
    "xn--edger-oj1b.com",
    "xn--edger-dk1b.com",
    "xn--edger-fe3s.com",
    "xn--edger-sl3s.com",
    "xn--ldger-4ra.com",
    "xn--ldger-hsa.com",
    "xn--ldger-iza.com",
    "xn--ldger-v0a.com",
    "xn--ldger-c6b.com",
    "xn--ldger-bic.com",
    "xn--ldger-vd1b.com",
    "xn--ldger-ke1b.com",
    "xn--ldger-c61b.com",
    "xn--ldger-061b.com",
    "xn--ldger-p71b.com",
    "xn--ldger-we9c.com",
    "xn--leger-6ya.com",
    "xn--leger-9kb.com",
    "xn--leger-tbc.com",
    "xn--leger-6b1b.com",
    "xn--leger-vc1b.com",
    "xn--leger-ol3s.com",
    "xn--leder-m1a.com",
    "xn--leder-nf1b.com",
    "xn--ledgr-ksa.com",
    "xn--ledgr-lza.com",
    "xn--ledgr-m0a.com",
    "xn--ledgr-25b.com",
    "xn--ledgr-8cc.com",
    "xn--ledgr-md1b.com",
    "xn--ledgr-be1b.com",
    "xn--ledgr-ze1b.com",
    "xn--ledgr-f61b.com",
    "xn--ledgr-361b.com",
    "xn--ledgr-s71b.com",
    "xn--ledgr-ze9c.com",
    "xn--ledge-57b.com",
    "xn--ledge-gjc.com",
    "xn--ledge-np1b.com",
    "xn--ledge-cq1b.com",
    "xn--ledge-gm3s.com",
    "xn--ledge-6o3s.com",
    "xn--ldgr-vva2366b.com",
    "xn--ldgr-xva7266b.com",
    "xn--lder-vva5d.com",
    "xn--ldr-krab3d.com",
    "xn--ledqr-9za.com",
    "ledgersupport.io",
    "loldevs.com",
    "curve.si",
    "curve.so",
    "curvefi.io",
    "curwe.fi",
    "lecdger.com",
    "ledcger.com",
    "ledqer.cc",
    "ledgerwalletrestore.com",
    "ledlqer.com",
    "labger.com",
    "xn--edgr-z1a5736b.com",
    "xn--ledger-mcb.com",
    "ledger.com-device.id73457.app",
    "ledger.com-device.id45663.app",
    "ledger.com-device.id46267.app",
    "xn--ledr-dxa0756b.com",
    "ledger-live.org",
    "ledger.com.634644.app",
    "ledger.com.837729.app",
    "ledger.com.565333.app",
    "ledger.com.453455.app",
    "ledger.com.342344.app",
    "ledger.com.device.id.837729.app",
    "ledger.com.device.id.634644.app",
    "ledger.com.device.id.565333.app",
    "ledger.com.device.id.453455.app",
    "ledger.com.device.id.342344.app",
    "ledger.com.device.id.756728.app",
    "ledger.com.device.id.727783.app",
    "ledger.com.device.id.657377.app",
    "ledger.com.device.id.893900.app",
    "ledger.com.device.id.745583.app",
    "ledger.com.device.id.688338.app",
    "ledger.com.device.id.883882.app",
    "ledger.com.device-u23-verification.app",
    "ledger.com.device-e72-verification.app",
    "ledger.com.verification-login-s61.app",
    "ledger.com.acc-verification-login.app",
    "ledger.com.device.id.7537472.app",
    "ledger.com.hardware.id.54656346.app",
    "ledger.com.device.id.6567288.app",
    "ledger.com.hardware.id.953781832.app",
    "xn--ldr-qsa2998aca.com",
    "ledger.com-settings.device-id-45682.app",
    "xn--lede-dxa93a.com",
    "xn--ledr-xva5e.com",
    "ledger.com-settings.device-id-68399.app",
    "xn--lder-vva7e.com",
    "xn--eder-mxa9k.com",
    "ledger.com134678976581.info",
    "ledger.com.login-wallet.app",
    "ledger.com.verification-login.app",
    "ledger.com-login-authorization.app",
    "ledger.com-login-verification.app",
    "balanscer.exchange",
    "xn--ldr-krab5e.com",
    "xn--ledr-nxa8556b.com",
    "ledger.com.login-account.app",
    "ledger.com.wallet-login.app",
    "ledger.com.login-verification.app",
    "ledger.com-login-account.app",
    "ledger.com-login-activity.app",
    "xn--lder-cxa8656b.com",
    "ledger.com1628.support",
    "ledger.com17266548295643.info",
    "ledger.com-login-wallet.app",
    "ledger.com-login-secure.app",
    "ledger.com-activity-login.app",
    "ledger.com-account-login.app",
    "ledger.com-authorization-login.app",
    "ledger.com-verification-login.app",
    "ledger.com1927572.info",
    "ledger.com1829582.info",
    "ledger.com401.support",
    "ledger.com172.support",
    "ledgdr.com",
    "lelger.com",
    "www-ledger.com",
    "ledgerrecovery.com",
    "ledger.com-viewaccount.com",
    "walletconnects.org",
    "walletconnect.com.se",
    "tornadocash.org",
    "login.xn--bockchaln-vpb.com",
    "www.lblhblockchain.com",
    "walletconnecl.org",
    "walletsconnect.host",
    "walletsconnectapp.com",
    "walletsconnect.dev",
    "walletconnectlive.vip",
    "walletsynchronize.live",
    "dropelon.io",
    "givemusk.space",
    "muskx.digital",
    "muskfree.com",
    "muskx.io",
    "uni2021.com",
    "uniaward.net",
    "unipromo.org",
    "unireward.org",
    "uniswap.supply",
    "tlp-invest.com",
    "coinwoz.com",
    "btcdire.com",
    "btcshade.com",
    "lemmexrp.com",
    "smellbit.com",
    "uniwsap.io",
    "uniswnap.io",
    "uniwsap.com",
    "uniswnap.com",
    "app.uniswap.airdrop-token-holder.com",
    "app.uniswap.token-protocol-airdrop.com",
    "uniswap-v3.org",
    "uniswapv2node.net",
    "uniswapv2v1.network",
    "lirbit.com",
    "peetdecentralized.finance",
    "coinmik.com",
    "bitzau.com",
    "yfinew.com",
    "metamaskrestores.link",
    "hohbit.com",
    "metamasksite.live",
    "metamaskwallet.help",
    "imtokenpay.xyz",
    "imtoken.tours",
    "imtoken-1.com",
    "imtokenusa.top",
    "intoken.top",
    "imtokensdt.xyz",
    "imtokeng.com",
    "imtoken-ic.com",
    "imtoken-login.com",
    "imtoken.show",
    "imtokeng.xyz",
    "imtoken.express",
    "imtoken.gold",
    "imtokenh.net",
    "imtoken.zone",
    "imtokens.net",
    "imtoken.la",
    "imtoken.com.cn",
    "www.im-token.cc",
    "imtoken.cn",
    "www.im-token.me",
    "tokenim.com.cn",
    "wallet3.imtokens.live",
    "tokeni.cn",
    "polkastarter.gr.com",
    "polkastarter.world",
    "polkastarter.ltd",
    "polkaslarter.com",
    "polkastarter.cn.com",
    "atomicwalletwebs.net",
    "myeflherwallet.com",
    "pancakeswap.fit",
    "trustwalletts.net",
    "wallectconect.xyz",
    "walletauthentication.org",
    "walletauthenticator.org",
    "wallets-reauthorization.com",
    "walletsecure.app",
    "walletsecureonline.com",
    "walletsecureonline.org",
    "polkastarter.to",
    "polkaastarter.com",
    "polkastarfer.com",
    "polkastarteido.com",
    "polkastarter.app",
    "polkastarter.com.co",
    "polkastarter.community",
    "polkastarter.fun",
    "polkastarter.group",
    "polkastarter.llc",
    "polkastarter.one",
    "polkastarter.trade",
    "polkatsarter.com",
    "polkastarterbonus.live",
    "polkastarterconnect.com",
    "polkastarters.sale",
    "polkastarter.cash",
    "polkastarterapp.com",
    "polka-starter.info",
    "polkastarter.tools",
    "polkarstarter.com",
    "polkalstarter.com",
    "polka-starters.com",
    "polkastarter.de.com",
    "polkasrtarter.com",
    "beefy.financial",
    "fortes.life",
    "mooncakebsc.com",
    "polkastartrer.com",
    "polkastarter.fit",
    "polkastarter.codes",
    "polkastarter.gdn",
    "polkastarter.mom",
    "polllkastarter.com",
    "polkastarter.tel",
    "polkastarter.contact",
    "polkastarter.party",
    "polkastarter.legal",
    "polkastarter.solar",
    "polkastarter.solutions",
    "polkastarter.social",
    "polkastarter.domains",
    "polkastarter.stream",
    "polkastarter.events",
    "polkastarter.watch",
    "polkastarter.bar",
    "polkastarter.media",
    "polkastarter.monster",
    "polkastarter.quest",
    "polkastarter.camp",
    "polkastarter.fyi",
    "polkastarter.futbol",
    "polkastarter.gold",
    "polkastarter.study",
    "polkastarter.com.es",
    "orion-money.sale",
    "polkastarters.one",
    "polkastarter.rehab",
    "gnosis-safe.org",
    "gnosis-airdrop.live",
    "abchange.io",
    "polkasfarter.com",
    "polkastarter.cam",
    "polkastarter.direct",
    "polkastarter.care",
    "polkastarter.directory",
    "polkastarter.express",
    "polkastarter.supply",
    "polkastarter.lighting",
    "polkastarter.auction",
    "polkastarter.cards",
    "polkastarter.computer",
    "polkastarter.sa.com",
    "polkastartre.com",
    "polkastrarter.com",
    "polkastarter.cool",
    "polkastarter.cyou",
    "polkastarter.expert",
    "polkastarter.team",
    "polkastorter.com",
    "polkastarter.homes",
    "polkastarter.farm",
    "polkastarter.wtf",
    "synapseprotocolmigration.com",
    "convexfinance.org",
    "metalmask.me",
    "walletaccesspass.online",
    "dydxexchange.net",
    "aaxswap.com",
    "reposwap.co",
    "eslab.io",
    "bscspin.com",
    "mellobsc.com",
    "chromiacoin.io",
    "wxfi.io",
    "immcoin.io",
    "punketh.io",
    "usdtw.info",
    "xch5.io",
    "dydex.io",
    "velochain.io",
    "charpunk.com",
    "test.com",
    "yui.finance",
    "pupdogeclaim.com",
    "bsctoken.io",
    "payou.finance",
    "alpacaairdrop.live",
    "deapy.org",
    "beezex.net",
    "alicedrop.com",
    "supdao.com",
    "airstack.net",
    "twtloan.com",
    "bscmello.io",
    "key7.net",
    "kryoss.net",
    "bioswap.finance",
    "ff9.io",
    "safemoon-dividend.com",
    "sfar.io",
    "optimism.trade",
    "cowswap.sale",
    "metamask-wallet-security.web.app",
    "lyra.sale",
    "racketpool.com",
    "colabration.cc",
    "revokecash.com",
    "thor.fund",
    "dogaml.net",
    "acros.to",
    "trezor.run",
    "trezor.us",
    "satoshilabs.co",
    "trezornews.io",
    "suite.trezor.run",
    "trezorwallet.org",
    "dapp-fix.net"
  ]
}

      };
    };
  }
  }
}, {package:"@metamask/phishing-warning>eth-phishing-detect",file:"node_modules\\eth-phishing-detect\\src\\config.json",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-phishing-detect\\src\\detector.js", {"fast-levenshtein":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-levenshtein\\levenshtein.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-phishing-detect%5Csrc%5Cdetector.js
      return function (require, module, exports) {
const levenshtein = require('fast-levenshtein')
const DEFAULT_TOLERANCE = 3

class PhishingDetector {

  /**
   * Legacy phishing detector configuration.
   *
   * @typedef {object} LegacyPhishingDetectorConfiguration
   * @property {string[]} [whitelist] - Origins that should not be blocked.
   * @property {string[]} [blacklist] - Origins to block.
   * @property {string[]} [fuzzylist] - Origins of common phishing targets.
   * @property {number} [tolerance] - Tolerance to use for the fuzzylist levenshtein match.
   */

  /**
   * A configuration object for phishing detection.
   *
   * @typedef {object} PhishingDetectorConfiguration
   * @property {string[]} [allowlist] - Origins that should not be blocked.
   * @property {string[]} [blocklist] - Origins to block.
   * @property {string[]} [fuzzylist] - Origins of common phishing targets.
   * @property {string} name - The name of this configuration. Used to explain to users why a site is being blocked.
   * @property {number} [tolerance] - Tolerance to use for the fuzzylist levenshtein match.
   * @property {number} version - The current version of the configuration.
   */

  /**
   * Construct a phishing detector, which can check whether origins are known
   * to be malicious or similar to common phishing targets.
   *
   * A list of configurations is accepted. Each origin checked is processed
   * using each configuration in sequence, so the order defines which
   * configurations take precedence.
   *
   * @param {LegacyPhishingDetectorConfiguration | PhishingDetectorConfiguration[]} opts - Phishing detection options
   */
  constructor (opts) {
    // recommended configuration
    if (Array.isArray(opts)) {
      this.configs = processConfigs(opts)
      this.legacyConfig = false
    // legacy configuration
    } else {
      this.configs = [{
        allowlist: processDomainList(opts.whitelist || []),
        blocklist: processDomainList(opts.blacklist || []),
        fuzzylist: processDomainList(opts.fuzzylist || []),
        tolerance: ('tolerance' in opts) ? opts.tolerance : DEFAULT_TOLERANCE
      }]
      this.legacyConfig = true
    }
  }

  check(domain) {
    const result = this._check(domain)

    if (this.legacyConfig) {
      let legacyType = result.type;
      if (legacyType === 'allowlist') {
        legacyType = 'whitelist'
      } else if (legacyType === 'blocklist') {
        legacyType = 'blacklist'
      }
      return {
        match: result.match,
        result: result.result,
        type: legacyType,
      }
    }
    return result
  }

  _check (domain) {
    let fqdn = domain.substring(domain.length - 1) === "."
      ? domain.slice(0, -1)
      : domain;

    const source = domainToParts(fqdn)

    for (const { allowlist, name, version } of this.configs) {
      // if source matches whitelist domain (or subdomain thereof), PASS
      const whitelistMatch = matchPartsAgainstList(source, allowlist)
      if (whitelistMatch) return { name, result: false, type: 'allowlist', version }
    }

    for (const { blocklist, fuzzylist, name, tolerance, version } of this.configs) {
      // if source matches blacklist domain (or subdomain thereof), FAIL
      const blacklistMatch = matchPartsAgainstList(source, blocklist)
      if (blacklistMatch) return { name, result: true, type: 'blocklist', version }

      if (tolerance > 0) {
        // check if near-match of whitelist domain, FAIL
        let fuzzyForm = domainPartsToFuzzyForm(source)
        // strip www
        fuzzyForm = fuzzyForm.replace('www.', '')
        // check against fuzzylist
        const levenshteinMatched = fuzzylist.find((targetParts) => {
          const fuzzyTarget = domainPartsToFuzzyForm(targetParts)
          const distance = levenshtein.get(fuzzyForm, fuzzyTarget)
          return distance <= tolerance
        })
        if (levenshteinMatched) {
          const match = domainPartsToDomain(levenshteinMatched)
          return { name, match, result: true, type: 'fuzzy', version }
        }
      }
    }

    // matched nothing, PASS
    return { result: false, type: 'all' }
  }

}

module.exports = PhishingDetector

// util

function processConfigs(configs = []) {
  return configs.map((config) => {
    validateConfig(config)
    return Object.assign({}, config, {
      allowlist: processDomainList(config.allowlist || []),
      blocklist: processDomainList(config.blocklist || []),
      fuzzylist: processDomainList(config.fuzzylist || []),
      tolerance: ('tolerance' in config) ? config.tolerance : DEFAULT_TOLERANCE
    })
  });
}

function validateConfig(config) {
  if (config === null || typeof config !== 'object') {
    throw new Error('Invalid config')
  }

  if (config.tolerance && !config.fuzzylist) {
    throw new Error('Fuzzylist tolerance provided without fuzzylist')
  }

  if (
    typeof config.name !== 'string' ||
    config.name === ''
  ) {
    throw new Error("Invalid config parameter: 'name'")
  }

  if (
    !['number', 'string'].includes(typeof config.version) ||
    config.version === ''
  ) {
    throw new Error("Invalid config parameter: 'version'")
  }
}

function processDomainList (list) {
  return list.map(domainToParts)
}

function domainToParts (domain) {
  try {
  return domain.split('.').reverse()
  } catch (e) {
    throw new Error(JSON.stringify(domain))
  }
}

function domainPartsToDomain(domainParts) {
  return domainParts.slice().reverse().join('.')
}

// for fuzzy search, drop TLD and re-stringify
function domainPartsToFuzzyForm(domainParts) {
  return domainParts.slice(1).reverse().join('.')
}

// match the target parts, ignoring extra subdomains on source
//   source: [io, metamask, xyz]
//   target: [io, metamask]
//   result: PASS
function matchPartsAgainstList(source, list) {
  return list.some((target) => {
    // target domain has more parts than source, fail
    if (target.length > source.length) return false
    // source matches target or (is deeper subdomain)
    return target.every((part, index) => source[index] === part)
  })
}

      };
    };
  }
  }
}, {package:"@metamask/phishing-warning>eth-phishing-detect",file:"node_modules\\eth-phishing-detect\\src\\detector.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\dist\\index.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereumjs-abi":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-abi\\index.js","ethereumjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\index.js","tweetnacl":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\tweetnacl\\nacl-fast.js","tweetnacl-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\tweetnacl-util\\nacl-util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cdist%5Cindex.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.recoverTypedSignature_v4 = exports.recoverTypedSignature = exports.signTypedData_v4 = exports.signTypedData = exports.recoverTypedMessage = exports.signTypedMessage = exports.getEncryptionPublicKey = exports.decryptSafely = exports.decrypt = exports.encryptSafely = exports.encrypt = exports.recoverTypedSignatureLegacy = exports.signTypedDataLegacy = exports.typedSignatureHash = exports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = exports.normalize = exports.concatSig = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = void 0;
const ethUtil = __importStar(require("ethereumjs-util"));
const ethAbi = __importStar(require("ethereumjs-abi"));
const nacl = __importStar(require("tweetnacl"));
const naclUtil = __importStar(require("tweetnacl-util"));
const TYPED_MESSAGE_SCHEMA = {
    type: 'object',
    properties: {
        types: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: { type: 'string' },
                        type: { type: 'string' },
                    },
                    required: ['name', 'type'],
                },
            },
        },
        primaryType: { type: 'string' },
        domain: { type: 'object' },
        message: { type: 'object' },
    },
    required: ['types', 'primaryType', 'domain', 'message'],
};
exports.TYPED_MESSAGE_SCHEMA = TYPED_MESSAGE_SCHEMA;
/**
 * A collection of utility functions used for signing typed data
 */
const TypedDataUtils = {
    /**
     * Encodes an object by encoding and concatenating each of its members
     *
     * @param {string} primaryType - Root type
     * @param {Object} data - Object to encode
     * @param {Object} types - Type definitions
     * @returns {Buffer} - Encoded representation of an object
     */
    encodeData(primaryType, data, types, useV4 = true) {
        const encodedTypes = ['bytes32'];
        const encodedValues = [this.hashType(primaryType, types)];
        if (useV4) {
            const encodeField = (name, type, value) => {
                if (types[type] !== undefined) {
                    return [
                        'bytes32',
                        value == null // eslint-disable-line no-eq-null
                            ? '0x0000000000000000000000000000000000000000000000000000000000000000'
                            : ethUtil.keccak(this.encodeData(type, value, types, useV4)),
                    ];
                }
                if (value === undefined) {
                    throw new Error(`missing value for field ${name} of type ${type}`);
                }
                if (type === 'bytes') {
                    return ['bytes32', ethUtil.keccak(value)];
                }
                if (type === 'string') {
                    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex
                    if (typeof value === 'string') {
                        value = Buffer.from(value, 'utf8');
                    }
                    return ['bytes32', ethUtil.keccak(value)];
                }
                if (type.lastIndexOf(']') === type.length - 1) {
                    const parsedType = type.slice(0, type.lastIndexOf('['));
                    const typeValuePairs = value.map((item) => encodeField(name, parsedType, item));
                    return [
                        'bytes32',
                        ethUtil.keccak(ethAbi.rawEncode(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v))),
                    ];
                }
                return [type, value];
            };
            for (const field of types[primaryType]) {
                const [type, value] = encodeField(field.name, field.type, data[field.name]);
                encodedTypes.push(type);
                encodedValues.push(value);
            }
        }
        else {
            for (const field of types[primaryType]) {
                let value = data[field.name];
                if (value !== undefined) {
                    if (field.type === 'bytes') {
                        encodedTypes.push('bytes32');
                        value = ethUtil.keccak(value);
                        encodedValues.push(value);
                    }
                    else if (field.type === 'string') {
                        encodedTypes.push('bytes32');
                        // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex
                        if (typeof value === 'string') {
                            value = Buffer.from(value, 'utf8');
                        }
                        value = ethUtil.keccak(value);
                        encodedValues.push(value);
                    }
                    else if (types[field.type] !== undefined) {
                        encodedTypes.push('bytes32');
                        value = ethUtil.keccak(this.encodeData(field.type, value, types, useV4));
                        encodedValues.push(value);
                    }
                    else if (field.type.lastIndexOf(']') === field.type.length - 1) {
                        throw new Error('Arrays are unimplemented in encodeData; use V4 extension');
                    }
                    else {
                        encodedTypes.push(field.type);
                        encodedValues.push(value);
                    }
                }
            }
        }
        return ethAbi.rawEncode(encodedTypes, encodedValues);
    },
    /**
     * Encodes the type of an object by encoding a comma delimited list of its members
     *
     * @param {string} primaryType - Root type to encode
     * @param {Object} types - Type definitions
     * @returns {string} - Encoded representation of the type of an object
     */
    encodeType(primaryType, types) {
        let result = '';
        let deps = this.findTypeDependencies(primaryType, types).filter((dep) => dep !== primaryType);
        deps = [primaryType].concat(deps.sort());
        for (const type of deps) {
            const children = types[type];
            if (!children) {
                throw new Error(`No type definition specified: ${type}`);
            }
            result += `${type}(${types[type]
                .map(({ name, type: t }) => `${t} ${name}`)
                .join(',')})`;
        }
        return result;
    },
    /**
     * Finds all types within a type definition object
     *
     * @param {string} primaryType - Root type
     * @param {Object} types - Type definitions
     * @param {Array} results - current set of accumulated types
     * @returns {Array} - Set of all types found in the type definition
     */
    findTypeDependencies(primaryType, types, results = []) {
        [primaryType] = primaryType.match(/^\w*/u);
        if (results.includes(primaryType) || types[primaryType] === undefined) {
            return results;
        }
        results.push(primaryType);
        for (const field of types[primaryType]) {
            for (const dep of this.findTypeDependencies(field.type, types, results)) {
                !results.includes(dep) && results.push(dep);
            }
        }
        return results;
    },
    /**
     * Hashes an object
     *
     * @param {string} primaryType - Root type
     * @param {Object} data - Object to hash
     * @param {Object} types - Type definitions
     * @returns {Buffer} - Hash of an object
     */
    hashStruct(primaryType, data, types, useV4 = true) {
        return ethUtil.keccak(this.encodeData(primaryType, data, types, useV4));
    },
    /**
     * Hashes the type of an object
     *
     * @param {string} primaryType - Root type to hash
     * @param {Object} types - Type definitions
     * @returns {Buffer} - Hash of an object
     */
    hashType(primaryType, types) {
        return ethUtil.keccak(this.encodeType(primaryType, types));
    },
    /**
     * Removes properties from a message object that are not defined per EIP-712
     *
     * @param {Object} data - typed message object
     * @returns {Object} - typed message object with only allowed fields
     */
    sanitizeData(data) {
        const sanitizedData = {};
        for (const key in TYPED_MESSAGE_SCHEMA.properties) {
            if (data[key]) {
                sanitizedData[key] = data[key];
            }
        }
        if ('types' in sanitizedData) {
            sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);
        }
        return sanitizedData;
    },
    /**
     * Signs a typed message as per EIP-712 and returns its keccak hash
     *
     * @param {Object} typedData - Types message data to sign
     * @returns {Buffer} - keccak hash of the resulting signed message
     */
    sign(typedData, useV4 = true) {
        const sanitizedData = this.sanitizeData(typedData);
        const parts = [Buffer.from('1901', 'hex')];
        parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));
        if (sanitizedData.primaryType !== 'EIP712Domain') {
            parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));
        }
        return ethUtil.keccak(Buffer.concat(parts));
    },
};
exports.TypedDataUtils = TypedDataUtils;
function concatSig(v, r, s) {
    const rSig = ethUtil.fromSigned(r);
    const sSig = ethUtil.fromSigned(s);
    const vSig = ethUtil.bufferToInt(v);
    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);
    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);
    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));
    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');
}
exports.concatSig = concatSig;
function normalize(input) {
    if (!input) {
        return undefined;
    }
    if (typeof input === 'number') {
        const buffer = ethUtil.toBuffer(input);
        input = ethUtil.bufferToHex(buffer);
    }
    if (typeof input !== 'string') {
        let msg = 'eth-sig-util.normalize() requires hex string or integer input.';
        msg += ` received ${typeof input}: ${input}`;
        throw new Error(msg);
    }
    return ethUtil.addHexPrefix(input.toLowerCase());
}
exports.normalize = normalize;
function personalSign(privateKey, msgParams) {
    const message = ethUtil.toBuffer(msgParams.data);
    const msgHash = ethUtil.hashPersonalMessage(message);
    const sig = ethUtil.ecsign(msgHash, privateKey);
    const serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
    return serialized;
}
exports.personalSign = personalSign;
function recoverPersonalSignature(msgParams) {
    const publicKey = getPublicKeyFor(msgParams);
    const sender = ethUtil.publicToAddress(publicKey);
    const senderHex = ethUtil.bufferToHex(sender);
    return senderHex;
}
exports.recoverPersonalSignature = recoverPersonalSignature;
function extractPublicKey(msgParams) {
    const publicKey = getPublicKeyFor(msgParams);
    return `0x${publicKey.toString('hex')}`;
}
exports.extractPublicKey = extractPublicKey;
function externalTypedSignatureHash(typedData) {
    const hashBuffer = typedSignatureHash(typedData);
    return ethUtil.bufferToHex(hashBuffer);
}
exports.typedSignatureHash = externalTypedSignatureHash;
function signTypedDataLegacy(privateKey, msgParams) {
    const msgHash = typedSignatureHash(msgParams.data);
    const sig = ethUtil.ecsign(msgHash, privateKey);
    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
}
exports.signTypedDataLegacy = signTypedDataLegacy;
function recoverTypedSignatureLegacy(msgParams) {
    const msgHash = typedSignatureHash(msgParams.data);
    const publicKey = recoverPublicKey(msgHash, msgParams.sig);
    const sender = ethUtil.publicToAddress(publicKey);
    return ethUtil.bufferToHex(sender);
}
exports.recoverTypedSignatureLegacy = recoverTypedSignatureLegacy;
function encrypt(receiverPublicKey, msgParams, version) {
    switch (version) {
        case 'x25519-xsalsa20-poly1305': {
            if (typeof msgParams.data !== 'string') {
                throw new Error('Cannot detect secret message, message params should be of the form {data: "secret message"} ');
            }
            // generate ephemeral keypair
            const ephemeralKeyPair = nacl.box.keyPair();
            // assemble encryption parameters - from string to UInt8
            let pubKeyUInt8Array;
            try {
                pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey);
            }
            catch (err) {
                throw new Error('Bad public key');
            }
            const msgParamsUInt8Array = naclUtil.decodeUTF8(msgParams.data);
            const nonce = nacl.randomBytes(nacl.box.nonceLength);
            // encrypt
            const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);
            // handle encrypted data
            const output = {
                version: 'x25519-xsalsa20-poly1305',
                nonce: naclUtil.encodeBase64(nonce),
                ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),
                ciphertext: naclUtil.encodeBase64(encryptedMessage),
            };
            // return encrypted msg data
            return output;
        }
        default:
            throw new Error('Encryption type/version not supported');
    }
}
exports.encrypt = encrypt;
function encryptSafely(receiverPublicKey, msgParams, version) {
    const DEFAULT_PADDING_LENGTH = 2 ** 11;
    const NACL_EXTRA_BYTES = 16;
    const { data } = msgParams;
    if (!data) {
        throw new Error('Cannot encrypt empty msg.data');
    }
    if (typeof data === 'object' && 'toJSON' in data) {
        // remove toJSON attack vector
        // TODO, check all possible children
        throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');
    }
    // add padding
    const dataWithPadding = {
        data,
        padding: '',
    };
    // calculate padding
    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');
    const modVal = dataLength % DEFAULT_PADDING_LENGTH;
    let padLength = 0;
    // Only pad if necessary
    if (modVal > 0) {
        padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes
    }
    dataWithPadding.padding = '0'.repeat(padLength);
    const paddedMsgParams = { data: JSON.stringify(dataWithPadding) };
    return encrypt(receiverPublicKey, paddedMsgParams, version);
}
exports.encryptSafely = encryptSafely;
function decrypt(encryptedData, receiverPrivateKey) {
    switch (encryptedData.version) {
        case 'x25519-xsalsa20-poly1305': {
            // string to buffer to UInt8Array
            const recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);
            const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey;
            // assemble decryption parameters
            const nonce = naclUtil.decodeBase64(encryptedData.nonce);
            const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);
            const ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey);
            // decrypt
            const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);
            // return decrypted msg data
            let output;
            try {
                output = naclUtil.encodeUTF8(decryptedMessage);
            }
            catch (err) {
                throw new Error('Decryption failed.');
            }
            if (output) {
                return output;
            }
            throw new Error('Decryption failed.');
        }
        default:
            throw new Error('Encryption type/version not supported.');
    }
}
exports.decrypt = decrypt;
function decryptSafely(encryptedData, receiverPrivateKey) {
    const dataWithPadding = JSON.parse(decrypt(encryptedData, receiverPrivateKey));
    return dataWithPadding.data;
}
exports.decryptSafely = decryptSafely;
function getEncryptionPublicKey(privateKey) {
    const privateKeyUint8Array = nacl_decodeHex(privateKey);
    const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;
    return naclUtil.encodeBase64(encryptionPublicKey);
}
exports.getEncryptionPublicKey = getEncryptionPublicKey;
/**
 * A generic entry point for all typed data methods to be passed, includes a version parameter.
 */
function signTypedMessage(privateKey, msgParams, version = 'V4') {
    switch (version) {
        case 'V1':
            return signTypedDataLegacy(privateKey, msgParams);
        case 'V3':
            return signTypedData(privateKey, msgParams);
        case 'V4':
        default:
            return signTypedData_v4(privateKey, msgParams);
    }
}
exports.signTypedMessage = signTypedMessage;
function recoverTypedMessage(msgParams, version = 'V4') {
    switch (version) {
        case 'V1':
            return recoverTypedSignatureLegacy(msgParams);
        case 'V3':
            return recoverTypedSignature(msgParams);
        case 'V4':
        default:
            return recoverTypedSignature_v4(msgParams);
    }
}
exports.recoverTypedMessage = recoverTypedMessage;
function signTypedData(privateKey, msgParams) {
    const message = TypedDataUtils.sign(msgParams.data, false);
    const sig = ethUtil.ecsign(message, privateKey);
    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
}
exports.signTypedData = signTypedData;
function signTypedData_v4(privateKey, msgParams) {
    const message = TypedDataUtils.sign(msgParams.data);
    const sig = ethUtil.ecsign(message, privateKey);
    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));
}
exports.signTypedData_v4 = signTypedData_v4;
function recoverTypedSignature(msgParams) {
    const message = TypedDataUtils.sign(msgParams.data, false);
    const publicKey = recoverPublicKey(message, msgParams.sig);
    const sender = ethUtil.publicToAddress(publicKey);
    return ethUtil.bufferToHex(sender);
}
exports.recoverTypedSignature = recoverTypedSignature;
function recoverTypedSignature_v4(msgParams) {
    const message = TypedDataUtils.sign(msgParams.data);
    const publicKey = recoverPublicKey(message, msgParams.sig);
    const sender = ethUtil.publicToAddress(publicKey);
    return ethUtil.bufferToHex(sender);
}
exports.recoverTypedSignature_v4 = recoverTypedSignature_v4;
/**
 * @param typedData - Array of data along with types, as per EIP712.
 * @returns Buffer
 */
function typedSignatureHash(typedData) {
    const error = new Error('Expect argument to be non-empty array');
    if (typeof typedData !== 'object' ||
        !('length' in typedData) ||
        !typedData.length) {
        throw error;
    }
    const data = typedData.map(function (e) {
        return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;
    });
    const types = typedData.map(function (e) {
        return e.type;
    });
    const schema = typedData.map(function (e) {
        if (!e.name) {
            throw error;
        }
        return `${e.type} ${e.name}`;
    });
    return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [
        ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
        ethAbi.soliditySHA3(types, data),
    ]);
}
function recoverPublicKey(hash, sig) {
    const signature = ethUtil.toBuffer(sig);
    const sigParams = ethUtil.fromRpcSig(signature);
    return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);
}
function getPublicKeyFor(msgParams) {
    const message = ethUtil.toBuffer(msgParams.data);
    const msgHash = ethUtil.hashPersonalMessage(message);
    return recoverPublicKey(msgHash, msgParams.sig);
}
function padWithZeroes(number, length) {
    let myString = `${number}`;
    while (myString.length < length) {
        myString = `0${myString}`;
    }
    return myString;
}
// converts hex strings to the Uint8Array format used by nacl
function nacl_decodeHex(msgHex) {
    const msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');
    return naclUtil.decodeBase64(msgBase64);
}

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-sig-util",file:"node_modules\\eth-sig-util\\dist\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\hash-utils.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethereum-cryptography%5Chash-utils.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createHashFunction(hashConstructor) {
    return function (msg) {
        var hash = hashConstructor();
        hash.update(msg);
        return Buffer.from(hash.digest());
    };
}
exports.createHashFunction = createHashFunction;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util>ethereum-cryptography",file:"node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\hash-utils.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\keccak.js", {"./hash-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\hash-utils.js","keccak":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\keccak\\js.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethereum-cryptography%5Ckeccak.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hash_utils_1 = require("./hash-utils");
var createKeccakHash = require("keccak");
exports.keccak224 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak224");
});
exports.keccak256 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak256");
});
exports.keccak384 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak384");
});
exports.keccak512 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak512");
});
//# sourceMappingURL=keccak.js.map
      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util>ethereum-cryptography",file:"node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\keccak.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\random.js", {"randombytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\randombytes\\browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethereum-cryptography%5Crandom.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var randombytes = require("randombytes");
function getRandomBytes(bytes) {
    return new Promise(function (resolve, reject) {
        randombytes(bytes, function (err, resp) {
            if (err) {
                reject(err);
                return;
            }
            resolve(resp);
        });
    });
}
exports.getRandomBytes = getRandomBytes;
function getRandomBytesSync(bytes) {
    return randombytes(bytes);
}
exports.getRandomBytesSync = getRandomBytesSync;
//# sourceMappingURL=random.js.map
      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util>ethereum-cryptography",file:"node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\random.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\secp256k1.js", {"./random":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\random.js","secp256k1":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\secp256k1\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethereum-cryptography%5Csecp256k1.js
      return function (require, module, exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var secp256k1_1 = require("secp256k1");
var random_1 = require("./random");
var SECP256K1_PRIVATE_KEY_SIZE = 32;
function createPrivateKey() {
    return __awaiter(this, void 0, void 0, function () {
        var pk;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!true) return [3 /*break*/, 2];
                    return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
                case 1:
                    pk = _a.sent();
                    if (secp256k1_1.privateKeyVerify(pk)) {
                        return [2 /*return*/, pk];
                    }
                    return [3 /*break*/, 0];
                case 2: return [2 /*return*/];
            }
        });
    });
}
exports.createPrivateKey = createPrivateKey;
function createPrivateKeySync() {
    while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
            return pk;
        }
    }
}
exports.createPrivateKeySync = createPrivateKeySync;
__export(require("secp256k1"));
//# sourceMappingURL=secp256k1.js.map
      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util>ethereum-cryptography",file:"node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\secp256k1.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\index.js", {"./secp256k1-adapter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-adapter.js","assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\assert\\assert.js","bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","create-hash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\create-hash\\browser.js","ethereum-cryptography/keccak":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\keccak.js","ethjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethjs-util\\lib\\index.js","rlp":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\rlp\\dist.browser\\index.js","safe-buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\safe-buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethereumjs-util%5Cdist%5Cindex.js
      return function (require, module, exports) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _require = require('ethereum-cryptography/keccak'),
    keccak224 = _require.keccak224,
    keccak384 = _require.keccak384,
    k256 = _require.keccak256,
    keccak512 = _require.keccak512;

var secp256k1 = require('./secp256k1-adapter');
var assert = require('assert');
var rlp = require('rlp');
var BN = require('bn.js');
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
Object.assign(exports, require('ethjs-util'));

/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

/**
 * Keccak-256 hash of null (a ```String```)
 * @var {String} KECCAK256_NULL_S
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

/**
 * Keccak-256 hash of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_NULL
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
exports.SHA3_NULL = exports.KECCAK256_NULL;

/**
 * Keccak-256 of an RLP of an empty array (a ```String```)
 * @var {String} KECCAK256_RLP_ARRAY_S
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

/**
 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP_ARRAY
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

/**
 * Keccak-256 hash of the RLP of null  (a ```String```)
 * @var {String} KECCAK256_RLP_S
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

/**
 * Keccak-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
exports.SHA3_RLP = exports.KECCAK256_RLP;

/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */
exports.BN = BN;

/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */
exports.rlp = rlp;

/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */
exports.secp256k1 = secp256k1;

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */
exports.zeros = function (bytes) {
  return Buffer.allocUnsafe(bytes).fill(0);
};

/**
  * Returns a zero address
  * @method zeroAddress
  * @return {String}
  */
exports.zeroAddress = function () {
  var addressLength = 20;
  var zeroAddress = exports.zeros(addressLength);
  return exports.bufferToHex(zeroAddress);
};

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */
exports.setLengthLeft = exports.setLength = function (msg, length, right) {
  var buf = exports.zeros(length);
  msg = exports.toBuffer(msg);
  if (right) {
    if (msg.length < length) {
      msg.copy(buf);
      return buf;
    }
    return msg.slice(0, length);
  } else {
    if (msg.length < length) {
      msg.copy(buf, length - msg.length);
      return buf;
    }
    return msg.slice(-length);
  }
};

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */
exports.setLengthRight = function (msg, length) {
  return exports.setLength(msg, length, true);
};

/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */
exports.unpad = exports.stripZeros = function (a) {
  a = exports.stripHexPrefix(a);
  var first = a[0];
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1);
    first = a[0];
  }
  return a;
};
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */
exports.toBuffer = function (v) {
  if (!Buffer.isBuffer(v)) {
    if (Array.isArray(v)) {
      v = Buffer.from(v);
    } else if (typeof v === 'string') {
      if (exports.isHexString(v)) {
        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
      } else {
        v = Buffer.from(v);
      }
    } else if (typeof v === 'number') {
      v = exports.intToBuffer(v);
    } else if (v === null || v === undefined) {
      v = Buffer.allocUnsafe(0);
    } else if (BN.isBN(v)) {
      v = v.toArrayLike(Buffer);
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = Buffer.from(v.toArray());
    } else {
      throw new Error('invalid type');
    }
  }
  return v;
};

/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
  return new BN(exports.toBuffer(buf)).toNumber();
};

/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */
exports.bufferToHex = function (buf) {
  buf = exports.toBuffer(buf);
  return '0x' + buf.toString('hex');
};

/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */
exports.fromSigned = function (num) {
  return new BN(num).fromTwos(256);
};

/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */
exports.toUnsigned = function (num) {
  return Buffer.from(num.toTwos(256).toArray());
};

/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the Keccak width
 * @return {Buffer}
 */
exports.keccak = function (a, bits) {
  a = exports.toBuffer(a);
  if (!bits) bits = 256;

  switch (bits) {
    case 224:
      {
        return keccak224(a);
      }
    case 256:
      {
        return k256(a);
      }
    case 384:
      {
        return keccak384(a);
      }
    case 512:
      {
        return keccak512(a);
      }
    default:
      {
        throw new Error('Invald algorithm: keccak' + bits);
      }
  }
};

/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.keccak256 = function (a) {
  return exports.keccak(a);
};

/**
 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA-3 width
 * @return {Buffer}
 */
exports.sha3 = exports.keccak;

/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.sha256 = function (a) {
  a = exports.toBuffer(a);
  return createHash('sha256').update(a).digest();
};

/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */
exports.ripemd160 = function (a, padded) {
  a = exports.toBuffer(a);
  var hash = createHash('rmd160').update(a).digest();
  if (padded === true) {
    return exports.setLength(hash, 32);
  } else {
    return hash;
  }
};

/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.rlphash = function (a) {
  return exports.keccak(rlp.encode(a));
};

/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */
exports.isValidPrivate = function (privateKey) {
  return secp256k1.privateKeyVerify(privateKey);
};

/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */
exports.isValidPublic = function (publicKey, sanitize) {
  if (publicKey.length === 64) {
    // Convert to SEC1 for secp256k1
    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
  }

  if (!sanitize) {
    return false;
  }

  return secp256k1.publicKeyVerify(publicKey);
};

/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */
exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
  pubKey = exports.toBuffer(pubKey);
  if (sanitize && pubKey.length !== 64) {
    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
  }
  assert(pubKey.length === 64);
  // Only take the lower 160bits of the hash
  return exports.keccak(pubKey).slice(-20);
};

/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
var privateToPublic = exports.privateToPublic = function (privateKey) {
  privateKey = exports.toBuffer(privateKey);
  // skip the type flag and use the X, Y points
  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};

/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */
exports.importPublic = function (publicKey) {
  publicKey = exports.toBuffer(publicKey);
  if (publicKey.length !== 64) {
    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
  }
  return publicKey;
};

/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */
exports.ecsign = function (msgHash, privateKey) {
  var sig = secp256k1.sign(msgHash, privateKey);

  var ret = {};
  ret.r = sig.signature.slice(0, 32);
  ret.s = sig.signature.slice(32, 64);
  ret.v = sig.recovery + 27;
  return ret;
};

/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */
exports.hashPersonalMessage = function (message) {
  var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
  return exports.keccak(Buffer.concat([prefix, message]));
};

/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */
exports.ecrecover = function (msgHash, v, r, s) {
  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
  var recovery = v - 27;
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value');
  }
  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};

/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */
exports.toRpcSig = function (v, r, s) {
  // NOTE: with potential introduction of chainId this might need to be updated
  if (v !== 27 && v !== 28) {
    throw new Error('Invalid recovery id');
  }

  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
};

/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */
exports.fromRpcSig = function (sig) {
  sig = exports.toBuffer(sig);

  // NOTE: with potential introduction of chainId this might need to be updated
  if (sig.length !== 65) {
    throw new Error('Invalid signature length');
  }

  var v = sig[64];
  // support both versions of `eth_sign` responses
  if (v < 27) {
    v += 27;
  }

  return {
    v: v,
    r: sig.slice(0, 32),
    s: sig.slice(32, 64)
  };
};

/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
exports.privateToAddress = function (privateKey) {
  return exports.publicToAddress(privateToPublic(privateKey));
};

/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */
exports.isValidAddress = function (address) {
  return (/^0x[0-9a-fA-F]{40}$/.test(address)
  );
};

/**
  * Checks if a given address is a zero address
  * @method isZeroAddress
  * @param {String} address
  * @return {Boolean}
  */
exports.isZeroAddress = function (address) {
  var zeroAddress = exports.zeroAddress();
  return zeroAddress === exports.addHexPrefix(address);
};

/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */
exports.toChecksumAddress = function (address) {
  address = exports.stripHexPrefix(address).toLowerCase();
  var hash = exports.keccak(address).toString('hex');
  var ret = '0x';

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase();
    } else {
      ret += address[i];
    }
  }

  return ret;
};

/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */
exports.isValidChecksumAddress = function (address) {
  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
};

/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */
exports.generateAddress = function (from, nonce) {
  from = exports.toBuffer(from);
  nonce = new BN(nonce);

  if (nonce.isZero()) {
    // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null;
  } else {
    nonce = Buffer.from(nonce.toArray());
  }

  // Only take the lower 160bits of the hash
  return exports.rlphash([from, nonce]).slice(-20);
};

/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
 * @param {Buffer|String} address
 * @return {Boolean}
 */
exports.isPrecompiled = function (address) {
  var a = exports.unpad(address);
  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};

/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */
exports.addHexPrefix = function (str) {
  if (typeof str !== 'string') {
    return str;
  }

  return exports.isHexPrefixed(str) ? str : '0x' + str;
};

/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */

exports.isValidSignature = function (v, r, s, homestead) {
  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

  if (r.length !== 32 || s.length !== 32) {
    return false;
  }

  if (v !== 27 && v !== 28) {
    return false;
  }

  r = new BN(r);
  s = new BN(s);

  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
    return false;
  }

  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
    return false;
  }

  return true;
};

/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */
exports.baToJSON = function (ba) {
  if (Buffer.isBuffer(ba)) {
    return '0x' + ba.toString('hex');
  } else if (ba instanceof Array) {
    var array = [];
    for (var i = 0; i < ba.length; i++) {
      array.push(exports.baToJSON(ba[i]));
    }
    return array;
  }
};

/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */
exports.defineProperties = function (self, fields, data) {
  self.raw = [];
  self._fields = [];

  // attach the `toJSON`
  self.toJSON = function (label) {
    if (label) {
      var obj = {};
      self._fields.forEach(function (field) {
        obj[field] = '0x' + self[field].toString('hex');
      });
      return obj;
    }
    return exports.baToJSON(this.raw);
  };

  self.serialize = function serialize() {
    return rlp.encode(self.raw);
  };

  fields.forEach(function (field, i) {
    self._fields.push(field.name);
    function getter() {
      return self.raw[i];
    }
    function setter(v) {
      v = exports.toBuffer(v);

      if (v.toString('hex') === '00' && !field.allowZero) {
        v = Buffer.allocUnsafe(0);
      }

      if (field.allowLess && field.length) {
        v = exports.stripZeros(v);
        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
      } else if (!(field.allowZero && v.length === 0) && field.length) {
        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
      }

      self.raw[i] = v;
    }

    Object.defineProperty(self, field.name, {
      enumerable: true,
      configurable: true,
      get: getter,
      set: setter
    });

    if (field.default) {
      self[field.name] = field.default;
    }

    // attach alias
    if (field.alias) {
      Object.defineProperty(self, field.alias, {
        enumerable: false,
        configurable: true,
        set: setter,
        get: getter
      });
    }
  });

  // if the constuctor is passed data
  if (data) {
    if (typeof data === 'string') {
      data = Buffer.from(exports.stripHexPrefix(data), 'hex');
    }

    if (Buffer.isBuffer(data)) {
      data = rlp.decode(data);
    }

    if (Array.isArray(data)) {
      if (data.length > self._fields.length) {
        throw new Error('wrong number of fields in data');
      }

      // make sure all the items are buffers
      data.forEach(function (d, i) {
        self[self._fields[i]] = exports.toBuffer(d);
      });
    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
      var keys = Object.keys(data);
      fields.forEach(function (field) {
        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
      });
    } else {
      throw new Error('invalid data');
    }
  }
};
      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util",file:"node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-adapter.js", {"./secp256k1-lib/der":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\der.js","./secp256k1-lib/index":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\index.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereum-cryptography/secp256k1":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereum-cryptography\\secp256k1.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethereumjs-util%5Cdist%5Csecp256k1-adapter.js
      return function (require, module, exports) {
(function (Buffer){(function (){
'use strict';

var secp256k1 = require('ethereum-cryptography/secp256k1');

function getSecp256k1 () { return require('./secp256k1-lib/index'); }
var der = require('./secp256k1-lib/der');

/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */
var privateKeyVerify = function privateKeyVerify(privateKey) {
  // secp256k1 v4 version throws when privateKey length is not 32
  if (privateKey.length !== 32) {
    return false;
  }

  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
};

/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */
var privateKeyExport = function privateKeyExport(privateKey, compressed) {
  var secp256k1v3 = getSecp256k1();
  // privateKeyExport method is not part of secp256k1 v4 package
  // this implementation is based on v3
  if (privateKey.length !== 32) {
    throw new RangeError('private key length is invalid');
  }

  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);

  return der.privateKeyExport(privateKey, publicKey, compressed);
};

/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */

var privateKeyImport = function privateKeyImport(privateKey) {
  // privateKeyImport method is not part of secp256k1 v4 package
  // this implementation is based on v3
  privateKey = der.privateKeyImport(privateKey);
  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
    return privateKey;
  }

  throw new Error("couldn't import from DER format");
};

/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var privateKeyNegate = function privateKeyNegate(privateKey) {
  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
};

/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var privateKeyModInverse = function privateKeyModInverse(privateKey) {
  if (privateKey.length !== 32) {
    throw new Error('private key length is invalid');
  }
  var secp256k1v3 = getSecp256k1();
  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
};

/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};

/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};

/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};

/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};

/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */
var publicKeyVerify = function publicKeyVerify(publicKey) {
  // secp256k1 v4 version throws when publicKey length is not 33 or 65
  if (publicKey.length !== 33 && publicKey.length !== 65) {
    return false;
  }

  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
};

/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};

/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};

/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
  var keys = [];
  publicKeys.forEach(function (publicKey) {
    keys.push(Uint8Array.from(publicKey));
  });

  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
};

/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureNormalize = function signatureNormalize(signature) {
  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
};

/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureExport = function signatureExport(signature) {
  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
};

/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureImport = function signatureImport(signature) {
  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
};

/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureImportLax = function signatureImportLax(signature) {
  // signatureImportLax method is not part of secp256k1 v4 package
  // this implementation is based on v3
  // ensure that signature is greater than 0
  if (signature.length === 0) {
    throw new RangeError('signature length is invalid');
  }
  var secp256k1v3 = getSecp256k1();

  var sigObj = der.signatureImportLax(signature);
  if (sigObj === null) {
    throw new Error("couldn't parse DER signature");
  }

  return secp256k1v3.signatureImport(sigObj);
};

/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */
var sign = function sign(message, privateKey, options) {
  if (options === null) {
    throw new TypeError('options should be an Object');
  }

  var signOptions = void 0;

  if (options) {
    signOptions = {};

    if (options.data === null) {
      throw new TypeError('options.data should be a Buffer');
    }

    if (options.data) {
      // validate option.data length
      if (options.data.length !== 32) {
        throw new RangeError('options.data length is invalid');
      }

      signOptions.data = new Uint8Array(options.data);
    }

    if (options.noncefn === null) {
      throw new TypeError('options.noncefn should be a Function');
    }

    if (options.noncefn) {
      //  convert option.noncefn function signature
      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
        var bufferAlgo = algo != null ? Buffer.from(algo) : null;
        var bufferData = data != null ? Buffer.from(data) : null;

        var buffer = Buffer.from('');

        if (options.noncefn) {
          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
        }

        return Uint8Array.from(buffer);
      };
    }
  }

  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);

  return {
    signature: Buffer.from(sig.signature),
    recovery: sig.recid
  };
};

/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */
var verify = function verify(message, signature, publicKey) {
  // note: secp256k1 v4 verify method has a different argument order
  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};

/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */
var recover = function recover(message, signature, recid, compressed) {
  // note: secp256k1 v4 recover method has a different argument order
  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};

/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var ecdh = function ecdh(publicKey, privateKey) {
  // note: secp256k1 v3 doesn't allow optional parameter
  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};

/**
 * Compute an EC Diffie-Hellman secret and return public key as result
 * @method ecdhUnsafe
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
  // ecdhUnsafe method is not part of secp256k1 v4 package
  // this implementation is based on v3
  // ensure valid publicKey length
  if (publicKey.length !== 33 && publicKey.length !== 65) {
    throw new RangeError('public key length is invalid');
  }

  // ensure valid privateKey length
  if (privateKey.length !== 32) {
    throw new RangeError('private key length is invalid');
  }
  var secp256k1v3 = getSecp256k1();

  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};

module.exports = {
  privateKeyVerify: privateKeyVerify,
  privateKeyExport: privateKeyExport,
  privateKeyImport: privateKeyImport,
  privateKeyNegate: privateKeyNegate,
  privateKeyModInverse: privateKeyModInverse,
  privateKeyTweakAdd: privateKeyTweakAdd,
  privateKeyTweakMul: privateKeyTweakMul,

  publicKeyCreate: publicKeyCreate,
  publicKeyConvert: publicKeyConvert,
  publicKeyVerify: publicKeyVerify,
  publicKeyTweakAdd: publicKeyTweakAdd,
  publicKeyTweakMul: publicKeyTweakMul,
  publicKeyCombine: publicKeyCombine,

  signatureNormalize: signatureNormalize,
  signatureExport: signatureExport,
  signatureImport: signatureImport,
  signatureImportLax: signatureImportLax,

  sign: sign,
  verify: verify,
  recover: recover,

  ecdh: ecdh,
  ecdhUnsafe: ecdhUnsafe
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util",file:"node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-adapter.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\der.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethereumjs-util%5Cdist%5Csecp256k1-lib%5Cder.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
// begin
0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
// begin
0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

exports.privateKeyExport = function (privateKey, publicKey, compressed) {
  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
  privateKey.copy(result, compressed ? 8 : 9);
  publicKey.copy(result, compressed ? 181 : 214);
  return result;
};

exports.privateKeyImport = function (privateKey) {
  var length = privateKey.length;

  // sequence header
  var index = 0;
  if (length < index + 1 || privateKey[index] !== 0x30) return null;
  index += 1;

  // sequence length constructor
  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;

  var lenb = privateKey[index] & 0x7f;
  index += 1;
  if (lenb < 1 || lenb > 2) return null;
  if (length < index + lenb) return null;

  // sequence length
  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
  index += lenb;
  if (length < index + len) return null;

  // sequence element 0: version number (=1)
  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
    return null;
  }
  index += 3;

  // sequence element 1: octet string, up to 32 bytes
  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
    return null;
  }

  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};

exports.signatureImportLax = function (signature) {
  var r = Buffer.alloc(32, 0);
  var s = Buffer.alloc(32, 0);

  var length = signature.length;
  var index = 0;

  // sequence tag byte
  if (signature[index++] !== 0x30) {
    return null;
  }

  // sequence length byte
  var lenbyte = signature[index++];
  if (lenbyte & 0x80) {
    index += lenbyte - 0x80;
    if (index > length) {
      return null;
    }
  }

  // sequence tag byte for r
  if (signature[index++] !== 0x02) {
    return null;
  }

  // length for r
  var rlen = signature[index++];
  if (rlen & 0x80) {
    lenbyte = rlen - 0x80;
    if (index + lenbyte > length) {
      return null;
    }
    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      rlen = (rlen << 8) + signature[index];
    }
  }
  if (rlen > length - index) {
    return null;
  }
  var rindex = index;
  index += rlen;

  // sequence tag byte for s
  if (signature[index++] !== 0x02) {
    return null;
  }

  // length for s
  var slen = signature[index++];
  if (slen & 0x80) {
    lenbyte = slen - 0x80;
    if (index + lenbyte > length) {
      return null;
    }
    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      slen = (slen << 8) + signature[index];
    }
  }
  if (slen > length - index) {
    return null;
  }
  var sindex = index;
  index += slen;

  // ignore leading zeros in r
  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {}
  // copy r value
  if (rlen > 32) {
    return null;
  }
  var rvalue = signature.slice(rindex, rindex + rlen);
  rvalue.copy(r, 32 - rvalue.length);

  // ignore leading zeros in s
  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {}
  // copy s value
  if (slen > 32) {
    return null;
  }
  var svalue = signature.slice(sindex, sindex + slen);
  svalue.copy(s, 32 - svalue.length);

  return { r: r, s: s };
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util",file:"node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\der.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\index.js", {"bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","elliptic":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\elliptic\\lib\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethereumjs-util%5Cdist%5Csecp256k1-lib%5Cindex.js
      return function (require, module, exports) {
(function (Buffer){(function (){
'use strict';

// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

var BN = require('bn.js');
var EC = require('elliptic').ec;

var ec = new EC('secp256k1');
var ecparams = ec.curve;

exports.privateKeyExport = function (privateKey, compressed) {
  var d = new BN(privateKey);
  if (d.ucmp(ecparams.n) >= 0) {
    throw new Error('couldn\'t export to DER format');
  }

  var point = ec.g.mul(d);
  return toPublicKey(point.getX(), point.getY(), compressed);
};

exports.privateKeyModInverse = function (privateKey) {
  var bn = new BN(privateKey);
  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
    throw new Error('private key range is invalid');
  }

  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
};

exports.signatureImport = function (sigObj) {
  var r = new BN(sigObj.r);
  if (r.ucmp(ecparams.n) >= 0) {
    r = new BN(0);
  }

  var s = new BN(sigObj.s);
  if (s.ucmp(ecparams.n) >= 0) {
    s = new BN(0);
  }

  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
};

exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
  var point = ec.keyFromPublic(publicKey);

  var scalar = new BN(privateKey);
  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
    throw new Error('scalar was invalid (zero or overflow)');
  }

  var shared = point.pub.mul(scalar);
  return toPublicKey(shared.getX(), shared.getY(), compressed);
};

var toPublicKey = function toPublicKey(x, y, compressed) {
  var publicKey = void 0;

  if (compressed) {
    publicKey = Buffer.alloc(33);
    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
  } else {
    publicKey = Buffer.alloc(65);
    publicKey[0] = 0x04;
    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
  }

  return publicKey;
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util",file:"node_modules\\eth-sig-util\\node_modules\\ethereumjs-util\\dist\\secp256k1-lib\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-sig-util\\node_modules\\ethjs-util\\lib\\index.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","is-hex-prefixed":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\is-hex-prefixed\\src\\index.js","strip-hex-prefix":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\strip-hex-prefix\\src\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Ceth-sig-util%5Cnode_modules%5Cethjs-util%5Clib%5Cindex.js
      return function (require, module, exports) {
(function (Buffer){(function (){
'use strict';

var isHexPrefixed = require('is-hex-prefixed');
var stripHexPrefix = require('strip-hex-prefix');

/**
 * Pads a `String` to have an even length
 * @param {String} value
 * @return {String} output
 */
function padToEven(value) {
  var a = value; // eslint-disable-line

  if (typeof a !== 'string') {
    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
  }

  if (a.length % 2) {
    a = '0' + a;
  }

  return a;
}

/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */
function intToHex(i) {
  var hex = i.toString(16); // eslint-disable-line

  return '0x' + hex;
}

/**
 * Converts an `Number` to a `Buffer`
 * @param {Number} i
 * @return {Buffer}
 */
function intToBuffer(i) {
  var hex = intToHex(i);

  return new Buffer(padToEven(hex.slice(2)), 'hex');
}

/**
 * Get the binary size of a string
 * @param {String} str
 * @return {Number}
 */
function getBinarySize(str) {
  if (typeof str !== 'string') {
    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
  }

  return Buffer.byteLength(str, 'utf8');
}

/**
 * Returns TRUE if the first specified array contains all elements
 * from the second one. FALSE otherwise.
 *
 * @param {array} superset
 * @param {array} subset
 *
 * @returns {boolean}
 */
function arrayContainsArray(superset, subset, some) {
  if (Array.isArray(superset) !== true) {
    throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
  }
  if (Array.isArray(subset) !== true) {
    throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
  }

  return subset[Boolean(some) && 'some' || 'every'](function (value) {
    return superset.indexOf(value) >= 0;
  });
}

/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
function toUtf8(hex) {
  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');

  return bufferValue.toString('utf8');
}

/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
function toAscii(hex) {
  var str = ''; // eslint-disable-line
  var i = 0,
      l = hex.length; // eslint-disable-line

  if (hex.substring(0, 2) === '0x') {
    i = 2;
  }

  for (; i < l; i += 2) {
    var code = parseInt(hex.substr(i, 2), 16);
    str += String.fromCharCode(code);
  }

  return str;
}

/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
function fromUtf8(stringValue) {
  var str = new Buffer(stringValue, 'utf8');

  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
}

/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
function fromAscii(stringValue) {
  var hex = ''; // eslint-disable-line
  for (var i = 0; i < stringValue.length; i++) {
    // eslint-disable-line
    var code = stringValue.charCodeAt(i);
    var n = code.toString(16);
    hex += n.length < 2 ? '0' + n : n;
  }

  return '0x' + hex;
}

/**
 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
 *
 * @method getKeys get specific key from inner object array of objects
 * @param {String} params
 * @param {String} key
 * @param {Boolean} allowEmpty
 * @returns {Array} output just a simple array of output keys
 */
function getKeys(params, key, allowEmpty) {
  if (!Array.isArray(params)) {
    throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
  }
  if (typeof key !== 'string') {
    throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
  }

  var result = []; // eslint-disable-line

  for (var i = 0; i < params.length; i++) {
    // eslint-disable-line
    var value = params[i][key]; // eslint-disable-line
    if (allowEmpty && !value) {
      value = '';
    } else if (typeof value !== 'string') {
      throw new Error('invalid abi');
    }
    result.push(value);
  }

  return result;
}

/**
 * Is the string a hex string.
 *
 * @method check if string is hex string of specific length
 * @param {String} value
 * @param {Number} length
 * @returns {Boolean} output the string is a hex string
 */
function isHexString(value, length) {
  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }

  if (length && value.length !== 2 + 2 * length) {
    return false;
  }

  return true;
}

module.exports = {
  arrayContainsArray: arrayContainsArray,
  intToBuffer: intToBuffer,
  getBinarySize: getBinarySize,
  isHexPrefixed: isHexPrefixed,
  stripHexPrefix: stripHexPrefix,
  padToEven: padToEven,
  intToHex: intToHex,
  fromAscii: fromAscii,
  fromUtf8: fromUtf8,
  toAscii: toAscii,
  toUtf8: toUtf8,
  getKeys: getKeys,
  isHexString: isHexString
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-sig-util>ethereumjs-util>ethjs-util",file:"node_modules\\eth-sig-util\\node_modules\\ethjs-util\\lib\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereum-cryptography\\hdkey.js", {"@scure/bip32":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@scure\\bip32\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereum-cryptography%5Chdkey.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HDKey = exports.HARDENED_OFFSET = void 0;
var bip32_1 = require("@scure/bip32");
Object.defineProperty(exports, "HARDENED_OFFSET", { enumerable: true, get: function () { return bip32_1.HARDENED_OFFSET; } });
Object.defineProperty(exports, "HDKey", { enumerable: true, get: function () { return bip32_1.HDKey; } });

      };
    };
  }
  }
}, {package:"@ethereumjs/tx>ethereum-cryptography",file:"node_modules\\ethereum-cryptography\\hdkey.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\index.js", {"bs58check":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bs58check\\index.js","crypto":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\crypto-browserify\\index.js","ethereumjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\index.js","randombytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\randombytes\\browser.js","safe-buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\safe-buffer\\index.js","scryptsy":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\scryptsy\\lib\\scrypt.js","uuid/v4":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\uuid\\v4.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cindex.js
      return function (require, module, exports) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Buffer = require('safe-buffer').Buffer;
var ethUtil = require('ethereumjs-util');
var crypto = require('crypto');
var randomBytes = require('randombytes');
var scryptsy = require('scryptsy');
var uuidv4 = require('uuid/v4');
var bs58check = require('bs58check');

function assert(val, msg) {
  if (!val) {
    throw new Error(msg || 'Assertion failed');
  }
}

function runCipherBuffer(cipher, data) {
  return Buffer.concat([cipher.update(data), cipher.final()]);
}

var Wallet = function Wallet(priv, pub) {
  if (priv && pub) {
    throw new Error('Cannot supply both a private and a public key to the constructor');
  }

  if (priv && !ethUtil.isValidPrivate(priv)) {
    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');
  }

  if (pub && !ethUtil.isValidPublic(pub)) {
    throw new Error('Invalid public key');
  }

  this._privKey = priv;
  this._pubKey = pub;
};

Object.defineProperty(Wallet.prototype, 'privKey', {
  get: function get() {
    assert(this._privKey, 'This is a public key only wallet');
    return this._privKey;
  }
});

Object.defineProperty(Wallet.prototype, 'pubKey', {
  get: function get() {
    if (!this._pubKey) {
      this._pubKey = ethUtil.privateToPublic(this.privKey);
    }
    return this._pubKey;
  }
});

Wallet.generate = function (icapDirect) {
  if (icapDirect) {
    var max = new ethUtil.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);
    while (true) {
      var privKey = randomBytes(32);
      if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {
        return new Wallet(privKey);
      }
    }
  } else {
    return new Wallet(randomBytes(32));
  }
};

Wallet.generateVanityAddress = function (pattern) {
  if ((typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) !== 'object') {
    pattern = new RegExp(pattern);
  }

  while (true) {
    var privKey = randomBytes(32);
    var address = ethUtil.privateToAddress(privKey);

    if (pattern.test(address.toString('hex'))) {
      return new Wallet(privKey);
    }
  }
};

Wallet.prototype.getPrivateKey = function () {
  return this.privKey;
};

Wallet.prototype.getPrivateKeyString = function () {
  return ethUtil.bufferToHex(this.getPrivateKey());
};

Wallet.prototype.getPublicKey = function () {
  return this.pubKey;
};

Wallet.prototype.getPublicKeyString = function () {
  return ethUtil.bufferToHex(this.getPublicKey());
};

Wallet.prototype.getAddress = function () {
  return ethUtil.publicToAddress(this.pubKey);
};

Wallet.prototype.getAddressString = function () {
  return ethUtil.bufferToHex(this.getAddress());
};

Wallet.prototype.getChecksumAddressString = function () {
  return ethUtil.toChecksumAddress(this.getAddressString());
};

// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
Wallet.prototype.toV3 = function (password, opts) {
  assert(this._privKey, 'This is a public key only wallet');

  opts = opts || {};
  var salt = opts.salt || randomBytes(32);
  var iv = opts.iv || randomBytes(16);

  var derivedKey;
  var kdf = opts.kdf || 'scrypt';
  var kdfparams = {
    dklen: opts.dklen || 32,
    salt: salt.toString('hex')
  };

  if (kdf === 'pbkdf2') {
    kdfparams.c = opts.c || 262144;
    kdfparams.prf = 'hmac-sha256';
    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');
  } else if (kdf === 'scrypt') {
    // FIXME: support progress reporting callback
    kdfparams.n = opts.n || 262144;
    kdfparams.r = opts.r || 8;
    kdfparams.p = opts.p || 1;
    derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
  } else {
    throw new Error('Unsupported kdf');
  }

  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);
  if (!cipher) {
    throw new Error('Unsupported cipher');
  }

  var ciphertext = runCipherBuffer(cipher, this.privKey);

  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')]));

  return {
    version: 3,
    id: uuidv4({ random: opts.uuid || randomBytes(16) }),
    address: this.getAddress().toString('hex'),
    crypto: {
      ciphertext: ciphertext.toString('hex'),
      cipherparams: {
        iv: iv.toString('hex')
      },
      cipher: opts.cipher || 'aes-128-ctr',
      kdf: kdf,
      kdfparams: kdfparams,
      mac: mac.toString('hex')
    }
  };
};

Wallet.prototype.getV3Filename = function (timestamp) {
  /*
   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting
   * is a pain in Javascript, everbody knows that. We could use moment.js,
   * but decide to do it manually in order to save space.
   *
   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,
   * but does it really matter?
   *
   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819
   *
   */
  var ts = timestamp ? new Date(timestamp) : new Date();

  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');
};

Wallet.prototype.toV3String = function (password, opts) {
  return JSON.stringify(this.toV3(password, opts));
};

Wallet.fromPublicKey = function (pub, nonStrict) {
  if (nonStrict) {
    pub = ethUtil.importPublic(pub);
  }
  return new Wallet(null, pub);
};

Wallet.fromExtendedPublicKey = function (pub) {
  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');
  pub = bs58check.decode(pub).slice(45);
  // Convert to an Ethereum public key
  return Wallet.fromPublicKey(pub, true);
};

Wallet.fromPrivateKey = function (priv) {
  return new Wallet(priv);
};

Wallet.fromExtendedPrivateKey = function (priv) {
  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');
  var tmp = bs58check.decode(priv);
  assert(tmp[45] === 0, 'Invalid extended private key');
  return Wallet.fromPrivateKey(tmp.slice(46));
};

// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec
Wallet.fromV1 = function (input, password) {
  assert(typeof password === 'string');
  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);

  if (json.Version !== '1') {
    throw new Error('Not a V1 wallet');
  }

  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {
    throw new Error('Unsupported key derivation scheme');
  }

  var kdfparams = json.Crypto.KeyHeader.KdfParams;
  var derivedKey = scryptsy(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);

  var ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');

  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));

  if (mac.toString('hex') !== json.Crypto.MAC) {
    throw new Error('Key derivation failed - possibly wrong passphrase');
  }

  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.keccak256(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));
  var seed = runCipherBuffer(decipher, ciphertext);

  return new Wallet(seed);
};

Wallet.fromV3 = function (input, password, nonStrict) {
  assert(typeof password === 'string');
  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);

  if (json.version !== 3) {
    throw new Error('Not a V3 wallet');
  }

  var derivedKey;
  var kdfparams;
  if (json.crypto.kdf === 'scrypt') {
    kdfparams = json.crypto.kdfparams;

    // FIXME: support progress reporting callback
    derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
  } else if (json.crypto.kdf === 'pbkdf2') {
    kdfparams = json.crypto.kdfparams;

    if (kdfparams.prf !== 'hmac-sha256') {
      throw new Error('Unsupported parameters to PBKDF2');
    }

    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
  } else {
    throw new Error('Unsupported key derivation scheme');
  }

  var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');

  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));
  if (mac.toString('hex') !== json.crypto.mac) {
    throw new Error('Key derivation failed - possibly wrong passphrase');
  }

  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));
  var seed = runCipherBuffer(decipher, ciphertext);

  return new Wallet(seed);
};

/*
 * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py
 * JSON fields: encseed, ethaddr, btcaddr, email
 */
Wallet.fromEthSale = function (input, password) {
  assert(typeof password === 'string');
  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);

  var encseed = Buffer.from(json.encseed, 'hex');

  // key derivation
  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);

  // seed decoding (IV is first 16 bytes)
  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally
  //       see also http://stackoverflow.com/a/31614770/4964819
  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));
  var seed = runCipherBuffer(decipher, encseed.slice(16));

  var wallet = new Wallet(ethUtil.keccak256(seed));
  if (wallet.getAddress().toString('hex') !== json.ethaddr) {
    throw new Error('Decoded key mismatch - possibly wrong passphrase');
  }
  return wallet;
};

module.exports = Wallet;
      };
    };
  }
  }
}, {package:"ethereumjs-wallet",file:"node_modules\\ethereumjs-wallet\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\hash-utils.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereum-cryptography%5Chash-utils.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createHashFunction(hashConstructor) {
    return function (msg) {
        var hash = hashConstructor();
        hash.update(msg);
        return Buffer.from(hash.digest());
    };
}
exports.createHashFunction = createHashFunction;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereum-cryptography",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\hash-utils.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\keccak.js", {"./hash-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\hash-utils.js","keccak":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\keccak\\js.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereum-cryptography%5Ckeccak.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hash_utils_1 = require("./hash-utils");
var createKeccakHash = require("keccak");
exports.keccak224 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak224");
});
exports.keccak256 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak256");
});
exports.keccak384 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak384");
});
exports.keccak512 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak512");
});
//# sourceMappingURL=keccak.js.map
      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereum-cryptography",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\keccak.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\random.js", {"randombytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\randombytes\\browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereum-cryptography%5Crandom.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var randombytes = require("randombytes");
function getRandomBytes(bytes) {
    return new Promise(function (resolve, reject) {
        randombytes(bytes, function (err, resp) {
            if (err) {
                reject(err);
                return;
            }
            resolve(resp);
        });
    });
}
exports.getRandomBytes = getRandomBytes;
function getRandomBytesSync(bytes) {
    return randombytes(bytes);
}
exports.getRandomBytesSync = getRandomBytesSync;
//# sourceMappingURL=random.js.map
      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereum-cryptography",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\random.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\secp256k1.js", {"./random":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\random.js","secp256k1":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\secp256k1\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereum-cryptography%5Csecp256k1.js
      return function (require, module, exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var secp256k1_1 = require("secp256k1");
var random_1 = require("./random");
var SECP256K1_PRIVATE_KEY_SIZE = 32;
function createPrivateKey() {
    return __awaiter(this, void 0, void 0, function () {
        var pk;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!true) return [3 /*break*/, 2];
                    return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
                case 1:
                    pk = _a.sent();
                    if (secp256k1_1.privateKeyVerify(pk)) {
                        return [2 /*return*/, pk];
                    }
                    return [3 /*break*/, 0];
                case 2: return [2 /*return*/];
            }
        });
    });
}
exports.createPrivateKey = createPrivateKey;
function createPrivateKeySync() {
    while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
            return pk;
        }
    }
}
exports.createPrivateKeySync = createPrivateKeySync;
__export(require("secp256k1"));
//# sourceMappingURL=secp256k1.js.map
      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereum-cryptography",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\secp256k1.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\account.js", {"./bytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\bytes.js","./hash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\hash.js","./secp256k1v3-adapter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-adapter.js","assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\assert\\assert.js","bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethjs-util\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Caccount.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;
var assert = require('assert');
var ethjsUtil = require('ethjs-util');
var secp256k1 = require('./secp256k1v3-adapter');
var BN = require("bn.js");
var bytes_1 = require("./bytes");
var hash_1 = require("./hash");
/**
 * Returns a zero address.
 */
exports.zeroAddress = function () {
    var addressLength = 20;
    var addr = bytes_1.zeros(addressLength);
    return bytes_1.bufferToHex(addr);
};
/**
 * Checks if the address is a valid. Accepts checksummed addresses too.
 */
exports.isValidAddress = function (address) {
    return /^0x[0-9a-fA-F]{40}$/.test(address);
};
/**
 * Checks if a given address is a zero address.
 */
exports.isZeroAddress = function (address) {
    var zeroAddr = exports.zeroAddress();
    return zeroAddr === bytes_1.addHexPrefix(address);
};
/**
 * Returns a checksummed address.
 *
 * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
 * has the effect of checksummed addresses for one chain having invalid checksums for others.
 * For more details, consult EIP-1191.
 *
 * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
 * used variation in Ethereum was without the chainId. This may change in the future.
 */
exports.toChecksumAddress = function (address, eip1191ChainId) {
    address = ethjsUtil.stripHexPrefix(address).toLowerCase();
    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
    var hash = hash_1.keccak(prefix + address).toString('hex');
    var ret = '0x';
    for (var i = 0; i < address.length; i++) {
        if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
        }
        else {
            ret += address[i];
        }
    }
    return ret;
};
/**
 * Checks if the address is a valid checksummed address.
 *
 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
 */
exports.isValidChecksumAddress = function (address, eip1191ChainId) {
    return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
};
/**
 * Generates an address of a newly created contract.
 * @param from The address which is creating this new address
 * @param nonce The nonce of the from account
 */
exports.generateAddress = function (from, nonce) {
    from = bytes_1.toBuffer(from);
    var nonceBN = new BN(nonce);
    if (nonceBN.isZero()) {
        // in RLP we want to encode null in the case of zero nonce
        // read the RLP documentation for an answer if you dare
        return hash_1.rlphash([from, null]).slice(-20);
    }
    // Only take the lower 160bits of the hash
    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
};
/**
 * Generates an address for a contract created using CREATE2.
 * @param from The address which is creating this new address
 * @param salt A salt
 * @param initCode The init code of the contract being created
 */
exports.generateAddress2 = function (from, salt, initCode) {
    var fromBuf = bytes_1.toBuffer(from);
    var saltBuf = bytes_1.toBuffer(salt);
    var initCodeBuf = bytes_1.toBuffer(initCode);
    assert(fromBuf.length === 20);
    assert(saltBuf.length === 32);
    var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
    return address.slice(-20);
};
/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium).
 */
exports.isPrecompiled = function (address) {
    var a = bytes_1.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};
/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 */
exports.isValidPrivate = function (privateKey) {
    return secp256k1.privateKeyVerify(privateKey);
};
/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */
exports.isValidPublic = function (publicKey, sanitize) {
    if (sanitize === void 0) { sanitize = false; }
    if (publicKey.length === 64) {
        // Convert to SEC1 for secp256k1
        return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
    }
    if (!sanitize) {
        return false;
    }
    return secp256k1.publicKeyVerify(publicKey);
};
/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */
exports.pubToAddress = function (pubKey, sanitize) {
    if (sanitize === void 0) { sanitize = false; }
    pubKey = bytes_1.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) {
        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
    }
    assert(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return hash_1.keccak(pubKey).slice(-20);
};
exports.publicToAddress = exports.pubToAddress;
/**
 * Returns the ethereum address of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */
exports.privateToAddress = function (privateKey) {
    return exports.publicToAddress(exports.privateToPublic(privateKey));
};
/**
 * Returns the ethereum public key of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */
exports.privateToPublic = function (privateKey) {
    privateKey = bytes_1.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};
/**
 * Converts a public key to the Ethereum format.
 */
exports.importPublic = function (publicKey) {
    publicKey = bytes_1.toBuffer(publicKey);
    if (publicKey.length !== 64) {
        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
    }
    return publicKey;
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\account.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\bytes.js", {"bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethjs-util\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Cbytes.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;
var ethjsUtil = require('ethjs-util');
var BN = require("bn.js");
/**
 * Returns a buffer filled with 0s.
 * @param bytes the number of bytes the buffer should be
 */
exports.zeros = function (bytes) {
    return Buffer.allocUnsafe(bytes).fill(0);
};
/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer|Array)
 * @param length the number of bytes the output should be
 * @param right whether to start padding form the left or right
 * @return (Buffer|Array)
 */
exports.setLengthLeft = function (msg, length, right) {
    if (right === void 0) { right = false; }
    var buf = exports.zeros(length);
    msg = exports.toBuffer(msg);
    if (right) {
        if (msg.length < length) {
            msg.copy(buf);
            return buf;
        }
        return msg.slice(0, length);
    }
    else {
        if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
        }
        return msg.slice(-length);
    }
};
exports.setLength = exports.setLengthLeft;
/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer|Array)
 * @param length the number of bytes the output should be
 * @return (Buffer|Array)
 */
exports.setLengthRight = function (msg, length) {
    return exports.setLength(msg, length, true);
};
/**
 * Trims leading zeros from a `Buffer` or an `Array`.
 * @param a (Buffer|Array|String)
 * @return (Buffer|Array|String)
 */
exports.unpad = function (a) {
    a = ethjsUtil.stripHexPrefix(a);
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
        a = a.slice(1);
        first = a[0];
    }
    return a;
};
exports.stripZeros = exports.unpad;
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param v the value
 */
exports.toBuffer = function (v) {
    if (!Buffer.isBuffer(v)) {
        if (Array.isArray(v)) {
            v = Buffer.from(v);
        }
        else if (typeof v === 'string') {
            if (ethjsUtil.isHexString(v)) {
                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');
            }
            else {
                throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
            }
        }
        else if (typeof v === 'number') {
            v = ethjsUtil.intToBuffer(v);
        }
        else if (v === null || v === undefined) {
            v = Buffer.allocUnsafe(0);
        }
        else if (BN.isBN(v)) {
            v = v.toArrayLike(Buffer);
        }
        else if (v.toArray) {
            // converts a BN to a Buffer
            v = Buffer.from(v.toArray());
        }
        else {
            throw new Error('invalid type');
        }
    }
    return v;
};
/**
 * Converts a `Buffer` to a `Number`.
 * @param buf `Buffer` object to convert
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
    return new BN(exports.toBuffer(buf)).toNumber();
};
/**
 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
 * @param buf `Buffer` object to convert
 */
exports.bufferToHex = function (buf) {
    buf = exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
};
/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param num Signed integer value
 */
exports.fromSigned = function (num) {
    return new BN(num).fromTwos(256);
};
/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param num
 */
exports.toUnsigned = function (num) {
    return Buffer.from(num.toTwos(256).toArray());
};
/**
 * Adds "0x" to a given `String` if it does not already start with "0x".
 */
exports.addHexPrefix = function (str) {
    if (typeof str !== 'string') {
        return str;
    }
    return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;
};
/**
 * Converts a `Buffer` or `Array` to JSON.
 * @param ba (Buffer|Array)
 * @return (Array|String|null)
 */
exports.baToJSON = function (ba) {
    if (Buffer.isBuffer(ba)) {
        return "0x" + ba.toString('hex');
    }
    else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
            array.push(exports.baToJSON(ba[i]));
        }
        return array;
    }
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\bytes.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\constants.js", {"bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Cconstants.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
var BN = require("bn.js");
/**
 * The max integer that this VM can handle
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
/**
 * 2^256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
/**
 * Keccak-256 hash of null
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
/**
 * Keccak-256 hash of null
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
/**
 * Keccak-256 of an RLP of an empty array
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
/**
 * Keccak-256 of an RLP of an empty array
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
/**
 * Keccak-256 hash of the RLP of null
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
/**
 * Keccak-256 hash of the RLP of null
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\hash.js", {"./bytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\bytes.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","create-hash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\create-hash\\browser.js","ethereum-cryptography/keccak":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\keccak.js","ethjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethjs-util\\lib\\index.js","rlp":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\rlp\\dist.browser\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Chash.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;
var _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;
var createHash = require('create-hash');
var ethjsUtil = require('ethjs-util');
var rlp = require("rlp");
var bytes_1 = require("./bytes");
/**
 * Creates Keccak hash of the input
 * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
 * it's interpreted as hexadecimal, otherwise as utf8.
 * @param bits The Keccak width
 */
exports.keccak = function (a, bits) {
    if (bits === void 0) { bits = 256; }
    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {
        a = Buffer.from(a, 'utf8');
    }
    else {
        a = bytes_1.toBuffer(a);
    }
    if (!bits)
        bits = 256;
    switch (bits) {
        case 224: {
            return keccak224(a);
        }
        case 256: {
            return k256(a);
        }
        case 384: {
            return keccak384(a);
        }
        case 512: {
            return keccak512(a);
        }
        default: {
            throw new Error("Invald algorithm: keccak" + bits);
        }
    }
};
/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
 * @param a The input data (Buffer|Array|String|Number)
 */
exports.keccak256 = function (a) {
    return exports.keccak(a);
};
/**
 * Creates SHA256 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 */
exports.sha256 = function (a) {
    a = bytes_1.toBuffer(a);
    return createHash('sha256')
        .update(a)
        .digest();
};
/**
 * Creates RIPEMD160 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 * @param padded Whether it should be padded to 256 bits or not
 */
exports.ripemd160 = function (a, padded) {
    a = bytes_1.toBuffer(a);
    var hash = createHash('rmd160')
        .update(a)
        .digest();
    if (padded === true) {
        return bytes_1.setLength(hash, 32);
    }
    else {
        return hash;
    }
};
/**
 * Creates SHA-3 hash of the RLP encoded version of the input.
 * @param a The input data
 */
exports.rlphash = function (a) {
    return exports.keccak(rlp.encode(a));
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\hash.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\index.js", {"./account":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\account.js","./bytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\bytes.js","./constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\constants.js","./hash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\hash.js","./object":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\object.js","./secp256k1v3-adapter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-adapter.js","./signature":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\signature.js","bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","ethjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethjs-util\\lib\\index.js","rlp":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\rlp\\dist.browser\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.secp256k1 = exports.rlp = exports.BN = void 0;
var secp256k1 = require('./secp256k1v3-adapter');
exports.secp256k1 = secp256k1;
var ethjsUtil = require('ethjs-util');
var BN = require("bn.js");
exports.BN = BN;
var rlp = require("rlp");
exports.rlp = rlp;
Object.assign(exports, ethjsUtil);
/**
 * Constants
 */
__exportStar(require("./constants"), exports);
/**
 * Public-key cryptography (secp256k1) and addresses
 */
__exportStar(require("./account"), exports);
/**
 * Hash functions
 */
__exportStar(require("./hash"), exports);
/**
 * ECDSA signature
 */
__exportStar(require("./signature"), exports);
/**
 * Utilities for manipulating Buffers, byte arrays, etc.
 */
__exportStar(require("./bytes"), exports);
/**
 * Function for definining properties on an object
 */
__exportStar(require("./object"), exports);
//# sourceMappingURL=index.js.map
      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\object.js", {"./bytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\bytes.js","assert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\assert\\assert.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethjs-util\\lib\\index.js","rlp":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\rlp\\dist.browser\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Cobject.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineProperties = void 0;
var assert = require('assert');
var ethjsUtil = require('ethjs-util');
var rlp = require("rlp");
var bytes_1 = require("./bytes");
/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param self the `Object` to define properties on
 * @param fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param data data to be validated against the definitions
 * @deprecated
 */
exports.defineProperties = function (self, fields, data) {
    self.raw = [];
    self._fields = [];
    // attach the `toJSON`
    self.toJSON = function (label) {
        if (label === void 0) { label = false; }
        if (label) {
            var obj_1 = {};
            self._fields.forEach(function (field) {
                obj_1[field] = "0x" + self[field].toString('hex');
            });
            return obj_1;
        }
        return bytes_1.baToJSON(self.raw);
    };
    self.serialize = function serialize() {
        return rlp.encode(self.raw);
    };
    fields.forEach(function (field, i) {
        self._fields.push(field.name);
        function getter() {
            return self.raw[i];
        }
        function setter(v) {
            v = bytes_1.toBuffer(v);
            if (v.toString('hex') === '00' && !field.allowZero) {
                v = Buffer.allocUnsafe(0);
            }
            if (field.allowLess && field.length) {
                v = bytes_1.stripZeros(v);
                assert(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
            }
            else if (!(field.allowZero && v.length === 0) && field.length) {
                assert(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
            }
            self.raw[i] = v;
        }
        Object.defineProperty(self, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter,
        });
        if (field.default) {
            self[field.name] = field.default;
        }
        // attach alias
        if (field.alias) {
            Object.defineProperty(self, field.alias, {
                enumerable: false,
                configurable: true,
                set: setter,
                get: getter,
            });
        }
    });
    // if the constuctor is passed data
    if (data) {
        if (typeof data === 'string') {
            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');
        }
        if (Buffer.isBuffer(data)) {
            data = rlp.decode(data);
        }
        if (Array.isArray(data)) {
            if (data.length > self._fields.length) {
                throw new Error('wrong number of fields in data');
            }
            // make sure all the items are buffers
            data.forEach(function (d, i) {
                self[self._fields[i]] = bytes_1.toBuffer(d);
            });
        }
        else if (typeof data === 'object') {
            var keys_1 = Object.keys(data);
            fields.forEach(function (field) {
                if (keys_1.indexOf(field.name) !== -1)
                    self[field.name] = data[field.name];
                if (keys_1.indexOf(field.alias) !== -1)
                    self[field.alias] = data[field.alias];
            });
        }
        else {
            throw new Error('invalid data');
        }
    }
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\object.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-adapter.js", {"./secp256k1v3-lib/der":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-lib\\der.js","./secp256k1v3-lib/index":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-lib\\index.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereum-cryptography/secp256k1":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereum-cryptography\\secp256k1.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Csecp256k1v3-adapter.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;
var secp256k1 = require('ethereum-cryptography/secp256k1');
var secp256k1v3 = require('./secp256k1v3-lib/index');
var der = require('./secp256k1v3-lib/der');
/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */
exports.privateKeyVerify = function (privateKey) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) {
        return false;
    }
    return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
};
/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */
exports.privateKeyExport = function (privateKey, compressed) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) {
        throw new RangeError('private key length is invalid');
    }
    var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
    return der.privateKeyExport(privateKey, publicKey, compressed);
};
/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
exports.privateKeyImport = function (privateKey) {
    // privateKeyImport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    privateKey = der.privateKeyImport(privateKey);
    if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {
        return privateKey;
    }
    throw new Error("couldn't import from DER format");
};
/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
exports.privateKeyNegate = function (privateKey) {
    return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
};
/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
exports.privateKeyModInverse = function (privateKey) {
    if (privateKey.length !== 32) {
        throw new Error('private key length is invalid');
    }
    return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
};
/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
exports.privateKeyTweakAdd = function (privateKey, tweak) {
    return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};
/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
exports.privateKeyTweakMul = function (privateKey, tweak) {
    return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};
/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyCreate = function (privateKey, compressed) {
    return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};
/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyConvert = function (publicKey, compressed) {
    return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};
/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */
exports.publicKeyVerify = function (publicKey) {
    // secp256k1 v4 version throws when publicKey length is not 33 or 65
    if (publicKey.length !== 33 && publicKey.length !== 65) {
        return false;
    }
    return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
};
/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
    return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
    return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyCombine = function (publicKeys, compressed) {
    var keys = [];
    publicKeys.forEach(function (publicKey) {
        keys.push(Uint8Array.from(publicKey));
    });
    return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
};
/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */
exports.signatureNormalize = function (signature) {
    return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
};
/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */
exports.signatureExport = function (signature) {
    return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */
exports.signatureImport = function (signature) {
    return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */
exports.signatureImportLax = function (signature) {
    // signatureImportLax method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure that signature is greater than 0
    if (signature.length === 0) {
        throw new RangeError('signature length is invalid');
    }
    var sigObj = der.signatureImportLax(signature);
    if (sigObj === null) {
        throw new Error("couldn't parse DER signature");
    }
    return secp256k1v3.signatureImport(sigObj);
};
/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */
exports.sign = function (message, privateKey, options) {
    if (options === null) {
        throw new TypeError('options should be an Object');
    }
    var signOptions = undefined;
    if (options) {
        signOptions = {};
        if (options.data === null) {
            // validate option.data length
            throw new TypeError('options.data should be a Buffer');
        }
        if (options.data) {
            if (options.data.length != 32) {
                throw new RangeError('options.data length is invalid');
            }
            signOptions.data = new Uint8Array(options.data);
        }
        if (options.noncefn === null) {
            throw new TypeError('options.noncefn should be a Function');
        }
        if (options.noncefn) {
            // convert option.noncefn function signature
            signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
                var bufferAlgo = algo != null ? Buffer.from(algo) : null;
                var bufferData = data != null ? Buffer.from(data) : null;
                var buffer = Buffer.from('');
                if (options.noncefn) {
                    buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
                }
                return new Uint8Array(buffer);
            };
        }
    }
    var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
    return {
        signature: Buffer.from(sig.signature),
        recovery: sig.recid,
    };
};
/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */
exports.verify = function (message, signature, publicKey) {
    return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};
/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.recover = function (message, signature, recid, compressed) {
    return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};
/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
exports.ecdh = function (publicKey, privateKey) {
    // note: secp256k1 v3 doesn't allow optional parameter
    return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};
exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
    // ecdhUnsafe method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure valid publicKey length
    if (publicKey.length !== 33 && publicKey.length !== 65) {
        throw new RangeError('public key length is invalid');
    }
    // ensure valid privateKey length
    if (privateKey.length !== 32) {
        throw new RangeError('private key length is invalid');
    }
    return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-adapter.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-lib\\der.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Csecp256k1v3-lib%5Cder.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
Object.defineProperty(exports, "__esModule", { value: true });
var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
    // begin
    0x30,
    0x81,
    0xd3,
    0x02,
    0x01,
    0x01,
    0x04,
    0x20,
    // private key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // middle
    0xa0,
    0x81,
    0x85,
    0x30,
    0x81,
    0x82,
    0x02,
    0x01,
    0x01,
    0x30,
    0x2c,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x01,
    0x01,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xff,
    0xff,
    0xfc,
    0x2f,
    0x30,
    0x06,
    0x04,
    0x01,
    0x00,
    0x04,
    0x01,
    0x07,
    0x04,
    0x21,
    0x02,
    0x79,
    0xbe,
    0x66,
    0x7e,
    0xf9,
    0xdc,
    0xbb,
    0xac,
    0x55,
    0xa0,
    0x62,
    0x95,
    0xce,
    0x87,
    0x0b,
    0x07,
    0x02,
    0x9b,
    0xfc,
    0xdb,
    0x2d,
    0xce,
    0x28,
    0xd9,
    0x59,
    0xf2,
    0x81,
    0x5b,
    0x16,
    0xf8,
    0x17,
    0x98,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xba,
    0xae,
    0xdc,
    0xe6,
    0xaf,
    0x48,
    0xa0,
    0x3b,
    0xbf,
    0xd2,
    0x5e,
    0x8c,
    0xd0,
    0x36,
    0x41,
    0x41,
    0x02,
    0x01,
    0x01,
    0xa1,
    0x24,
    0x03,
    0x22,
    0x00,
    // public key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
]);
var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
    // begin
    0x30,
    0x82,
    0x01,
    0x13,
    0x02,
    0x01,
    0x01,
    0x04,
    0x20,
    // private key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // middle
    0xa0,
    0x81,
    0xa5,
    0x30,
    0x81,
    0xa2,
    0x02,
    0x01,
    0x01,
    0x30,
    0x2c,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x01,
    0x01,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xff,
    0xff,
    0xfc,
    0x2f,
    0x30,
    0x06,
    0x04,
    0x01,
    0x00,
    0x04,
    0x01,
    0x07,
    0x04,
    0x41,
    0x04,
    0x79,
    0xbe,
    0x66,
    0x7e,
    0xf9,
    0xdc,
    0xbb,
    0xac,
    0x55,
    0xa0,
    0x62,
    0x95,
    0xce,
    0x87,
    0x0b,
    0x07,
    0x02,
    0x9b,
    0xfc,
    0xdb,
    0x2d,
    0xce,
    0x28,
    0xd9,
    0x59,
    0xf2,
    0x81,
    0x5b,
    0x16,
    0xf8,
    0x17,
    0x98,
    0x48,
    0x3a,
    0xda,
    0x77,
    0x26,
    0xa3,
    0xc4,
    0x65,
    0x5d,
    0xa4,
    0xfb,
    0xfc,
    0x0e,
    0x11,
    0x08,
    0xa8,
    0xfd,
    0x17,
    0xb4,
    0x48,
    0xa6,
    0x85,
    0x54,
    0x19,
    0x9c,
    0x47,
    0xd0,
    0x8f,
    0xfb,
    0x10,
    0xd4,
    0xb8,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xba,
    0xae,
    0xdc,
    0xe6,
    0xaf,
    0x48,
    0xa0,
    0x3b,
    0xbf,
    0xd2,
    0x5e,
    0x8c,
    0xd0,
    0x36,
    0x41,
    0x41,
    0x02,
    0x01,
    0x01,
    0xa1,
    0x44,
    0x03,
    0x42,
    0x00,
    // public key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
]);
exports.privateKeyExport = function (privateKey, publicKey, compressed) {
    if (compressed === void 0) { compressed = true; }
    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
    privateKey.copy(result, compressed ? 8 : 9);
    publicKey.copy(result, compressed ? 181 : 214);
    return result;
};
exports.privateKeyImport = function (privateKey) {
    var length = privateKey.length;
    // sequence header
    var index = 0;
    if (length < index + 1 || privateKey[index] !== 0x30)
        return null;
    index += 1;
    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 0x80))
        return null;
    var lenb = privateKey[index] & 0x7f;
    index += 1;
    if (lenb < 1 || lenb > 2)
        return null;
    if (length < index + lenb)
        return null;
    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
    index += lenb;
    if (length < index + len)
        return null;
    // sequence element 0: version number (=1)
    if (length < index + 3 ||
        privateKey[index] !== 0x02 ||
        privateKey[index + 1] !== 0x01 ||
        privateKey[index + 2] !== 0x01) {
        return null;
    }
    index += 3;
    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 ||
        privateKey[index] !== 0x04 ||
        privateKey[index + 1] > 0x20 ||
        length < index + 2 + privateKey[index + 1]) {
        return null;
    }
    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};
exports.signatureImportLax = function (signature) {
    var r = Buffer.alloc(32, 0);
    var s = Buffer.alloc(32, 0);
    var length = signature.length;
    var index = 0;
    // sequence tag byte
    if (signature[index++] !== 0x30) {
        return null;
    }
    // sequence length byte
    var lenbyte = signature[index++];
    if (lenbyte & 0x80) {
        index += lenbyte - 0x80;
        if (index > length) {
            return null;
        }
    }
    // sequence tag byte for r
    if (signature[index++] !== 0x02) {
        return null;
    }
    // length for r
    var rlen = signature[index++];
    if (rlen & 0x80) {
        lenbyte = rlen - 0x80;
        if (index + lenbyte > length) {
            return null;
        }
        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
            ;
        for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
            rlen = (rlen << 8) + signature[index];
    }
    if (rlen > length - index) {
        return null;
    }
    var rindex = index;
    index += rlen;
    // sequence tag byte for s
    if (signature[index++] !== 0x02) {
        return null;
    }
    // length for s
    var slen = signature[index++];
    if (slen & 0x80) {
        lenbyte = slen - 0x80;
        if (index + lenbyte > length) {
            return null;
        }
        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
            ;
        for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
            slen = (slen << 8) + signature[index];
    }
    if (slen > length - index) {
        return null;
    }
    var sindex = index;
    index += slen;
    // ignore leading zeros in r
    for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1)
        ;
    // copy r value
    if (rlen > 32) {
        return null;
    }
    var rvalue = signature.slice(rindex, rindex + rlen);
    rvalue.copy(r, 32 - rvalue.length);
    // ignore leading zeros in s
    for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1)
        ;
    // copy s value
    if (slen > 32) {
        return null;
    }
    var svalue = signature.slice(sindex, sindex + slen);
    svalue.copy(s, 32 - svalue.length);
    return { r: r, s: s };
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-lib\\der.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-lib\\index.js", {"bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","elliptic":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\elliptic\\lib\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Csecp256k1v3-lib%5Cindex.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
Object.defineProperty(exports, "__esModule", { value: true });
var BN = require("bn.js");
var EC = require('elliptic').ec;
var ec = new EC('secp256k1');
var ecparams = ec.curve;
exports.privateKeyExport = function (privateKey, compressed) {
    if (compressed === void 0) { compressed = true; }
    var d = new BN(privateKey);
    if (d.ucmp(ecparams.n) >= 0) {
        throw new Error("couldn't export to DER format");
    }
    var point = ec.g.mul(d);
    return toPublicKey(point.getX(), point.getY(), compressed);
};
exports.privateKeyModInverse = function (privateKey) {
    var bn = new BN(privateKey);
    if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
        throw new Error('private key range is invalid');
    }
    return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
};
exports.signatureImport = function (sigObj) {
    var r = new BN(sigObj.r);
    if (r.ucmp(ecparams.n) >= 0) {
        r = new BN(0);
    }
    var s = new BN(sigObj.s);
    if (s.ucmp(ecparams.n) >= 0) {
        s = new BN(0);
    }
    return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
};
exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
    if (compressed === void 0) { compressed = true; }
    var point = ec.keyFromPublic(publicKey);
    var scalar = new BN(privateKey);
    if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
        throw new Error('scalar was invalid (zero or overflow)');
    }
    var shared = point.pub.mul(scalar);
    return toPublicKey(shared.getX(), shared.getY(), compressed);
};
var toPublicKey = function (x, y, compressed) {
    var publicKey;
    if (compressed) {
        publicKey = Buffer.alloc(33);
        publicKey[0] = y.isOdd() ? 0x03 : 0x02;
        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
    }
    else {
        publicKey = Buffer.alloc(65);
        publicKey[0] = 0x04;
        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
        y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
    }
    return publicKey;
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-lib\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\signature.js", {"./bytes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\bytes.js","./hash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\hash.js","./secp256k1v3-adapter":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\secp256k1v3-adapter.js","bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethereumjs-util%5Cdist%5Csignature.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
var secp256k1 = require('./secp256k1v3-adapter');
var BN = require("bn.js");
var bytes_1 = require("./bytes");
var hash_1 = require("./hash");
/**
 * Returns the ECDSA signature of a message hash.
 */
exports.ecsign = function (msgHash, privateKey, chainId) {
    var sig = secp256k1.sign(msgHash, privateKey);
    var recovery = sig.recovery;
    var ret = {
        r: sig.signature.slice(0, 32),
        s: sig.signature.slice(32, 64),
        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,
    };
    return ret;
};
/**
 * ECDSA public key recovery from signature.
 * @returns Recovered public key
 */
exports.ecrecover = function (msgHash, v, r, s, chainId) {
    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};
/**
 * Convert signature parameters into the format of `eth_sign` RPC method.
 * @returns Signature
 */
exports.toRpcSig = function (v, r, s, chainId) {
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
};
/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 */
exports.fromRpcSig = function (sig) {
    var buf = bytes_1.toBuffer(sig);
    // NOTE: with potential introduction of chainId this might need to be updated
    if (buf.length !== 65) {
        throw new Error('Invalid signature length');
    }
    var v = buf[64];
    // support both versions of `eth_sign` responses
    if (v < 27) {
        v += 27;
    }
    return {
        v: v,
        r: buf.slice(0, 32),
        s: buf.slice(32, 64),
    };
};
/**
 * Validate a ECDSA signature.
 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
 */
exports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
    if (homesteadOrLater === void 0) { homesteadOrLater = true; }
    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
    if (r.length !== 32 || s.length !== 32) {
        return false;
    }
    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
    }
    var rBN = new BN(r);
    var sBN = new BN(s);
    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
    }
    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
    }
    return true;
};
/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 */
exports.hashPersonalMessage = function (message) {
    var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
    return hash_1.keccak(Buffer.concat([prefix, message]));
};
function calculateSigRecovery(v, chainId) {
    return chainId ? v - (2 * chainId + 35) : v - 27;
}
function isValidSigRecovery(recovery) {
    return recovery === 0 || recovery === 1;
}

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\signature.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethjs-util\\lib\\index.js", {"buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","is-hex-prefixed":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\is-hex-prefixed\\src\\index.js","strip-hex-prefix":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\strip-hex-prefix\\src\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cethjs-util%5Clib%5Cindex.js
      return function (require, module, exports) {
(function (Buffer){(function (){
'use strict';

var isHexPrefixed = require('is-hex-prefixed');
var stripHexPrefix = require('strip-hex-prefix');

/**
 * Pads a `String` to have an even length
 * @param {String} value
 * @return {String} output
 */
function padToEven(value) {
  var a = value; // eslint-disable-line

  if (typeof a !== 'string') {
    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
  }

  if (a.length % 2) {
    a = '0' + a;
  }

  return a;
}

/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */
function intToHex(i) {
  var hex = i.toString(16); // eslint-disable-line

  return '0x' + hex;
}

/**
 * Converts an `Number` to a `Buffer`
 * @param {Number} i
 * @return {Buffer}
 */
function intToBuffer(i) {
  var hex = intToHex(i);

  return new Buffer(padToEven(hex.slice(2)), 'hex');
}

/**
 * Get the binary size of a string
 * @param {String} str
 * @return {Number}
 */
function getBinarySize(str) {
  if (typeof str !== 'string') {
    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
  }

  return Buffer.byteLength(str, 'utf8');
}

/**
 * Returns TRUE if the first specified array contains all elements
 * from the second one. FALSE otherwise.
 *
 * @param {array} superset
 * @param {array} subset
 *
 * @returns {boolean}
 */
function arrayContainsArray(superset, subset, some) {
  if (Array.isArray(superset) !== true) {
    throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
  }
  if (Array.isArray(subset) !== true) {
    throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
  }

  return subset[Boolean(some) && 'some' || 'every'](function (value) {
    return superset.indexOf(value) >= 0;
  });
}

/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
function toUtf8(hex) {
  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');

  return bufferValue.toString('utf8');
}

/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
function toAscii(hex) {
  var str = ''; // eslint-disable-line
  var i = 0,
      l = hex.length; // eslint-disable-line

  if (hex.substring(0, 2) === '0x') {
    i = 2;
  }

  for (; i < l; i += 2) {
    var code = parseInt(hex.substr(i, 2), 16);
    str += String.fromCharCode(code);
  }

  return str;
}

/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
function fromUtf8(stringValue) {
  var str = new Buffer(stringValue, 'utf8');

  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
}

/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
function fromAscii(stringValue) {
  var hex = ''; // eslint-disable-line
  for (var i = 0; i < stringValue.length; i++) {
    // eslint-disable-line
    var code = stringValue.charCodeAt(i);
    var n = code.toString(16);
    hex += n.length < 2 ? '0' + n : n;
  }

  return '0x' + hex;
}

/**
 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
 *
 * @method getKeys get specific key from inner object array of objects
 * @param {String} params
 * @param {String} key
 * @param {Boolean} allowEmpty
 * @returns {Array} output just a simple array of output keys
 */
function getKeys(params, key, allowEmpty) {
  if (!Array.isArray(params)) {
    throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
  }
  if (typeof key !== 'string') {
    throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
  }

  var result = []; // eslint-disable-line

  for (var i = 0; i < params.length; i++) {
    // eslint-disable-line
    var value = params[i][key]; // eslint-disable-line
    if (allowEmpty && !value) {
      value = '';
    } else if (typeof value !== 'string') {
      throw new Error('invalid abi');
    }
    result.push(value);
  }

  return result;
}

/**
 * Is the string a hex string.
 *
 * @method check if string is hex string of specific length
 * @param {String} value
 * @param {Number} length
 * @returns {Boolean} output the string is a hex string
 */
function isHexString(value, length) {
  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }

  if (length && value.length !== 2 + 2 * length) {
    return false;
  }

  return true;
}

module.exports = {
  arrayContainsArray: arrayContainsArray,
  intToBuffer: intToBuffer,
  getBinarySize: getBinarySize,
  isHexPrefixed: isHexPrefixed,
  stripHexPrefix: stripHexPrefix,
  padToEven: padToEven,
  intToHex: intToHex,
  fromAscii: fromAscii,
  fromUtf8: fromUtf8,
  toAscii: toAscii,
  toUtf8: toUtf8,
  getKeys: getKeys,
  isHexString: isHexString
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>ethereumjs-util>ethjs-util",file:"node_modules\\ethereumjs-wallet\\node_modules\\ethjs-util\\lib\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\uuid\\lib\\bytesToUuid.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cuuid%5Clib%5CbytesToUuid.js
      return function (require, module, exports) {
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]]
  ]).join('');
}

module.exports = bytesToUuid;

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>uuid",file:"node_modules\\ethereumjs-wallet\\node_modules\\uuid\\lib\\bytesToUuid.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\uuid\\lib\\rng-browser.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cuuid%5Clib%5Crng-browser.js
      return function (require, module, exports) {
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>uuid",file:"node_modules\\ethereumjs-wallet\\node_modules\\uuid\\lib\\rng-browser.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\uuid\\v4.js", {"./lib/bytesToUuid":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\uuid\\lib\\bytesToUuid.js","./lib/rng":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\uuid\\lib\\rng-browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cnode_modules%5Cuuid%5Cv4.js
      return function (require, module, exports) {
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

      };
    };
  }
  }
}, {package:"ethereumjs-wallet>uuid",file:"node_modules\\ethereumjs-wallet\\node_modules\\uuid\\v4.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\thirdparty.js", {"./index.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\index.js","aes-js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\aes-js\\index.js","crypto":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\crypto-browserify\\index.js","ethereumjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-wallet\\node_modules\\ethereumjs-util\\dist\\index.js","safe-buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\safe-buffer\\index.js","scryptsy":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\scryptsy\\lib\\scrypt.js","utf8":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\utf8\\utf8.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cethereumjs-wallet%5Cthirdparty.js
      return function (require, module, exports) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Wallet = require('./index.js');
var ethUtil = require('ethereumjs-util');
var crypto = require('crypto');
var scryptsy = require('scryptsy');
var utf8 = require('utf8');
var aesjs = require('aes-js');
var Buffer = require('safe-buffer').Buffer;

function assert(val, msg) {
  if (!val) {
    throw new Error(msg || 'Assertion failed');
  }
}

function runCipherBuffer(cipher, data) {
  return Buffer.concat([cipher.update(data), cipher.final()]);
}

var Thirdparty = {};

/*
 * opts:
 * - digest - digest algorithm, defaults to md5
 * - count - hash iterations
 * - keysize - desired key size
 * - ivsize - desired IV size
 *
 * Algorithm form https://www.openssl.org/docs/manmaster/crypto/EVP_BytesToKey.html
 *
 * FIXME: not optimised at all
 */
function evp_kdf(data, salt, opts) {
  // eslint-disable-line
  // A single EVP iteration, returns `D_i`, where block equlas to `D_(i-1)`
  function iter(block) {
    var hash = crypto.createHash(opts.digest || 'md5');
    hash.update(block);
    hash.update(data);
    hash.update(salt);
    block = hash.digest();

    for (var i = 1; i < (opts.count || 1); i++) {
      hash = crypto.createHash(opts.digest || 'md5');
      hash.update(block);
      block = hash.digest();
    }

    return block;
  }

  var keysize = opts.keysize || 16;
  var ivsize = opts.ivsize || 16;

  var ret = [];

  var i = 0;
  while (Buffer.concat(ret).length < keysize + ivsize) {
    ret[i] = iter(i === 0 ? Buffer.alloc(0) : ret[i - 1]);
    i++;
  }

  var tmp = Buffer.concat(ret);

  return {
    key: tmp.slice(0, keysize),
    iv: tmp.slice(keysize, keysize + ivsize)
  };
}

// http://stackoverflow.com/questions/25288311/cryptojs-aes-pattern-always-ends-with
function decodeCryptojsSalt(input) {
  var ciphertext = Buffer.from(input, 'base64');
  if (ciphertext.slice(0, 8).toString() === 'Salted__') {
    return {
      salt: ciphertext.slice(8, 16),
      ciphertext: ciphertext.slice(16)
    };
  } else {
    return {
      ciphertext: ciphertext
    };
  }
}

/*
 * This wallet format is created by https://github.com/SilentCicero/ethereumjs-accounts
 * and used on https://www.myetherwallet.com/
 */
Thirdparty.fromEtherWallet = function (input, password) {
  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);

  var privKey;
  if (!json.locked) {
    if (json.private.length !== 64) {
      throw new Error('Invalid private key length');
    }

    privKey = Buffer.from(json.private, 'hex');
  } else {
    if (typeof password !== 'string') {
      throw new Error('Password required');
    }
    if (password.length < 7) {
      throw new Error('Password must be at least 7 characters');
    }

    // the "encrypted" version has the low 4 bytes
    // of the hash of the address appended
    var cipher = json.encrypted ? json.private.slice(0, 128) : json.private;

    // decode openssl ciphertext + salt encoding
    cipher = decodeCryptojsSalt(cipher);

    if (!cipher.salt) {
      throw new Error('Unsupported EtherWallet key format');
    }

    // derive key/iv using OpenSSL EVP as implemented in CryptoJS
    var evp = evp_kdf(Buffer.from(password), cipher.salt, { keysize: 32, ivsize: 16 });

    var decipher = crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);
    privKey = runCipherBuffer(decipher, Buffer.from(cipher.ciphertext));

    // NOTE: yes, they've run it through UTF8
    privKey = Buffer.from(utf8.decode(privKey.toString()), 'hex');
  }

  var wallet = new Wallet(privKey);

  if (wallet.getAddressString() !== json.address) {
    throw new Error('Invalid private key or address');
  }

  return wallet;
};

Thirdparty.fromEtherCamp = function (passphrase) {
  return new Wallet(ethUtil.keccak256(Buffer.from(passphrase)));
};

Thirdparty.fromKryptoKit = function (entropy, password) {
  function kryptoKitBrokenScryptSeed(buf) {
    // js-scrypt calls `Buffer.from(String(salt), 'utf8')` on the seed even though it is a buffer
    //
    // The `buffer`` implementation used does the below transformation (doesn't matches the current version):
    // https://github.com/feross/buffer/blob/67c61181b938b17d10dbfc0a545f713b8bd59de8/index.js

    function decodeUtf8Char(str) {
      try {
        return decodeURIComponent(str);
      } catch (err) {
        return String.fromCharCode(0xFFFD); // UTF 8 invalid char
      }
    }

    var res = '';
    var tmp = '';

    for (var i = 0; i < buf.length; i++) {
      if (buf[i] <= 0x7F) {
        res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
        tmp = '';
      } else {
        tmp += '%' + buf[i].toString(16);
      }
    }

    return Buffer.from(res + decodeUtf8Char(tmp));
  }

  if (entropy[0] === '#') {
    entropy = entropy.slice(1);
  }

  var type = entropy[0];
  entropy = entropy.slice(1);

  var privKey;
  if (type === 'd') {
    privKey = ethUtil.sha256(Buffer.from(entropy));
  } else if (type === 'q') {
    if (typeof password !== 'string') {
      throw new Error('Password required');
    }

    var encryptedSeed = ethUtil.sha256(Buffer.from(entropy.slice(0, 30)));
    var checksum = entropy.slice(30, 46);

    var salt = kryptoKitBrokenScryptSeed(encryptedSeed);
    var aesKey = scryptsy(Buffer.from(password, 'utf8'), salt, 16384, 8, 1, 32);

    /* FIXME: try to use `crypto` instead of `aesjs`
     // NOTE: ECB doesn't use the IV, so it can be anything
    var decipher = crypto.createDecipheriv("aes-256-ecb", aesKey, Buffer.from(0))
     // FIXME: this is a clear abuse, but seems to match how ECB in aesjs works
    privKey = Buffer.concat([
      decipher.update(encryptedSeed).slice(0, 16),
      decipher.update(encryptedSeed).slice(0, 16),
    ])
    */

    /* eslint-disable new-cap */
    var decipher = new aesjs.ModeOfOperation.ecb(aesKey);
    /* eslint-enable new-cap */
    /* decrypt returns an Uint8Array, perhaps there is a better way to concatenate */
    privKey = Buffer.concat([Buffer.from(decipher.decrypt(encryptedSeed.slice(0, 16))), Buffer.from(decipher.decrypt(encryptedSeed.slice(16, 32)))]);

    if (checksum.length > 0) {
      if (checksum !== ethUtil.sha256(ethUtil.sha256(privKey)).slice(0, 8).toString('hex')) {
        throw new Error('Failed to decrypt input - possibly invalid passphrase');
      }
    }
  } else {
    throw new Error('Unsupported or invalid entropy type');
  }

  return new Wallet(privKey);
};

Thirdparty.fromQuorumWallet = function (passphrase, userid) {
  assert(passphrase.length >= 10);
  assert(userid.length >= 10);

  var seed = passphrase + userid;
  seed = crypto.pbkdf2Sync(seed, seed, 2000, 32, 'sha256');

  return new Wallet(seed);
};

module.exports = Thirdparty;
      };
    };
  }
  }
}, {package:"ethereumjs-wallet",file:"node_modules\\ethereumjs-wallet\\thirdparty.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\core.js", {"./helpers.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\helpers.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cfast-json-patch%5Ccommonjs%5Ccore.js
      return function (require, module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_js_1 = require("./helpers.js");
exports.JsonPatchError = helpers_js_1.PatchError;
exports.deepClone = helpers_js_1._deepClone;
/* We use a Javascript hash to store each
 function. Each hash entry (property) uses
 the operation identifiers specified in rfc6902.
 In this way, we can map each patch operation
 to its dedicated function in efficient way.
 */
/* The operations applicable to an object */
var objOps = {
    add: function (obj, key, document) {
        obj[key] = this.value;
        return { newDocument: document };
    },
    remove: function (obj, key, document) {
        var removed = obj[key];
        delete obj[key];
        return { newDocument: document, removed: removed };
    },
    replace: function (obj, key, document) {
        var removed = obj[key];
        obj[key] = this.value;
        return { newDocument: document, removed: removed };
    },
    move: function (obj, key, document) {
        /* in case move target overwrites an existing value,
        return the removed value, this can be taxing performance-wise,
        and is potentially unneeded */
        var removed = getValueByPointer(document, this.path);
        if (removed) {
            removed = helpers_js_1._deepClone(removed);
        }
        var originalValue = applyOperation(document, { op: "remove", path: this.from }).removed;
        applyOperation(document, { op: "add", path: this.path, value: originalValue });
        return { newDocument: document, removed: removed };
    },
    copy: function (obj, key, document) {
        var valueToCopy = getValueByPointer(document, this.from);
        // enforce copy by value so further operations don't affect source (see issue #177)
        applyOperation(document, { op: "add", path: this.path, value: helpers_js_1._deepClone(valueToCopy) });
        return { newDocument: document };
    },
    test: function (obj, key, document) {
        return { newDocument: document, test: _areEquals(obj[key], this.value) };
    },
    _get: function (obj, key, document) {
        this.value = obj[key];
        return { newDocument: document };
    }
};
/* The operations applicable to an array. Many are the same as for the object */
var arrOps = {
    add: function (arr, i, document) {
        if (helpers_js_1.isInteger(i)) {
            arr.splice(i, 0, this.value);
        }
        else { // array props
            arr[i] = this.value;
        }
        // this may be needed when using '-' in an array
        return { newDocument: document, index: i };
    },
    remove: function (arr, i, document) {
        var removedList = arr.splice(i, 1);
        return { newDocument: document, removed: removedList[0] };
    },
    replace: function (arr, i, document) {
        var removed = arr[i];
        arr[i] = this.value;
        return { newDocument: document, removed: removed };
    },
    move: objOps.move,
    copy: objOps.copy,
    test: objOps.test,
    _get: objOps._get
};
/**
 * Retrieves a value from a JSON document by a JSON pointer.
 * Returns the value.
 *
 * @param document The document to get the value from
 * @param pointer an escaped JSON pointer
 * @return The retrieved value
 */
function getValueByPointer(document, pointer) {
    if (pointer == '') {
        return document;
    }
    var getOriginalDestination = { op: "_get", path: pointer };
    applyOperation(document, getOriginalDestination);
    return getOriginalDestination.value;
}
exports.getValueByPointer = getValueByPointer;
/**
 * Apply a single JSON Patch Operation on a JSON document.
 * Returns the {newDocument, result} of the operation.
 * It modifies the `document` and `operation` objects - it gets the values by reference.
 * If you would like to avoid touching your values, clone them:
 * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.
 *
 * @param document The document to patch
 * @param operation The operation to apply
 * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
 * @param mutateDocument Whether to mutate the original document or clone it before applying
 * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
 * @return `{newDocument, result}` after the operation
 */
function applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {
    if (validateOperation === void 0) { validateOperation = false; }
    if (mutateDocument === void 0) { mutateDocument = true; }
    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }
    if (index === void 0) { index = 0; }
    if (validateOperation) {
        if (typeof validateOperation == 'function') {
            validateOperation(operation, 0, document, operation.path);
        }
        else {
            validator(operation, 0);
        }
    }
    /* ROOT OPERATIONS */
    if (operation.path === "") {
        var returnValue = { newDocument: document };
        if (operation.op === 'add') {
            returnValue.newDocument = operation.value;
            return returnValue;
        }
        else if (operation.op === 'replace') {
            returnValue.newDocument = operation.value;
            returnValue.removed = document; //document we removed
            return returnValue;
        }
        else if (operation.op === 'move' || operation.op === 'copy') { // it's a move or copy to root
            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field
            if (operation.op === 'move') { // report removed item
                returnValue.removed = document;
            }
            return returnValue;
        }
        else if (operation.op === 'test') {
            returnValue.test = _areEquals(document, operation.value);
            if (returnValue.test === false) {
                throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
            }
            returnValue.newDocument = document;
            return returnValue;
        }
        else if (operation.op === 'remove') { // a remove on root
            returnValue.removed = document;
            returnValue.newDocument = null;
            return returnValue;
        }
        else if (operation.op === '_get') {
            operation.value = document;
            return returnValue;
        }
        else { /* bad operation */
            if (validateOperation) {
                throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
            }
            else {
                return returnValue;
            }
        }
    } /* END ROOT OPERATIONS */
    else {
        if (!mutateDocument) {
            document = helpers_js_1._deepClone(document);
        }
        var path = operation.path || "";
        var keys = path.split('/');
        var obj = document;
        var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift
        var len = keys.length;
        var existingPathFragment = undefined;
        var key = void 0;
        var validateFunction = void 0;
        if (typeof validateOperation == 'function') {
            validateFunction = validateOperation;
        }
        else {
            validateFunction = validator;
        }
        while (true) {
            key = keys[t];
            if (key && key.indexOf('~') != -1) {
                key = helpers_js_1.unescapePathComponent(key);
            }
            if (banPrototypeModifications &&
                (key == '__proto__' ||
                    (key == 'prototype' && t > 0 && keys[t - 1] == 'constructor'))) {
                throw new TypeError('JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');
            }
            if (validateOperation) {
                if (existingPathFragment === undefined) {
                    if (obj[key] === undefined) {
                        existingPathFragment = keys.slice(0, t).join('/');
                    }
                    else if (t == len - 1) {
                        existingPathFragment = operation.path;
                    }
                    if (existingPathFragment !== undefined) {
                        validateFunction(operation, 0, document, existingPathFragment);
                    }
                }
            }
            t++;
            if (Array.isArray(obj)) {
                if (key === '-') {
                    key = obj.length;
                }
                else {
                    if (validateOperation && !helpers_js_1.isInteger(key)) {
                        throw new exports.JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index, operation, document);
                    } // only parse key when it's an integer for `arr.prop` to work
                    else if (helpers_js_1.isInteger(key)) {
                        key = ~~key;
                    }
                }
                if (t >= len) {
                    if (validateOperation && operation.op === "add" && key > obj.length) {
                        throw new exports.JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index, operation, document);
                    }
                    var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch
                    if (returnValue.test === false) {
                        throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
                    }
                    return returnValue;
                }
            }
            else {
                if (t >= len) {
                    var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch
                    if (returnValue.test === false) {
                        throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
                    }
                    return returnValue;
                }
            }
            obj = obj[key];
            // If we have more keys in the path, but the next value isn't a non-null object,
            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.
            if (validateOperation && t < len && (!obj || typeof obj !== "object")) {
                throw new exports.JsonPatchError('Cannot perform operation at the desired path', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);
            }
        }
    }
}
exports.applyOperation = applyOperation;
/**
 * Apply a full JSON Patch array on a JSON document.
 * Returns the {newDocument, result} of the patch.
 * It modifies the `document` object and `patch` - it gets the values by reference.
 * If you would like to avoid touching your values, clone them:
 * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.
 *
 * @param document The document to patch
 * @param patch The patch to apply
 * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
 * @param mutateDocument Whether to mutate the original document or clone it before applying
 * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
 * @return An array of `{newDocument, result}` after the patch
 */
function applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {
    if (mutateDocument === void 0) { mutateDocument = true; }
    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }
    if (validateOperation) {
        if (!Array.isArray(patch)) {
            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
        }
    }
    if (!mutateDocument) {
        document = helpers_js_1._deepClone(document);
    }
    var results = new Array(patch.length);
    for (var i = 0, length_1 = patch.length; i < length_1; i++) {
        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`
        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);
        document = results[i].newDocument; // in case root was replaced
    }
    results.newDocument = document;
    return results;
}
exports.applyPatch = applyPatch;
/**
 * Apply a single JSON Patch Operation on a JSON document.
 * Returns the updated document.
 * Suitable as a reducer.
 *
 * @param document The document to patch
 * @param operation The operation to apply
 * @return The updated document
 */
function applyReducer(document, operation, index) {
    var operationResult = applyOperation(document, operation);
    if (operationResult.test === false) { // failed test
        throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
    }
    return operationResult.newDocument;
}
exports.applyReducer = applyReducer;
/**
 * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.
 * @param {object} operation - operation object (patch)
 * @param {number} index - index of operation in the sequence
 * @param {object} [document] - object where the operation is supposed to be applied
 * @param {string} [existingPathFragment] - comes along with `document`
 */
function validator(operation, index, document, existingPathFragment) {
    if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {
        throw new exports.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);
    }
    else if (!objOps[operation.op]) {
        throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
    }
    else if (typeof operation.path !== 'string') {
        throw new exports.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);
    }
    else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {
        // paths that aren't empty string should start with "/"
        throw new exports.JsonPatchError('Operation `path` property must start with "/"', 'OPERATION_PATH_INVALID', index, operation, document);
    }
    else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {
        throw new exports.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);
    }
    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {
        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);
    }
    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_js_1.hasUndefined(operation.value)) {
        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);
    }
    else if (document) {
        if (operation.op == "add") {
            var pathLen = operation.path.split("/").length;
            var existingPathLen = existingPathFragment.split("/").length;
            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
                throw new exports.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);
            }
        }
        else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {
            if (operation.path !== existingPathFragment) {
                throw new exports.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);
            }
        }
        else if (operation.op === 'move' || operation.op === 'copy') {
            var existingValue = { op: "_get", path: operation.from, value: undefined };
            var error = validate([existingValue], document);
            if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {
                throw new exports.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);
            }
        }
    }
}
exports.validator = validator;
/**
 * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.
 * If error is encountered, returns a JsonPatchError object
 * @param sequence
 * @param document
 * @returns {JsonPatchError|undefined}
 */
function validate(sequence, document, externalValidator) {
    try {
        if (!Array.isArray(sequence)) {
            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
        }
        if (document) {
            //clone document and sequence so that we can safely try applying operations
            applyPatch(helpers_js_1._deepClone(document), helpers_js_1._deepClone(sequence), externalValidator || true);
        }
        else {
            externalValidator = externalValidator || validator;
            for (var i = 0; i < sequence.length; i++) {
                externalValidator(sequence[i], i, document, undefined);
            }
        }
    }
    catch (e) {
        if (e instanceof exports.JsonPatchError) {
            return e;
        }
        else {
            throw e;
        }
    }
}
exports.validate = validate;
// based on https://github.com/epoberezkin/fast-deep-equal
// MIT License
// Copyright (c) 2017 Evgeny Poberezkin
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
function _areEquals(a, b) {
    if (a === b)
        return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;
        if (arrA && arrB) {
            length = a.length;
            if (length != b.length)
                return false;
            for (i = length; i-- !== 0;)
                if (!_areEquals(a[i], b[i]))
                    return false;
            return true;
        }
        if (arrA != arrB)
            return false;
        var keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
            return false;
        for (i = length; i-- !== 0;)
            if (!b.hasOwnProperty(keys[i]))
                return false;
        for (i = length; i-- !== 0;) {
            key = keys[i];
            if (!_areEquals(a[key], b[key]))
                return false;
        }
        return true;
    }
    return a !== a && b !== b;
}
exports._areEquals = _areEquals;
;

      };
    };
  }
  }
}, {package:"fast-json-patch",file:"node_modules\\fast-json-patch\\commonjs\\core.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\duplex.js", {"./core.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\core.js","./helpers.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\helpers.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cfast-json-patch%5Ccommonjs%5Cduplex.js
      return function (require, module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017-2021 Joachim Wester
 * MIT license
 */
var helpers_js_1 = require("./helpers.js");
var core_js_1 = require("./core.js");
var beforeDict = new WeakMap();
var Mirror = /** @class */ (function () {
    function Mirror(obj) {
        this.observers = new Map();
        this.obj = obj;
    }
    return Mirror;
}());
var ObserverInfo = /** @class */ (function () {
    function ObserverInfo(callback, observer) {
        this.callback = callback;
        this.observer = observer;
    }
    return ObserverInfo;
}());
function getMirror(obj) {
    return beforeDict.get(obj);
}
function getObserverFromMirror(mirror, callback) {
    return mirror.observers.get(callback);
}
function removeObserverFromMirror(mirror, observer) {
    mirror.observers.delete(observer.callback);
}
/**
 * Detach an observer from an object
 */
function unobserve(root, observer) {
    observer.unobserve();
}
exports.unobserve = unobserve;
/**
 * Observes changes made to an object, which can then be retrieved using generate
 */
function observe(obj, callback) {
    var patches = [];
    var observer;
    var mirror = getMirror(obj);
    if (!mirror) {
        mirror = new Mirror(obj);
        beforeDict.set(obj, mirror);
    }
    else {
        var observerInfo = getObserverFromMirror(mirror, callback);
        observer = observerInfo && observerInfo.observer;
    }
    if (observer) {
        return observer;
    }
    observer = {};
    mirror.value = helpers_js_1._deepClone(obj);
    if (callback) {
        observer.callback = callback;
        observer.next = null;
        var dirtyCheck = function () {
            generate(observer);
        };
        var fastCheck = function () {
            clearTimeout(observer.next);
            observer.next = setTimeout(dirtyCheck);
        };
        if (typeof window !== 'undefined') { //not Node
            window.addEventListener('mouseup', fastCheck);
            window.addEventListener('keyup', fastCheck);
            window.addEventListener('mousedown', fastCheck);
            window.addEventListener('keydown', fastCheck);
            window.addEventListener('change', fastCheck);
        }
    }
    observer.patches = patches;
    observer.object = obj;
    observer.unobserve = function () {
        generate(observer);
        clearTimeout(observer.next);
        removeObserverFromMirror(mirror, observer);
        if (typeof window !== 'undefined') {
            window.removeEventListener('mouseup', fastCheck);
            window.removeEventListener('keyup', fastCheck);
            window.removeEventListener('mousedown', fastCheck);
            window.removeEventListener('keydown', fastCheck);
            window.removeEventListener('change', fastCheck);
        }
    };
    mirror.observers.set(callback, new ObserverInfo(callback, observer));
    return observer;
}
exports.observe = observe;
/**
 * Generate an array of patches from an observer
 */
function generate(observer, invertible) {
    if (invertible === void 0) { invertible = false; }
    var mirror = beforeDict.get(observer.object);
    _generate(mirror.value, observer.object, observer.patches, "", invertible);
    if (observer.patches.length) {
        core_js_1.applyPatch(mirror.value, observer.patches);
    }
    var temp = observer.patches;
    if (temp.length > 0) {
        observer.patches = [];
        if (observer.callback) {
            observer.callback(temp);
        }
    }
    return temp;
}
exports.generate = generate;
// Dirty check if obj is different from mirror, generate patches and update mirror
function _generate(mirror, obj, patches, path, invertible) {
    if (obj === mirror) {
        return;
    }
    if (typeof obj.toJSON === "function") {
        obj = obj.toJSON();
    }
    var newKeys = helpers_js_1._objectKeys(obj);
    var oldKeys = helpers_js_1._objectKeys(mirror);
    var changed = false;
    var deleted = false;
    //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"
    for (var t = oldKeys.length - 1; t >= 0; t--) {
        var key = oldKeys[t];
        var oldVal = mirror[key];
        if (helpers_js_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
            var newVal = obj[key];
            if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {
                _generate(oldVal, newVal, patches, path + "/" + helpers_js_1.escapePathComponent(key), invertible);
            }
            else {
                if (oldVal !== newVal) {
                    changed = true;
                    if (invertible) {
                        patches.push({ op: "test", path: path + "/" + helpers_js_1.escapePathComponent(key), value: helpers_js_1._deepClone(oldVal) });
                    }
                    patches.push({ op: "replace", path: path + "/" + helpers_js_1.escapePathComponent(key), value: helpers_js_1._deepClone(newVal) });
                }
            }
        }
        else if (Array.isArray(mirror) === Array.isArray(obj)) {
            if (invertible) {
                patches.push({ op: "test", path: path + "/" + helpers_js_1.escapePathComponent(key), value: helpers_js_1._deepClone(oldVal) });
            }
            patches.push({ op: "remove", path: path + "/" + helpers_js_1.escapePathComponent(key) });
            deleted = true; // property has been deleted
        }
        else {
            if (invertible) {
                patches.push({ op: "test", path: path, value: mirror });
            }
            patches.push({ op: "replace", path: path, value: obj });
            changed = true;
        }
    }
    if (!deleted && newKeys.length == oldKeys.length) {
        return;
    }
    for (var t = 0; t < newKeys.length; t++) {
        var key = newKeys[t];
        if (!helpers_js_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {
            patches.push({ op: "add", path: path + "/" + helpers_js_1.escapePathComponent(key), value: helpers_js_1._deepClone(obj[key]) });
        }
    }
}
/**
 * Create an array of patches from the differences in two objects
 */
function compare(tree1, tree2, invertible) {
    if (invertible === void 0) { invertible = false; }
    var patches = [];
    _generate(tree1, tree2, patches, '', invertible);
    return patches;
}
exports.compare = compare;

      };
    };
  }
  }
}, {package:"fast-json-patch",file:"node_modules\\fast-json-patch\\commonjs\\duplex.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\helpers.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cfast-json-patch%5Ccommonjs%5Chelpers.js
      return function (require, module, exports) {
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017-2022 Joachim Wester
 * MIT licensed
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwnProperty(obj, key) {
    return _hasOwnProperty.call(obj, key);
}
Object.defineProperty(exports, "hasOwnProperty", { value: hasOwnProperty });
function _objectKeys(obj) {
    if (Array.isArray(obj)) {
        var keys_1 = new Array(obj.length);
        for (var k = 0; k < keys_1.length; k++) {
            keys_1[k] = "" + k;
        }
        return keys_1;
    }
    if (Object.keys) {
        return Object.keys(obj);
    }
    var keys = [];
    for (var i in obj) {
        if (hasOwnProperty(obj, i)) {
            keys.push(i);
        }
    }
    return keys;
}
exports._objectKeys = _objectKeys;
;
/**
* Deeply clone the object.
* https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)
* @param  {any} obj value to clone
* @return {any} cloned obj
*/
function _deepClone(obj) {
    switch (typeof obj) {
        case "object":
            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5
        case "undefined":
            return null; //this is how JSON.stringify behaves for array items
        default:
            return obj; //no need to clone primitives
    }
}
exports._deepClone = _deepClone;
//3x faster than cached /^\d+$/.test(str)
function isInteger(str) {
    var i = 0;
    var len = str.length;
    var charCode;
    while (i < len) {
        charCode = str.charCodeAt(i);
        if (charCode >= 48 && charCode <= 57) {
            i++;
            continue;
        }
        return false;
    }
    return true;
}
exports.isInteger = isInteger;
/**
* Escapes a json pointer path
* @param path The raw pointer
* @return the Escaped path
*/
function escapePathComponent(path) {
    if (path.indexOf('/') === -1 && path.indexOf('~') === -1)
        return path;
    return path.replace(/~/g, '~0').replace(/\//g, '~1');
}
exports.escapePathComponent = escapePathComponent;
/**
 * Unescapes a json pointer path
 * @param path The escaped pointer
 * @return The unescaped path
 */
function unescapePathComponent(path) {
    return path.replace(/~1/g, '/').replace(/~0/g, '~');
}
exports.unescapePathComponent = unescapePathComponent;
function _getPathRecursive(root, obj) {
    var found;
    for (var key in root) {
        if (hasOwnProperty(root, key)) {
            if (root[key] === obj) {
                return escapePathComponent(key) + '/';
            }
            else if (typeof root[key] === 'object') {
                found = _getPathRecursive(root[key], obj);
                if (found != '') {
                    return escapePathComponent(key) + '/' + found;
                }
            }
        }
    }
    return '';
}
exports._getPathRecursive = _getPathRecursive;
function getPath(root, obj) {
    if (root === obj) {
        return '/';
    }
    var path = _getPathRecursive(root, obj);
    if (path === '') {
        throw new Error("Object not found in root");
    }
    return "/" + path;
}
exports.getPath = getPath;
/**
* Recursively checks whether an object has any undefined values inside.
*/
function hasUndefined(obj) {
    if (obj === undefined) {
        return true;
    }
    if (obj) {
        if (Array.isArray(obj)) {
            for (var i_1 = 0, len = obj.length; i_1 < len; i_1++) {
                if (hasUndefined(obj[i_1])) {
                    return true;
                }
            }
        }
        else if (typeof obj === "object") {
            var objKeys = _objectKeys(obj);
            var objKeysLength = objKeys.length;
            for (var i = 0; i < objKeysLength; i++) {
                if (hasUndefined(obj[objKeys[i]])) {
                    return true;
                }
            }
        }
    }
    return false;
}
exports.hasUndefined = hasUndefined;
function patchErrorMessageFormatter(message, args) {
    var messageParts = [message];
    for (var key in args) {
        var value = typeof args[key] === 'object' ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print
        if (typeof value !== 'undefined') {
            messageParts.push(key + ": " + value);
        }
    }
    return messageParts.join('\n');
}
var PatchError = /** @class */ (function (_super) {
    __extends(PatchError, _super);
    function PatchError(message, name, index, operation, tree) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree })) || this;
        _this.name = name;
        _this.index = index;
        _this.operation = operation;
        _this.tree = tree;
        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359
        _this.message = patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree });
        return _this;
    }
    return PatchError;
}(Error));
exports.PatchError = PatchError;

      };
    };
  }
  }
}, {package:"fast-json-patch",file:"node_modules\\fast-json-patch\\commonjs\\helpers.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\index.js", {"./commonjs/core.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\core.js","./commonjs/duplex.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\duplex.js","./commonjs/helpers.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-json-patch\\commonjs\\helpers.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cfast-json-patch%5Cindex.js
      return function (require, module, exports) {
var core = require("./commonjs/core.js");
Object.assign(exports, core);

var duplex = require("./commonjs/duplex.js");
Object.assign(exports, duplex);

var helpers = require("./commonjs/helpers.js");
exports.JsonPatchError = helpers.PatchError;
exports.deepClone = helpers._deepClone;
exports.escapePathComponent = helpers.escapePathComponent;
exports.unescapePathComponent = helpers.unescapePathComponent;

      };
    };
  }
  }
}, {package:"fast-json-patch",file:"node_modules\\fast-json-patch\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fast-levenshtein\\levenshtein.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cfast-levenshtein%5Clevenshtein.js
      return function (require, module, exports) {
(function() {
  'use strict';
  
  var collator;
  try {
    collator = (typeof Intl !== "undefined" && typeof Intl.Collator !== "undefined") ? Intl.Collator("generic", { sensitivity: "base" }) : null;
  } catch (err){
    console.log("Collator could not be initialized and wouldn't be used");
  }
  // arrays to re-use
  var prevRow = [],
    str2Char = [];
  
  /**
   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.
   */
  var Levenshtein = {
    /**
     * Calculate levenshtein distance of the two strings.
     *
     * @param str1 String the first string.
     * @param str2 String the second string.
     * @param [options] Additional options.
     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.
     * @return Integer the levenshtein distance (0 and above).
     */
    get: function(str1, str2, options) {
      var useCollator = (options && collator && options.useCollator);
      
      var str1Len = str1.length,
        str2Len = str2.length;
      
      // base cases
      if (str1Len === 0) return str2Len;
      if (str2Len === 0) return str1Len;

      // two rows
      var curCol, nextCol, i, j, tmp;

      // initialise previous row
      for (i=0; i<str2Len; ++i) {
        prevRow[i] = i;
        str2Char[i] = str2.charCodeAt(i);
      }
      prevRow[str2Len] = str2Len;

      var strCmp;
      if (useCollator) {
        // calculate current row distance from previous row using collator
        for (i = 0; i < str1Len; ++i) {
          nextCol = i + 1;

          for (j = 0; j < str2Len; ++j) {
            curCol = nextCol;

            // substution
            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));

            nextCol = prevRow[j] + (strCmp ? 0 : 1);

            // insertion
            tmp = curCol + 1;
            if (nextCol > tmp) {
              nextCol = tmp;
            }
            // deletion
            tmp = prevRow[j + 1] + 1;
            if (nextCol > tmp) {
              nextCol = tmp;
            }

            // copy current col value into previous (in preparation for next iteration)
            prevRow[j] = curCol;
          }

          // copy last col value into previous (in preparation for next iteration)
          prevRow[j] = nextCol;
        }
      }
      else {
        // calculate current row distance from previous row without collator
        for (i = 0; i < str1Len; ++i) {
          nextCol = i + 1;

          for (j = 0; j < str2Len; ++j) {
            curCol = nextCol;

            // substution
            strCmp = str1.charCodeAt(i) === str2Char[j];

            nextCol = prevRow[j] + (strCmp ? 0 : 1);

            // insertion
            tmp = curCol + 1;
            if (nextCol > tmp) {
              nextCol = tmp;
            }
            // deletion
            tmp = prevRow[j + 1] + 1;
            if (nextCol > tmp) {
              nextCol = tmp;
            }

            // copy current col value into previous (in preparation for next iteration)
            prevRow[j] = curCol;
          }

          // copy last col value into previous (in preparation for next iteration)
          prevRow[j] = nextCol;
        }
      }
      return nextCol;
    }

  };

  // amd
  if (typeof define !== "undefined" && define !== null && define.amd) {
    define(function() {
      return Levenshtein;
    });
  }
  // commonjs
  else if (typeof module !== "undefined" && module !== null && typeof exports !== "undefined" && module.exports === exports) {
    module.exports = Levenshtein;
  }
  // web worker
  else if (typeof self !== "undefined" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {
    self.Levenshtein = Levenshtein;
  }
  // browser main thread
  else if (typeof window !== "undefined" && window !== null) {
    window.Levenshtein = Levenshtein;
  }
}());


      };
    };
  }
  }
}, {package:"eslint>optionator>fast-levenshtein",file:"node_modules\\fast-levenshtein\\levenshtein.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\addressTags.js", {"../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\utilities.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Capi%5CaddressTags.js
      return function (require, module, exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeAddressTags = exports.fetchAddressTags = exports.addAddressTags = void 0;
var constants_1 = require("../constants");
var utilities_1 = require("./utilities");
var addAddressTags = function (tags) { return __awaiter(void 0, void 0, void 0, function () {
    var records;
    return __generator(this, function (_a) {
        records = tags.reduce(function (acc, tag) {
            var key = Object.keys(tag)[0];
            acc[key] = tag[key];
            return acc;
        }, {});
        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.addKvRecords({ records: records }); })];
    });
}); };
exports.addAddressTags = addAddressTags;
var fetchAddressTags = function (_a) {
    var _b = _a === void 0 ? { n: constants_1.MAX_ADDR, start: 0 } : _a, n = _b.n, start = _b.start;
    return __awaiter(void 0, void 0, void 0, function () {
        var addressTags, remainingToFetch, fetched;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    addressTags = [];
                    remainingToFetch = n;
                    fetched = start;
                    _c.label = 1;
                case 1:
                    if (!(remainingToFetch > 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, (0, utilities_1.queue)(function (client) {
                            return client
                                .getKvRecords({
                                start: fetched,
                                n: remainingToFetch > constants_1.MAX_ADDR ? constants_1.MAX_ADDR : remainingToFetch,
                            })
                                .then(function (res) { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    addressTags.push.apply(addressTags, res.records);
                                    fetched = res.fetched + fetched;
                                    remainingToFetch = res.total - fetched;
                                    return [2 /*return*/];
                                });
                            }); });
                        })];
                case 2:
                    _c.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/, addressTags];
            }
        });
    });
};
exports.fetchAddressTags = fetchAddressTags;
var removeAddressTags = function (tags) { return __awaiter(void 0, void 0, void 0, function () {
    var ids;
    return __generator(this, function (_a) {
        ids = tags.map(function (tag) { return "".concat(tag.id); });
        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.removeKvRecords({ ids: ids }); })];
    });
}); };
exports.removeAddressTags = removeAddressTags;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\api\\addressTags.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\addresses.js", {"../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\utilities.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Capi%5Caddresses.js
      return function (require, module, exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchLedgerLegacyAddresses = exports.fetchLedgerLiveAddresses = exports.fetchSolanaAddresses = exports.fetchBtcWrappedSegwitAddresses = exports.fetchBtCSegwitAddresses = exports.fetchBtcLegacyAddresses = exports.fetchAddresses = void 0;
var constants_1 = require("../constants");
var utilities_1 = require("./utilities");
var fetchAddresses = function (overrides) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, (0, utilities_1.queue)(function (client) {
                return client
                    .getAddresses(__assign({ startPath: constants_1.DEFAULT_ETH_DERIVATION, n: constants_1.MAX_ADDR }, overrides))
                    .then(function (addrs) { return addrs.map(function (addr) { return "".concat(addr); }); });
            })];
    });
}); };
exports.fetchAddresses = fetchAddresses;
var fetchBtcLegacyAddresses = function (n, startPathIndex) {
    if (n === void 0) { n = constants_1.MAX_ADDR; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, exports.fetchAddresses)({
                    startPath: (0, utilities_1.getStartPath)(constants_1.BTC_LEGACY_DERIVATION, startPathIndex),
                    n: n,
                })];
        });
    });
};
exports.fetchBtcLegacyAddresses = fetchBtcLegacyAddresses;
var fetchBtCSegwitAddresses = function (n, startPathIndex) {
    if (n === void 0) { n = constants_1.MAX_ADDR; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, exports.fetchAddresses)({
                    startPath: (0, utilities_1.getStartPath)(constants_1.BTC_SEGWIT_DERIVATION, startPathIndex),
                    n: n,
                })];
        });
    });
};
exports.fetchBtCSegwitAddresses = fetchBtCSegwitAddresses;
var fetchBtcWrappedSegwitAddresses = function (n, startPathIndex) {
    if (n === void 0) { n = constants_1.MAX_ADDR; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, exports.fetchAddresses)({
                    startPath: (0, utilities_1.getStartPath)(constants_1.BTC_WRAPPED_SEGWIT_DERIVATION, startPathIndex),
                    n: n,
                })];
        });
    });
};
exports.fetchBtcWrappedSegwitAddresses = fetchBtcWrappedSegwitAddresses;
var fetchSolanaAddresses = function (n, startPathIndex) {
    if (n === void 0) { n = constants_1.MAX_ADDR; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, exports.fetchAddresses)({
                    startPath: (0, utilities_1.getStartPath)(constants_1.SOLANA_DERIVATION, startPathIndex, 2),
                    n: n,
                })];
        });
    });
};
exports.fetchSolanaAddresses = fetchSolanaAddresses;
var fetchLedgerLiveAddresses = function (n, startPathIndex) {
    if (n === void 0) { n = constants_1.MAX_ADDR; }
    return __awaiter(void 0, void 0, void 0, function () {
        var addresses, _loop_1, i;
        return __generator(this, function (_a) {
            addresses = [];
            _loop_1 = function (i) {
                addresses.push((0, utilities_1.queue)(function (client) {
                    return client
                        .getAddresses({
                        startPath: (0, utilities_1.getStartPath)(constants_1.LEDGER_LIVE_DERIVATION, startPathIndex + i, 2),
                        n: 1,
                    })
                        .then(function (addresses) { return addresses.map(function (address) { return "".concat(address); }); });
                }));
            };
            for (i = 0; i < n; i++) {
                _loop_1(i);
            }
            return [2 /*return*/, Promise.all(addresses)];
        });
    });
};
exports.fetchLedgerLiveAddresses = fetchLedgerLiveAddresses;
var fetchLedgerLegacyAddresses = function (n, startPathIndex) {
    if (n === void 0) { n = constants_1.MAX_ADDR; }
    return __awaiter(void 0, void 0, void 0, function () {
        var addresses, _loop_2, i;
        return __generator(this, function (_a) {
            addresses = [];
            _loop_2 = function (i) {
                addresses.push((0, utilities_1.queue)(function (client) {
                    return client
                        .getAddresses({
                        startPath: (0, utilities_1.getStartPath)(constants_1.LEDGER_LEGACY_DERIVATION, startPathIndex + i, 3),
                        n: 1,
                    })
                        .then(function (addresses) { return addresses.map(function (address) { return "".concat(address); }); });
                }));
            };
            for (i = 0; i < n; i++) {
                _loop_2(i);
            }
            return [2 /*return*/, Promise.all(addresses)];
        });
    });
};
exports.fetchLedgerLegacyAddresses = fetchLedgerLegacyAddresses;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\api\\addresses.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\index.js", {"./addressTags":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\addressTags.js","./addresses":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\addresses.js","./signing":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\signing.js","./utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\utilities.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Capi%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchActiveWallets = exports.pair = exports.connect = exports.setup = exports.getClient = void 0;
var utilities_1 = require("./utilities");
Object.defineProperty(exports, "getClient", { enumerable: true, get: function () { return utilities_1.getClient; } });
Object.defineProperty(exports, "setup", { enumerable: true, get: function () { return utilities_1.setup; } });
var utilities_2 = require("./utilities");
var connect = function (deviceId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, (0, utilities_2.queue)(function (client) { return client.connect(deviceId); })];
    });
}); };
exports.connect = connect;
var pair = function (pairingCode) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, (0, utilities_2.queue)(function (client) { return client.pair(pairingCode); })];
    });
}); };
exports.pair = pair;
var fetchActiveWallets = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, (0, utilities_2.queue)(function (client) { return client.fetchActiveWallet(); })];
    });
}); };
exports.fetchActiveWallets = fetchActiveWallets;
__exportStar(require("./addresses"), exports);
__exportStar(require("./addressTags"), exports);
__exportStar(require("./signing"), exports);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\api\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\signing.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js","../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\utilities.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Capi%5Csigning.js
      return function (require, module, exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signSolanaTx = exports.signBtcWrappedSegwitTx = exports.signBtcSegwitTx = exports.signBtcLegacyTx = exports.signMessage = exports.sign = void 0;
var __1 = require("..");
var constants_1 = require("../constants");
var utilities_1 = require("./utilities");
var sign = function (payload, overrides) { return __awaiter(void 0, void 0, void 0, function () {
    var tx;
    return __generator(this, function (_a) {
        tx = __assign({ data: {
                signerPath: constants_1.DEFAULT_ETH_DERIVATION,
                curveType: __1.Constants.SIGNING.CURVES.SECP256K1,
                hashType: __1.Constants.SIGNING.HASHES.KECCAK256,
                encodingType: __1.Constants.SIGNING.ENCODINGS.EVM,
                payload: payload,
            } }, overrides);
        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];
    });
}); };
exports.sign = sign;
var signMessage = function (payload, overrides) { return __awaiter(void 0, void 0, void 0, function () {
    var tx;
    return __generator(this, function (_a) {
        tx = {
            data: __assign({ signerPath: constants_1.DEFAULT_ETH_DERIVATION, curveType: __1.Constants.SIGNING.CURVES.SECP256K1, hashType: __1.Constants.SIGNING.HASHES.KECCAK256, protocol: 'signPersonal', payload: payload }, overrides),
            currency: constants_1.CURRENCIES.ETH_MSG,
        };
        if ((0, utilities_1.isEIP712Payload)(payload)) {
            tx.data.protocol = 'eip712';
        }
        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];
    });
}); };
exports.signMessage = signMessage;
var signBtcLegacyTx = function (payload) { return __awaiter(void 0, void 0, void 0, function () {
    var tx;
    return __generator(this, function (_a) {
        tx = {
            data: __assign({ signerPath: constants_1.BTC_LEGACY_DERIVATION }, payload),
            currency: 'BTC',
        };
        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];
    });
}); };
exports.signBtcLegacyTx = signBtcLegacyTx;
var signBtcSegwitTx = function (payload) { return __awaiter(void 0, void 0, void 0, function () {
    var tx;
    return __generator(this, function (_a) {
        tx = {
            data: __assign({ signerPath: constants_1.BTC_SEGWIT_DERIVATION }, payload),
            currency: 'BTC',
        };
        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];
    });
}); };
exports.signBtcSegwitTx = signBtcSegwitTx;
var signBtcWrappedSegwitTx = function (payload) { return __awaiter(void 0, void 0, void 0, function () {
    var tx;
    return __generator(this, function (_a) {
        tx = {
            data: __assign({ signerPath: constants_1.BTC_WRAPPED_SEGWIT_DERIVATION }, payload),
            currency: 'BTC',
        };
        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];
    });
}); };
exports.signBtcWrappedSegwitTx = signBtcWrappedSegwitTx;
var signSolanaTx = function (payload, overrides) { return __awaiter(void 0, void 0, void 0, function () {
    var tx;
    return __generator(this, function (_a) {
        tx = {
            data: __assign({ signerPath: constants_1.SOLANA_DERIVATION, curveType: __1.Constants.SIGNING.CURVES.ED25519, hashType: __1.Constants.SIGNING.HASHES.NONE, encodingType: __1.Constants.SIGNING.ENCODINGS.SOLANA, payload: payload }, overrides),
        };
        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];
    });
}); };
exports.signSolanaTx = signSolanaTx;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\api\\signing.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\state.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Capi%5Cstate.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setFunctionQueue = exports.getFunctionQueue = exports.setLoadClient = exports.loadClient = exports.setSaveClient = exports.saveClient = void 0;
var setSaveClient = function (fn) {
    exports.saveClient = fn;
};
exports.setSaveClient = setSaveClient;
var setLoadClient = function (fn) {
    exports.loadClient = fn;
};
exports.setLoadClient = setLoadClient;
var functionQueue;
var getFunctionQueue = function () { return functionQueue; };
exports.getFunctionQueue = getFunctionQueue;
var setFunctionQueue = function (queue) {
    functionQueue = queue;
};
exports.setFunctionQueue = setFunctionQueue;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\api\\state.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\utilities.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js","../client":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\client.js","./state":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\state.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Capi%5Cutilities.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEIP712Payload = exports.getStartPath = exports.getClient = exports.queue = exports.setup = void 0;
var __1 = require("..");
var client_1 = require("../client");
var state_1 = require("./state");
/**
 * `setup` initializes the Client and executes `connect()` if necessary. It returns a promise that
 * resolves to a boolean that indicates whether the Client is paired to the application to which it's
 * attempting to connect.
 */
var setup = function (_a) {
    var deviceId = _a.deviceId, password = _a.password, name = _a.name, getStoredClient = _a.getStoredClient, setStoredClient = _a.setStoredClient;
    return __awaiter(void 0, void 0, void 0, function () {
        var privKey, client_2, client, deviceId_1;
        return __generator(this, function (_b) {
            if (!getStoredClient)
                throw new Error('Client data getter required');
            (0, state_1.setSaveClient)(buildSaveClientFn(setStoredClient));
            if (!setStoredClient)
                throw new Error('Client data setter required');
            (0, state_1.setLoadClient)(buildLoadClientFn(getStoredClient));
            if (deviceId && password && name) {
                privKey = __1.Utils.generateAppSecret(deviceId, password, name);
                client_2 = new client_1.Client({ deviceId: deviceId, privKey: privKey, name: name });
                return [2 /*return*/, client_2.connect(deviceId).then(function (isPaired) {
                        (0, state_1.saveClient)(client_2.getStateData());
                        return isPaired;
                    })];
            }
            else {
                client = (0, state_1.loadClient)();
                if (!client)
                    throw new Error('Client not initialized');
                deviceId_1 = client.getDeviceId();
                if (!client.ephemeralPub && deviceId_1) {
                    return [2 /*return*/, (0, __1.connect)(deviceId_1)];
                }
                else {
                    (0, state_1.saveClient)(client.getStateData());
                    return [2 /*return*/, Promise.resolve(true)];
                }
            }
            return [2 /*return*/];
        });
    });
};
exports.setup = setup;
/**
 * `queue` is a function that wraps all functional API calls. It limits the number of concurrent
 * requests to the server to 1, and ensures that the client state data is saved after each call.
 * This is necessary because the ephemeral public key must be updated after each successful request,
 * and two concurrent requests could result in the same key being used twice or the wrong key being
 * written to memory locally.
 */
var queue = function (fn) {
    var client = (0, state_1.loadClient)();
    if (!client)
        throw new Error('Client not initialized');
    if (!(0, state_1.getFunctionQueue)()) {
        (0, state_1.setFunctionQueue)(Promise.resolve());
    }
    (0, state_1.setFunctionQueue)((0, state_1.getFunctionQueue)().then(function () {
        return fn(client)
            .catch(function (err) {
            // Empty the queue if any function call fails
            (0, state_1.setFunctionQueue)(Promise.resolve());
            throw err;
        })
            .then(function (returnValue) {
            (0, state_1.saveClient)(client.getStateData());
            return returnValue;
        });
    }));
    return (0, state_1.getFunctionQueue)();
};
exports.queue = queue;
var getClient = function () { return (state_1.loadClient ? (0, state_1.loadClient)() : null); };
exports.getClient = getClient;
var encodeClientData = function (clientData) {
    return Buffer.from(clientData).toString('base64');
};
var decodeClientData = function (clientData) {
    return Buffer.from(clientData, 'base64').toString();
};
var buildSaveClientFn = function (setStoredClient) {
    return function (clientData) {
        if (!clientData)
            return;
        var encodedData = encodeClientData(clientData);
        setStoredClient(encodedData);
    };
};
var buildLoadClientFn = function (getStoredClient) {
    return function () {
        var clientData = getStoredClient();
        if (!clientData)
            return undefined;
        var stateData = decodeClientData(clientData);
        if (!stateData)
            return undefined;
        var client = new client_1.Client({ stateData: stateData });
        if (!client)
            throw new Error('Client not initialized');
        return client;
    };
};
var getStartPath = function (defaultStartPath, addressIndex, // The value to increment `defaultStartPath`
pathIndex) {
    if (addressIndex === void 0) { addressIndex = 0; }
    if (pathIndex === void 0) { pathIndex = 4; }
    var startPath = defaultStartPath;
    if (addressIndex > 0) {
        startPath[pathIndex] = defaultStartPath[pathIndex] + addressIndex;
    }
    return startPath;
};
exports.getStartPath = getStartPath;
var isEIP712Payload = function (payload) {
    return typeof payload !== 'string' &&
        'types' in payload &&
        'domain' in payload &&
        'primaryType' in payload &&
        'message' in payload;
};
exports.isEIP712Payload = isEIP712Payload;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\api\\utilities.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\bitcoin.js", {"./constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","bech32":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\bech32\\dist\\index.js","bs58check":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bs58check\\index.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","hash.js/lib/hash/ripemd":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\hash.js\\lib\\hash\\ripemd.js","hash.js/lib/hash/sha":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\hash.js\\lib\\hash\\sha.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cbitcoin.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Util for Bitcoin-specific functionality
var bech32_1 = require("bech32");
var bs58check_1 = __importDefault(require("bs58check"));
var ripemd_1 = require("hash.js/lib/hash/ripemd");
var sha_1 = require("hash.js/lib/hash/sha");
var constants_1 = require("./constants");
var protocol_1 = require("./protocol");
var DEFAULT_SEQUENCE = 0xffffffff;
var DEFAULT_SIGHASH_BUFFER = Buffer.from('01', 'hex'); // SIGHASH_ALL = 0x01
var PURPOSES = constants_1.BIP_CONSTANTS.PURPOSES, COINS = constants_1.BIP_CONSTANTS.COINS;
var OP = {
    ZERO: 0x00,
    HASH160: 0xa9,
    DUP: 0x76,
    EQUAL: 0x87,
    EQUALVERIFY: 0x88,
    CHECKSIG: 0xac,
};
var SEGWIT_V0 = 0x00;
var SEGWIT_NATIVE_V0_PREFIX = 'bc';
var SEGWIT_NATIVE_V0_TESTNET_PREFIX = 'tb';
var FMT_SEGWIT_NATIVE_V0 = 0xd0;
var FMT_SEGWIT_NATIVE_V0_TESTNET = 0xf0;
var FMT_SEGWIT_WRAPPED = 0x05;
var FMT_SEGWIT_WRAPPED_TESTNET = 0xc4;
var FMT_LEGACY = 0x00;
var FMT_LEGACY_TESTNET = 0x6f;
var BTC_SCRIPT_TYPE_P2PKH = 0x01;
var BTC_SCRIPT_TYPE_P2SH_P2WPKH = 0x03;
var BTC_SCRIPT_TYPE_P2WPKH_V0 = 0x04;
// We need to build two different objects here:
// 1. bitcoinjs-lib TransactionBuilder object, which will be used in conjunction
//    with the returned signatures to build and serialize the transaction before
//    broadcasting it. We will replace `bitcoinjs-lib`'s signatures with the ones
//    we get from the Lattice
// 2. The serialized Lattice request, which includes data (outlined in the specification)
//    that is needed to sign all of the inputs and build a change output.
// @inputs (contained in `data`)
// `prevOuts`: an array of objects with the following properties:
//           a. txHash
//           b. value
//           c. index          -- the index of the output in the transaction
//           d. signerPath -- the path of the address in our wallet that is signing this input
// `recipient`: Receiving address, which must be converted to a pubkeyhash
// `value`:     Number of satoshis to send the recipient
// `fee`:       Number of satoshis to use for a transaction fee (should have been calculated)
//              already based on the number of inputs plus two outputs
// `version`:   Transaction version of the inputs. All inputs must be of the same version!
// `isSegwit`: a boolean which determines how we serialize the data and parameterize txb
var buildBitcoinTxRequest = function (data) {
    var prevOuts = data.prevOuts, recipient = data.recipient, value = data.value, changePath = data.changePath, fee = data.fee;
    if (!changePath)
        throw new Error('No changePath provided.');
    if (changePath.length !== 5)
        throw new Error('Please provide a full change path.');
    // Serialize the request
    var payload = Buffer.alloc(59 + 69 * prevOuts.length);
    var off = 0;
    // Change version byte (a.k.a. address format byte)
    var changeFmt = getAddressFormat(changePath);
    payload.writeUInt8(changeFmt, 0);
    off++;
    // Build the change data
    payload.writeUInt32LE(changePath.length, off);
    off += 4;
    for (var i = 0; i < changePath.length; i++) {
        payload.writeUInt32LE(changePath[i], off);
        off += 4;
    }
    // Fee is a param
    payload.writeUInt32LE(fee, off);
    off += 4;
    var dec = decodeAddress(recipient);
    // Parameterize the recipient output
    payload.writeUInt8(dec.versionByte, off);
    off++;
    dec.pkh.copy(payload, off);
    off += dec.pkh.length;
    writeUInt64LE(value, payload, off);
    off += 8;
    // Build the inputs from the previous outputs
    payload.writeUInt8(prevOuts.length, off);
    off++;
    var inputSum = 0;
    prevOuts.forEach(function (input) {
        if (!input.signerPath || input.signerPath.length !== 5) {
            throw new Error('Full recipient path not specified ');
        }
        payload.writeUInt32LE(input.signerPath.length, off);
        off += 4;
        for (var i = 0; i < input.signerPath.length; i++) {
            payload.writeUInt32LE(input.signerPath[i], off);
            off += 4;
        }
        payload.writeUInt32LE(input.index, off);
        off += 4;
        writeUInt64LE(input.value, payload, off);
        off += 8;
        inputSum += input.value;
        var scriptType = getScriptType(input);
        payload.writeUInt8(scriptType, off);
        off++;
        if (!Buffer.isBuffer(input.txHash))
            input.txHash = Buffer.from(input.txHash, 'hex');
        input.txHash.copy(payload, off);
        off += input.txHash.length;
    });
    // Send them back!
    return {
        payload: payload,
        schema: protocol_1.LatticeSignSchema.bitcoin,
        origData: data,
        changeData: {
            // This data helps fill in the change output
            value: inputSum - (value + fee),
        },
    };
};
// Serialize a transaction consisting of inputs, outputs, and some
// metadata
// -- inputs  = { hash, index, sig, pubkey }
// -- outputs = { value, recipient }  // expects an address string for `recipient`
// -- isSegwitSpend = true if the inputs are being spent using segwit
//                    (NOTE: either ALL are being spent, or none are)
// -- lockTime = Will probably always be 0
var serializeTx = function (data) {
    var inputs = data.inputs, outputs = data.outputs, _a = data.lockTime, lockTime = _a === void 0 ? 0 : _a;
    var payload = Buffer.alloc(4);
    var off = 0;
    // Always use version 2
    var version = 2;
    var useWitness = needsWitness(inputs);
    payload.writeUInt32LE(version, off);
    off += 4;
    if (useWitness) {
        payload = concat(payload, Buffer.from('00', 'hex')); // marker = 0x00
        payload = concat(payload, Buffer.from('01', 'hex')); // flag = 0x01
    }
    // Serialize signed inputs
    var numInputs = getVarInt(inputs.length);
    payload = concat(payload, numInputs);
    off += numInputs.length;
    inputs.forEach(function (input) {
        payload = concat(payload, input.hash.reverse());
        off += input.hash.length;
        var index = getU32LE(input.index);
        payload = concat(payload, index);
        off += index.length;
        var scriptType = getScriptType(input);
        // Build the sigScript. Note that p2wpkh does not have a scriptSig.
        if (scriptType === BTC_SCRIPT_TYPE_P2SH_P2WPKH) {
            // Build a vector (varSlice of varSlice) containing the redeemScript
            var redeemScript = buildRedeemScript(input.pubkey);
            var redeemScriptLen = getVarInt(redeemScript.length);
            var slice = Buffer.concat([redeemScriptLen, redeemScript]);
            var sliceLen = getVarInt(slice.length);
            payload = concat(payload, sliceLen);
            off += sliceLen.length;
            payload = concat(payload, slice);
            off += slice.length;
        }
        else if (scriptType === BTC_SCRIPT_TYPE_P2PKH) {
            // Build the signature + pubkey script to spend this input
            var slice = buildSig(input.sig, input.pubkey);
            payload = concat(payload, slice);
            off += slice.length;
        }
        else if (scriptType === BTC_SCRIPT_TYPE_P2WPKH_V0) {
            var emptyScript = Buffer.from('00', 'hex');
            payload = concat(payload, emptyScript);
            off += 1;
        }
        // Use the default sequence for all transactions
        var sequence = getU32LE(DEFAULT_SEQUENCE);
        payload = concat(payload, sequence);
        off += sequence.length;
    });
    // Serialize outputs
    var numOutputs = getVarInt(outputs.length);
    payload = concat(payload, numOutputs);
    off += numOutputs.length;
    outputs.forEach(function (output) {
        var value = getU64LE(output.value);
        payload = concat(payload, value);
        off += value.length;
        // Build the output locking script and write it as a var slice
        var script = buildLockingScript(output.recipient);
        var scriptLen = getVarInt(script.length);
        payload = concat(payload, scriptLen);
        off += scriptLen.length;
        payload = concat(payload, script);
        off += script.length;
    });
    // Add witness data if needed
    if (useWitness) {
        var sigs = [];
        var pubkeys = [];
        for (var i = 0; i < inputs.length; i++) {
            sigs.push(inputs[i].sig);
            pubkeys.push(inputs[i].pubkey);
        }
        var witnessSlice = buildWitness(sigs, pubkeys);
        payload = concat(payload, witnessSlice);
        off += witnessSlice.length;
    }
    // Finish with locktime
    return Buffer.concat([payload, getU32LE(lockTime)]).toString('hex');
};
// Convert a pubkeyhash to a bitcoin base58check address with a version byte
var getBitcoinAddress = function (pubkeyhash, version) {
    var bech32Prefix = null;
    var bech32Version = null;
    if (version === FMT_SEGWIT_NATIVE_V0) {
        bech32Prefix = SEGWIT_NATIVE_V0_PREFIX;
        bech32Version = SEGWIT_V0;
    }
    else if (version === FMT_SEGWIT_NATIVE_V0_TESTNET) {
        bech32Prefix = SEGWIT_NATIVE_V0_TESTNET_PREFIX;
        bech32Version = SEGWIT_V0;
    }
    if (bech32Prefix !== null && bech32Version !== null) {
        var words = bech32_1.bech32.toWords(pubkeyhash);
        words.unshift(bech32Version);
        return bech32_1.bech32.encode(bech32Prefix, words);
    }
    else {
        return bs58check_1.default.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));
    }
};
// Builder utils
//-----------------------
function buildRedeemScript(pubkey) {
    var redeemScript = Buffer.alloc(22);
    var shaHash = Buffer.from((0, sha_1.sha256)().update(pubkey).digest('hex'), 'hex');
    var pubkeyhash = Buffer.from((0, ripemd_1.ripemd160)().update(shaHash).digest('hex'), 'hex');
    redeemScript.writeUInt8(OP.ZERO, 0);
    redeemScript.writeUInt8(pubkeyhash.length, 1);
    pubkeyhash.copy(redeemScript, 2);
    return redeemScript;
}
// Var slice of signature + var slice of pubkey
function buildSig(sig, pubkey) {
    sig = Buffer.concat([sig, DEFAULT_SIGHASH_BUFFER]);
    var sigLen = getVarInt(sig.length);
    var pubkeyLen = getVarInt(pubkey.length);
    var slice = Buffer.concat([sigLen, sig, pubkeyLen, pubkey]);
    var len = getVarInt(slice.length);
    return Buffer.concat([len, slice]);
}
// Witness is written as a "vector", which is a list of varSlices
// prefixed by the number of items
function buildWitness(sigs, pubkeys) {
    var witness = Buffer.alloc(0);
    // Two items in each vector (sig, pubkey)
    var len = Buffer.alloc(1);
    len.writeUInt8(2, 0);
    for (var i = 0; i < sigs.length; i++) {
        var sig = Buffer.concat([sigs[i], DEFAULT_SIGHASH_BUFFER]);
        var sigLen = getVarInt(sig.length);
        var pubkey = pubkeys[i];
        var pubkeyLen = getVarInt(pubkey.length);
        witness = Buffer.concat([witness, len, sigLen, sig, pubkeyLen, pubkey]);
    }
    return witness;
}
// Locking script buiders
//-----------------------
function buildLockingScript(address) {
    var dec = decodeAddress(address);
    switch (dec.versionByte) {
        case FMT_SEGWIT_NATIVE_V0:
        case FMT_SEGWIT_NATIVE_V0_TESTNET:
            return buildP2wpkhLockingScript(dec.pkh);
        case FMT_SEGWIT_WRAPPED:
        case FMT_SEGWIT_WRAPPED_TESTNET:
            return buildP2shLockingScript(dec.pkh);
        case FMT_LEGACY:
        case FMT_LEGACY_TESTNET:
            return buildP2pkhLockingScript(dec.pkh);
        default:
            throw new Error("Unknown version byte: ".concat(dec.versionByte, ". Cannot build BTC transaction."));
    }
}
function buildP2pkhLockingScript(pubkeyhash) {
    var out = Buffer.alloc(5 + pubkeyhash.length);
    var off = 0;
    out.writeUInt8(OP.DUP, off);
    off++;
    out.writeUInt8(OP.HASH160, off);
    off++;
    out.writeUInt8(pubkeyhash.length, off);
    off++;
    pubkeyhash.copy(out, off);
    off += pubkeyhash.length;
    out.writeUInt8(OP.EQUALVERIFY, off);
    off++;
    out.writeUInt8(OP.CHECKSIG, off);
    off++;
    return out;
}
function buildP2shLockingScript(pubkeyhash) {
    var out = Buffer.alloc(3 + pubkeyhash.length);
    var off = 0;
    out.writeUInt8(OP.HASH160, off);
    off++;
    out.writeUInt8(pubkeyhash.length, off);
    off++;
    pubkeyhash.copy(out, off);
    off += pubkeyhash.length;
    out.writeUInt8(OP.EQUAL, off);
    off++;
    return out;
}
function buildP2wpkhLockingScript(pubkeyhash) {
    var out = Buffer.alloc(2 + pubkeyhash.length);
    out.writeUInt8(OP.ZERO, 0);
    out.writeUInt8(pubkeyhash.length, 1);
    pubkeyhash.copy(out, 2);
    return out;
}
// Static Utils
//----------------------
function concat(base, addition) {
    return Buffer.concat([base, addition]);
}
function getU64LE(x) {
    var buffer = Buffer.alloc(8);
    writeUInt64LE(x, buffer, 0);
    return buffer;
}
function getU32LE(x) {
    var buffer = Buffer.alloc(4);
    buffer.writeUInt32LE(x, 0);
    return buffer;
}
function getVarInt(x) {
    var buffer;
    if (x < 0xfd) {
        buffer = Buffer.alloc(1);
        buffer.writeUInt8(x, 0);
    }
    else if (x <= 0xffff) {
        buffer = Buffer.alloc(3);
        buffer.writeUInt8(0xfd, 0);
        buffer.writeUInt16LE(x, 1);
    }
    else if (x < 0xffffffff) {
        buffer = Buffer.alloc(5);
        buffer.writeUInt8(0xfe, 0);
        buffer.writeUInt32LE(x, 1);
    }
    else {
        buffer = Buffer.alloc(9);
        buffer.writeUInt8(0xff, 0);
        buffer.writeUInt32LE(x >>> 0, 1);
        buffer.writeUInt32LE((x / 0x100000000) | 0, 5);
    }
    return buffer;
}
function writeUInt64LE(n, buf, off) {
    if (typeof n === 'number')
        n = n.toString(16);
    var preBuf = Buffer.alloc(8);
    var nStr = n.length % 2 === 0 ? n.toString(16) : "0".concat(n.toString(16));
    var nBuf = Buffer.from(nStr, 'hex');
    nBuf.reverse().copy(preBuf, 0);
    preBuf.copy(buf, off);
    return preBuf;
}
function decodeAddress(address) {
    var versionByte, pkh;
    try {
        // Attempt to base58 decode the address. This will work for older
        // P2PKH, P2SH, and P2SH-P2WPKH addresses
        versionByte = bs58check_1.default.decode(address)[0];
        pkh = bs58check_1.default.decode(address).slice(1);
    }
    catch (err) {
        // If we could not base58 decode, the address must be bech32 encoded.
        // If neither decoding method works, the address is invalid.
        try {
            var bech32Dec = bech32_1.bech32.decode(address);
            if (bech32Dec.prefix === SEGWIT_NATIVE_V0_PREFIX) {
                versionByte = FMT_SEGWIT_NATIVE_V0;
            }
            else if (bech32Dec.prefix === SEGWIT_NATIVE_V0_TESTNET_PREFIX) {
                versionByte = FMT_SEGWIT_NATIVE_V0_TESTNET;
            }
            else {
                throw new Error('Unsupported prefix: must be bc or tb.');
            }
            // Make sure we decoded
            if (bech32Dec.words[0] !== 0) {
                throw new Error("Unsupported segwit version: must be 0, got ".concat(bech32Dec.words[0]));
            }
            // Make sure address type is supported.
            // We currently only support P2WPKH addresses, which bech-32decode to 33 words.
            // P2WSH addresses are 53 words, but we do not support them.
            // Not sure what other address types could exist, but if they exist we don't
            // support them either.
            if (bech32Dec.words.length !== 33) {
                var isP2wpsh = bech32Dec.words.length === 53;
                throw new Error("Unsupported address".concat(isP2wpsh ? ' (P2WSH not supported)' : '', ": ").concat(address));
            }
            pkh = Buffer.from(bech32_1.bech32.fromWords(bech32Dec.words.slice(1)));
        }
        catch (err) {
            throw new Error("Unable to decode address: ".concat(address, ": ").concat(err.message));
        }
    }
    return { versionByte: versionByte, pkh: pkh };
}
// Determine the address format (a.k.a. "version") depending on the
// purpose of the dervation path.
function getAddressFormat(path) {
    if (path.length < 2)
        throw new Error('Path must be >1 index');
    var purpose = path[0];
    var coin = path[1];
    if (purpose === PURPOSES.BTC_SEGWIT && coin === COINS.BTC) {
        return FMT_SEGWIT_NATIVE_V0;
    }
    else if (purpose === PURPOSES.BTC_SEGWIT && coin === COINS.BTC_TESTNET) {
        return FMT_SEGWIT_NATIVE_V0_TESTNET;
    }
    else if (purpose === PURPOSES.BTC_WRAPPED_SEGWIT && coin === COINS.BTC) {
        return FMT_SEGWIT_WRAPPED;
    }
    else if (purpose === PURPOSES.BTC_WRAPPED_SEGWIT &&
        coin === COINS.BTC_TESTNET) {
        return FMT_SEGWIT_WRAPPED_TESTNET;
    }
    else if (purpose === PURPOSES.BTC_LEGACY && coin === COINS.BTC) {
        return FMT_LEGACY;
    }
    else if (purpose === PURPOSES.BTC_LEGACY && coin === COINS.BTC_TESTNET) {
        return FMT_LEGACY_TESTNET;
    }
    else {
        throw new Error('Invalid Bitcoin path provided. Cannot determine address format.');
    }
}
// Determine the script type for an input based on its owner's derivation
// path's `purpose` index.
// We do not support p2sh and only issue single-key addresses from the Lattice
// so we can determine this based on path alone.
function getScriptType(input) {
    switch (input.signerPath[0]) {
        case PURPOSES.BTC_LEGACY:
            return BTC_SCRIPT_TYPE_P2PKH;
        case PURPOSES.BTC_WRAPPED_SEGWIT:
            return BTC_SCRIPT_TYPE_P2SH_P2WPKH;
        case PURPOSES.BTC_SEGWIT:
            return BTC_SCRIPT_TYPE_P2WPKH_V0;
        default:
            throw new Error("Unsupported path purpose (".concat(input.signerPath[0], "): cannot determine BTC script type."));
    }
}
// Determine if a a transaction should have a witness portion.
// This will return true if any input is p2sh(p2wpkh) or p2wpkh.
// We determine the script type based on the derivation path.
function needsWitness(inputs) {
    var w = false;
    inputs.forEach(function (input) {
        if (input.signerPath[0] === PURPOSES.BTC_SEGWIT ||
            input.signerPath[0] === PURPOSES.BTC_WRAPPED_SEGWIT) {
            w = true;
        }
    });
    return w;
}
exports.default = {
    buildBitcoinTxRequest: buildBitcoinTxRequest,
    serializeTx: serializeTx,
    getBitcoinAddress: getBitcoinAddress,
    getAddressFormat: getAddressFormat,
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\bitcoin.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\calldata\\evm.js", {"@ethersproject/abi":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ethersproject\\abi\\lib\\index.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","js-sha3":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Ccalldata%5Cevm.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceNestedDefs = exports.getNestedCalldata = exports.parseCanonicalName = exports.parseSolidityJSONABI = void 0;
var js_sha3_1 = require("js-sha3");
var abi_1 = require("@ethersproject/abi");
/**
 * Look through an ABI definition to see if there is a function that matches the signature provided.
 * @param sig    a 0x-prefixed hex string containing 4 bytes of info
 * @param abi    a Solidity JSON ABI structure ([external link](https://docs.ethers.io/v5/api/utils/abi/formats/#abi-formats--solidity))
 * @returns      Buffer containing RLP-serialized array of calldata info to pass to signing request
 * @public
 */
var parseSolidityJSONABI = function (sig, abi) {
    sig = coerceSig(sig);
    // Find the first match in the ABI
    var match = abi
        .filter(function (item) { return item.type === 'function'; })
        .find(function (item) {
        var def = parseDef(item);
        var funcSig = getFuncSig(def.canonicalName);
        return funcSig === sig;
    });
    if (match) {
        var def = parseDef(match).def;
        return { def: def };
    }
    throw new Error('Unable to find matching function in ABI');
};
exports.parseSolidityJSONABI = parseSolidityJSONABI;
/**
 * Convert a canonical name into an ABI definition that can be included with calldata to a general
 * "2", "2.1", "3")
 * @param sig    a 0x-prefixed hex string containing 4 bytes of info
 * @param name   canonical name of the function
 * @returns      Buffer containing RLP-serialized array of calldata info to pass to signing request
 * @public
 */
var parseCanonicalName = function (sig, name) {
    sig = coerceSig(sig);
    if (sig !== getFuncSig(name)) {
        throw new Error('Name does not match provided sig.');
    }
    var def = [];
    // Get the function name
    var paramStart = name.indexOf('(');
    if (paramStart < 0) {
        throw new Error(BAD_CANONICAL_ERR);
    }
    def.push(name.slice(0, paramStart));
    name = name.slice(paramStart + 1);
    var paramDef = [];
    while (name.length > 1) {
        // scan until the terminating ')'
        var typeStr = popTypeStrFromCanonical(name);
        paramDef = paramDef.concat(parseTypeStr(typeStr));
        name = name.slice(typeStr.length + 1);
    }
    var parsedParamDef = parseParamDef(paramDef);
    return def.concat(parsedParamDef);
};
exports.parseCanonicalName = parseCanonicalName;
/**
 * Pull out nested calldata which may correspond to nested ABI definitions.
 * This is relevant for e.g. `multicall` patterns.
 * A def may be nested if the underlying type is `bytes` or `bytes[]` and
 * the calldata parm is of size (4 + 32*n).
 * @param def - calldata decoder data for a def
 * @param calldata - Buffer containing full calldata payload
 * @return -  Array of calldata params, or null values. If the return
 *            item has data (0x-prefixed hex string), it should be
 *            checked as a possible nested def
 */
var getNestedCalldata = function (def, calldata) {
    var possibleNestedDefs = [];
    // Skip past first item, which is the function name
    var defParams = def.slice(1);
    var strParams = getParamStrNames(defParams);
    var coder = new abi_1.AbiCoder();
    var decoded = coder.decode(strParams, '0x' + calldata.slice(4).toString('hex'));
    function couldBeNestedDef(x) {
        return (x.length - 4) % 32 === 0;
    }
    decoded.forEach(function (paramData, i) {
        if (isBytesType(defParams[i])) {
            var nestedDefIsPossible_1 = true;
            if (isBytesArrItem(defParams[i])) {
                // `bytes[]` type. Decode all underlying `bytes` items and
                // do size checks on those.
                // NOTE: We only do this for `bytes[]` but could, in the future,
                // extend to more complex array structures if we see nested defs
                // in this pattern. However, we have only ever seen `bytes[]`, which
                // is typically used in `multicall` patterns
                paramData.forEach(function (nestedParamDatum) {
                    var nestedParamDatumBuf = Buffer.from(nestedParamDatum.slice(2), 'hex');
                    if (!couldBeNestedDef(nestedParamDatumBuf)) {
                        nestedDefIsPossible_1 = false;
                    }
                });
            }
            else if (isBytesItem(defParams[i])) {
                // Regular `bytes` type - perform size check
                var paramDataBuf = Buffer.from(paramData.slice(2), 'hex');
                nestedDefIsPossible_1 = couldBeNestedDef(paramDataBuf);
            }
            else {
                // Unknown `bytes` item type
                nestedDefIsPossible_1 = false;
            }
            // If the data could contain a nested def (determined based on
            // data size of the item), add the paramData to the return array.
            possibleNestedDefs.push(nestedDefIsPossible_1 ? paramData : null);
        }
        else {
            // No nested defs for non-bytes types
            possibleNestedDefs.push(null);
        }
    });
    return possibleNestedDefs;
};
exports.getNestedCalldata = getNestedCalldata;
/**
 * If applicable, update decoder data to represent nested
 * definitions, which are used in e.g. multicall patterns.
 * This will update `def` in place and return it with any
 * additional info necessary.
 * @param def - Decoder data for a specific calldata function (def)
 * @param nestedDefs - Array containing a possible set of nested
 *                     defs which must be added to `def`
 * @return - Possibly modified version of `def`
 */
var replaceNestedDefs = function (def, nestedDefs) {
    for (var i = 0; i < nestedDefs.length; i++) {
        var isArrItem = isBytesArrItem(def[1 + i]);
        var isItem = isBytesItem(def[1 + i]);
        if (nestedDefs[i] !== null && (isArrItem || isItem)) {
            // Update the def item type to indicate it will hold
            // one or more nested definitions
            def[1 + i][1] = EVM_TYPES.indexOf('nestedDef');
            // Add nested def(s) in in an array. If this is an array
            // item it means the nestedDefs should already be in an
            // array. Otherwise we need to wrap the single nested
            // def in an array to keep the data type consistent.
            var defs = isArrItem ? nestedDefs[i] : [nestedDefs[i]];
            def[1 + i] = def[1 + i].concat([defs]);
        }
    }
    return def;
};
exports.replaceNestedDefs = replaceNestedDefs;
/**
 * Convert a canonical name to a function selector (a.k.a. "sig")
 * @internal
 */
function getFuncSig(canonicalName) {
    return "0x".concat((0, js_sha3_1.keccak256)(canonicalName).slice(0, 8));
}
/**
 * Ensure the sig is properly formatted
 */
function coerceSig(sig) {
    if (typeof sig !== 'string' || (sig.length !== 10 && sig.length !== 8)) {
        throw new Error('`sig` must be a hex string with 4 bytes of data.');
    }
    if (sig.length === 8) {
        sig = "0x".concat(sig);
    }
    return sig;
}
/**
 * Convert calldata param definitions into an array of their
 * canonical string names.
 * Returns an array of string names that are consumable by
 * the @ethersproject/abi AbiCoder decoder instance.
 * @param defParams - Array of def params
 * @internal
 */
function getParamStrNames(defParams) {
    var strNames = [];
    var _loop_1 = function (i) {
        var param = defParams[i];
        var s = EVM_TYPES[param[1]];
        if (param[2]) {
            s = "".concat(s).concat(param[2] * 8);
        }
        if (param[3].length > 0) {
            param[3].forEach(function (d) {
                if (param[3][d] === 0) {
                    s = "".concat(s, "[]");
                }
                else {
                    s = "".concat(s, "[").concat(param[3][d], "]");
                }
            });
        }
        if (param[4]) {
            // Tuple - get nested type names
            var nested = getParamStrNames(param[4]);
            s = "".concat(s, "(").concat(nested.join(','), ")");
        }
        strNames.push(s);
    };
    for (var i = 0; i < defParams.length; i++) {
        _loop_1(i);
    }
    return strNames;
}
/**
 * Take the next type from a canonical definition string. Note that the string can be that of a
 * tuple. NOTE: The string should start at the index after the leading '('
 * @internal
 */
function popTypeStrFromCanonical(subName) {
    if (isTuple(subName)) {
        return getTupleName(subName);
    }
    else if (subName.indexOf(',') > -1) {
        // Normal non-tuple param
        return subName.slice(0, subName.indexOf(','));
    }
    else if (subName.indexOf(')') > -1) {
        // Last non-tuple param in the name
        return subName.slice(0, subName.indexOf(')'));
    }
    throw new Error(BAD_CANONICAL_ERR);
}
/**
 * Parse a type string, e.g. 'uint256'. Converts the string to an array of EVMParamInfo, which may
 * have nested structure if there are tuples.
 * @internal
 */
function parseTypeStr(typeStr) {
    // Non-tuples can be decoded without worrying about recursion
    if (!isTuple(typeStr)) {
        return [parseBasicTypeStr(typeStr)];
    }
    // Tuples may require recursion
    var param = {
        szBytes: 0,
        typeIdx: EVM_TYPES.indexOf('tuple'),
        arraySzs: [],
    };
    // Get the full tuple param name and separate out the array stuff
    var typeStrLessArr = getTupleName(typeStr, false);
    var typeStrArr = typeStr.slice(typeStrLessArr.length);
    param.arraySzs = getArraySzs(typeStrArr);
    // Slice off the leading paren
    typeStrLessArr = typeStrLessArr.slice(1);
    // Parse each nested param
    var paramArr = [];
    while (typeStrLessArr.length > 0) {
        var subType = popTypeStrFromCanonical(typeStrLessArr);
        typeStrLessArr = typeStrLessArr.slice(subType.length + 1);
        paramArr = paramArr.concat(parseTypeStr(subType));
    }
    // There must be at least one sub-param in the tuple
    if (!paramArr.length) {
        throw new Error(BAD_CANONICAL_ERR);
    }
    return [param, paramArr];
}
/**
 * Convert a basic type (e.g. 'uint256') from a string to EVMParamInfo type.
 * @internal
 */
function parseBasicTypeStr(typeStr) {
    var param = {
        szBytes: 0,
        typeIdx: 0,
        arraySzs: [],
    };
    var found = false;
    EVM_TYPES.forEach(function (t, i) {
        if (typeStr.indexOf(t) > -1 && !found) {
            param.typeIdx = i;
            param.arraySzs = getArraySzs(typeStr);
            var arrStart = param.arraySzs.length > 0 ? typeStr.indexOf('[') : typeStr.length;
            var typeStrNum = typeStr.slice(t.length, arrStart);
            if (parseInt(typeStrNum)) {
                param.szBytes = parseInt(typeStrNum) / 8;
                if (param.szBytes > 32) {
                    throw new Error(BAD_CANONICAL_ERR);
                }
            }
            found = true;
        }
    });
    if (!found) {
        throw new Error(BAD_CANONICAL_ERR);
    }
    return param;
}
/**
 * Parse an Etherscan definition into a calldata structure that the Lattice EVM decoder can handle
 * (EVMDef). This function may recurse if there are tuple types.
 * @internal
 */
function parseDef(item, canonicalName, def, recursed) {
    if (canonicalName === void 0) { canonicalName = ''; }
    if (def === void 0) { def = []; }
    if (recursed === void 0) { recursed = false; }
    // Function name. Can be an empty string.
    if (!recursed) {
        var nameStr = item.name || '';
        def.push(nameStr);
        canonicalName += nameStr;
    }
    // Loop through params
    if (item.inputs) {
        canonicalName += '(';
        item.inputs.forEach(function (input) {
            // Convert the input to a flat param that we can serialize
            var flatParam = getFlatParam(input);
            if (input.type.indexOf('tuple') > -1 && input.components) {
                // For tuples we need to recurse
                var recursed_1 = parseDef({ inputs: input.components }, canonicalName, [], true);
                canonicalName = recursed_1.canonicalName;
                // Add brackets if this is a tuple array and also add a comma
                canonicalName += "".concat(input.type.slice(5), ",");
                flatParam.push(recursed_1.def);
            }
            else {
                canonicalName += input.type;
                canonicalName += ',';
            }
            def.push(flatParam);
        });
        // Take off the last comma. Note that we do not want to slice if the last param was a tuple,
        // since we want to keep that `)`
        if (canonicalName[canonicalName.length - 1] === ',') {
            canonicalName = canonicalName.slice(0, canonicalName.length - 1);
        }
        // Add the closing parens
        canonicalName += ')';
    }
    return { def: def, canonicalName: canonicalName };
}
/**
 * Convert a set of EVMParamInfo objects into an array that can be serialized into decoder info that
 * can be passed with the signing request. NOTE: We do not know parameter names, so we just number
 * them
 * @internal
 */
function parseParamDef(def, prefix) {
    if (prefix === void 0) { prefix = ''; }
    var parsedDef = [];
    var numTuples = 0;
    def.forEach(function (param, i) {
        if (Array.isArray(param)) {
            // Arrays indicate nested params inside a tuple and always come after the initial tuple type
            // info. Recurse to parse nested tuple params and append them to the most recent.
            parsedDef[parsedDef.length - 1].push(parseParamDef(param, "".concat(i, "-")));
        }
        else {
            // If this is not tuple info, add the flat param info to the def
            parsedDef.push([
                "#".concat(prefix).concat(i + 1 - numTuples),
                param.typeIdx,
                param.szBytes,
                param.arraySzs,
            ]);
        }
        // Tuple
        if (param.typeIdx === EVM_TYPES.indexOf('tuple')) {
            numTuples += 1;
        }
    });
    return parsedDef;
}
/**
 * Convert a param into an EVMParamInfo object before flattening its data into an array.
 * @internal
 */
function getFlatParam(input) {
    if (!input.type) {
        throw new Error('No type in input');
    }
    var param = [input.name];
    var _a = getParamTypeInfo(input.type), typeIdx = _a.typeIdx, szBytes = _a.szBytes, arraySzs = _a.arraySzs;
    param.push(typeIdx);
    param.push(szBytes);
    param.push(arraySzs);
    return param;
}
/**
 * Convert a param type string into an EVMParamInfo object with attributes:
 * 1. paramName -     name of the parameter. This piece of data is unverified, so it will display
 *                    differently if the user has the function saved in secure storage.
 * 2. paramType -     basic type of param. Firmware has an enum with 7 values.
 * 3. paramSzBytes -  number of bytes representing this param. Only certain types can have nonzero
 *                    value for this. For example, a `uint` with a 4 in this slot would be uint32
 *                    (8*4 = 32). Maximum number of bytes is always 32 because these types can only
 *                    be used in single 32 byte words.
 * @internal
 */
function getParamTypeInfo(type) {
    var param = {
        szBytes: 0,
        typeIdx: 0,
        arraySzs: [],
    };
    var baseType;
    EVM_TYPES.forEach(function (t, i) {
        if (type.indexOf(t) > -1 && !baseType) {
            baseType = t;
            param.typeIdx = i;
        }
    });
    // Get the array size, if any
    param.arraySzs = getArraySzs(type);
    // Determine where to search for expanded size
    var szIdx = param.arraySzs.length > 0 ? type.indexOf('[') : type.length;
    if (['uint', 'int', 'bytes'].indexOf(baseType) > -1) {
        // If this can have a fixed size, capture that
        var szBits = parseInt(type.slice(baseType.length, szIdx)) || 0;
        if (szBits > 256) {
            throw new Error('Invalid param size');
        }
        param.szBytes = szBits / 8;
    }
    else {
        // No fixed size in the type
        param.szBytes = 0;
    }
    return param;
}
/**
 * Determine the dimensions of an array type. These dimensions can be either fixed or variable size.
 * Returns an array of sizes. Ex: uint256[][] -> [0, 0], uint256[1][3] -> [1, 3], uint256 -> []
 * @internal
 */
function getArraySzs(type) {
    if (typeof type !== 'string') {
        throw new Error('Invalid type');
    }
    var szs = [];
    var t1 = type;
    while (t1.length > 0) {
        var openIdx = t1.indexOf('[');
        if (openIdx < 0) {
            return szs;
        }
        var t2 = t1.slice(openIdx);
        var closeIdx = t2.indexOf(']');
        if (closeIdx < 0) {
            throw new Error('Bad param type');
        }
        var t3 = t2.slice(1, closeIdx);
        if (t3.length === 0) {
            // Variable size
            szs.push(0);
        }
        else {
            // Fixed size
            szs.push(parseInt(t3));
        }
        t1 = t2.slice(closeIdx + 1);
    }
    return szs;
}
/** @internal */
function getTupleName(name, withArr) {
    if (withArr === void 0) { withArr = true; }
    var brackets = 0, addedFirstBracket = false;
    for (var i = 0; i < name.length; i++) {
        if (name[i] === '(') {
            brackets += 1;
            addedFirstBracket = true;
        }
        else if (name[i] === ')') {
            brackets -= 1;
        }
        var canBreak = name[i + 1] === ',' || name[i + 1] === ')' || i === name.length - 1;
        if (!withArr && name[i + 1] === '[') {
            canBreak = true;
        }
        if (!brackets && addedFirstBracket && canBreak) {
            return name.slice(0, i + 1);
        }
    }
    throw new Error(BAD_CANONICAL_ERR);
}
/** @internal */
function isTuple(type) {
    return type[0] === '(';
}
/** @internal */
function isBytesType(param) {
    return EVM_TYPES[param[1]] === 'bytes';
}
function isBytesItem(param) {
    return isBytesType(param) && param[3].length === 0;
}
function isBytesArrItem(param) {
    return isBytesType(param) && param[3].length === 1 && param[3][0] === 0;
}
var BAD_CANONICAL_ERR = 'Could not parse canonical function name.';
var EVM_TYPES = [
    null,
    'address',
    'bool',
    'uint',
    'int',
    'bytes',
    'string',
    'tuple',
    'nestedDef',
];

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\calldata\\evm.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\calldata\\index.js", {"./evm":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\calldata\\evm.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Ccalldata%5Cindex.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CALLDATA = void 0;
/**
 * Exports containing utils that allow inclusion of calldata decoder info in signing requests. If
 * calldata decoder info is packed into the request, it is used to decode the calldata in the
 * request. It is optional.
 */
var evm_1 = require("./evm");
exports.CALLDATA = {
    EVM: {
        type: 1,
        parsers: {
            parseSolidityJSONABI: evm_1.parseSolidityJSONABI,
            parseCanonicalName: evm_1.parseCanonicalName,
        },
        processors: {
            getNestedCalldata: evm_1.getNestedCalldata,
            replaceNestedDefs: evm_1.replaceNestedDefs,
        }
    },
};

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\calldata\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\client.js", {"./constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./functions/index":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\index.js","./shared/functions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\functions.js","./shared/utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js","./shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cclient.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
var constants_1 = require("./constants");
var index_1 = require("./functions/index");
var functions_1 = require("./shared/functions");
var utilities_1 = require("./shared/utilities");
var validators_1 = require("./shared/validators");
var util_1 = require("./util");
/**
 * `Client` is a class-based interface for managing a Lattice device.
 */
var Client = /** @class */ (function () {
    /**
     * @param params - Parameters are passed as an object.
     */
    function Client(_a) {
        var baseUrl = _a.baseUrl, name = _a.name, privKey = _a.privKey, stateData = _a.stateData, timeout = _a.timeout, retryCount = _a.retryCount, skipRetryOnWrongWallet = _a.skipRetryOnWrongWallet, deviceId = _a.deviceId;
        this.name = name || 'Unknown';
        this.baseUrl = baseUrl || constants_1.BASE_URL;
        this.deviceId = deviceId;
        this.isPaired = false;
        this.activeWallets = constants_1.DEFAULT_ACTIVE_WALLETS;
        this.timeout = timeout || 60000;
        this.retryCount = retryCount || 3;
        this.skipRetryOnWrongWallet = skipRetryOnWrongWallet || false;
        this.privKey = privKey || (0, util_1.randomBytes)(32);
        this.key = (0, util_1.getP256KeyPair)(this.privKey);
        this.retryWrapper = (0, functions_1.buildRetryWrapper)(this, this.retryCount);
        /** The user may pass in state data to rehydrate a session that was previously cached */
        if (stateData) {
            this.unpackAndApplyStateData(stateData);
        }
    }
    Object.defineProperty(Client.prototype, "publicKey", {
        /**
         * Get the public key associated with the client's static keypair.
         * The public key is used for identifying the client to the Lattice.
         * @internal
         * @returns Buffer
         */
        get: function () {
            return (0, utilities_1.getPubKeyBytes)(this.key);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get the pairing name for this client instance
     */
    Client.prototype.getAppName = function () {
        return this.name;
    };
    /**
     * Get the `deviceId` for this client instance
     */
    Client.prototype.getDeviceId = function () {
        return this.deviceId;
    };
    Object.defineProperty(Client.prototype, "sharedSecret", {
        /**
         * Get the shared secret, derived via ECDH from the local private key and the ephemeral public key
         * @internal
         * @returns Buffer
         */
        get: function () {
            // Once every ~256 attempts, we will get a key that starts with a `00` byte, which can lead to
            // problems initializing AES if we don't force a 32 byte BE buffer.
            return Buffer.from(this.key.derive(this.ephemeralPub.getPublic()).toArray('be', 32));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "ephemeralPub", {
        /** @internal */
        get: function () {
            return this._ephemeralPub;
        },
        /** @internal */
        set: function (ephemeralPub) {
            (0, validators_1.validateEphemeralPub)(ephemeralPub);
            this._ephemeralPub = ephemeralPub;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Attempt to contact a device based on its `deviceId`. The response should include an ephemeral
     * public key, which is used to pair with the device in a later request.
     * @category Lattice
     */
    Client.prototype.connect = function (deviceId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.retryWrapper(index_1.connect, { id: deviceId })];
            });
        });
    };
    /**
     * If a pairing secret is provided, `pair` uses it to sign a hash of the public key, name, and
     * pairing secret. It then sends the name and signature to the device. If no pairing secret is
     * provided, `pair` sends a zero-length name buffer to the device.
     * @category Lattice
     */
    Client.prototype.pair = function (pairingSecret) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.retryWrapper(index_1.pair, { pairingSecret: pairingSecret })];
            });
        });
    };
    /**
     * Takes a starting path and a number to get the addresses associated with the active wallet.
     * @category Lattice
     */
    Client.prototype.getAddresses = function (_a) {
        var startPath = _a.startPath, _b = _a.n, n = _b === void 0 ? 1 : _b, _c = _a.flag, flag = _c === void 0 ? 0 : _c;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_d) {
                return [2 /*return*/, this.retryWrapper(index_1.getAddresses, { startPath: startPath, n: n, flag: flag })];
            });
        });
    };
    /**
     * Builds and sends a request for signing to the Lattice.
     * @category Lattice
     */
    Client.prototype.sign = function (_a) {
        var data = _a.data, currency = _a.currency, cachedData = _a.cachedData, nextCode = _a.nextCode;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.retryWrapper(index_1.sign, { data: data, currency: currency, cachedData: cachedData, nextCode: nextCode })];
            });
        });
    };
    /**
     * Fetch the active wallet in the Lattice.
     */
    Client.prototype.fetchActiveWallet = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.retryWrapper(index_1.fetchActiveWallet)];
            });
        });
    };
    /**
     * Takes in a set of key-value records and sends a request to add them to the Lattice.
     * @category Lattice
     */
    Client.prototype.addKvRecords = function (_a) {
        var _b = _a.type, type = _b === void 0 ? 0 : _b, records = _a.records, _c = _a.caseSensitive, caseSensitive = _c === void 0 ? false : _c;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_d) {
                return [2 /*return*/, this.retryWrapper(index_1.addKvRecords, { type: type, records: records, caseSensitive: caseSensitive, })];
            });
        });
    };
    /**
     * Fetches a list of key-value records from the Lattice.
     * @category Lattice
     */
    Client.prototype.getKvRecords = function (_a) {
        var _b = _a.type, type = _b === void 0 ? 0 : _b, _c = _a.n, n = _c === void 0 ? 1 : _c, _d = _a.start, start = _d === void 0 ? 0 : _d;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_e) {
                return [2 /*return*/, this.retryWrapper(index_1.getKvRecords, { type: type, n: n, start: start, })];
            });
        });
    };
    /**
     * Takes in an array of ids and sends a request to remove them from the Lattice.
     * @category Lattice
     */
    Client.prototype.removeKvRecords = function (_a) {
        var _b = _a.type, type = _b === void 0 ? 0 : _b, _c = _a.ids, ids = _c === void 0 ? [] : _c;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_d) {
                return [2 /*return*/, this.retryWrapper(index_1.removeKvRecords, { type: type, ids: ids, })];
            });
        });
    };
    /**
     * Fetch a record of encrypted data from the Lattice.
     * Must specify a data type. Returns a Buffer containing
     * data formatted according to the specified type.
     * @category Lattice
     */
    Client.prototype.fetchEncryptedData = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.retryWrapper(index_1.fetchEncData, params)];
            });
        });
    };
    /** Get the active wallet */
    Client.prototype.getActiveWallet = function () {
        if (this.activeWallets.external.uid &&
            !constants_1.EMPTY_WALLET_UID.equals(this.activeWallets.external.uid)) {
            return this.activeWallets.external;
        }
        else if (this.activeWallets.internal.uid &&
            !constants_1.EMPTY_WALLET_UID.equals(this.activeWallets.internal.uid)) {
            return this.activeWallets.internal;
        }
        else {
            return undefined;
        }
    };
    /** Check if the user has an active wallet */
    Client.prototype.hasActiveWallet = function () {
        return !!this.getActiveWallet();
    };
    /**
     * Reset the active wallets to empty values.
     * @category Device Response
     * @internal
     */
    Client.prototype.resetActiveWallets = function () {
        this.activeWallets = constants_1.DEFAULT_ACTIVE_WALLETS;
    };
    /**
     * Get a JSON string containing state data that can be used to rehydrate a session. Pass the
     * contents of this to the constructor as `stateData` to rehydrate.
     * @internal
     */
    Client.prototype.getStateData = function () {
        return this.packStateData();
    };
    /**
     * Returns the firmware version constants for the given firmware version.
     * @internal
     */
    Client.prototype.getFwConstants = function () {
        var _a;
        return (0, constants_1.getFwVersionConst)((_a = this.fwVersion) !== null && _a !== void 0 ? _a : Buffer.alloc(0));
    };
    /**
     * `getFwVersion` gets the firmware version of the paired device.
     * @internal
     */
    Client.prototype.getFwVersion = function () {
        if (this.fwVersion && this.fwVersion.length >= 3) {
            return {
                fix: this.fwVersion[0],
                minor: this.fwVersion[1],
                major: this.fwVersion[2],
            };
        }
        return { fix: 0, minor: 0, major: 0 };
    };
    /**
     * Handles the mutation of Client state in the primary functions.
     */
    Client.prototype.mutate = function (_a) {
        var deviceId = _a.deviceId, ephemeralPub = _a.ephemeralPub, url = _a.url, isPaired = _a.isPaired, fwVersion = _a.fwVersion, activeWallets = _a.activeWallets;
        if (deviceId !== undefined)
            this.deviceId = deviceId;
        if (ephemeralPub !== undefined)
            this.ephemeralPub = ephemeralPub;
        if (url !== undefined)
            this.url = url;
        if (isPaired !== undefined)
            this.isPaired = isPaired;
        if (fwVersion !== undefined)
            this.fwVersion = fwVersion;
        if (activeWallets !== undefined)
            this.activeWallets = activeWallets;
    };
    /**
     * Return JSON-stringified version of state data. Can be used to rehydrate an SDK session without
     * reconnecting to the target Lattice.
     * @internal
     */
    Client.prototype.packStateData = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        try {
            var data = {
                activeWallets: {
                    internal: {
                        uid: (_a = this.activeWallets.internal.uid) === null || _a === void 0 ? void 0 : _a.toString('hex'),
                        name: (_b = this.activeWallets.internal.name) === null || _b === void 0 ? void 0 : _b.toString(),
                        capabilities: this.activeWallets.internal.capabilities,
                    },
                    external: {
                        uid: (_c = this.activeWallets.external.uid) === null || _c === void 0 ? void 0 : _c.toString('hex'),
                        name: (_d = this.activeWallets.external.name) === null || _d === void 0 ? void 0 : _d.toString(),
                        capabilities: this.activeWallets.external.capabilities,
                    },
                },
                ephemeralPub: (_f = (_e = this.ephemeralPub) === null || _e === void 0 ? void 0 : _e.getPublic()) === null || _f === void 0 ? void 0 : _f.encode('hex'),
                fwVersion: (_g = this.fwVersion) === null || _g === void 0 ? void 0 : _g.toString('hex'),
                deviceId: this.deviceId,
                name: this.name,
                baseUrl: this.baseUrl,
                privKey: this.privKey.toString('hex'),
                retryCount: this.retryCount,
                timeout: this.timeout,
            };
            return JSON.stringify(data);
        }
        catch (err) {
            console.warn('Could not pack state data.');
            return null;
        }
    };
    /**
     * Unpack a JSON-stringified version of state data and apply it to state. This will allow us to
     * rehydrate an old session.
     * @internal
     */
    Client.prototype.unpackAndApplyStateData = function (data) {
        try {
            var unpacked = JSON.parse(data);
            // Attempt to parse the data
            var internalWallet = {
                uid: Buffer.from(unpacked.activeWallets.internal.uid, 'hex'),
                name: unpacked.activeWallets.internal.name ?
                    Buffer.from(unpacked.activeWallets.internal.name) :
                    null,
                capabilities: unpacked.activeWallets.internal.capabilities,
                external: false,
            };
            var externalWallet = {
                uid: Buffer.from(unpacked.activeWallets.external.uid, 'hex'),
                name: unpacked.activeWallets.external.name ?
                    Buffer.from(unpacked.activeWallets.external.name) :
                    null,
                capabilities: unpacked.activeWallets.external.capabilities,
                external: true,
            };
            var ephemeralPubBytes = Buffer.from(unpacked.ephemeralPub, 'hex');
            var fwVersionBytes = Buffer.from(unpacked.fwVersion, 'hex');
            var privKeyBytes = Buffer.from(unpacked.privKey, 'hex');
            // Apply unpacked params
            this.activeWallets.internal = internalWallet;
            this.activeWallets.external = externalWallet;
            this.ephemeralPub = (0, util_1.getP256KeyPairFromPub)(ephemeralPubBytes);
            this.fwVersion = fwVersionBytes;
            this.deviceId = unpacked.deviceId;
            this.name = unpacked.name;
            this.baseUrl = unpacked.baseUrl;
            this.url = "".concat(this.baseUrl, "/").concat(this.deviceId);
            this.privKey = privKeyBytes;
            this.key = (0, util_1.getP256KeyPair)(this.privKey);
            this.retryCount = unpacked.retryCount;
            this.timeout = unpacked.timeout;
            this.retryWrapper = (0, functions_1.buildRetryWrapper)(this, this.retryCount);
        }
        catch (err) {
            console.warn('Could not apply state data.');
        }
    };
    return Client;
}());
exports.Client = Client;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\client.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js", {"./protocol/latticeConstants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cconstants.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PUBLIC = exports.ETH_ABI_LATTICE_FW_TYPE_MAP = exports.MAX_CHAIN_ID_BYTES = exports.HANDLE_LARGER_CHAIN_ID = exports.HARDENED_OFFSET = exports.VERSION_BYTE = exports.REQUEST_TYPE_BYTE = exports.signingSchema = exports.ethMsgProtocol = exports.addressSizes = exports.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = exports.NETWORKS_BY_CHAIN_ID = exports.MAX_ADDR = exports.CURRENCIES = exports.BASE_URL = exports.BIP_CONSTANTS = exports.getFwVersionConst = exports.ASCII_REGEX = exports.LEDGER_LEGACY_DERIVATION = exports.LEDGER_LIVE_DERIVATION = exports.SOLANA_DERIVATION = exports.BTC_WRAPPED_SEGWIT_DERIVATION = exports.BTC_SEGWIT_DERIVATION = exports.BTC_LEGACY_DERIVATION = exports.DEFAULT_ETH_DERIVATION = exports.DEFAULT_ACTIVE_WALLETS = exports.EMPTY_WALLET_UID = exports.EXTERNAL = void 0;
var latticeConstants_1 = require("./protocol/latticeConstants");
/**
 * Externally exported constants used for building requests
 * @public
 */
exports.EXTERNAL = {
    // Optional flags for `getAddresses`
    GET_ADDR_FLAGS: {
        SECP256K1_PUB: latticeConstants_1.LatticeGetAddressesFlag.secp256k1Pubkey,
        ED25519_PUB: latticeConstants_1.LatticeGetAddressesFlag.ed25519Pubkey,
        BLS12_381_G1_PUB: latticeConstants_1.LatticeGetAddressesFlag.bls12_381Pubkey,
    },
    // Options for building general signing requests
    SIGNING: {
        HASHES: {
            NONE: latticeConstants_1.LatticeSignHash.none,
            KECCAK256: latticeConstants_1.LatticeSignHash.keccak256,
            SHA256: latticeConstants_1.LatticeSignHash.sha256,
        },
        CURVES: {
            SECP256K1: latticeConstants_1.LatticeSignCurve.secp256k1,
            ED25519: latticeConstants_1.LatticeSignCurve.ed25519,
            BLS12_381_G2: latticeConstants_1.LatticeSignCurve.bls12_381,
        },
        ENCODINGS: {
            NONE: latticeConstants_1.LatticeSignEncoding.none,
            SOLANA: latticeConstants_1.LatticeSignEncoding.solana,
            EVM: latticeConstants_1.LatticeSignEncoding.evm,
            ETH_DEPOSIT: latticeConstants_1.LatticeSignEncoding.eth_deposit,
        },
        BLS_DST: {
            BLS_DST_NUL: latticeConstants_1.LatticeSignBlsDst.NUL,
            BLS_DST_POP: latticeConstants_1.LatticeSignBlsDst.POP,
        },
    },
    // Options for exporting encrypted data
    ENC_DATA: {
        SCHEMAS: {
            BLS_KEYSTORE_EIP2335_PBKDF_V4: latticeConstants_1.LatticeEncDataSchema.eip2335,
        },
    },
    ETH_CONSENSUS_SPEC: {
        NETWORKS: {
            MAINNET_GENESIS: {
                networkName: 'mainnet',
                forkVersion: Buffer.alloc(4),
                // Empty root because there were no validators at genesis
                validatorsRoot: Buffer.alloc(32),
            },
        },
        DOMAINS: {
            DEPOSIT: Buffer.from('03000000', 'hex'),
            VOLUNTARY_EXIT: Buffer.from('04000000', 'hex'),
        },
    },
};
exports.PUBLIC = exports.EXTERNAL;
//===============================
// INTERNAL CONSTANTS
//===============================
/** @internal */
var addressSizes = {
    BTC: 20,
    ETH: 20, // 20 byte address not including 0x prefix
};
exports.addressSizes = addressSizes;
/** @internal */
var CURRENCIES = {
    ETH: 'ETH',
    BTC: 'BTC',
    ETH_MSG: 'ETH_MSG',
};
exports.CURRENCIES = CURRENCIES;
/** @internal */
// THIS NEEDS TO BE A PROTOCOL CONSTANT TOO
var signingSchema = {
    BTC_TRANSFER: 0,
    ETH_TRANSFER: 1,
    ERC20_TRANSFER: 2,
    ETH_MSG: 3,
    EXTRA_DATA: 4,
    GENERAL_SIGNING: 5,
};
exports.signingSchema = signingSchema;
/** @internal */
var HARDENED_OFFSET = 0x80000000; // Hardened offset
exports.HARDENED_OFFSET = HARDENED_OFFSET;
/** @internal */
var BIP_CONSTANTS = {
    PURPOSES: {
        ETH: HARDENED_OFFSET + 44,
        BTC_LEGACY: HARDENED_OFFSET + 44,
        BTC_WRAPPED_SEGWIT: HARDENED_OFFSET + 49,
        BTC_SEGWIT: HARDENED_OFFSET + 84,
    },
    COINS: {
        ETH: HARDENED_OFFSET + 60,
        BTC: HARDENED_OFFSET,
        BTC_TESTNET: HARDENED_OFFSET + 1,
    },
};
exports.BIP_CONSTANTS = BIP_CONSTANTS;
/** @internal For all HSM-bound requests */
var REQUEST_TYPE_BYTE = 0x02;
exports.REQUEST_TYPE_BYTE = REQUEST_TYPE_BYTE;
/** @internal */
var VERSION_BYTE = 1;
exports.VERSION_BYTE = VERSION_BYTE;
/** @internal ChainId value to signify larger chainID is in data buffer */
var HANDLE_LARGER_CHAIN_ID = 255;
exports.HANDLE_LARGER_CHAIN_ID = HANDLE_LARGER_CHAIN_ID;
/** @internal Max number of bytes to contain larger chainID in data buffer */
var MAX_CHAIN_ID_BYTES = 8;
exports.MAX_CHAIN_ID_BYTES = MAX_CHAIN_ID_BYTES;
/** @internal */
var BASE_URL = 'https://signing.gridpl.us';
exports.BASE_URL = BASE_URL;
/** @internal */
var EIP712_ABI_LATTICE_FW_TYPE_MAP = {
    address: 1,
    bool: 2,
    uint8: 3,
    uint16: 4,
    uint24: 5,
    uint32: 6,
    uint40: 7,
    uint48: 8,
    uint56: 9,
    uint64: 10,
    uint72: 11,
    uint80: 12,
    uint88: 13,
    uint96: 14,
    uint104: 15,
    uint112: 16,
    uint120: 17,
    uint128: 18,
    uint136: 19,
    uint144: 20,
    uint152: 21,
    uint160: 22,
    uint168: 23,
    uint176: 24,
    uint184: 25,
    uint192: 26,
    uint200: 27,
    uint208: 28,
    uint216: 29,
    uint224: 30,
    uint232: 31,
    uint240: 32,
    uint248: 33,
    uint256: 34,
    int8: 35,
    int16: 36,
    int24: 37,
    int32: 38,
    int40: 39,
    int48: 40,
    int56: 41,
    int64: 42,
    int72: 43,
    int80: 44,
    int88: 45,
    int96: 46,
    int104: 47,
    int112: 48,
    int120: 49,
    int128: 50,
    int136: 51,
    int144: 52,
    int152: 53,
    int160: 54,
    int168: 55,
    int176: 56,
    int184: 57,
    int192: 58,
    int200: 59,
    int208: 60,
    int216: 61,
    int224: 62,
    int232: 63,
    int240: 64,
    int248: 65,
    int256: 66,
    uint: 67,
    bytes1: 69,
    bytes2: 70,
    bytes3: 71,
    bytes4: 72,
    bytes5: 73,
    bytes6: 74,
    bytes7: 75,
    bytes8: 76,
    bytes9: 77,
    bytes10: 78,
    bytes11: 79,
    bytes12: 80,
    bytes13: 81,
    bytes14: 82,
    bytes15: 83,
    bytes16: 84,
    bytes17: 85,
    bytes18: 86,
    bytes19: 87,
    bytes20: 88,
    bytes21: 89,
    bytes22: 90,
    bytes23: 91,
    bytes24: 92,
    bytes25: 93,
    bytes26: 94,
    bytes27: 95,
    bytes28: 96,
    bytes29: 97,
    bytes30: 98,
    bytes31: 99,
    bytes32: 100,
    bytes: 101,
    string: 102,
};
/** @internal */
var ETH_ABI_LATTICE_FW_TYPE_MAP = __assign(__assign({}, EIP712_ABI_LATTICE_FW_TYPE_MAP), { tuple1: 103, tuple2: 104, tuple3: 105, tuple4: 106, tuple5: 107, tuple6: 108, tuple7: 109, tuple8: 110, tuple9: 111, tuple10: 112, tuple11: 113, tuple12: 114, tuple13: 115, tuple14: 116, tuple15: 117, tuple16: 118, tuple17: 119 });
exports.ETH_ABI_LATTICE_FW_TYPE_MAP = ETH_ABI_LATTICE_FW_TYPE_MAP;
/** @internal */
var ethMsgProtocol = {
    SIGN_PERSONAL: {
        str: 'signPersonal',
        enumIdx: 0, // Enum index of this protocol in Lattice firmware
    },
    TYPED_DATA: {
        str: 'typedData',
        enumIdx: 1,
        rawDataMaxLen: 1629,
        typeCodes: EIP712_ABI_LATTICE_FW_TYPE_MAP, // Enum indices of data types in Lattice firmware
    },
};
exports.ethMsgProtocol = ethMsgProtocol;
/** @internal */
function getFwVersionConst(v) {
    var c = {
        extraDataFrameSz: 0,
        extraDataMaxFrames: 0,
        genericSigning: {},
    };
    function gte(v, exp) {
        // Note that `v` fields come in as [fix|minor|major]
        return (v[2] > exp[0] ||
            (v[2] === exp[0] && v[1] > exp[1]) ||
            (v[2] === exp[0] && v[1] === exp[1] && v[0] > exp[2]) ||
            (v[2] === exp[0] && v[1] === exp[1] && v[0] === exp[2]));
    }
    // Very old legacy versions do not give a version number
    var legacy = v.length === 0;
    // BASE FIELDS
    //--------------------------------------
    // Various size constants have changed on the firmware side over time and
    // are captured here
    if (!legacy && gte(v, [0, 10, 4])) {
        // >=0.10.3
        c.reqMaxDataSz = 1678;
        c.ethMaxGasPrice = 20000000000000; // 20000 gwei
        c.addrFlagsAllowed = true;
    }
    else if (!legacy && gte(v, [0, 10, 0])) {
        // >=0.10.0
        c.reqMaxDataSz = 1678;
        c.ethMaxGasPrice = 20000000000000; // 20000 gwei
        c.addrFlagsAllowed = true;
    }
    else {
        // Legacy or <0.10.0
        c.reqMaxDataSz = 1152;
        c.ethMaxGasPrice = 500000000000; // 500 gwei
        c.addrFlagsAllowed = false;
    }
    // These transformations apply to all versions. The subtraction
    // of 128 bytes accounts for metadata and is for legacy reasons.
    // For all modern versions, these are 1550 bytes.
    // NOTE: Non-legacy ETH txs (e.g. EIP1559) will shrink
    // this number.
    // See `ETH_BASE_TX_MAX_DATA_SZ` and `ETH_MAX_BASE_MSG_SZ` in firmware
    c.ethMaxDataSz = c.reqMaxDataSz - 128;
    c.ethMaxMsgSz = c.ethMaxDataSz;
    // Max number of params in an EIP712 type. This was added to firmware
    // to avoid blowing stack size.
    c.eip712MaxTypeParams = 18;
    // -----
    // EXTRA FIELDS ADDED IN LATER FIRMWARE VERSIONS
    // -----
    // --- V0.10.X ---
    // V0.10.4 introduced the ability to send signing requests over multiple
    // data frames (i.e. in multiple requests)
    if (!legacy && gte(v, [0, 10, 4])) {
        c.extraDataFrameSz = 1500; // 1500 bytes per frame of extraData allowed
        c.extraDataMaxFrames = 1; // 1 frame of extraData allowed
    }
    // V0.10.5 added the ability to use flexible address path sizes, which
    // changes the `getAddress` API. It also added support for EIP712
    if (!legacy && gte(v, [0, 10, 5])) {
        c.varAddrPathSzAllowed = true;
        c.eip712Supported = true;
    }
    // V0.10.8 allows a user to sign a prehashed transaction if the payload
    // is too big
    if (!legacy && gte(v, [0, 10, 8])) {
        c.prehashAllowed = true;
    }
    // V0.10.10 allows a user to sign a prehashed ETH message if payload too big
    if (!legacy && gte(v, [0, 10, 10])) {
        c.ethMsgPreHashAllowed = true;
    }
    // --- 0.11.X ---
    // V0.11.0 allows new ETH transaction types
    if (!legacy && gte(v, [0, 11, 0])) {
        c.allowedEthTxTypes = [
            1,
            2, // eip1559
        ];
        // This version added extra data fields to the ETH tx
        c.ethMaxDataSz -= 10;
        c.ethMaxMsgSz = c.ethMaxDataSz;
    }
    // V0.11.2 changed how messages are displayed. For personal_sign messages
    // we now write the header (`Signer: <path>`) into the main body of the screen.
    // This means personal sign message max size is slightly smaller than for
    // EIP712 messages because in the latter case there is no header
    // Note that `<path>` has max size of 62 bytes (`m/X/X/...`)
    if (!legacy && gte(v, [0, 11, 2])) {
        c.personalSignHeaderSz = 72;
    }
    // --- V0.12.X ---
    // V0.12.0 added an API for creating, removing, and fetching key-val file
    // records. For the purposes of this SDK, we only hook into one type of kv
    // file: address names.
    if (!legacy && gte(v, [0, 12, 0])) {
        c.kvActionsAllowed = true;
        c.kvKeyMaxStrSz = 63;
        c.kvValMaxStrSz = 63;
        c.kvActionMaxNum = 10;
        c.kvRemoveMaxNum = 100;
    }
    // --- V0.13.X ---
    // V0.13.0 added native segwit addresses and fixed a bug in exporting
    // legacy bitcoin addresses
    if (!legacy && gte(v, [0, 13, 0])) {
        c.allowBtcLegacyAndSegwitAddrs = true;
        // Random address to be used when trying to deploy a contract
        c.contractDeployKey = '0x08002e0fec8e6acf00835f43c9764f7364fa3f42';
    }
    // --- V0.14.X ---
    // V0.14.0 added support for a more robust API around ABI definitions
    // and generic signing functionality
    if (!legacy && gte(v, [0, 14, 0])) {
        // Size of `category` buffer. Inclusive of null terminator byte.
        c.abiCategorySz = 32;
        c.abiMaxRmv = 200; // Max number of ABI defs that can be removed with
        // a single request
        // See `sizeof(GenericSigningRequest_t)` in firmware
        c.genericSigning.baseReqSz = 1552;
        // See `GENERIC_SIGNING_BASE_MSG_SZ` in firmware
        c.genericSigning.baseDataSz = 1519;
        c.genericSigning.hashTypes = exports.EXTERNAL.SIGNING.HASHES;
        c.genericSigning.curveTypes = exports.EXTERNAL.SIGNING.CURVES;
        c.genericSigning.encodingTypes = {
            NONE: exports.EXTERNAL.SIGNING.ENCODINGS.NONE,
            SOLANA: exports.EXTERNAL.SIGNING.ENCODINGS.SOLANA,
        };
        // Supported flags for `getAddresses`
        c.getAddressFlags = [
            exports.EXTERNAL.GET_ADDR_FLAGS.ED25519_PUB,
            exports.EXTERNAL.GET_ADDR_FLAGS.SECP256K1_PUB,
        ];
        // We updated the max number of params in EIP712 types
        c.eip712MaxTypeParams = 36;
    }
    // DEPRECATED
    // V0.14.1 Added the Terra decoder
    // if (!legacy && gte(v, [0, 14, 1])) {
    //   c.genericSigning.encodingTypes.TERRA = EXTERNAL.SIGNING.ENCODINGS.TERRA;
    // }
    // --- V0.15.X ---
    // V0.15.0 added an EVM decoder and removed the legacy ETH signing pathway
    if (!legacy && gte(v, [0, 15, 0])) {
        c.genericSigning.encodingTypes.EVM = exports.EXTERNAL.SIGNING.ENCODINGS.EVM;
        // We now use the general signing data field as the base
        // Note that we have NOT removed the ETH_MSG type so we should
        // not change ethMaxMsgSz
        c.ethMaxDataSz = 1550 - 31;
        // Max buffer size for get/add decoder requests
        c.maxDecoderBufSz = 1600;
        // Code used to write a calldata decoder
        c.genericSigning.calldataDecoding = {
            reserved: 2895728,
            maxSz: 1024,
        };
    }
    // --- V0.17.X ---
    // V0.17.0 added support for BLS12-381-G1 pubkeys and G2 sigs
    if (!legacy && gte(v, [0, 17, 0])) {
        c.getAddressFlags.push(exports.EXTERNAL.GET_ADDR_FLAGS.BLS12_381_G1_PUB);
        c.genericSigning.encodingTypes.ETH_DEPOSIT = exports.EXTERNAL.SIGNING.ENCODINGS.ETH_DEPOSIT;
    }
    return c;
}
exports.getFwVersionConst = getFwVersionConst;
/** @internal */
// eslint-disable-next-line no-control-regex
var ASCII_REGEX = /^[\x00-\x7F]+$/;
exports.ASCII_REGEX = ASCII_REGEX;
/** @internal */
var EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = 'https://gridplus.github.io/chains/chains.json';
exports.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = EXTERNAL_NETWORKS_BY_CHAIN_ID_URL;
/** @internal - Max number of addresses to fetch */
var MAX_ADDR = 10;
exports.MAX_ADDR = MAX_ADDR;
/** @internal */
var NETWORKS_BY_CHAIN_ID = {
    1: {
        name: 'ethereum',
        baseUrl: 'https://api.etherscan.io',
        apiRoute: 'api?module=contract&action=getabi',
    },
    137: {
        name: 'polygon',
        baseUrl: 'https://api.polygonscan.com',
        apiRoute: 'api?module=contract&action=getabi',
    },
    56: {
        name: 'binance',
        baseUrl: 'https://api.bscscan.com',
        apiRoute: 'api?module=contract&action=getabi',
    },
    42220: {
        name: 'celo',
        baseUrl: 'https://api.celoscan.io',
        apiRoute: 'api?module=contract&action=getabi',
    },
    43114: {
        name: 'avalanche',
        baseUrl: 'https://api.snowtrace.io',
        apiRoute: 'api?module=contract&action=getabi',
    },
};
exports.NETWORKS_BY_CHAIN_ID = NETWORKS_BY_CHAIN_ID;
/** @internal */
exports.EMPTY_WALLET_UID = Buffer.alloc(32);
/** @internal */
exports.DEFAULT_ACTIVE_WALLETS = {
    internal: {
        uid: exports.EMPTY_WALLET_UID,
        external: false,
        name: Buffer.alloc(0),
        capabilities: 0,
    },
    external: {
        uid: exports.EMPTY_WALLET_UID,
        external: true,
        name: Buffer.alloc(0),
        capabilities: 0,
    },
};
/** @internal */
exports.DEFAULT_ETH_DERIVATION = [
    HARDENED_OFFSET + 44,
    HARDENED_OFFSET + 60,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.BTC_LEGACY_DERIVATION = [
    HARDENED_OFFSET + 44,
    HARDENED_OFFSET + 0,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.BTC_SEGWIT_DERIVATION = [
    HARDENED_OFFSET + 84,
    HARDENED_OFFSET,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.BTC_WRAPPED_SEGWIT_DERIVATION = [
    HARDENED_OFFSET + 49,
    HARDENED_OFFSET,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.SOLANA_DERIVATION = [
    HARDENED_OFFSET + 44,
    HARDENED_OFFSET + 501,
    HARDENED_OFFSET,
];
/** @internal */
exports.LEDGER_LIVE_DERIVATION = [
    HARDENED_OFFSET + 49,
    HARDENED_OFFSET + 60,
    HARDENED_OFFSET,
    0,
    0,
];
/** @internal */
exports.LEDGER_LEGACY_DERIVATION = [
    HARDENED_OFFSET + 49,
    HARDENED_OFFSET + 60,
    HARDENED_OFFSET,
    0,
];

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\ethereum.js", {"./constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","@ethereumjs/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ethereumjs\\common\\dist\\index.js","@ethereumjs/tx":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ethereumjs\\tx\\dist\\index.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\bignumber.js\\bignumber.js","borc":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\borc\\src\\index.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","eth-eip712-util-browser":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\eth-eip712-util-browser\\index.js","js-sha3":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js","rlp":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\rlp\\dist\\index.js","secp256k1":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cethereum.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Utils for Ethereum transactions. This is effecitvely a shim of ethereumjs-util, which
// does not have browser (or, by proxy, React-Native) support.
var common_1 = require("@ethereumjs/common");
var tx_1 = require("@ethereumjs/tx");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var borc_1 = __importDefault(require("borc"));
//@ts-expect-error - This third-party package is not typed properly
var eth_eip712_util_browser_1 = require("eth-eip712-util-browser");
var js_sha3_1 = require("js-sha3");
var rlp_1 = require("rlp");
var secp256k1_1 = __importDefault(require("secp256k1"));
var constants_1 = require("./constants");
var protocol_1 = require("./protocol");
var util_1 = require("./util");
var buildEthereumMsgRequest = function (input) {
    if (!input.payload || !input.protocol || !input.signerPath)
        throw new Error('You must provide `payload`, `signerPath`, and `protocol` arguments in the messsage request');
    if (input.signerPath.length > 5 || input.signerPath.length < 2)
        throw new Error('Please provide a signer path with 2-5 indices');
    var req = {
        schema: protocol_1.LatticeSignSchema.ethereumMsg,
        payload: null,
        input: input,
        msg: null, // Save the buffered message for later
    };
    switch (input.protocol) {
        case 'signPersonal':
            return buildPersonalSignRequest(req, input);
        case 'eip712':
            if (!input.fwConstants.eip712Supported)
                throw new Error('EIP712 is not supported by your Lattice firmware version. Please upgrade.');
            return buildEIP712Request(req, input);
        default:
            throw new Error('Unsupported protocol');
    }
};
var validateEthereumMsgResponse = function (res, req) {
    var signer = res.signer, sig = res.sig;
    var input = req.input, msg = req.msg, _a = req.prehash, prehash = _a === void 0 ? null : _a;
    if (input.protocol === 'signPersonal') {
        // NOTE: We are currently hardcoding networkID=1 and useEIP155=false but these
        //       may be configurable in future versions
        var hash_1 = prehash
            ? prehash
            : Buffer.from((0, js_sha3_1.keccak256)(Buffer.concat([get_personal_sign_prefix(msg.length), msg])), 'hex');
        // Get recovery param with a `v` value of [27,28] by setting `useEIP155=false`
        return addRecoveryParam(hash_1, sig, signer, {
            chainId: 1,
            useEIP155: false,
        });
    }
    else if (input.protocol === 'eip712') {
        var encoded = eth_eip712_util_browser_1.TypedDataUtils.hash(req.input.payload);
        var digest = prehash ? prehash : encoded;
        // Get recovery param with a `v` value of [27,28] by setting `useEIP155=false`
        return addRecoveryParam(digest, sig, signer, { useEIP155: false });
    }
    else {
        throw new Error('Unsupported protocol');
    }
};
var buildEthereumTxRequest = function (data) {
    try {
        var _a = data.chainId, chainId = _a === void 0 ? 1 : _a;
        var signerPath = data.signerPath, _b = data.eip155, eip155 = _b === void 0 ? null : _b, fwConstants = data.fwConstants, _c = data.type, type = _c === void 0 ? null : _c;
        var contractDeployKey = fwConstants.contractDeployKey, extraDataFrameSz = fwConstants.extraDataFrameSz, extraDataMaxFrames = fwConstants.extraDataMaxFrames, prehashAllowed = fwConstants.prehashAllowed;
        var EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;
        var MAX_BASE_DATA_SZ = fwConstants.ethMaxDataSz;
        var VAR_PATH_SZ = fwConstants.varAddrPathSzAllowed;
        // Sanity checks:
        // There are a handful of named chains we allow the user to reference (`chainIds`)
        // Custom chainIDs should be either numerical or hex strings
        if (typeof chainId !== 'number' &&
            isValidChainIdHexNumStr(chainId) === false) {
            chainId = chainIds[chainId];
        }
        // If this was not a custom chainID and we cannot find the name of it, exit
        if (!chainId)
            throw new Error('Unsupported chain ID or name');
        // Sanity check on signePath
        if (!signerPath)
            throw new Error('`signerPath` not provided');
        // Is this a contract deployment?
        if (data.to === null && !contractDeployKey) {
            throw new Error('Contract deployment not supported. Please update your Lattice firmware.');
        }
        var isDeployment = data.to === null && contractDeployKey;
        // We support eip1559 and eip2930 types (as well as legacy)
        var eip1559IsAllowed = fwConstants.allowedEthTxTypes &&
            fwConstants.allowedEthTxTypes.indexOf(2) > -1;
        var eip2930IsAllowed = fwConstants.allowedEthTxTypes &&
            fwConstants.allowedEthTxTypes.indexOf(1) > -1;
        var isEip1559 = eip1559IsAllowed && (type === 2 || type === 'eip1559');
        var isEip2930 = eip2930IsAllowed && (type === 1 || type === 'eip2930');
        if (type !== null && !isEip1559 && !isEip2930)
            throw new Error('Unsupported Ethereum transaction type');
        // Determine if we should use EIP155 given the chainID.
        // If we are explicitly told to use eip155, we will use it. Otherwise,
        // we will look up if the specified chainId is associated with a chain
        // that does not use EIP155 by default. Note that most do use EIP155.
        var useEIP155 = chainUsesEIP155(chainId);
        if (eip155 !== null && typeof eip155 === 'boolean') {
            useEIP155 = eip155;
        }
        else if (isEip1559 || isEip2930) {
            // Newer transaction types do not use EIP155 since the chainId is serialized
            useEIP155 = false;
        }
        // Hack for metamask, which sends value=null for 0 ETH transactions
        if (!data.value)
            data.value = 0;
        //--------------
        // 1. BUILD THE RAW TX FOR FUTURE RLP ENCODING
        //--------------
        // Ensure all fields are 0x-prefixed hex strings
        var rawTx = [];
        // Build the transaction buffer array
        var chainIdBytes = (0, util_1.ensureHexBuffer)(chainId);
        var nonceBytes = (0, util_1.ensureHexBuffer)(data.nonce);
        var gasPriceBytes = void 0;
        var gasLimitBytes = (0, util_1.ensureHexBuffer)(data.gasLimit);
        // Handle contract deployment (indicated by `to` being `null`)
        // For contract deployment we write a 20-byte key to the request
        // buffer, which gets swapped for an empty buffer in firmware.
        var toRlpElem = void 0, toBytes = void 0;
        if (isDeployment) {
            toRlpElem = Buffer.alloc(0);
            toBytes = (0, util_1.ensureHexBuffer)(contractDeployKey);
        }
        else {
            toRlpElem = (0, util_1.ensureHexBuffer)(data.to);
            toBytes = (0, util_1.ensureHexBuffer)(data.to);
        }
        var valueBytes = (0, util_1.ensureHexBuffer)(data.value);
        var dataBytes = (0, util_1.ensureHexBuffer)(data.data);
        if (isEip1559 || isEip2930) {
            // EIP1559 and EIP2930 transactions have a chainID field
            rawTx.push(chainIdBytes);
        }
        rawTx.push(nonceBytes);
        var maxPriorityFeePerGasBytes = void 0, maxFeePerGasBytes = void 0;
        if (isEip1559) {
            if (!data.maxPriorityFeePerGas)
                throw new Error('EIP1559 transactions must include `maxPriorityFeePerGas`');
            maxPriorityFeePerGasBytes = (0, util_1.ensureHexBuffer)(data.maxPriorityFeePerGas);
            rawTx.push(maxPriorityFeePerGasBytes);
            maxFeePerGasBytes = (0, util_1.ensureHexBuffer)(data.maxFeePerGas);
            rawTx.push(maxFeePerGasBytes);
            // EIP1559 renamed "gasPrice" to "maxFeePerGas", but firmware still
            // uses `gasPrice` in the struct, so update that value here.
            gasPriceBytes = maxFeePerGasBytes;
        }
        else {
            // EIP1559 transactions do not have the gasPrice field
            gasPriceBytes = (0, util_1.ensureHexBuffer)(data.gasPrice);
            rawTx.push(gasPriceBytes);
        }
        rawTx.push(gasLimitBytes);
        rawTx.push(toRlpElem);
        rawTx.push(valueBytes);
        rawTx.push(dataBytes);
        // We do not currently support accessList in firmware so we need to prehash if
        // the list is non-null
        var PREHASH_FROM_ACCESS_LIST_1 = false;
        if (isEip1559 || isEip2930) {
            var accessList_1 = [];
            if (Array.isArray(data.accessList)) {
                data.accessList.forEach(function (listItem) {
                    var keys = [];
                    listItem.storageKeys.forEach(function (key) {
                        keys.push((0, util_1.ensureHexBuffer)(key));
                    });
                    accessList_1.push([(0, util_1.ensureHexBuffer)(listItem.address), keys]);
                    PREHASH_FROM_ACCESS_LIST_1 = true;
                });
            }
            rawTx.push(accessList_1);
        }
        else if (useEIP155 === true) {
            // Add empty v,r,s values for EIP155 legacy transactions
            rawTx.push(chainIdBytes); // v (which is the same as chainId in EIP155 txs)
            rawTx.push((0, util_1.ensureHexBuffer)(null)); // r
            rawTx.push((0, util_1.ensureHexBuffer)(null)); // s
        }
        //--------------
        // 2. BUILD THE LATTICE REQUEST PAYLOAD
        //--------------
        var ETH_TX_NON_DATA_SZ = 122; // Accounts for metadata and non-data params
        var txReqPayload = Buffer.alloc(MAX_BASE_DATA_SZ + ETH_TX_NON_DATA_SZ);
        var off = 0;
        // 1. EIP155 switch and chainID
        //------------------
        txReqPayload.writeUInt8(Number(useEIP155), off);
        off++;
        // NOTE: Originally we designed for a 1-byte chainID, but modern rollup chains use much larger
        // chainID values. To account for these, we will put the chainID into the `data` buffer if it
        // is >=255. Values up to UINT64_MAX will be allowed.
        var chainIdBuf = void 0;
        var chainIdBufSz = 0;
        if (useChainIdBuffer(chainId) === true) {
            chainIdBuf = getChainIdBuf(chainId);
            chainIdBufSz = chainIdBuf.length;
            if (chainIdBufSz > constants_1.MAX_CHAIN_ID_BYTES)
                throw new Error('ChainID provided is too large.');
            // Signal to Lattice firmware that it needs to read the chainId from the tx.data buffer
            txReqPayload.writeUInt8(constants_1.HANDLE_LARGER_CHAIN_ID, off);
            off++;
        }
        else {
            // For chainIDs <255, write it to the chainId u8 slot in the main tx buffer
            chainIdBuf = (0, util_1.ensureHexBuffer)(chainId);
            if (chainIdBuf.length !== 1)
                throw new Error('Error parsing chainID');
            chainIdBuf.copy(txReqPayload, off);
            off += chainIdBuf.length;
        }
        // 2. Signer Path
        //------------------
        var signerPathBuf = (0, util_1.buildSignerPathBuf)(signerPath, VAR_PATH_SZ);
        signerPathBuf.copy(txReqPayload, off);
        off += signerPathBuf.length;
        // 3. ETH TX request data
        //------------------
        if (nonceBytes.length > 4)
            throw new Error('Nonce too large');
        nonceBytes.copy(txReqPayload, off + (4 - nonceBytes.length));
        off += 4;
        if (gasPriceBytes.length > 8)
            throw new Error('Gas price too large');
        gasPriceBytes.copy(txReqPayload, off + (8 - gasPriceBytes.length));
        off += 8;
        if (gasLimitBytes.length > 4)
            throw new Error('Gas limit too large');
        gasLimitBytes.copy(txReqPayload, off + (4 - gasLimitBytes.length));
        off += 4;
        if (toBytes.length !== 20)
            throw new Error('Invalid `to` address');
        toBytes.copy(txReqPayload, off);
        off += 20;
        if (valueBytes.length > 32)
            throw new Error('Value too large');
        valueBytes.copy(txReqPayload, off + (32 - valueBytes.length));
        off += 32;
        // Extra Tx data comes before `data` in the struct
        var PREHASH_UNSUPPORTED = false;
        if (fwConstants.allowedEthTxTypes) {
            // Some types may not be supported by firmware, so we will need to prehash
            if (PREHASH_FROM_ACCESS_LIST_1) {
                PREHASH_UNSUPPORTED = true;
            }
            txReqPayload.writeUInt8(PREHASH_UNSUPPORTED ? 1 : 0, off);
            off += 1;
            // EIP1559 & EIP2930 struct version
            if (isEip1559) {
                txReqPayload.writeUInt8(2, off);
                off += 1; // Eip1559 type enum value
                if (maxPriorityFeePerGasBytes.length > 8)
                    throw new Error('maxPriorityFeePerGasBytes too large');
                maxPriorityFeePerGasBytes.copy(txReqPayload, off + (8 - maxPriorityFeePerGasBytes.length));
                off += 8; // Skip EIP1559 params
            }
            else if (isEip2930) {
                txReqPayload.writeUInt8(1, off);
                off += 1; // Eip2930 type enum value
                off += 8; // Skip EIP1559 params
            }
            else {
                off += 9; // Skip EIP1559 and EIP2930 params
            }
        }
        // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable
        var extraDataPayloads_1 = [];
        var prehash = null;
        // Create the buffer, prefix with chainId (if needed) and add data slice
        var dataSz = dataBytes.length || 0;
        var chainIdExtraSz = chainIdBufSz > 0 ? chainIdBufSz + 1 : 0;
        var dataToCopy = Buffer.alloc(dataSz + chainIdExtraSz);
        if (chainIdExtraSz > 0) {
            dataToCopy.writeUInt8(chainIdBufSz, 0);
            chainIdBuf.copy(dataToCopy, 1);
        }
        dataBytes.copy(dataToCopy, chainIdExtraSz);
        if (dataSz > MAX_BASE_DATA_SZ) {
            // Determine sizes and run through sanity checks
            var totalSz = dataSz + chainIdExtraSz;
            var maxSzAllowed = MAX_BASE_DATA_SZ + extraDataMaxFrames * extraDataFrameSz;
            if (prehashAllowed && totalSz > maxSzAllowed) {
                // If this payload is too large to send, but the Lattice allows a prehashed message, do that
                prehash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(rawTx, type)), 'hex');
            }
            else {
                if (!EXTRA_DATA_ALLOWED ||
                    (EXTRA_DATA_ALLOWED && totalSz > maxSzAllowed))
                    throw new Error("Data field too large (got ".concat(dataBytes.length, "; must be <=").concat(maxSzAllowed - chainIdExtraSz, " bytes)"));
                // Split overflow data into extraData frames
                var frames_1 = (0, util_1.splitFrames)(dataToCopy.slice(MAX_BASE_DATA_SZ), extraDataFrameSz);
                frames_1.forEach(function (frame) {
                    var szLE = Buffer.alloc(4);
                    szLE.writeUInt32LE(frame.length, 0);
                    extraDataPayloads_1.push(Buffer.concat([szLE, frame]));
                });
            }
        }
        else if (PREHASH_UNSUPPORTED) {
            // If something is unsupported in firmware but we want to allow such transactions,
            // we prehash the message here.
            prehash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(rawTx, type)), 'hex');
        }
        // Write the data size (does *NOT* include the chainId buffer, if that exists)
        txReqPayload.writeUInt16BE(dataBytes.length, off);
        off += 2;
        // Copy in the chainId buffer if needed
        if (chainIdBufSz > 0) {
            txReqPayload.writeUInt8(chainIdBufSz, off);
            off++;
            chainIdBuf.copy(txReqPayload, off);
            off += chainIdBufSz;
        }
        // Copy the first slice of the data itself. If this payload has been pre-hashed, include it
        // in the `data` field. This will result in a different Lattice screen being drawn.
        if (prehash) {
            prehash.copy(txReqPayload, off);
            off += MAX_BASE_DATA_SZ;
        }
        else {
            dataBytes.slice(0, MAX_BASE_DATA_SZ).copy(txReqPayload, off);
            off += MAX_BASE_DATA_SZ;
        }
        return {
            rawTx: rawTx,
            type: type,
            payload: txReqPayload.slice(0, off),
            extraDataPayloads: extraDataPayloads_1,
            schema: protocol_1.LatticeSignSchema.ethereum,
            chainId: chainId,
            useEIP155: useEIP155,
            signerPath: signerPath,
        };
    }
    catch (err) {
        return { err: err.message };
    }
};
// From ethereumjs-util
function stripZeros(a) {
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
        a = a.slice(1);
        first = a[0];
    }
    return a;
}
// Given a 64-byte signature [r,s] we need to figure out the v value
// and attah the full signature to the end of the transaction payload
var buildEthRawTx = function (tx, sig, address) {
    // RLP-encode the data we sent to the lattice
    var hash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(tx.rawTx, tx.type)), 'hex');
    var newSig = addRecoveryParam(hash, sig, address, tx);
    // Use the signature to generate a new raw transaction payload
    // Strip the last 3 items and replace them with signature components
    var newRawTx = tx.useEIP155 ? tx.rawTx.slice(0, -3) : tx.rawTx;
    newRawTx.push(newSig.v);
    // Per `ethereumjs-tx`, RLP encoding should include signature components w/ stripped zeros
    // See: https://github.com/ethereumjs/ethereumjs-tx/blob/master/src/transaction.ts#L187
    newRawTx.push(stripZeros(newSig.r));
    newRawTx.push(stripZeros(newSig.s));
    var rlpEncodedWithSig = Buffer.from((0, rlp_1.encode)(newRawTx));
    if (tx.type) {
        rlpEncodedWithSig = Buffer.concat([
            Buffer.from([tx.type]),
            rlpEncodedWithSig,
        ]);
    }
    return { rawTx: rlpEncodedWithSig.toString('hex'), sigWithV: newSig };
};
// Attach a recovery parameter to a signature by brute-forcing ECRecover
function addRecoveryParam(hashBuf, sig, address, txData) {
    if (txData === void 0) { txData = {}; }
    try {
        // Rebuild the keccak256 hash here so we can `ecrecover`
        var hash_2 = new Uint8Array(hashBuf);
        var v = 0;
        // Fix signature componenet lengths to 32 bytes each
        var r = (0, util_1.fixLen)(sig.r, 32);
        sig.r = r;
        var s = (0, util_1.fixLen)(sig.s, 32);
        sig.s = s;
        // Calculate the recovery param
        var rs = new Uint8Array(Buffer.concat([r, s]));
        var pubkey = secp256k1_1.default.ecdsaRecover(rs, v, hash_2, false).slice(1);
        // If the first `v` value is a match, return the sig!
        if (pubToAddrStr(pubkey) === address.toString('hex')) {
            sig.v = getRecoveryParam(v, txData);
            return sig;
        }
        // Otherwise, try the other `v` value
        v = 1;
        pubkey = secp256k1_1.default.ecdsaRecover(rs, v, hash_2, false).slice(1);
        if (pubToAddrStr(pubkey) === address.toString('hex')) {
            sig.v = getRecoveryParam(v, txData);
            return sig;
        }
        else {
            // If neither is a match, we should return an error
            throw new Error('Invalid Ethereum signature returned.');
        }
    }
    catch (err) {
        throw new Error(err);
    }
}
// Convert an RLP-serialized transaction (plus signature) into a transaction hash
var hashTransaction = function (serializedTx) {
    return (0, js_sha3_1.keccak256)(Buffer.from(serializedTx, 'hex'));
};
// Returns address string given public key buffer
function pubToAddrStr(pub) {
    return (0, js_sha3_1.keccak256)(pub).slice(-40);
}
// Convert a 0/1 `v` into a recovery param:
// * For non-EIP155 transactions, return `27 + v`
// * For EIP155 transactions, return `(CHAIN_ID*2) + 35 + v`
function getRecoveryParam(v, txData) {
    if (txData === void 0) { txData = {}; }
    var chainId = txData.chainId, useEIP155 = txData.useEIP155, type = txData.type;
    // For EIP1559 and EIP2930 transactions, we want the recoveryParam (0 or 1)
    // rather than the `v` value because the `chainId` is already included in the
    // transaction payload.
    if (type === 1 || type === 2) {
        return (0, util_1.ensureHexBuffer)(v, true); // 0 or 1, with 0 expected as an empty buffer
    }
    else if (false === useEIP155 || chainId === null) {
        // For ETH messages and non-EIP155 chains the set should be [27, 28] for `v`
        return Buffer.from(new bignumber_js_1.default(v).plus(27).toString(16), 'hex');
    }
    // We will use EIP155 in most cases. Convert v to a bignum and operate on it.
    // Note that the protocol calls for v = (CHAIN_ID*2) + 35/36, where 35 or 36
    // is decided on based on the ecrecover result. `v` is passed in as either 0 or 1
    // so we add 35 to that.
    var chainIdBuf = getChainIdBuf(chainId);
    var chainIdBN = new bignumber_js_1.default(chainIdBuf.toString('hex'), 16);
    return (0, util_1.ensureHexBuffer)("0x".concat(chainIdBN.times(2).plus(35).plus(v).toString(16)));
}
var chainIds = {
    mainnet: 1,
    roptsten: 3,
    rinkeby: 4,
    kovan: 42,
    goerli: 5,
};
// Get a buffer containing the chainId value.
// Returns a 1, 2, 4, or 8 byte buffer with the chainId encoded in big endian
function getChainIdBuf(chainId) {
    var b;
    // If our chainID is a hex string, we can convert it to a hex
    // buffer directly
    if (true === isValidChainIdHexNumStr(chainId))
        b = (0, util_1.ensureHexBuffer)(chainId);
    // If our chainID is a base-10 number, parse with bignumber.js and convert to hex buffer
    else
        b = (0, util_1.ensureHexBuffer)("0x".concat(new bignumber_js_1.default(chainId).toString(16)));
    // Make sure the buffer is an allowed size
    if (b.length > 8)
        throw new Error('ChainID provided is too large.');
    // If this matches a u16, u32, or u64 size, return it now
    if (b.length <= 2 || b.length === 4 || b.length === 8)
        return b;
    // For other size buffers, we need to pack into u32 or u64 before returning;
    var buf;
    if (b.length === 3) {
        buf = Buffer.alloc(4);
        buf.writeUInt32BE(chainId);
    }
    else if (b.length <= 8) {
        buf = Buffer.alloc(8);
        b.copy(buf, 8 - b.length);
    }
    return buf;
}
// Determine if the chain uses EIP155 by default, based on the chainID
function chainUsesEIP155(chainID) {
    switch (chainID) {
        case 3: // ropsten
        case 4: // rinkeby
            return false;
        case 1: // mainnet
        case 42: // kovan
        case 5: // goerli
        default:
            // all others should use eip155
            return true;
    }
}
// Determine if a valid number was passed in as a hex string
function isValidChainIdHexNumStr(s) {
    if (typeof s !== 'string')
        return false;
    if (s.slice(0, 2) !== '0x')
        return false;
    try {
        var b = new bignumber_js_1.default(s, 16);
        return b.isNaN() === false;
    }
    catch (err) {
        return false;
    }
}
// If this is a nubmer that fits in one byte, we don't need to add it
// to the `data` buffer of the main transaction.
// Note the one edge case: we still need to use the `data` field for chainID=255.
function useChainIdBuffer(id) {
    var buf = getChainIdBuf(id);
    if (buf.length === 1)
        return buf.readUInt8(0) === 255;
    return true;
}
function buildPersonalSignRequest(req, input) {
    var MAX_BASE_MSG_SZ = input.fwConstants.ethMaxMsgSz;
    var VAR_PATH_SZ = input.fwConstants.varAddrPathSzAllowed;
    var L = 24 + MAX_BASE_MSG_SZ + 4;
    var off = 0;
    req.payload = Buffer.alloc(L);
    req.payload.writeUInt8(constants_1.ethMsgProtocol.SIGN_PERSONAL, 0);
    off += 1;
    // Write the signer path into the buffer
    var signerPathBuf = (0, util_1.buildSignerPathBuf)(input.signerPath, VAR_PATH_SZ);
    signerPathBuf.copy(req.payload, off);
    off += signerPathBuf.length;
    // Write the payload buffer. The payload can come in either as a buffer or as a string
    var payload = input.payload;
    // Determine if this is a hex string
    var displayHex = false;
    if (typeof input.payload === 'string') {
        if (input.payload.slice(0, 2) === '0x') {
            payload = (0, util_1.ensureHexBuffer)(input.payload);
            displayHex =
                false ===
                    constants_1.ASCII_REGEX.test(Buffer.from(input.payload.slice(2), 'hex').toString());
        }
        else {
            if (false === (0, util_1.isAsciiStr)(input.payload))
                throw new Error('Currently, the Lattice can only display ASCII strings.');
            payload = Buffer.from(input.payload);
        }
    }
    else if (typeof input.displayHex === 'boolean') {
        // If this is a buffer and the user has specified whether or not this
        // is a hex buffer with the optional argument, write that
        displayHex = input.displayHex;
    }
    else {
        // Otherwise, determine if this buffer is an ASCII string. If it is, set `displayHex` accordingly.
        // NOTE: THIS MEANS THAT NON-ASCII STRINGS WILL DISPLAY AS HEX SINCE WE CANNOT KNOW IF THE REQUESTER
        //        EXPECTED NON-ASCII CHARACTERS TO DISPLAY IN A STRING
        // TODO: Develop a more elegant solution for this
        if (!input.payload.toString)
            throw new Error('Unsupported input data type');
        displayHex = false === constants_1.ASCII_REGEX.test(input.payload.toString());
    }
    var fwConst = input.fwConstants;
    var maxSzAllowed = MAX_BASE_MSG_SZ + fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz;
    if (fwConst.personalSignHeaderSz) {
        // Account for the personal_sign header string
        maxSzAllowed -= fwConst.personalSignHeaderSz;
    }
    if (fwConst.ethMsgPreHashAllowed && payload.length > maxSzAllowed) {
        // If this message will not fit and pre-hashing is allowed, do that
        req.payload.writeUInt8(displayHex, off);
        off += 1;
        req.payload.writeUInt16LE(payload.length, off);
        off += 2;
        var prehash = Buffer.from((0, js_sha3_1.keccak256)(Buffer.concat([get_personal_sign_prefix(payload.length), payload])), 'hex');
        prehash.copy(req.payload, off);
        req.prehash = prehash;
    }
    else {
        // Otherwise we can fit the payload.
        // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable
        var extraDataPayloads = getExtraData(payload, input);
        // Write the payload and metadata into our buffer
        req.extraDataPayloads = extraDataPayloads;
        req.msg = payload;
        req.payload.writeUInt8(displayHex, off);
        off += 1;
        req.payload.writeUInt16LE(payload.length, off);
        off += 2;
        payload.copy(req.payload, off);
    }
    return req;
}
function buildEIP712Request(req, input) {
    var _a = input.fwConstants, ethMaxMsgSz = _a.ethMaxMsgSz, varAddrPathSzAllowed = _a.varAddrPathSzAllowed, eip712MaxTypeParams = _a.eip712MaxTypeParams;
    var TYPED_DATA = constants_1.ethMsgProtocol.TYPED_DATA;
    var L = 24 + ethMaxMsgSz + 4;
    var off = 0;
    req.payload = Buffer.alloc(L);
    req.payload.writeUInt8(TYPED_DATA.enumIdx, 0);
    off += 1;
    // Write the signer path
    var signerPathBuf = (0, util_1.buildSignerPathBuf)(input.signerPath, varAddrPathSzAllowed);
    signerPathBuf.copy(req.payload, off);
    off += signerPathBuf.length;
    // Parse/clean the EIP712 payload, serialize with CBOR, and write to the payload
    var data = JSON.parse(JSON.stringify(input.payload));
    if (!data.primaryType || !data.types[data.primaryType])
        throw new Error('primaryType must be specified and the type must be included.');
    if (!data.message || !data.domain)
        throw new Error('message and domain must be specified.');
    if (0 > Object.keys(data.types).indexOf('EIP712Domain'))
        throw new Error('EIP712Domain type must be defined.');
    // Parse the payload to ensure we have valid EIP712 data types and that
    // they are encoded such that Lattice firmware can parse them.
    // We need two different encodings: one to send to the Lattice in a format that plays
    // nicely with our firmware CBOR decoder. The other is formatted to be consumable by
    // our EIP712 validation module.
    input.payload.message = parseEIP712Msg(JSON.parse(JSON.stringify(data.message)), JSON.parse(JSON.stringify(data.primaryType)), JSON.parse(JSON.stringify(data.types)), true);
    input.payload.domain = parseEIP712Msg(JSON.parse(JSON.stringify(data.domain)), 'EIP712Domain', JSON.parse(JSON.stringify(data.types)), true);
    data.domain = parseEIP712Msg(data.domain, 'EIP712Domain', data.types, false);
    data.message = parseEIP712Msg(data.message, data.primaryType, data.types, false);
    // Now build the message to be sent to the Lattice
    var payload = Buffer.from(borc_1.default.encode(data));
    var fwConst = input.fwConstants;
    var maxSzAllowed = ethMaxMsgSz + fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz;
    // Determine if we need to prehash
    var shouldPrehash = payload.length > maxSzAllowed;
    Object.keys(data.types).forEach(function (k) {
        if (data.types[k].length > eip712MaxTypeParams) {
            shouldPrehash = true;
        }
    });
    if (fwConst.ethMsgPreHashAllowed && shouldPrehash) {
        // If this payload is too large to send, but the Lattice allows a prehashed message, do that
        req.payload.writeUInt16LE(payload.length, off);
        off += 2;
        var prehash = eth_eip712_util_browser_1.TypedDataUtils.hash(req.input.payload);
        var prehashBuf = Buffer.from(prehash);
        prehashBuf.copy(req.payload, off);
        req.prehash = prehash;
    }
    else {
        var extraDataPayloads = getExtraData(payload, input);
        req.extraDataPayloads = extraDataPayloads;
        req.payload.writeUInt16LE(payload.length, off);
        off += 2;
        payload.copy(req.payload, off);
        off += payload.length;
        // Slice out the part of the buffer that we didn't use.
        req.payload = req.payload.slice(0, off);
    }
    return req;
}
function getExtraData(payload, input) {
    var _a = input.fwConstants, ethMaxMsgSz = _a.ethMaxMsgSz, extraDataFrameSz = _a.extraDataFrameSz, extraDataMaxFrames = _a.extraDataMaxFrames;
    var MAX_BASE_MSG_SZ = ethMaxMsgSz;
    var EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;
    var extraDataPayloads = [];
    if (payload.length > MAX_BASE_MSG_SZ) {
        // Determine sizes and run through sanity checks
        var maxSzAllowed = MAX_BASE_MSG_SZ + extraDataMaxFrames * extraDataFrameSz;
        if (!EXTRA_DATA_ALLOWED)
            throw new Error("Your message is ".concat(payload.length, " bytes, but can only be a maximum of ").concat(MAX_BASE_MSG_SZ));
        else if (EXTRA_DATA_ALLOWED && payload.length > maxSzAllowed)
            throw new Error("Your message is ".concat(payload.length, " bytes, but can only be a maximum of ").concat(maxSzAllowed));
        // Split overflow data into extraData frames
        var frames_2 = (0, util_1.splitFrames)(payload.slice(MAX_BASE_MSG_SZ), extraDataFrameSz);
        frames_2.forEach(function (frame) {
            var szLE = Buffer.alloc(4);
            szLE.writeUInt32LE(frame.length, 0);
            extraDataPayloads.push(Buffer.concat([szLE, frame]));
        });
    }
    return extraDataPayloads;
}
function parseEIP712Msg(msg, typeName, types, forJSParser) {
    if (forJSParser === void 0) { forJSParser = false; }
    var type = types[typeName];
    type.forEach(function (item) {
        var isArrayType = item.type.indexOf('[') > -1;
        var singularType = isArrayType
            ? item.type.slice(0, item.type.indexOf('['))
            : item.type;
        var isCustomType = Object.keys(types).indexOf(singularType) > -1;
        if (isCustomType && Array.isArray(msg)) {
            // For custom types we need to jump into the `msg` using the key (name of type) and
            // parse that entire sub-struct as if it were a message.
            // We will recurse into sub-structs until we reach a level where every item is an
            // elementary (i.e. non-custom) type.
            // For arrays, we need to loop through each message item.
            for (var i = 0; i < msg.length; i++) {
                msg[i][item.name] = parseEIP712Msg(msg[i][item.name], singularType, types, forJSParser);
            }
        }
        else if (isCustomType) {
            // Not an array means we can jump directly into the sub-struct to convert
            msg[item.name] = parseEIP712Msg(msg[item.name], singularType, types, forJSParser);
        }
        else if (Array.isArray(msg)) {
            // If we have an array for this particular type and the type we are parsing
            // is *not* a custom type, loop through the array elements and convert the types.
            for (var i = 0; i < msg.length; i++) {
                if (isArrayType) {
                    // If this type is itself an array, loop through those elements and parse individually.
                    // This code is not reachable for custom types so we assume these are arrays of
                    // elementary types.
                    for (var j = 0; j < msg[i][item.name].length; j++) {
                        msg[i][item.name][j] = parseEIP712Item(msg[i][item.name][j], singularType, forJSParser);
                    }
                }
                else {
                    // Non-arrays parse + replace one value for the elementary type
                    msg[i][item.name] = parseEIP712Item(msg[i][item.name], singularType, forJSParser);
                }
            }
        }
        else if (isArrayType) {
            // If we have an elementary array type and a non-array message level,
            //loop through the array and parse + replace  each item individually.
            for (var i = 0; i < msg[item.name].length; i++) {
                msg[item.name][i] = parseEIP712Item(msg[item.name][i], singularType, forJSParser);
            }
        }
        else {
            // If this is a singular elementary type, simply parse + replace.
            msg[item.name] = parseEIP712Item(msg[item.name], singularType, forJSParser);
        }
    });
    return msg;
}
function parseEIP712Item(data, type, forJSParser) {
    if (forJSParser === void 0) { forJSParser = false; }
    if (type === 'bytes') {
        // Variable sized bytes need to be buffer type
        data = (0, util_1.ensureHexBuffer)(data);
        if (forJSParser) {
            // For EIP712 encoding module it's easier to encode hex strings
            data = "0x".concat(data.toString('hex'));
        }
    }
    else if (type.slice(0, 5) === 'bytes') {
        // Fixed sizes bytes need to be buffer type. We also add some sanity checks.
        var nBytes = parseInt(type.slice(5));
        data = (0, util_1.ensureHexBuffer)(data);
        if (data.length !== nBytes)
            throw new Error("Expected ".concat(type, " type, but got ").concat(data.length, " bytes"));
        if (forJSParser) {
            // For EIP712 encoding module it's easier to encode hex strings
            data = "0x".concat(data.toString('hex'));
        }
    }
    else if (type === 'address') {
        // Address must be a 20 byte buffer
        data = (0, util_1.ensureHexBuffer)(data);
        // Edge case to handle the 0-address
        if (data.length === 0) {
            data = Buffer.alloc(20);
        }
        if (data.length !== 20)
            throw new Error("Address type must be 20 bytes, but got ".concat(data.length, " bytes"));
        // For EIP712 encoding module it's easier to encode hex strings
        if (forJSParser) {
            data = "0x".concat(data.toString('hex'));
        }
    }
    else if (constants_1.ethMsgProtocol.TYPED_DATA.typeCodes[type] &&
        (type.indexOf('uint') > -1 || type.indexOf('int') > -1)) {
        var b = (0, util_1.ensureHexBuffer)(data);
        // Edge case to handle 0-value bignums
        if (b.length === 0) {
            b = Buffer.from('00', 'hex');
        }
        // Uint256s should be encoded as bignums.
        if (forJSParser) {
            // For EIP712 encoding in this module we need strings to represent the numbers
            data = "0x".concat(b.toString('hex'));
        }
        else {
            // `bignumber.js` is needed for `cbor` encoding, which gets sent to the Lattice and plays
            // nicely with its firmware cbor lib.
            // NOTE: If we instantiate a `bignumber.js` object, it will not match what `borc` creates
            // when run inside of the browser (i.e. MetaMask). Thus we introduce this hack to make sure
            // we are creating a compatible type.
            // TODO: Find another cbor lib that is compataible with the firmware's lib in a browser
            // context. This is surprisingly difficult - I tried several libs and only cbor/borc have
            // worked (borc is a supposedly "browser compatible" version of cbor)
            data = new borc_1.default.Encoder().semanticTypes[1][0](b.toString('hex'), 16);
        }
    }
    else if (type === 'bool') {
        // Booleans need to be cast to a u8
        data = data === true ? 1 : 0;
    }
    // Other types don't need to be modified
    return data;
}
function get_personal_sign_prefix(L) {
    return Buffer.from("\u0019Ethereum Signed Message:\n".concat(L.toString()), 'utf-8');
}
function get_rlp_encoded_preimage(rawTx, txType) {
    if (txType) {
        return Buffer.concat([Buffer.from([txType]), Buffer.from((0, rlp_1.encode)(rawTx))]);
    }
    else {
        return Buffer.from((0, rlp_1.encode)(rawTx));
    }
}
// ======
// TEMPORARY BRIDGE
// We are migrating from all legacy signing paths to a single generic
// signing route. If users are attempting a legacy transaction request
// against a Lattice on firmware v0.15.0 and above, we need to convert
// that to a generic signing request.
//
// NOTE: Once we deprecate, we will remove this entire file
// ======
var ethConvertLegacyToGenericReq = function (req) {
    var common;
    if (!req.chainId || (0, util_1.ensureHexBuffer)(req.chainId).toString('hex') === '01') {
        common = new common_1.Common({ chain: common_1.Chain.Mainnet, hardfork: common_1.Hardfork.London });
    }
    else {
        // Not every network will support these EIPs but we will allow
        // signing of transactions using them
        common = common_1.Common.custom({ chainId: Number(req.chainId) }, { hardfork: common_1.Hardfork.London, eips: [1559, 2930] });
    }
    var tx = tx_1.TransactionFactory.fromTxData(req, { common: common });
    // Get the raw transaction payload to be hashed and signed.
    // Different `@ethereumjs/tx` Transaction object types have
    // slightly different APIs around this.
    if (req.type) {
        // Newer transaction types
        return tx.getMessageToSign(false);
    }
    else {
        // Legacy transaction type
        return Buffer.from((0, rlp_1.encode)(tx.getMessageToSign(false)));
    }
};
exports.default = {
    buildEthereumMsgRequest: buildEthereumMsgRequest,
    validateEthereumMsgResponse: validateEthereumMsgResponse,
    buildEthereumTxRequest: buildEthereumTxRequest,
    buildEthRawTx: buildEthRawTx,
    hashTransaction: hashTransaction,
    chainIds: chainIds,
    ensureHexBuffer: util_1.ensureHexBuffer,
    ethConvertLegacyToGenericReq: ethConvertLegacyToGenericReq,
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\ethereum.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\addKvRecords.js", {"../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CaddKvRecords.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeAddKvRecordsRequest = exports.validateAddKvRequest = exports.addKvRecords = void 0;
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
/**
 * `addKvRecords` takes in a set of key-value records and sends a request to add them to the
 * Lattice.
 * @category Lattice
 * @returns A callback with an error or null.
 */
function addKvRecords(_a) {
    var client = _a.client, records = _a.records, type = _a.type, caseSensitive = _a.caseSensitive;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, data, _c, decryptedData, newEphemeralPub;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    (0, exports.validateAddKvRequest)({ records: records, fwConstants: fwConstants });
                    data = (0, exports.encodeAddKvRecordsRequest)({
                        records: records,
                        type: type,
                        caseSensitive: caseSensitive,
                        fwConstants: fwConstants,
                    });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.addKvRecords,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, decryptedData];
            }
        });
    });
}
exports.addKvRecords = addKvRecords;
var validateAddKvRequest = function (_a) {
    var records = _a.records, fwConstants = _a.fwConstants;
    (0, validators_1.validateKvRecords)(records, fwConstants);
};
exports.validateAddKvRequest = validateAddKvRequest;
var encodeAddKvRecordsRequest = function (_a) {
    var records = _a.records, type = _a.type, caseSensitive = _a.caseSensitive, fwConstants = _a.fwConstants;
    var payload = Buffer.alloc(1 + 139 * fwConstants.kvActionMaxNum);
    payload.writeUInt8(Object.keys(records).length, 0);
    var off = 1;
    Object.entries(records).forEach(function (_a) {
        var _key = _a[0], _val = _a[1];
        var _b = (0, validators_1.validateKvRecord)({ key: _key, val: _val }, fwConstants), key = _b.key, val = _b.val;
        // Skip the ID portion. This will get added by firmware.
        payload.writeUInt32LE(0, off);
        off += 4;
        payload.writeUInt32LE(type, off);
        off += 4;
        payload.writeUInt8(caseSensitive ? 1 : 0, off);
        off += 1;
        payload.writeUInt8(String(key).length + 1, off);
        off += 1;
        Buffer.from(String(key)).copy(payload, off);
        off += fwConstants.kvKeyMaxStrSz + 1;
        payload.writeUInt8(String(val).length + 1, off);
        off += 1;
        Buffer.from(String(val)).copy(payload, off);
        off += fwConstants.kvValMaxStrSz + 1;
    });
    return payload;
};
exports.encodeAddKvRecordsRequest = encodeAddKvRecordsRequest;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\addKvRecords.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\connect.js", {"../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/predicates":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\predicates.js","../shared/utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5Cconnect.js
      return function (require, module, exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeConnectResponse = exports.validateConnectRequest = exports.connect = void 0;
var protocol_1 = require("../protocol");
var predicates_1 = require("../shared/predicates");
var utilities_1 = require("../shared/utilities");
var validators_1 = require("../shared/validators");
var util_1 = require("../util");
function connect(_a) {
    var client = _a.client, id = _a.id;
    return __awaiter(this, void 0, void 0, function () {
        var _b, deviceId, key, baseUrl, url, respPayloadData, _c, isPaired, fwVersion, activeWallets, ephemeralPub;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (0, exports.validateConnectRequest)({
                        deviceId: id,
                        key: client.key,
                        baseUrl: client.baseUrl,
                    }), deviceId = _b.deviceId, key = _b.key, baseUrl = _b.baseUrl;
                    url = "".concat(baseUrl, "/").concat(deviceId);
                    return [4 /*yield*/, (0, protocol_1.connectSecureRequest)({
                            url: url,
                            pubkey: client.publicKey,
                        })];
                case 1:
                    respPayloadData = _d.sent();
                    return [4 /*yield*/, (0, exports.decodeConnectResponse)(respPayloadData, key)];
                case 2:
                    _c = _d.sent(), isPaired = _c.isPaired, fwVersion = _c.fwVersion, activeWallets = _c.activeWallets, ephemeralPub = _c.ephemeralPub;
                    // Update client state with response data
                    client.mutate({
                        deviceId: deviceId,
                        ephemeralPub: ephemeralPub,
                        url: url,
                        isPaired: isPaired,
                        fwVersion: fwVersion,
                        activeWallets: activeWallets,
                    });
                    if (!(isPaired && !(0, predicates_1.doesFetchWalletsOnLoad)(client.getFwVersion()))) return [3 /*break*/, 4];
                    return [4 /*yield*/, client.fetchActiveWallet()];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4: 
                // Return flag indicating whether we are paired or not.
                // If we are *not* already paired, the Lattice is now in
                // pairing mode and expects a `finalizePairing` encrypted
                // request as a follow up.
                return [2 /*return*/, isPaired];
            }
        });
    });
}
exports.connect = connect;
var validateConnectRequest = function (_a) {
    var deviceId = _a.deviceId, key = _a.key, baseUrl = _a.baseUrl;
    var validDeviceId = (0, validators_1.validateDeviceId)(deviceId);
    var validKey = (0, validators_1.validateKey)(key);
    var validBaseUrl = (0, validators_1.validateBaseUrl)(baseUrl);
    return {
        deviceId: validDeviceId,
        key: validKey,
        baseUrl: validBaseUrl,
    };
};
exports.validateConnectRequest = validateConnectRequest;
/**
 * `decodeConnectResponse` will call `StartPairingMode` on the device, which gives the user 60 seconds to
 * finalize the pairing. This will return an ephemeral public key, which is needed for the next
 * request.
 * - If the device is already paired, this ephemPub is simply used to encrypt the next request.
 * - If the device is not paired, it is needed to pair the device within 60 seconds.
 * @category Device Response
 * @internal
 * @returns true if we are paired to the device already
 */
var decodeConnectResponse = function (response, key) {
    var off = 0;
    var isPaired = response.readUInt8(off) === protocol_1.ProtocolConstants.pairingStatus.paired;
    off++;
    // If we are already paired, we get the next ephemeral key
    var pub = response.slice(off, off + 65).toString('hex');
    off += 65; // Set the public key
    var ephemeralPub = (0, util_1.getP256KeyPairFromPub)(pub);
    // Grab the firmware version (will be 0-length for older fw versions) It is of format
    // |fix|minor|major|reserved|
    var fwVersion = response.slice(off, off + 4);
    off += 4;
    // If we are already paired, the response will include some encrypted data about the current
    // wallets This data was added in Lattice firmware v0.14.1
    if (isPaired) {
        //TODO && this._fwVersionGTE(0, 14, 1)) {
        // Later versions of firmware added wallet info
        var encWalletData = response.slice(off, off + 160);
        off += 160;
        var sharedSecret = (0, utilities_1.getSharedSecret)(key, ephemeralPub);
        var decWalletData = (0, util_1.aes256_decrypt)(encWalletData, sharedSecret);
        // Sanity check to make sure the last part of the decrypted data is empty. The last 2 bytes
        // are AES padding
        if (decWalletData[decWalletData.length - 2] !== 0 ||
            decWalletData[decWalletData.length - 1] !== 0) {
            throw new Error('Failed to connect to Lattice.');
        }
        var activeWallets = (0, utilities_1.parseWallets)(decWalletData);
        return { isPaired: isPaired, fwVersion: fwVersion, activeWallets: activeWallets, ephemeralPub: ephemeralPub };
    }
    // return the state of our pairing
    return { isPaired: isPaired, fwVersion: fwVersion, activeWallets: undefined, ephemeralPub: ephemeralPub };
};
exports.decodeConnectResponse = decodeConnectResponse;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\connect.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\fetchActiveWallet.js", {"../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CfetchActiveWallet.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeFetchActiveWalletResponse = exports.fetchActiveWallet = void 0;
var constants_1 = require("../constants");
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
/**
 * Fetch the active wallet in the device.
 *
 * The Lattice has two wallet interfaces: internal and external. If a SafeCard is inserted and
 * unlocked, the external interface is considered "active" and this will return its {@link Wallet}
 * data. Otherwise it will return the info for the internal Lattice wallet.
 */
function fetchActiveWallet(_a) {
    var client = _a.client;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, _c, decryptedData, newEphemeralPub, activeWallets, validActiveWallets;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub;
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: Buffer.alloc(0),
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getWallets,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;
                    activeWallets = (0, exports.decodeFetchActiveWalletResponse)(decryptedData);
                    validActiveWallets = (0, validators_1.validateActiveWallets)(activeWallets);
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                        activeWallets: validActiveWallets,
                    });
                    return [2 /*return*/, validActiveWallets];
            }
        });
    });
}
exports.fetchActiveWallet = fetchActiveWallet;
var decodeFetchActiveWalletResponse = function (data) {
    // Read the external wallet data first. If it is non-null, the external wallet will be the
    // active wallet of the device and we should save it. If the external wallet is blank, it means
    // there is no card present and we should save and use the interal wallet. If both wallets are
    // empty, it means the device still needs to be set up.
    var walletDescriptorLen = 71;
    // Internal first
    var activeWallets = {
        internal: {
            uid: constants_1.EMPTY_WALLET_UID,
            external: false,
            name: Buffer.alloc(0),
            capabilities: 0,
        },
        external: {
            uid: constants_1.EMPTY_WALLET_UID,
            external: true,
            name: Buffer.alloc(0),
            capabilities: 0,
        },
    };
    var off = 0;
    activeWallets.internal.uid = data.slice(off, off + 32);
    activeWallets.internal.capabilities = data.readUInt32BE(off + 32);
    activeWallets.internal.name = data.slice(off + 36, off + walletDescriptorLen);
    // Offset the first item
    off += walletDescriptorLen;
    // External
    activeWallets.external.uid = data.slice(off, off + 32);
    activeWallets.external.capabilities = data.readUInt32BE(off + 32);
    activeWallets.external.name = data.slice(off + 36, off + walletDescriptorLen);
    return activeWallets;
};
exports.decodeFetchActiveWalletResponse = decodeFetchActiveWalletResponse;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\fetchActiveWallet.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\fetchEncData.js", {"../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","uuid":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CfetchEncData.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeFetchEncData = exports.encodeFetchEncDataRequest = exports.validateFetchEncDataRequest = exports.fetchEncData = void 0;
/**
 * Export encrypted data from the Lattice. Data must conform
 * to known schema, e.g. EIP2335 derived privkey export.
 */
var uuid_1 = require("uuid");
var constants_1 = require("../constants");
var protocol_1 = require("../protocol");
var utilities_1 = require("../shared/utilities");
var validators_1 = require("../shared/validators");
var ENC_DATA = constants_1.EXTERNAL.ENC_DATA;
var ENC_DATA_ERR_STR = 'Unknown encrypted data export type requested. Exiting.';
var ENC_DATA_REQ_DATA_SZ = 1025;
var ENC_DATA_RESP_SZ = {
    EIP2335: {
        CIPHERTEXT: 32,
        SALT: 32,
        CHECKSUM: 32,
        IV: 16,
        PUBKEY: 48,
    },
};
function fetchEncData(_a) {
    var client = _a.client, schema = _a.schema, params = _a.params;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwVersion, activeWallet, data, _c, decryptedData, newEphemeralPub;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwVersion = _b.fwVersion;
                    activeWallet = (0, validators_1.validateWallet)(client.getActiveWallet());
                    (0, exports.validateFetchEncDataRequest)({ params: params });
                    data = (0, exports.encodeFetchEncDataRequest)({
                        schema: schema,
                        params: params,
                        fwVersion: fwVersion,
                        activeWallet: activeWallet,
                    });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.fetchEncryptedData,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, (0, exports.decodeFetchEncData)({ data: decryptedData, schema: schema, params: params })];
            }
        });
    });
}
exports.fetchEncData = fetchEncData;
var validateFetchEncDataRequest = function (_a) {
    var params = _a.params;
    // Validate derivation path
    (0, validators_1.validateStartPath)(params.path);
};
exports.validateFetchEncDataRequest = validateFetchEncDataRequest;
var encodeFetchEncDataRequest = function (_a) {
    var schema = _a.schema, params = _a.params, fwVersion = _a.fwVersion, activeWallet = _a.activeWallet;
    // Check firmware version
    if (fwVersion.major < 1 && fwVersion.minor < 17) {
        throw new Error('Firmware version >=v0.17.0 is required for encrypted data export.');
    }
    // Update params depending on what type of data is being exported
    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {
        // Set the wallet UID to the client's current active wallet
        params.walletUID = activeWallet.uid;
    }
    else {
        throw new Error(ENC_DATA_ERR_STR);
    }
    // Build the payload data
    var payload = Buffer.alloc(ENC_DATA_REQ_DATA_SZ);
    var off = 0;
    payload.writeUInt8(schema, off);
    off += 1;
    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {
        params.walletUID.copy(payload, off);
        off += params.walletUID.length;
        payload.writeUInt8(params.path.length, off);
        off += 1;
        for (var i = 0; i < 5; i++) {
            if (i <= params.path.length) {
                payload.writeUInt32LE(params.path[i], off);
            }
            off += 4;
        }
        if (params.c) {
            payload.writeUInt32LE(params.c, off);
        }
        off += 4;
        return payload;
    }
    else {
        throw new Error(ENC_DATA_ERR_STR);
    }
};
exports.encodeFetchEncDataRequest = encodeFetchEncDataRequest;
var decodeFetchEncData = function (_a) {
    var data = _a.data, schema = _a.schema, params = _a.params;
    var off = 0;
    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {
        var respData = {};
        var _b = ENC_DATA_RESP_SZ.EIP2335, CIPHERTEXT = _b.CIPHERTEXT, SALT = _b.SALT, CHECKSUM = _b.CHECKSUM, IV = _b.IV, PUBKEY = _b.PUBKEY;
        var expectedSz = 4 + // iterations = u32
            CIPHERTEXT +
            SALT +
            CHECKSUM +
            IV +
            PUBKEY;
        var dataSz = data.readUInt32LE(off);
        off += 4;
        if (dataSz !== expectedSz) {
            throw new Error('Invalid data returned from Lattice. Expected EIP2335 data.');
        }
        respData.iterations = data.readUInt32LE(off);
        off += 4;
        respData.cipherText = data.slice(off, off + CIPHERTEXT);
        off += CIPHERTEXT;
        respData.salt = data.slice(off, off + SALT);
        off += SALT;
        respData.checksum = data.slice(off, off + CHECKSUM);
        off += CHECKSUM;
        respData.iv = data.slice(off, off + IV);
        off += IV;
        respData.pubkey = data.slice(off, off + PUBKEY);
        off += PUBKEY;
        return formatEIP2335ExportData(respData, params.path);
    }
    else {
        throw new Error(ENC_DATA_ERR_STR);
    }
};
exports.decodeFetchEncData = decodeFetchEncData;
var formatEIP2335ExportData = function (resp, path) {
    try {
        var iterations = resp.iterations, salt = resp.salt, checksum = resp.checksum, iv = resp.iv, cipherText = resp.cipherText, pubkey = resp.pubkey;
        return Buffer.from(JSON.stringify({
            'version': 4,
            'uuid': (0, uuid_1.v4)(),
            'path': (0, utilities_1.getPathStr)(path),
            'pubkey': pubkey.toString('hex'),
            'crypto': {
                'kdf': {
                    'function': 'pbkdf2',
                    'params': {
                        'dklen': 32,
                        'c': iterations,
                        'prf': 'hmac-sha256',
                        'salt': salt.toString('hex'),
                    },
                    'message': ''
                },
                'checksum': {
                    'function': 'sha256',
                    'params': {},
                    'message': checksum.toString('hex'),
                },
                'cipher': {
                    'function': 'aes-128-ctr',
                    'params': {
                        'iv': iv.toString('hex'),
                    },
                    'message': cipherText.toString('hex')
                }
            }
        }));
    }
    catch (err) {
        throw Error("Failed to format EIP2335 return data: ".concat(err.toString()));
    }
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\fetchEncData.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\getAddresses.js", {"../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","bitwise":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bitwise\\index.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CgetAddresses.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeGetAddressesResponse = exports.encodeGetAddressesRequest = exports.validateGetAddressesRequest = exports.getAddresses = void 0;
var bitwise_1 = __importDefault(require("bitwise"));
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
var util_1 = require("../util");
/**
 * `getAddresses` takes a starting path and a number to get the addresses or public keys associated
 * with the active wallet.
 * @category Lattice
 * @returns An array of addresses or public keys.
 */
function getAddresses(_a) {
    var client = _a.client, _startPath = _a.startPath, _n = _a.n, _flag = _a.flag;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, activeWallet, _c, startPath, n, flag, data, _d, decryptedData, newEphemeralPub;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    activeWallet = (0, validators_1.validateWallet)(client.getActiveWallet());
                    _c = (0, exports.validateGetAddressesRequest)({
                        startPath: _startPath,
                        n: _n,
                        flag: _flag,
                    }), startPath = _c.startPath, n = _c.n, flag = _c.flag;
                    data = (0, exports.encodeGetAddressesRequest)({
                        startPath: startPath,
                        n: n,
                        flag: flag,
                        fwConstants: fwConstants,
                        wallet: activeWallet,
                    });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getAddresses,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, (0, exports.decodeGetAddressesResponse)(decryptedData, flag)];
            }
        });
    });
}
exports.getAddresses = getAddresses;
var validateGetAddressesRequest = function (_a) {
    var startPath = _a.startPath, n = _a.n, flag = _a.flag;
    return {
        startPath: (0, validators_1.validateStartPath)(startPath),
        n: (0, validators_1.validateNAddresses)(n),
        flag: (0, validators_1.validateIsUInt4)(flag),
    };
};
exports.validateGetAddressesRequest = validateGetAddressesRequest;
var encodeGetAddressesRequest = function (_a) {
    var _b;
    var startPath = _a.startPath, n = _a.n, flag = _a.flag, fwConstants = _a.fwConstants, wallet = _a.wallet;
    var flags = fwConstants.getAddressFlags || [];
    var isPubkeyOnly = flags.indexOf(flag) > -1 &&
        (flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey ||
            flag === protocol_1.LatticeGetAddressesFlag.secp256k1Pubkey ||
            flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey);
    if (!isPubkeyOnly && !(0, util_1.isValidAssetPath)(startPath, fwConstants)) {
        throw new Error('Derivation path or flag is not supported. Try updating Lattice firmware.');
    }
    var sz = 32 + 20 + 1; // walletUID + 5 u32 indices + count/flag
    if (fwConstants.varAddrPathSzAllowed) {
        sz += 1; // pathDepth
    }
    else if (startPath.length !== 5) {
        throw new Error('Your Lattice firmware only supports derivation paths with 5 indices. Please upgrade.');
    }
    var payload = Buffer.alloc(sz);
    var off = 0;
    wallet.uid.copy(payload, off);
    off += 32;
    // Build the start path (5x u32 indices)
    if (fwConstants.varAddrPathSzAllowed) {
        payload.writeUInt8(startPath.length, off);
        off += 1;
    }
    for (var i = 0; i < 5; i++) {
        if (i <= startPath.length) {
            var val_1 = (_b = startPath[i]) !== null && _b !== void 0 ? _b : 0;
            payload.writeUInt32BE(val_1, off);
        }
        off += 4;
    }
    // Specify the number of subsequent addresses to request. We also allow the user to skip the
    // cache and request any address related to the asset in the wallet.
    var val, flagVal = 0;
    if (fwConstants.addrFlagsAllowed) {
        // A 4-bit flag can be used for non-standard address requests Client needs to be combined with
        // `n` as a 4 bit value
        flagVal =
            fwConstants.getAddressFlags &&
                fwConstants.getAddressFlags.indexOf(flag) > -1
                ? flag
                : 0;
        var flagBits = bitwise_1.default.nibble.read(flagVal);
        var countBits = bitwise_1.default.nibble.read(n);
        val = bitwise_1.default.byte.write(flagBits.concat(countBits));
    }
    else {
        // Very old firmware does not support client flag. We can deprecate client soon.
        val = n;
    }
    payload.writeUInt8(val, off);
    off++;
    return payload;
};
exports.encodeGetAddressesRequest = encodeGetAddressesRequest;
/**
 * @internal
 * @return an array of address strings or pubkey buffers
 */
var decodeGetAddressesResponse = function (data, flag) {
    var off = 0;
    // Look for addresses until we reach the end (a 4 byte checksum)
    var addrs = [];
    // Pubkeys are formatted differently in the response
    var arePubkeys = flag === protocol_1.LatticeGetAddressesFlag.secp256k1Pubkey ||
        flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey ||
        flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey;
    if (arePubkeys) {
        off += 1; // skip uint8 representing pubkey type
    }
    var respDataLength = protocol_1.ProtocolConstants.msgSizes.secure.data.response.encrypted[protocol_1.LatticeSecureEncryptedRequestType.getAddresses];
    while (off < respDataLength) {
        if (arePubkeys) {
            // Pubkeys are shorter and are returned as buffers
            var pubBytes = data.slice(off, off + 65);
            var isEmpty = pubBytes.every(function (byte) { return byte === 0x00; });
            if (!isEmpty && flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey) {
                // ED25519 pubkeys are 32 bytes
                addrs.push(pubBytes.slice(0, 32));
            }
            else if (!isEmpty && flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey) {
                // BLS12_381_G1 keys are 48 bytes
                addrs.push(pubBytes.slice(0, 48));
            }
            else if (!isEmpty) {
                // Only other returned pubkeys are ECC, or 65 bytes Note that we return full
                // (uncompressed) ECC pubkeys
                addrs.push(pubBytes);
            }
            off += 65;
        }
        else {
            // Otherwise we are dealing with address strings
            var addrBytes = data.slice(off, off + protocol_1.ProtocolConstants.addrStrLen);
            off += protocol_1.ProtocolConstants.addrStrLen;
            // Return the UTF-8 representation
            var len = addrBytes.indexOf(0); // First 0 is the null terminator
            if (len > 0) {
                addrs.push(addrBytes.slice(0, len).toString());
            }
        }
    }
    return addrs;
};
exports.decodeGetAddressesResponse = decodeGetAddressesResponse;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\getAddresses.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\getKvRecords.js", {"../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CgetKvRecords.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeGetKvRecordsResponse = exports.encodeGetKvRecordsRequest = exports.validateGetKvRequest = exports.getKvRecords = void 0;
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
function getKvRecords(_a) {
    var client = _a.client, _type = _a.type, _n = _a.n, _start = _a.start;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, _c, type, n, start, data, _d, decryptedData, newEphemeralPub;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    _c = (0, exports.validateGetKvRequest)({
                        type: _type,
                        n: _n,
                        start: _start,
                        fwConstants: fwConstants,
                    }), type = _c.type, n = _c.n, start = _c.start;
                    data = (0, exports.encodeGetKvRecordsRequest)({ type: type, n: n, start: start });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getKvRecords,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, (0, exports.decodeGetKvRecordsResponse)(decryptedData, fwConstants)];
            }
        });
    });
}
exports.getKvRecords = getKvRecords;
var validateGetKvRequest = function (_a) {
    var fwConstants = _a.fwConstants, n = _a.n, type = _a.type, start = _a.start;
    if (!fwConstants.kvActionsAllowed) {
        throw new Error('Unsupported. Please update firmware.');
    }
    if (!n || n < 1) {
        throw new Error('You must request at least one record.');
    }
    if (n > fwConstants.kvActionMaxNum) {
        throw new Error("You may only request up to ".concat(fwConstants.kvActionMaxNum, " records at once."));
    }
    if (type !== 0 && !type) {
        throw new Error('You must specify a type.');
    }
    if (start !== 0 && !start) {
        throw new Error('You must specify a type.');
    }
    return { fwConstants: fwConstants, n: n, type: type, start: start };
};
exports.validateGetKvRequest = validateGetKvRequest;
var encodeGetKvRecordsRequest = function (_a) {
    var type = _a.type, n = _a.n, start = _a.start;
    var payload = Buffer.alloc(9);
    payload.writeUInt32LE(type, 0);
    payload.writeUInt8(n, 4);
    payload.writeUInt32LE(start, 5);
    return payload;
};
exports.encodeGetKvRecordsRequest = encodeGetKvRecordsRequest;
var decodeGetKvRecordsResponse = function (data, fwConstants) {
    var off = 0;
    var nTotal = data.readUInt32BE(off);
    off += 4;
    var nFetched = parseInt(data.slice(off, off + 1).toString('hex'), 16);
    off += 1;
    if (nFetched > fwConstants.kvActionMaxNum)
        throw new Error('Too many records fetched. Firmware error.');
    var records = [];
    for (var i = 0; i < nFetched; i++) {
        var r = {};
        r.id = data.readUInt32BE(off);
        off += 4;
        r.type = data.readUInt32BE(off);
        off += 4;
        r.caseSensitive =
            parseInt(data.slice(off, off + 1).toString('hex'), 16) === 1
                ? true
                : false;
        off += 1;
        var keySz = parseInt(data.slice(off, off + 1).toString('hex'), 16);
        off += 1;
        r.key = data.slice(off, off + keySz - 1).toString();
        off += fwConstants.kvKeyMaxStrSz + 1;
        var valSz = parseInt(data.slice(off, off + 1).toString('hex'), 16);
        off += 1;
        r.val = data.slice(off, off + valSz - 1).toString();
        off += fwConstants.kvValMaxStrSz + 1;
        records.push(r);
    }
    return {
        records: records,
        total: nTotal,
        fetched: nFetched,
    };
};
exports.decodeGetKvRecordsResponse = decodeGetKvRecordsResponse;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\getKvRecords.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\index.js", {"./addKvRecords":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\addKvRecords.js","./connect":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\connect.js","./fetchActiveWallet":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\fetchActiveWallet.js","./fetchEncData":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\fetchEncData.js","./getAddresses":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\getAddresses.js","./getKvRecords":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\getKvRecords.js","./pair":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\pair.js","./removeKvRecords":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\removeKvRecords.js","./sign":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\sign.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./addKvRecords"), exports);
__exportStar(require("./connect"), exports);
__exportStar(require("./fetchEncData"), exports);
__exportStar(require("./fetchActiveWallet"), exports);
__exportStar(require("./getAddresses"), exports);
__exportStar(require("./getKvRecords"), exports);
__exportStar(require("./pair"), exports);
__exportStar(require("./removeKvRecords"), exports);
__exportStar(require("./sign"), exports);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\pair.js", {"../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5Cpair.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodePairRequest = exports.pair = void 0;
var protocol_1 = require("../protocol");
var utilities_1 = require("../shared/utilities");
var validators_1 = require("../shared/validators");
var util_1 = require("../util");
/**
 * If a pairing secret is provided, `pair` uses it to sign a hash of the public key, name, and
 * pairing secret. It then sends the name and signature to the device. If no pairing secret is
 * provided, `pair` sends a zero-length name buffer to the device.
 * @category Lattice
 * @returns The active wallet object.
 */
function pair(_a) {
    var client = _a.client, pairingSecret = _a.pairingSecret;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, appName, key, data, newEphemeralPub;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, appName = _b.appName, key = _b.key;
                    data = (0, exports.encodePairRequest)({ pairingSecret: pairingSecret, key: key, appName: appName });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.finalizePairing,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    newEphemeralPub = (_c.sent()).newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                        isPaired: true,
                    });
                    return [4 /*yield*/, client.fetchActiveWallet()];
                case 2:
                    _c.sent();
                    return [2 /*return*/, client.hasActiveWallet()];
            }
        });
    });
}
exports.pair = pair;
var encodePairRequest = function (_a) {
    var key = _a.key, pairingSecret = _a.pairingSecret, appName = _a.appName;
    // Build the payload data
    var pubKeyBytes = (0, utilities_1.getPubKeyBytes)(key);
    var nameBuf = Buffer.alloc(25);
    if (pairingSecret.length > 0) {
        // If a pairing secret of zero length is passed in, it usually indicates we want to cancel
        // the pairing attempt. In this case we pass a zero-length name buffer so the firmware can
        // know not to draw the error screen. Note that we still expect an error to come back
        // (RESP_ERR_PAIR_FAIL)
        nameBuf.write(appName);
    }
    var hash = (0, util_1.generateAppSecret)(pubKeyBytes, nameBuf, Buffer.from(pairingSecret));
    var sig = key.sign(hash); // returns an array, not a buffer
    var derSig = (0, util_1.toPaddedDER)(sig);
    var payload = Buffer.concat([nameBuf, derSig]);
    return payload;
};
exports.encodePairRequest = encodePairRequest;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\pair.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\removeKvRecords.js", {"../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5CremoveKvRecords.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeRemoveKvRecordsRequest = exports.validateRemoveKvRequest = exports.removeKvRecords = void 0;
var protocol_1 = require("../protocol");
var validators_1 = require("../shared/validators");
/**
 * `removeKvRecords` takes in an array of ids and sends a request to remove them from the Lattice.
 * @category Lattice
 * @returns A callback with an error or null.
 */
function removeKvRecords(_a) {
    var client = _a.client, _type = _a.type, _ids = _a.ids;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, _c, type, ids, data, _d, decryptedData, newEphemeralPub;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    _c = (0, exports.validateRemoveKvRequest)({
                        fwConstants: fwConstants,
                        type: _type,
                        ids: _ids,
                    }), type = _c.type, ids = _c.ids;
                    data = (0, exports.encodeRemoveKvRecordsRequest)({
                        type: type,
                        ids: ids,
                        fwConstants: fwConstants,
                    });
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: data,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.removeKvRecords,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    return [2 /*return*/, decryptedData];
            }
        });
    });
}
exports.removeKvRecords = removeKvRecords;
var validateRemoveKvRequest = function (_a) {
    var fwConstants = _a.fwConstants, type = _a.type, ids = _a.ids;
    if (!fwConstants.kvActionsAllowed) {
        throw new Error('Unsupported. Please update firmware.');
    }
    if (!Array.isArray(ids) || ids.length < 1) {
        throw new Error('You must include one or more `ids` to removed.');
    }
    if (ids.length > fwConstants.kvRemoveMaxNum) {
        throw new Error("Only up to ".concat(fwConstants.kvRemoveMaxNum, " records may be removed at once."));
    }
    if (type !== 0 && !type) {
        throw new Error('You must specify a type.');
    }
    return { type: type, ids: ids };
};
exports.validateRemoveKvRequest = validateRemoveKvRequest;
var encodeRemoveKvRecordsRequest = function (_a) {
    var fwConstants = _a.fwConstants, type = _a.type, ids = _a.ids;
    var payload = Buffer.alloc(5 + 4 * fwConstants.kvRemoveMaxNum);
    payload.writeUInt32LE(type, 0);
    payload.writeUInt8(ids.length, 4);
    for (var i = 0; i < ids.length; i++) {
        var id = parseInt(ids[i]);
        payload.writeUInt32LE(id, 5 + 4 * i);
    }
    return payload;
};
exports.encodeRemoveKvRecordsRequest = encodeRemoveKvRecordsRequest;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\removeKvRecords.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\functions\\sign.js", {"../bitcoin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\bitcoin.js","../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../ethereum":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\ethereum.js","../genericSigning":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\genericSigning.js","../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","../shared/functions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\functions.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","hash.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\hash.js\\lib\\hash.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cfunctions%5Csign.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeSignResponse = exports.encodeSignRequest = exports.sign = void 0;
var hash_js_1 = require("hash.js");
var bitcoin_1 = __importDefault(require("../bitcoin"));
var constants_1 = require("../constants");
var ethereum_1 = __importDefault(require("../ethereum"));
var genericSigning_1 = require("../genericSigning");
var protocol_1 = require("../protocol");
var functions_1 = require("../shared/functions");
var validators_1 = require("../shared/validators");
var util_1 = require("../util");
/**
 * `sign` builds and sends a request for signing to the device.
 * @category Lattice
 * @returns The response from the device.
 */
function sign(_a) {
    var client = _a.client, data = _a.data, currency = _a.currency, cachedData = _a.cachedData, nextCode = _a.nextCode;
    return __awaiter(this, void 0, void 0, function () {
        var _b, url, sharedSecret, ephemeralPub, fwConstants, wallet, _c, requestData, isGeneric, _d, payload, hasExtraPayloads, _e, decryptedData, newEphemeralPub, decodedResponse;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;
                    wallet = (0, validators_1.validateWallet)(client.getActiveWallet());
                    _c = (0, functions_1.buildTransaction)({
                        data: data,
                        currency: currency,
                        fwConstants: fwConstants,
                    }), requestData = _c.requestData, isGeneric = _c.isGeneric;
                    _d = (0, exports.encodeSignRequest)({
                        fwConstants: fwConstants,
                        wallet: wallet,
                        requestData: requestData,
                        cachedData: cachedData,
                        nextCode: nextCode,
                    }), payload = _d.payload, hasExtraPayloads = _d.hasExtraPayloads;
                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({
                            data: payload,
                            requestType: protocol_1.LatticeSecureEncryptedRequestType.sign,
                            sharedSecret: sharedSecret,
                            ephemeralPub: ephemeralPub,
                            url: url,
                        })];
                case 1:
                    _e = _f.sent(), decryptedData = _e.decryptedData, newEphemeralPub = _e.newEphemeralPub;
                    client.mutate({
                        ephemeralPub: newEphemeralPub,
                    });
                    // If this request has multiple payloads, we need to recurse
                    // so that we can make the next request.
                    // It is chained to the first request using `nextCode`
                    if (hasExtraPayloads) {
                        return [2 /*return*/, client.sign({
                                data: data,
                                currency: currency,
                                cachedData: requestData,
                                nextCode: decryptedData.slice(0, 8),
                            })];
                    }
                    decodedResponse = (0, exports.decodeSignResponse)({
                        data: decryptedData,
                        request: requestData,
                        isGeneric: isGeneric,
                        currency: currency,
                    });
                    return [2 /*return*/, decodedResponse];
            }
        });
    });
}
exports.sign = sign;
var encodeSignRequest = function (_a) {
    var _b, _c, _d;
    var fwConstants = _a.fwConstants, wallet = _a.wallet, requestData = _a.requestData, cachedData = _a.cachedData, nextCode = _a.nextCode;
    var reqPayload, schema;
    if (cachedData && nextCode) {
        requestData = cachedData;
        reqPayload = Buffer.concat([
            nextCode,
            requestData.extraDataPayloads.shift(),
        ]);
        schema = protocol_1.LatticeSignSchema.extraData;
    }
    else {
        reqPayload = requestData.payload;
        schema = requestData.schema;
    }
    var payload = Buffer.alloc(2 + fwConstants.reqMaxDataSz);
    var off = 0;
    var hasExtraPayloads = requestData.extraDataPayloads &&
        Number(requestData.extraDataPayloads.length > 0);
    payload.writeUInt8(hasExtraPayloads, off);
    off += 1;
    // Copy request schema (e.g. ETH or BTC transfer)
    payload.writeUInt8(schema, off);
    off += 1;
    // Copy the wallet UID
    (_b = wallet.uid) === null || _b === void 0 ? void 0 : _b.copy(payload, off);
    off += (_d = (_c = wallet.uid) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;
    // Build data based on the type of request
    reqPayload.copy(payload, off);
    return { payload: payload, hasExtraPayloads: hasExtraPayloads };
};
exports.encodeSignRequest = encodeSignRequest;
var decodeSignResponse = function (_a) {
    var _b;
    var data = _a.data, request = _a.request, isGeneric = _a.isGeneric, currency = _a.currency;
    var off = 0;
    var derSigLen = 74; // DER signatures are 74 bytes
    if (currency === constants_1.CURRENCIES.BTC) {
        var btcRequest = request;
        var pkhLen = 20; // Pubkeyhashes are 20 bytes
        var sigsLen = 740; // Up to 10x DER signatures
        var changeVersion = bitcoin_1.default.getAddressFormat(btcRequest.origData.changePath);
        var changePubKeyHash = data.slice(off, off + pkhLen);
        off += pkhLen;
        var changeRecipient = bitcoin_1.default.getBitcoinAddress(changePubKeyHash, changeVersion);
        var compressedPubLength = 33; // Size of compressed public key
        var pubkeys = [];
        var sigs = [];
        var n = 0;
        // Parse the signature for each output -- they are returned in the serialized payload in form
        // [pubkey, sig] There is one signature per output
        while (off < data.length) {
            // Exit out if we have seen all the returned sigs and pubkeys
            if (data[off] !== 0x30)
                break;
            // Otherwise grab another set Note that all DER sigs returned fill the maximum 74 byte
            // buffer, but also contain a length at off+1, which we use to parse the non-zero data.
            // First get the signature from its slot
            var sigStart = off;
            var sigEnd = off + 2 + data[off + 1];
            sigs.push(data.slice(sigStart, sigEnd));
            off += derSigLen;
            // Next, shift by the full set of signatures to hit the respective pubkey NOTE: The data
            // returned is: [<sig0>, <sig1>, ... <sig9>][<pubkey0>, <pubkey1>, ... <pubkey9>]
            var pubStart = n * compressedPubLength + sigsLen;
            var pubEnd = (n + 1) * compressedPubLength + sigsLen;
            pubkeys.push(data.slice(pubStart, pubEnd));
            // Update offset to hit the next signature slot
            n += 1;
        }
        // Build the transaction data to be serialized
        var preSerializedData = {
            inputs: [],
            outputs: [],
        };
        // First output comes from request dta
        preSerializedData.outputs.push({
            value: btcRequest.origData.value,
            recipient: btcRequest.origData.recipient,
        });
        if (((_b = btcRequest.changeData) === null || _b === void 0 ? void 0 : _b.value) && btcRequest.changeData.value > 0) {
            // Second output comes from change data
            preSerializedData.outputs.push({
                value: btcRequest.changeData.value,
                recipient: changeRecipient,
            });
        }
        // Add the inputs
        for (var i = 0; i < sigs.length; i++) {
            preSerializedData.inputs.push({
                hash: btcRequest.origData.prevOuts[i].txHash,
                index: btcRequest.origData.prevOuts[i].index,
                sig: sigs[i],
                pubkey: pubkeys[i],
                signerPath: btcRequest.origData.prevOuts[i].signerPath,
            });
        }
        // Finally, serialize the transaction
        var serializedTx = bitcoin_1.default.serializeTx(preSerializedData);
        // Generate the transaction hash so the user can look this transaction up later
        var preImageTxHash = serializedTx;
        var txHashPre = Buffer.from((0, hash_js_1.sha256)().update(Buffer.from(preImageTxHash, 'hex')).digest('hex'), 'hex');
        // Add extra data for debugging/lookup purposes
        return {
            tx: serializedTx,
            txHash: (0, hash_js_1.sha256)().update(txHashPre).digest('hex'),
            changeRecipient: changeRecipient,
            sigs: sigs,
        };
    }
    else if (currency === constants_1.CURRENCIES.ETH && !isGeneric) {
        var sig = (0, util_1.parseDER)(data.slice(off, off + 2 + data[off + 1]));
        off += derSigLen;
        var ethAddr = data.slice(off, off + 20);
        // Determine the `v` param and add it to the sig before returning
        var _c = ethereum_1.default.buildEthRawTx(request, sig, ethAddr), rawTx = _c.rawTx, sigWithV = _c.sigWithV;
        return {
            tx: "0x".concat(rawTx),
            txHash: "0x".concat(ethereum_1.default.hashTransaction(rawTx)),
            sig: {
                v: sigWithV.v,
                r: sigWithV.r.toString('hex'),
                s: sigWithV.s.toString('hex'),
            },
            signer: ethAddr,
        };
    }
    else if (currency === constants_1.CURRENCIES.ETH_MSG) {
        var sig = (0, util_1.parseDER)(data.slice(off, off + 2 + data[off + 1]));
        off += derSigLen;
        var signer = data.slice(off, off + 20);
        var validatedSig = ethereum_1.default.validateEthereumMsgResponse({ signer: signer, sig: sig }, request);
        return {
            sig: {
                v: validatedSig.v,
                r: validatedSig.r.toString('hex'),
                s: validatedSig.s.toString('hex'),
            },
            signer: signer,
        };
    }
    else {
        // Generic signing request
        return (0, genericSigning_1.parseGenericSigningResponse)(data, off, request);
    }
};
exports.decodeSignResponse = decodeSignResponse;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\functions\\sign.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\genericSigning.js", {"./constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./index":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js","./protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","hash.js/lib/hash/sha":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\hash.js\\lib\\hash\\sha.js","js-sha3":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5CgenericSigning.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEncodedPayload = exports.parseGenericSigningResponse = exports.buildGenericSigningMsgRequest = void 0;
/**
Generic signing module. Any payload can be sent to the Lattice and
will be displayed in full (note that \n and \t characters will be
displayed as line breaks and tabs on the screen).

This payload should be coupled with:
* Signer's BIP44 path
* Curve on which to derive the signing key
* Hash function to use on the message
*/
var sha_1 = require("hash.js/lib/hash/sha");
var js_sha3_1 = require("js-sha3");
var constants_1 = require("./constants");
var index_1 = require("./index");
var protocol_1 = require("./protocol");
var util_1 = require("./util");
var buildGenericSigningMsgRequest = function (req) {
    var signerPath = req.signerPath, curveType = req.curveType, hashType = req.hashType, _a = req.encodingType, encodingType = _a === void 0 ? null : _a, _b = req.decoder, decoder = _b === void 0 ? null : _b, _c = req.omitPubkey, omitPubkey = _c === void 0 ? false : _c, fwConstants = req.fwConstants, _d = req.blsDst, blsDst = _d === void 0 ? index_1.Constants.SIGNING.BLS_DST.BLS_DST_NUL : _d;
    var extraDataFrameSz = fwConstants.extraDataFrameSz, extraDataMaxFrames = fwConstants.extraDataMaxFrames, prehashAllowed = fwConstants.prehashAllowed, genericSigning = fwConstants.genericSigning, varAddrPathSzAllowed = fwConstants.varAddrPathSzAllowed;
    var curveTypes = genericSigning.curveTypes, encodingTypes = genericSigning.encodingTypes, hashTypes = genericSigning.hashTypes, baseDataSz = genericSigning.baseDataSz, baseReqSz = genericSigning.baseReqSz, calldataDecoding = genericSigning.calldataDecoding;
    var encodedPayload = (0, exports.getEncodedPayload)(req.payload, encodingType, encodingTypes);
    var encoding = encodedPayload.encoding;
    var payloadBuf = encodedPayload.payloadBuf;
    var origPayloadBuf = payloadBuf;
    var payloadDataSz = payloadBuf.length;
    // Size of data payload that can be included in the first/base request
    var maxExpandedSz = baseDataSz + extraDataMaxFrames * extraDataFrameSz;
    // Sanity checks
    if (!payloadDataSz) {
        throw new Error('Payload could not be handled.');
    }
    else if (!genericSigning ||
        !extraDataFrameSz ||
        !extraDataMaxFrames ||
        !prehashAllowed) {
        throw new Error('Unsupported. Please update your Lattice firmware.');
    }
    else if (!(0, util_1.existsIn)(curveType, curveTypes)) {
        throw new Error('Unsupported curve type.');
    }
    else if (!(0, util_1.existsIn)(hashType, hashTypes)) {
        throw new Error('Unsupported hash type.');
    }
    // If there is a decoder attached to our payload, add it to
    // the data field of the request.
    var hasDecoder = (decoder && calldataDecoding && decoder.length <= calldataDecoding.maxSz);
    // Make sure the payload AND decoder data fits in the firmware buffer.
    // If it doesn't, we can't include the decoder because the payload will likely
    // be pre-hashed and the decoder data isn't part of the message to sign.
    var decoderFits = (hasDecoder && payloadBuf.length + decoder.length <= maxExpandedSz);
    if (hasDecoder && decoderFits) {
        var decoderBuf = Buffer.alloc(8 + decoder.length);
        // First write th reserved word
        decoderBuf.writeUInt32LE(calldataDecoding.reserved, 0);
        // Then write size, then the data
        decoderBuf.writeUInt32LE(decoder.length, 4);
        Buffer.from(decoder).copy(decoderBuf, 8);
        payloadBuf = Buffer.concat([payloadBuf, decoderBuf]);
    }
    // Ed25519 specific sanity checks
    if (curveType === curveTypes.ED25519) {
        if (hashType !== hashTypes.NONE) {
            throw new Error('Signing on ed25519 requires unhashed message');
        }
        signerPath.forEach(function (idx) {
            if (idx < constants_1.HARDENED_OFFSET) {
                throw new Error('Signing on ed25519 requires all signer path indices be hardened.');
            }
        });
    }
    // BLS12_381 specific processing
    else if (curveType === curveTypes.BLS12_381_G2) {
        // For BLS signing we need to prefix 4 bytes to represent the
        // domain separator (DST). If none is provided, we use the default
        // value of DST_NUL.
        var blsDstBuf = Buffer.alloc(4);
        blsDstBuf.writeUInt32LE(blsDst);
        payloadBuf = Buffer.concat([blsDstBuf, payloadBuf]);
        payloadDataSz += blsDstBuf.length;
    }
    // Build the request buffer with metadata and then the payload to sign.
    var buf = Buffer.alloc(baseReqSz);
    var off = 0;
    buf.writeUInt32LE(encoding, off);
    off += 4;
    buf.writeUInt8(hashType, off);
    off += 1;
    buf.writeUInt8(curveType, off);
    off += 1;
    var signerPathBuf = (0, util_1.buildSignerPathBuf)(signerPath, varAddrPathSzAllowed);
    signerPathBuf.copy(buf, off);
    off += signerPathBuf.length;
    buf.writeUInt8(omitPubkey ? 1 : 0, off);
    off += 1;
    // Flow data into extraData requests if applicable
    var extraDataPayloads = [];
    var prehash = null;
    var didPrehash = false;
    if (payloadBuf.length > baseDataSz) {
        if (prehashAllowed && payloadBuf.length > maxExpandedSz) {
            // If we prehash, we need to provide the full payload size
            buf.writeUInt16LE(payloadBuf.length, off);
            off += 2;
            didPrehash = true;
            // If we have to prehash, only hash the actual payload data, i.e. exclude
            // any optional calldata decoder data.
            var payloadData = payloadBuf.slice(0, payloadDataSz);
            // If this payload is too large to send, but the Lattice allows a prehashed message, do that
            if (hashType === hashTypes.NONE) {
                // This cannot be done for ED25519 signing, which must sign the full message
                throw new Error('Message too large to send and could not be prehashed (hashType=NONE).');
            }
            else if (hashType === hashTypes.KECCAK256) {
                prehash = Buffer.from((0, js_sha3_1.keccak256)(payloadData), 'hex');
            }
            else if (hashType === hashTypes.SHA256) {
                prehash = Buffer.from((0, sha_1.sha256)().update(payloadData).digest('hex'), 'hex');
            }
            else {
                throw new Error('Unsupported hash type.');
            }
        }
        else {
            // Split overflow data into extraData frames
            var frames_1 = (0, util_1.splitFrames)(payloadBuf.slice(baseDataSz), extraDataFrameSz);
            frames_1.forEach(function (frame) {
                var szLE = Buffer.alloc(4);
                szLE.writeUInt32LE(frame.length, 0);
                extraDataPayloads.push(Buffer.concat([szLE, frame]));
            });
        }
    }
    // If we didn't prehash, we know the full request (including calldata info) fits.
    // Set the payload size to only include message data. This will inform firmware
    // where to slice off calldata info.
    if (!didPrehash) {
        buf.writeUInt16LE(payloadDataSz, off);
        off += 2;
    }
    // If the message had to be prehashed, we will only copy the hash data into the request.
    // Otherwise copy as many payload bytes into the request as possible. Follow up data
    // from `frames` will come in follow up requests.
    var toCopy = prehash ? prehash : payloadBuf;
    toCopy.copy(buf, off);
    // Return all the necessary data
    return {
        payload: buf,
        extraDataPayloads: extraDataPayloads,
        schema: protocol_1.LatticeSignSchema.generic,
        curveType: curveType,
        encodingType: encodingType,
        hashType: hashType,
        omitPubkey: omitPubkey,
        origPayloadBuf: origPayloadBuf,
    };
};
exports.buildGenericSigningMsgRequest = buildGenericSigningMsgRequest;
var parseGenericSigningResponse = function (res, off, req) {
    var parsed = {
        pubkey: null,
        sig: null,
    };
    // Parse BIP44 path
    // Parse pubkey and then sig
    if (req.curveType === index_1.Constants.SIGNING.CURVES.SECP256K1) {
        // Handle `GpEccPubkey256_t`
        if (!req.omitPubkey) {
            var compression = res.readUInt8(off);
            off += 1;
            if (compression === 0x02 || compression === 0x03) {
                // Compressed key - only copy x
                parsed.pubkey = Buffer.alloc(33);
                parsed.pubkey.writeUInt8(compression, 0);
                res.slice(off, off + 32).copy(parsed.pubkey, 1);
            }
            else if (compression === 0x04) {
                // Uncompressed key
                parsed.pubkey = Buffer.alloc(65);
                parsed.pubkey.writeUInt8(compression, 0);
                res.slice(off).copy(parsed.pubkey, 1);
            }
            else {
                throw new Error('Bad compression byte in signing response.');
            }
            off += 64;
        }
        else {
            // Skip pubkey section
            off += 65;
        }
        // Handle `GpECDSASig_t`
        parsed.sig = (0, util_1.parseDER)(res.slice(off, off + 2 + res[off + 1]));
        // Remove any leading zeros in signature components to ensure
        // the result is a 64 byte sig
        parsed.sig.r = (0, util_1.fixLen)(parsed.sig.r, 32);
        parsed.sig.s = (0, util_1.fixLen)(parsed.sig.s, 32);
        // If this is an EVM request, we want to add a `v`. Other request
        // types do not require this additional signature param.
        if (req.encodingType === index_1.Constants.SIGNING.ENCODINGS.EVM) {
            var vBn = (0, util_1.getV)(req.origPayloadBuf, parsed);
            // NOTE: For backward-compatibility reasons we are returning
            // a Buffer for `v` here. In the future, we will switch to
            // returning `v` as a BN and `r`,`s` as Buffers (they are hex
            // strings right now).
            parsed.sig.v = vBn.toArrayLike(Buffer);
        }
    }
    else if (req.curveType === index_1.Constants.SIGNING.CURVES.ED25519) {
        if (!req.omitPubkey) {
            // Handle `GpEdDSAPubkey_t`
            parsed.pubkey = Buffer.alloc(32);
            res.slice(off, off + 32).copy(parsed.pubkey);
        }
        off += 32;
        // Handle `GpEdDSASig_t`
        parsed.sig = {
            r: res.slice(off, off + 32),
            s: res.slice(off + 32, off + 64),
        };
    }
    else if (req.curveType === index_1.Constants.SIGNING.CURVES.BLS12_381_G2) {
        if (!req.omitPubkey) {
            // Handle `GpBLS12_381_G1Pub_t`
            parsed.pubkey = Buffer.alloc(48);
            res.slice(off, off + 48).copy(parsed.pubkey);
        }
        off += 48;
        // Handle `GpBLS12_381_G2Sig_t`
        parsed.sig = Buffer.alloc(96);
        res.slice(off, off + 96).copy(parsed.sig);
    }
    else {
        throw new Error('Unsupported curve.');
    }
    return parsed;
};
exports.parseGenericSigningResponse = parseGenericSigningResponse;
var getEncodedPayload = function (payload, encoding, allowedEncodings) {
    if (!encoding) {
        encoding = index_1.Constants.SIGNING.ENCODINGS.NONE;
    }
    // Make sure the encoding type specified is supported by firmware
    if (!(0, util_1.existsIn)(encoding, allowedEncodings)) {
        throw new Error('Encoding not supported by Lattice firmware. You may want to update.');
    }
    var payloadBuf;
    if (!payload) {
        throw new Error('No payload included');
    }
    if (typeof payload === 'string' && payload.slice(0, 2) === '0x') {
        payloadBuf = Buffer.from(payload.slice(2), 'hex');
    }
    else {
        payloadBuf = Buffer.from(payload);
    }
    // Build the request with the specified encoding type
    return {
        payloadBuf: payloadBuf,
        encoding: encoding,
    };
};
exports.getEncodedPayload = getEncodedPayload;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\genericSigning.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js", {"./api":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\api\\index.js","./calldata/index":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\calldata\\index.js","./client":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\client.js","./constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = exports.Constants = exports.Client = exports.Calldata = void 0;
var index_1 = require("./calldata/index");
Object.defineProperty(exports, "Calldata", { enumerable: true, get: function () { return index_1.CALLDATA; } });
var client_1 = require("./client");
Object.defineProperty(exports, "Client", { enumerable: true, get: function () { return client_1.Client; } });
var constants_1 = require("./constants");
Object.defineProperty(exports, "Constants", { enumerable: true, get: function () { return constants_1.EXTERNAL; } });
var util_1 = require("./util");
Object.defineProperty(exports, "Utils", { enumerable: true, get: function () { return util_1.EXTERNAL; } });
__exportStar(require("./api"), exports);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js", {"./latticeConstants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js","./secureMessages":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\secureMessages.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cprotocol%5Cindex.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./latticeConstants"), exports);
__exportStar(require("./secureMessages"), exports);

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\protocol\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cprotocol%5ClatticeConstants.js
      return function (require, module, exports) {
"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolConstants = exports.LatticeEncDataSchema = exports.LatticeSignBlsDst = exports.LatticeSignEncoding = exports.LatticeSignCurve = exports.LatticeSignHash = exports.LatticeSignSchema = exports.LatticeGetAddressesFlag = exports.LatticeSecureEncryptedRequestType = exports.LatticeMsgType = exports.LatticeProtocolVersion = exports.LatticeSecureMsgType = exports.LatticeResponseCode = void 0;
var LatticeResponseCode;
(function (LatticeResponseCode) {
    LatticeResponseCode[LatticeResponseCode["success"] = 0] = "success";
    LatticeResponseCode[LatticeResponseCode["invalidMsg"] = 128] = "invalidMsg";
    LatticeResponseCode[LatticeResponseCode["unsupportedVersion"] = 129] = "unsupportedVersion";
    LatticeResponseCode[LatticeResponseCode["deviceBusy"] = 130] = "deviceBusy";
    LatticeResponseCode[LatticeResponseCode["userTimeout"] = 131] = "userTimeout";
    LatticeResponseCode[LatticeResponseCode["userDeclined"] = 132] = "userDeclined";
    LatticeResponseCode[LatticeResponseCode["pairFailed"] = 133] = "pairFailed";
    LatticeResponseCode[LatticeResponseCode["pairDisabled"] = 134] = "pairDisabled";
    LatticeResponseCode[LatticeResponseCode["permissionDisabled"] = 135] = "permissionDisabled";
    LatticeResponseCode[LatticeResponseCode["internalError"] = 136] = "internalError";
    LatticeResponseCode[LatticeResponseCode["gceTimeout"] = 137] = "gceTimeout";
    LatticeResponseCode[LatticeResponseCode["wrongWallet"] = 138] = "wrongWallet";
    LatticeResponseCode[LatticeResponseCode["deviceLocked"] = 139] = "deviceLocked";
    LatticeResponseCode[LatticeResponseCode["disabled"] = 140] = "disabled";
    LatticeResponseCode[LatticeResponseCode["already"] = 141] = "already";
    LatticeResponseCode[LatticeResponseCode["invalidEphemId"] = 142] = "invalidEphemId";
})(LatticeResponseCode = exports.LatticeResponseCode || (exports.LatticeResponseCode = {}));
var LatticeSecureMsgType;
(function (LatticeSecureMsgType) {
    LatticeSecureMsgType[LatticeSecureMsgType["connect"] = 1] = "connect";
    LatticeSecureMsgType[LatticeSecureMsgType["encrypted"] = 2] = "encrypted";
})(LatticeSecureMsgType = exports.LatticeSecureMsgType || (exports.LatticeSecureMsgType = {}));
var LatticeProtocolVersion;
(function (LatticeProtocolVersion) {
    LatticeProtocolVersion[LatticeProtocolVersion["v1"] = 1] = "v1";
})(LatticeProtocolVersion = exports.LatticeProtocolVersion || (exports.LatticeProtocolVersion = {}));
var LatticeMsgType;
(function (LatticeMsgType) {
    LatticeMsgType[LatticeMsgType["response"] = 0] = "response";
    LatticeMsgType[LatticeMsgType["secure"] = 2] = "secure";
})(LatticeMsgType = exports.LatticeMsgType || (exports.LatticeMsgType = {}));
var LatticeSecureEncryptedRequestType;
(function (LatticeSecureEncryptedRequestType) {
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["finalizePairing"] = 0] = "finalizePairing";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["getAddresses"] = 1] = "getAddresses";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["sign"] = 3] = "sign";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["getWallets"] = 4] = "getWallets";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["getKvRecords"] = 7] = "getKvRecords";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["addKvRecords"] = 8] = "addKvRecords";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["removeKvRecords"] = 9] = "removeKvRecords";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["fetchEncryptedData"] = 12] = "fetchEncryptedData";
    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType["test"] = 13] = "test";
})(LatticeSecureEncryptedRequestType = exports.LatticeSecureEncryptedRequestType || (exports.LatticeSecureEncryptedRequestType = {}));
var LatticeGetAddressesFlag;
(function (LatticeGetAddressesFlag) {
    LatticeGetAddressesFlag[LatticeGetAddressesFlag["none"] = 0] = "none";
    LatticeGetAddressesFlag[LatticeGetAddressesFlag["secp256k1Pubkey"] = 3] = "secp256k1Pubkey";
    LatticeGetAddressesFlag[LatticeGetAddressesFlag["ed25519Pubkey"] = 4] = "ed25519Pubkey";
    LatticeGetAddressesFlag[LatticeGetAddressesFlag["bls12_381Pubkey"] = 5] = "bls12_381Pubkey";
})(LatticeGetAddressesFlag = exports.LatticeGetAddressesFlag || (exports.LatticeGetAddressesFlag = {}));
var LatticeSignSchema;
(function (LatticeSignSchema) {
    LatticeSignSchema[LatticeSignSchema["bitcoin"] = 0] = "bitcoin";
    LatticeSignSchema[LatticeSignSchema["ethereum"] = 1] = "ethereum";
    LatticeSignSchema[LatticeSignSchema["ethereumMsg"] = 3] = "ethereumMsg";
    LatticeSignSchema[LatticeSignSchema["extraData"] = 4] = "extraData";
    LatticeSignSchema[LatticeSignSchema["generic"] = 5] = "generic";
})(LatticeSignSchema = exports.LatticeSignSchema || (exports.LatticeSignSchema = {}));
var LatticeSignHash;
(function (LatticeSignHash) {
    LatticeSignHash[LatticeSignHash["none"] = 0] = "none";
    LatticeSignHash[LatticeSignHash["keccak256"] = 1] = "keccak256";
    LatticeSignHash[LatticeSignHash["sha256"] = 2] = "sha256";
})(LatticeSignHash = exports.LatticeSignHash || (exports.LatticeSignHash = {}));
var LatticeSignCurve;
(function (LatticeSignCurve) {
    LatticeSignCurve[LatticeSignCurve["secp256k1"] = 0] = "secp256k1";
    LatticeSignCurve[LatticeSignCurve["ed25519"] = 1] = "ed25519";
    LatticeSignCurve[LatticeSignCurve["bls12_381"] = 2] = "bls12_381";
})(LatticeSignCurve = exports.LatticeSignCurve || (exports.LatticeSignCurve = {}));
var LatticeSignEncoding;
(function (LatticeSignEncoding) {
    LatticeSignEncoding[LatticeSignEncoding["none"] = 1] = "none";
    LatticeSignEncoding[LatticeSignEncoding["solana"] = 2] = "solana";
    LatticeSignEncoding[LatticeSignEncoding["evm"] = 4] = "evm";
    LatticeSignEncoding[LatticeSignEncoding["eth_deposit"] = 5] = "eth_deposit";
})(LatticeSignEncoding = exports.LatticeSignEncoding || (exports.LatticeSignEncoding = {}));
var LatticeSignBlsDst;
(function (LatticeSignBlsDst) {
    LatticeSignBlsDst[LatticeSignBlsDst["NUL"] = 1] = "NUL";
    LatticeSignBlsDst[LatticeSignBlsDst["POP"] = 2] = "POP";
})(LatticeSignBlsDst = exports.LatticeSignBlsDst || (exports.LatticeSignBlsDst = {}));
var LatticeEncDataSchema;
(function (LatticeEncDataSchema) {
    LatticeEncDataSchema[LatticeEncDataSchema["eip2335"] = 0] = "eip2335";
})(LatticeEncDataSchema = exports.LatticeEncDataSchema || (exports.LatticeEncDataSchema = {}));
exports.ProtocolConstants = {
    // Lattice firmware uses a static initialization vector for
    // message encryption/decryption. This is generally considered
    // fine because each encryption/decryption uses a unique encryption
    // secret (derived from the per-message ephemeral key pair).
    aesIv: [
        0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73,
        0x77, 0x6f, 0x72, 0x64,
    ],
    // Constant size of address buffers from the Lattice.
    // Note that this size also captures public keys returned
    // by the Lattice (addresses = strings, pubkeys = buffers)
    addrStrLen: 129,
    // Status of the client's pairing with the target Lattice
    pairingStatus: {
        notPaired: 0x00,
        paired: 0x01,
    },
    // Response types, codes, and error messages
    responseMsg: (_a = {},
        _a[LatticeResponseCode.success] = '',
        _a[LatticeResponseCode.invalidMsg] = 'Invalid Request',
        _a[LatticeResponseCode.unsupportedVersion] = 'Unsupported Version',
        _a[LatticeResponseCode.deviceBusy] = 'Device Busy',
        _a[LatticeResponseCode.userTimeout] = 'Timeout waiting for user',
        _a[LatticeResponseCode.userDeclined] = 'Request declined by user',
        _a[LatticeResponseCode.pairFailed] = 'Pairing failed',
        _a[LatticeResponseCode.pairDisabled] = 'Pairing is currently disabled',
        _a[LatticeResponseCode.permissionDisabled] = 'Automated signing is currently disabled',
        _a[LatticeResponseCode.internalError] = 'Device Error',
        _a[LatticeResponseCode.gceTimeout] = 'Device Timeout',
        _a[LatticeResponseCode.wrongWallet] = 'Active wallet does not match request',
        _a[LatticeResponseCode.deviceLocked] = 'Device Locked',
        _a[LatticeResponseCode.disabled] = 'Feature Disabled',
        _a[LatticeResponseCode.already] = 'Record already exists on device',
        _a[LatticeResponseCode.invalidEphemId] = 'Request failed - needs resync',
        _a),
    msgSizes: {
        // General message header size. Valid for all Lattice messages
        header: 8,
        // Checksum must be appended to each message
        checksum: 4,
        // Lattice secure message constants. All requests from this SDK
        // are secure messages.
        secure: {
            // Sizes of full payloads for secure messages
            payload: {
                request: {
                    // [ requestType (1 byte) | pubkey (65 bytes) ]
                    connect: 66,
                    // [ requestType (1 byte) | ephemeralId (4 bytes) | encryptedData (1728 bytes) ]
                    encrypted: 1733,
                },
                // Note that the response payload always has status code as the
                // first byte. This byte is removed as part of `request`, inside
                // `parseLattice1Response`. These constants include the status
                // code byte.
                response: {
                    connect: 215,
                    // Encrypted responses are as follows:
                    // encryptedData (1728) | empty (1728)
                    // The latter half is empty due to an invalid type definition
                    // in Lattice firmware. (Someone made a C `struct` instead of
                    // a `union`, oops).
                    encrypted: 3457,
                },
            },
            // Sizes for data inside secure message payloads
            data: {
                // All requests also have a `requestCode`, which is omitted
                // from these constants.
                request: {
                    connect: 65,
                    encrypted: (_b = {
                            // All encrypted requests are encrypted into a 1728 byte buffer
                            encryptedData: 1728
                        },
                        // Individual request types have different data sizes.
                        _b[LatticeSecureEncryptedRequestType.finalizePairing] = 99,
                        _b[LatticeSecureEncryptedRequestType.getAddresses] = 54,
                        _b[LatticeSecureEncryptedRequestType.sign] = 1680,
                        _b[LatticeSecureEncryptedRequestType.getWallets] = 0,
                        _b[LatticeSecureEncryptedRequestType.getKvRecords] = 9,
                        _b[LatticeSecureEncryptedRequestType.addKvRecords] = 1391,
                        _b[LatticeSecureEncryptedRequestType.removeKvRecords] = 405,
                        _b[LatticeSecureEncryptedRequestType.fetchEncryptedData] = 1025,
                        _b[LatticeSecureEncryptedRequestType.test] = 506,
                        _b),
                },
                // All responses also have a `responseCode`, which is omitted
                // from these constants.
                response: {
                    encrypted: (_c = {
                            encryptedData: 1728
                        },
                        // Once decrypted, the data size of the response
                        // payload will be determined by the request type.
                        // NOTE: All requests also have ephemeralPublicKey (65 bytes) and
                        // checksum (4 bytes), which are excluded from these sizes.
                        _c[LatticeSecureEncryptedRequestType.finalizePairing] = 0,
                        _c[LatticeSecureEncryptedRequestType.getAddresses] = 1290,
                        _c[LatticeSecureEncryptedRequestType.sign] = 1090,
                        _c[LatticeSecureEncryptedRequestType.getWallets] = 142,
                        _c[LatticeSecureEncryptedRequestType.getKvRecords] = 1395,
                        _c[LatticeSecureEncryptedRequestType.addKvRecords] = 0,
                        _c[LatticeSecureEncryptedRequestType.removeKvRecords] = 0,
                        _c[LatticeSecureEncryptedRequestType.fetchEncryptedData] = 1608,
                        _c[LatticeSecureEncryptedRequestType.test] = 1646,
                        _c),
                },
            },
        },
    },
};

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\secureMessages.js", {"../shared/functions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\functions.js","../shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","../util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","./latticeConstants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\latticeConstants.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cprotocol%5CsecureMessages.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptedSecureRequest = exports.connectSecureRequest = void 0;
/**
 * All messages sent to the Lattice from this SDK will be
 * "secure messages", of which there are two types:
 *
 * 1. Connect requests are *unencrypted* and serve to establish
 *    a connection between the SDK Client instance and the target
 *    Lattice. If the client is already paired to the target Lattice,
 *    the response will indicate that. If the client has never paired
 *    with this Lattice, the Lattice will go into "pairing mode" and
 *    will expect a follow up `finalizePairing` request, which is
 *    an encrypted request. This will return an ephemeral public key,
 *    which is used to encrypt the next request.
 * 2. Encrypted requests are *encrypted* (obviously) and from a Lattice
 *    protocol perspective they are all constructed the same way:
 *    create a buffer of `payload` length and fill it with unencrypted
 *    data, then encrypt the entire payload (not just the data you filled)
 *    with the ECDH secret formed from the last ephemeral public key.
 *    The response to this request will contain a new ephemral public
 *    key, which you will need for the next encrypted request.
 */
var latticeConstants_1 = require("./latticeConstants");
var util_1 = require("../util");
var functions_1 = require("../shared/functions");
var validators_1 = require("../shared/validators");
var msgSizes = latticeConstants_1.ProtocolConstants.msgSizes;
var szs = msgSizes.secure;
/**
 * Build and make a request to connect to a specific Lattice
 * based on its `deviceId`.
 * @param deviceId - Device ID for the target Lattice. Must be in
 *                   the same `client.baseUrl` domain to be found.
 * @return {Buffer} - Connection response payload data, which contains
 *                    information about the connected Lattice.
 */
function connectSecureRequest(_a) {
    var url = _a.url, pubkey = _a.pubkey;
    return __awaiter(this, void 0, void 0, function () {
        var payloadData, msgId, msg, resp;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    payloadData = serializeSecureRequestConnectPayloadData({
                        pubkey: pubkey,
                    });
                    msgId = (0, util_1.randomBytes)(4);
                    msg = serializeSecureRequestMsg(msgId, latticeConstants_1.LatticeSecureMsgType.connect, payloadData);
                    return [4 /*yield*/, (0, functions_1.request)({ url: url, payload: msg })];
                case 1:
                    resp = _b.sent();
                    if (resp.length !== szs.payload.response.connect - 1) {
                        throw new Error('Wrong Lattice response message size.');
                    }
                    return [2 /*return*/, resp];
            }
        });
    });
}
exports.connectSecureRequest = connectSecureRequest;
/**
 * Build an encrypted secure request using raw data,
 * then send that request to the target Lattice, handle
 * the response, and return the *decrypted* response
 * payload data.
 * Also updates ephemeral public key in the client.
 * This is a wrapper around several local util functions.
 * @param data - Unencrypted raw calldata for function
 * @param requestType - Type of encrypted reques to make
 * @return {Buffer} Decrypted response data (excluding metadata)
 */
function encryptedSecureRequest(_a) {
    var data = _a.data, requestType = _a.requestType, sharedSecret = _a.sharedSecret, ephemeralPub = _a.ephemeralPub, url = _a.url;
    return __awaiter(this, void 0, void 0, function () {
        var msgId, payloadData, msg, resp, encPayloadData;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    msgId = (0, util_1.randomBytes)(4);
                    payloadData = serializeSecureRequestEncryptedPayloadData({
                        data: data,
                        requestType: requestType,
                        ephemeralPub: ephemeralPub,
                        sharedSecret: sharedSecret,
                    });
                    msg = serializeSecureRequestMsg(msgId, latticeConstants_1.LatticeSecureMsgType.encrypted, payloadData);
                    return [4 /*yield*/, (0, functions_1.request)({
                            url: url,
                            payload: msg,
                        })];
                case 1:
                    resp = _b.sent();
                    // Deserialize the response payload data
                    if (resp.length !== szs.payload.response.encrypted - 1) {
                        throw new Error('Wrong Lattice response message size.');
                    }
                    encPayloadData = resp.slice(0, szs.data.response.encrypted.encryptedData);
                    // Return decrypted response payload data
                    return [2 /*return*/, decryptEncryptedLatticeResponseData({
                            encPayloadData: encPayloadData,
                            requestType: requestType,
                            sharedSecret: sharedSecret,
                        })];
            }
        });
    });
}
exports.encryptedSecureRequest = encryptedSecureRequest;
/**
 * @internal
 * Serialize a Secure Request message for the Lattice.
 * All outgoing SDK requests are of this form.
 * @param msgId - Random 4 bytes of data for internally tracking this message
 * @param secureRequestType - 0x01 for connect, 0x02 for encrypted
 * @param payloadData - Request data
 * @return {Buffer} Serialized message to be sent to Lattice
 */
function serializeSecureRequestMsg(msgId, secureRequestType, payloadData) {
    // Sanity check request data
    if (msgId.length !== 4) {
        throw new Error('msgId must be four bytes');
    }
    if (secureRequestType !== latticeConstants_1.LatticeSecureMsgType.connect &&
        secureRequestType !== latticeConstants_1.LatticeSecureMsgType.encrypted) {
        throw new Error('Invalid Lattice secure request type');
    }
    // Validate the incoming payload data size. Note that the payload
    // data is prepended with a secure request type byte, so the
    // payload data size is one less than the expected size.
    var isValidConnectPayloadDataSz = secureRequestType === latticeConstants_1.LatticeSecureMsgType.connect &&
        payloadData.length === szs.payload.request.connect - 1;
    var isValidEncryptedPayloadDataSz = secureRequestType === latticeConstants_1.LatticeSecureMsgType.encrypted &&
        payloadData.length === szs.payload.request.encrypted - 1;
    // Build payload and size
    var msgSz = msgSizes.header + msgSizes.checksum;
    var payloadLen;
    var payload = {
        requestType: secureRequestType,
        data: payloadData,
    };
    if (isValidConnectPayloadDataSz) {
        payloadLen = szs.payload.request.connect;
    }
    else if (isValidEncryptedPayloadDataSz) {
        payloadLen = szs.payload.request.encrypted;
    }
    else {
        throw new Error('Invalid Lattice secure request payload size');
    }
    msgSz += payloadLen;
    // Construct the request in object form
    var header = {
        version: latticeConstants_1.LatticeProtocolVersion.v1,
        type: latticeConstants_1.LatticeMsgType.secure,
        id: msgId,
        len: payloadLen,
    };
    var req = {
        header: header,
        payload: payload,
    };
    // Now serialize the whole message
    // Header | requestType | payloadData | checksum
    var msg = Buffer.alloc(msgSz);
    var off = 0;
    // Header
    msg.writeUInt8(req.header.version, off);
    off += 1;
    msg.writeUInt8(req.header.type, off);
    off += 1;
    req.header.id.copy(msg, off);
    off += req.header.id.length;
    msg.writeUInt16BE(req.header.len, off);
    off += 2;
    // Payload
    msg.writeUInt8(req.payload.requestType, off);
    off += 1;
    req.payload.data.copy(msg, off);
    off += req.payload.data.length;
    // Checksum
    msg.writeUInt32BE((0, util_1.checksum)(msg.slice(0, off)), off);
    off += 4;
    if (off !== msgSz) {
        throw new Error('Failed to build request message');
    }
    // We have our serialized secure message!
    return msg;
}
/**
 * @internal
 * Serialize payload data for a Lattice secure request: connect
 * @return {Buffer} - 1700 bytes, of which only 65 are used
 */
function serializeSecureRequestConnectPayloadData(payloadData) {
    var serPayloadData = Buffer.alloc(szs.data.request.connect);
    payloadData.pubkey.copy(serPayloadData, 0);
    return serPayloadData;
}
/**
 * @internal
 * Serialize payload data for Lattice secure request: encrypted
 * @param data - Raw (unencrypted) request data
 * @return {Buffer} - 1700 bytes, all of which should be used
 */
function serializeSecureRequestEncryptedPayloadData(_a) {
    var data = _a.data, requestType = _a.requestType, ephemeralPub = _a.ephemeralPub, sharedSecret = _a.sharedSecret;
    // Sanity checks request size
    if (data.length > szs.data.request.encrypted.encryptedData) {
        throw new Error('Encrypted request data too large');
    }
    // Make sure we have a shared secret. An error will be thrown
    // if there is no ephemeral pub, indicating we need to reconnect.
    (0, validators_1.validateEphemeralPub)(ephemeralPub);
    // Validate the request data size matches the desired request
    var requestDataSize = szs.data.request.encrypted[requestType];
    if (data.length !== requestDataSize) {
        throw new Error("Invalid request datasize (wanted ".concat(requestDataSize, ", got ").concat(data.length, ")"));
    }
    // Build the pre-encrypted data payload, which variable sized and of form:
    // encryptedRequestType | data | checksum
    var preEncryptedData = Buffer.alloc(1 + requestDataSize);
    preEncryptedData[0] = requestType;
    data.copy(preEncryptedData, 1);
    var preEncryptedDataChecksum = (0, util_1.checksum)(preEncryptedData);
    // Encrypt the data into a fixed size buffer. The buffer size should
    // equal to the full message request less the 4-byte ephemeral id.
    var _encryptedData = Buffer.alloc(szs.data.request.encrypted.encryptedData);
    preEncryptedData.copy(_encryptedData, 0);
    _encryptedData.writeUInt32LE(preEncryptedDataChecksum, preEncryptedData.length);
    var encryptedData = (0, util_1.aes256_encrypt)(_encryptedData, sharedSecret);
    // Calculate ephemeral ID
    var ephemeralId = (0, functions_1.getEphemeralId)(sharedSecret);
    // Now we will serialize the payload data.
    var serPayloadData = Buffer.alloc(szs.payload.request.encrypted - 1);
    serPayloadData.writeUInt32LE(ephemeralId);
    encryptedData.copy(serPayloadData, 4);
    return serPayloadData;
}
/**
 * @internal
 * Decrypt the response data from an encrypted request.
 * @param encPayloadData - Encrypted payload data in response
 * @return {Buffer} Decrypted response data (excluding metadata)
 */
function decryptEncryptedLatticeResponseData(_a) {
    var encPayloadData = _a.encPayloadData, requestType = _a.requestType, sharedSecret = _a.sharedSecret;
    // Decrypt data using the *current* shared secret
    var decData = (0, util_1.aes256_decrypt)(encPayloadData, sharedSecret);
    // Bulid the object
    var ephemeralPubSz = 65; // secp256r1 pubkey
    var checksumOffset = ephemeralPubSz + szs.data.response.encrypted[requestType];
    var respData = {
        ephemeralPub: decData.slice(0, ephemeralPubSz),
        data: decData.slice(ephemeralPubSz, checksumOffset),
        checksum: decData.readUInt32BE(checksumOffset),
    };
    // Validate the checksum
    var validChecksum = (0, util_1.checksum)(decData.slice(0, checksumOffset));
    if (respData.checksum !== validChecksum) {
        throw new Error('Checksum mismatch in decrypted Lattice data');
    }
    // Validate the response data size
    var validSz = szs.data.response.encrypted[requestType];
    if (respData.data.length !== validSz) {
        throw new Error('Incorrect response data returned from Lattice');
    }
    var newEphemeralPub = (0, util_1.getP256KeyPairFromPub)(respData.ephemeralPub);
    // Returned the decrypted data
    return { decryptedData: respData.data, newEphemeralPub: newEphemeralPub };
}

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\protocol\\secureMessages.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\errors.js", {"../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cerrors.js
      return function (require, module, exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LatticeResponseError = void 0;
var protocol_1 = require("../protocol");
var buildLatticeResponseErrorMessage = function (_a) {
    var responseCode = _a.responseCode, errorMessage = _a.errorMessage;
    var msg = [];
    if (responseCode) {
        msg.push("".concat(protocol_1.ProtocolConstants.responseMsg[responseCode]));
    }
    if (errorMessage) {
        msg.push('Error Message: ');
        msg.push(errorMessage);
    }
    return msg.join('\n');
};
var LatticeResponseError = /** @class */ (function (_super) {
    __extends(LatticeResponseError, _super);
    function LatticeResponseError(responseCode, errorMessage) {
        var _this = this;
        var message = buildLatticeResponseErrorMessage({
            responseCode: responseCode,
            errorMessage: errorMessage,
        });
        _this = _super.call(this, message) || this;
        _this.responseCode = responseCode;
        _this.errorMessage = errorMessage;
        _this.name = 'LatticeResponseError';
        _this.responseCode = responseCode;
        _this.errorMessage = errorMessage;
        return _this;
    }
    return LatticeResponseError;
}(Error));
exports.LatticeResponseError = LatticeResponseError;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\errors.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\functions.js", {"../bitcoin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\bitcoin.js","../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../ethereum":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\ethereum.js","../genericSigning":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\genericSigning.js","../util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","./errors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\errors.js","./predicates":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\predicates.js","./validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","hash.js/lib/hash/sha":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\hash.js\\lib\\hash\\sha.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cfunctions.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEphemeralId = exports.retryWrapper = exports.buildRetryWrapper = exports.request = exports.buildTransaction = void 0;
var sha_1 = require("hash.js/lib/hash/sha");
var bitcoin_1 = __importDefault(require("../bitcoin"));
var constants_1 = require("../constants");
var ethereum_1 = __importDefault(require("../ethereum"));
var genericSigning_1 = require("../genericSigning");
var util_1 = require("../util");
var errors_1 = require("./errors");
var predicates_1 = require("./predicates");
var validators_1 = require("./validators");
var buildTransaction = function (_a) {
    // All transaction requests must be put into the same sized buffer. This comes from
    // sizeof(GpTransactionRequest_t), but note we remove the 2-byte schemaId since it is not
    // returned from our resolver. Note that different firmware versions may have different data
    // sizes.
    var data = _a.data, currency = _a.currency, fwConstants = _a.fwConstants;
    // TEMPORARY BRIDGE -- DEPRECATE ME In v0.15.0 Lattice firmware removed the legacy ETH
    // signing path, so we need to convert such requests to general signing requests using the
    // EVM decoder. NOTE: Not every request can be converted, so users should switch to using
    // general signing requests for newer firmware versions. EIP1559 and EIP155 legacy
    // requests will convert, but others may not.
    if (currency === 'ETH' && (0, predicates_1.shouldUseEVMLegacyConverter)(fwConstants)) {
        console.log('Using the legacy ETH signing path. This will soon be deprecated. ' +
            'Please switch to general signing request.');
        var payload = void 0;
        try {
            payload = ethereum_1.default.ethConvertLegacyToGenericReq(data);
        }
        catch (err) {
            throw new Error('Could not convert legacy request. Please switch to a general signing ' +
                'request. See gridplus-sdk docs for more information.');
        }
        data = {
            fwConstants: fwConstants,
            encodingType: constants_1.EXTERNAL.SIGNING.ENCODINGS.EVM,
            curveType: constants_1.EXTERNAL.SIGNING.CURVES.SECP256K1,
            hashType: constants_1.EXTERNAL.SIGNING.HASHES.KECCAK256,
            signerPath: data.signerPath,
            payload: payload,
        };
        return {
            requestData: (0, genericSigning_1.buildGenericSigningMsgRequest)(__assign(__assign({}, data), { fwConstants: fwConstants })),
            isGeneric: true,
        };
    }
    else if (currency === 'ETH') {
        // Legacy signing pathway -- should deprecate in the future
        return {
            requestData: ethereum_1.default.buildEthereumTxRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),
            isGeneric: false,
        };
    }
    else if (currency === 'ETH_MSG') {
        return {
            requestData: ethereum_1.default.buildEthereumMsgRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),
            isGeneric: false,
        };
    }
    else if (currency === 'BTC') {
        return {
            requestData: bitcoin_1.default.buildBitcoinTxRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),
            isGeneric: false,
        };
    }
    return {
        requestData: (0, genericSigning_1.buildGenericSigningMsgRequest)(__assign(__assign({}, data), { fwConstants: fwConstants })),
        isGeneric: true,
    };
};
exports.buildTransaction = buildTransaction;
var request = function (_a) {
    var url = _a.url, payload = _a.payload, _b = _a.timeout, timeout = _b === void 0 ? 60000 : _b;
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_c) {
            return [2 /*return*/, (0, util_1.fetchWithTimeout)(url, {
                    method: 'POST',
                    body: JSON.stringify({ data: payload }),
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    timeout: timeout,
                })
                    .catch(validators_1.validateRequestError)
                    .then(function (res) { return res.json(); })
                    .then(function (body) {
                    // Handle formatting or generic HTTP errors
                    if (!body || !body.message) {
                        throw new Error('Invalid response');
                    }
                    else if (body.status !== 200) {
                        throw new Error("Error code ".concat(body.status, ": ").concat(body.message));
                    }
                    var _a = (0, util_1.parseLattice1Response)(body.message), data = _a.data, errorMessage = _a.errorMessage, responseCode = _a.responseCode;
                    if (errorMessage || responseCode) {
                        throw new errors_1.LatticeResponseError(responseCode, errorMessage);
                    }
                    return data;
                })];
        });
    });
};
exports.request = request;
/**
 * `sleep()` returns a Promise that resolves after a given number of milliseconds.
 */
function sleep(ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
/**
 * Takes a function and a set of parameters, and returns a function that will retry the original
 * function with the given parameters a number of times
 *
 * @param client - a {@link Client} instance that is passed to the {@link retryWrapper}
 * @param retries - the number of times to retry the function before giving up
 * @returns a {@link retryWrapper} function for handing retry logic
 */
var buildRetryWrapper = function (client, retries) {
    return function (fn, params) {
        return (0, exports.retryWrapper)({
            fn: fn,
            params: __assign(__assign({}, params), { client: client }),
            retries: retries,
            client: client,
        });
    };
};
exports.buildRetryWrapper = buildRetryWrapper;
/**
 * Retries a function call if the error message or response code is present and the number of
 * retries is greater than 0.
 *
 * @param fn - The function to retry
 * @param params - The parameters to pass to the function
 * @param retries - The number of times to retry the function
 * @param client - The {@link Client} to use for side-effects
 */
var retryWrapper = function (_a) {
    var fn = _a.fn, params = _a.params, retries = _a.retries, client = _a.client;
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_b) {
            return [2 /*return*/, fn(__assign({}, params)).catch(function (err) { return __awaiter(void 0, void 0, void 0, function () {
                    var errorMessage, responseCode;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                errorMessage = err.errorMessage;
                                responseCode = err.responseCode;
                                if (!((errorMessage || responseCode) && retries)) return [3 /*break*/, 8];
                                if (!(0, predicates_1.isDeviceBusy)(responseCode)) return [3 /*break*/, 2];
                                return [4 /*yield*/, sleep(3000)];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 7];
                            case 2:
                                if (!((0, predicates_1.isWrongWallet)(responseCode) &&
                                    !client.skipRetryOnWrongWallet)) return [3 /*break*/, 4];
                                return [4 /*yield*/, client.fetchActiveWallet()];
                            case 3:
                                _a.sent();
                                return [3 /*break*/, 7];
                            case 4:
                                if (!(0, predicates_1.isInvalidEphemeralId)(responseCode)) return [3 /*break*/, 6];
                                return [4 /*yield*/, client.connect(client.deviceId)];
                            case 5:
                                _a.sent();
                                return [3 /*break*/, 7];
                            case 6: throw err;
                            case 7: return [2 /*return*/, (0, exports.retryWrapper)({
                                    fn: fn,
                                    params: params,
                                    retries: retries - 1,
                                    client: client,
                                })];
                            case 8: throw err;
                        }
                    });
                }); })];
        });
    });
};
exports.retryWrapper = retryWrapper;
/**
 * Get the ephemeral id, which is the first 4 bytes of the shared secret generated from the local
 * private key and the ephemeral public key from the device.
 * @internal
 * @returns Buffer
 */
var getEphemeralId = function (sharedSecret) {
    // EphemId is the first 4 bytes of the hash of the shared secret
    var hash = Buffer.from((0, sha_1.sha256)().update(sharedSecret).digest('hex'), 'hex');
    return parseInt(hash.slice(0, 4).toString('hex'), 16);
};
exports.getEphemeralId = getEphemeralId;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\functions.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\predicates.js", {"../protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","./utilities":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cpredicates.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldUseEVMLegacyConverter = exports.doesFetchWalletsOnLoad = exports.isInvalidEphemeralId = exports.isWrongWallet = exports.isDeviceBusy = void 0;
var protocol_1 = require("../protocol");
var utilities_1 = require("./utilities");
var isDeviceBusy = function (responseCode) {
    return responseCode === protocol_1.LatticeResponseCode.deviceBusy ||
        responseCode === protocol_1.LatticeResponseCode.gceTimeout;
};
exports.isDeviceBusy = isDeviceBusy;
var isWrongWallet = function (responseCode) {
    return responseCode === protocol_1.LatticeResponseCode.wrongWallet;
};
exports.isWrongWallet = isWrongWallet;
var isInvalidEphemeralId = function (responseCode) {
    return responseCode === protocol_1.LatticeResponseCode.invalidEphemId;
};
exports.isInvalidEphemeralId = isInvalidEphemeralId;
var doesFetchWalletsOnLoad = function (fwVersion) {
    return (0, utilities_1.isFWSupported)(fwVersion, { major: 0, minor: 14, fix: 1 });
};
exports.doesFetchWalletsOnLoad = doesFetchWalletsOnLoad;
var shouldUseEVMLegacyConverter = function (fwConstants) {
    return fwConstants.genericSigning &&
        fwConstants.genericSigning.encodingTypes &&
        fwConstants.genericSigning.encodingTypes.EVM;
};
exports.shouldUseEVMLegacyConverter = shouldUseEVMLegacyConverter;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\predicates.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\utilities.js", {"../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cutilities.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPathStr = exports.isFWSupported = exports.parseWallets = exports.getSharedSecret = exports.getPubKeyBytes = void 0;
var constants_1 = require("../constants");
/**
 * Get 64 bytes representing the public key This is the uncompressed key without the leading 04
 * byte
 * @param KeyPair - //TODO Describe the keypair
 * @param LE - Whether to return the public key in little endian format.
 * @returns A Buffer containing the public key.
 */
var getPubKeyBytes = function (key, LE) {
    if (LE === void 0) { LE = false; }
    var k = key.getPublic();
    var p = k.encode('hex');
    var pb = Buffer.from(p, 'hex');
    if (LE === true) {
        // Need to flip X and Y components to little endian
        var x = pb.slice(1, 33).reverse();
        var y = pb.slice(33, 65).reverse();
        // @ts-expect-error - TODO: Find out why Buffer won't accept pb[0]
        return Buffer.concat([pb[0], x, y]);
    }
    else {
        return pb;
    }
};
exports.getPubKeyBytes = getPubKeyBytes;
/**
 * Get the shared secret, derived via ECDH from the local private key and the ephemeral public key
 * @internal
 * @returns Buffer
 */
var getSharedSecret = function (key, ephemeralPub) {
    // Once every ~256 attempts, we will get a key that starts with a `00` byte, which can lead to
    // problems initializing AES if we don't force a 32 byte BE buffer.
    return Buffer.from(key.derive(ephemeralPub.getPublic()).toArray('be', 32));
};
exports.getSharedSecret = getSharedSecret;
// Given a set of wallet data, which contains two wallet descriptors, parse the data and save it
// to memory
var parseWallets = function (walletData) {
    // Read the external wallet data first. If it is non-null, the external wallet will be the
    // active wallet of the device and we should save it. If the external wallet is blank, it means
    // there is no card present and we should save and use the interal wallet. If both wallets are
    // empty, it means the device still needs to be set up.
    var walletDescriptorLen = 71;
    // Internal first
    var off = 0;
    var activeWallets = {
        internal: {
            uid: undefined,
            capabilities: undefined,
            name: undefined,
            external: false,
        },
        external: {
            uid: undefined,
            capabilities: undefined,
            name: undefined,
            external: true,
        },
    };
    activeWallets.internal.uid = walletData.slice(off, off + 32);
    // NOTE: `capabilities` and `name` were deprecated in Lattice firmware.
    // They never provided any real information, but have been archived here
    // since the response size has been preserved and we may bring them back
    // in a different form.
    // activeWallets.internal.capabilities = walletData.readUInt32BE(off + 32);
    // activeWallets.internal.name = walletData.slice(
    // off + 36,
    // off + walletDescriptorLen,
    // );
    // Offset the first item
    off += walletDescriptorLen;
    // External
    activeWallets.external.uid = walletData.slice(off, off + 32);
    // activeWallets.external.capabilities = walletData.readUInt32BE(off + 32);
    // activeWallets.external.name = walletData.slice(
    // off + 36,
    // off + walletDescriptorLen,
    // );
    return activeWallets;
};
exports.parseWallets = parseWallets;
// Determine if a provided firmware version matches or exceeds the current firmware version
var isFWSupported = function (fwVersion, versionSupported) {
    var major = fwVersion.major, minor = fwVersion.minor, fix = fwVersion.fix;
    var _major = versionSupported.major, _minor = versionSupported.minor, _fix = versionSupported.fix;
    return (major > _major ||
        (major >= _major && minor > _minor) ||
        (major >= _major && minor >= _minor && fix >= _fix));
};
exports.isFWSupported = isFWSupported;
/**
 * Convert a set of BIP39 path indices to a string
 * @param path - Set of indices
 */
var getPathStr = function (path) {
    var pathStr = 'm';
    path.forEach(function (idx) {
        if (idx >= constants_1.HARDENED_OFFSET) {
            pathStr += "/".concat(idx - constants_1.HARDENED_OFFSET, "'");
        }
        else {
            pathStr += "/".concat(idx);
        }
    });
    return pathStr;
};
exports.getPathStr = getPathStr;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\utilities.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js", {"../constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","../util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js","lodash/isEmpty":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\isEmpty.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cshared%5Cvalidators.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValid4ByteResponse = exports.isValidBlockExplorerResponse = exports.validateKvRecord = exports.validateKvRecords = exports.validateActiveWallets = exports.validateKey = exports.validateSharedSecret = exports.validateEphemeralPub = exports.validateConnectedClient = exports.validateWallet = exports.validateRequestError = exports.validateFwVersion = exports.validateFwConstants = exports.validateBaseUrl = exports.validateUrl = exports.validateAppName = exports.validateDeviceId = exports.validateStartPath = exports.validateNAddresses = exports.validateIsUInt4 = void 0;
var constants_1 = require("../constants");
var util_1 = require("../util");
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var validateIsUInt4 = function (n) {
    if (typeof n !== 'number' || !(0, util_1.isUInt4)(n)) {
        throw new Error('Must be an integer between 0 and 15 inclusive');
    }
    return n;
};
exports.validateIsUInt4 = validateIsUInt4;
var validateNAddresses = function (n) {
    if (!n) {
        throw new Error('The number of addresses is required.');
    }
    if (n > constants_1.MAX_ADDR) {
        throw new Error("You may only request ".concat(constants_1.MAX_ADDR, " addresses at once."));
    }
    return n;
};
exports.validateNAddresses = validateNAddresses;
var validateStartPath = function (startPath) {
    if (!startPath) {
        throw new Error('Start path is required');
    }
    if (startPath.length < 1 || startPath.length > 5)
        throw new Error('Path must include between 1 and 5 indices');
    return startPath;
};
exports.validateStartPath = validateStartPath;
var validateDeviceId = function (deviceId) {
    if (!deviceId) {
        throw new Error('No device ID has been stored. Please connect with your device ID first.');
    }
    return deviceId;
};
exports.validateDeviceId = validateDeviceId;
var validateAppName = function (name) {
    if (!name) {
        throw new Error('Name is required.');
    }
    if (name.length < 5 || name.length > 24) {
        throw new Error('Invalid length for name provided. Must be 5-24 characters.');
    }
    return name;
};
exports.validateAppName = validateAppName;
var validateUrl = function (url) {
    if (!url) {
        throw new Error('URL does not exist. Please reconnect.');
    }
    try {
        new URL(url);
    }
    catch (err) {
        throw new Error('Invalid URL provided. Please use a valid URL.');
    }
    return url;
};
exports.validateUrl = validateUrl;
var validateBaseUrl = function (baseUrl) {
    if (!baseUrl) {
        throw new Error('Base URL is required.');
    }
    try {
        new URL(baseUrl);
    }
    catch (err) {
        throw new Error('Invalid Base URL provided. Please use a valid URL.');
    }
    return baseUrl;
};
exports.validateBaseUrl = validateBaseUrl;
var validateFwConstants = function (fwConstants) {
    if (!fwConstants) {
        throw new Error('Firmware constants do not exist. Please reconnect.');
    }
    return fwConstants;
};
exports.validateFwConstants = validateFwConstants;
var validateFwVersion = function (fwVersion) {
    if (!fwVersion) {
        throw new Error('Firmware version does not exist. Please reconnect.');
    }
    if (typeof fwVersion.fix !== 'number' ||
        typeof fwVersion.minor !== 'number' ||
        typeof fwVersion.major !== 'number') {
        throw new Error('Firmware version improperly formatted. Please reconnect.');
    }
    return fwVersion;
};
exports.validateFwVersion = validateFwVersion;
var validateRequestError = function (err) {
    var isTimeout = err.code === 'ECONNABORTED' && err.errno === 'ETIME';
    if (isTimeout) {
        throw new Error('Timeout waiting for device. Please ensure it is connected to the internet and try again in a minute.');
    }
    throw new Error("Failed to make request to device:\n".concat(err.message));
};
exports.validateRequestError = validateRequestError;
var validateWallet = function (wallet) {
    if (!wallet || wallet === null) {
        throw new Error('No active wallet.');
    }
    return wallet;
};
exports.validateWallet = validateWallet;
var validateConnectedClient = function (client) {
    var appName = (0, exports.validateAppName)(client.getAppName());
    var ephemeralPub = (0, exports.validateEphemeralPub)(client.ephemeralPub);
    var sharedSecret = (0, exports.validateSharedSecret)(client.sharedSecret);
    var url = (0, exports.validateUrl)(client.url);
    var fwConstants = (0, exports.validateFwConstants)(client.getFwConstants());
    var fwVersion = (0, exports.validateFwVersion)(client.getFwVersion());
    // @ts-expect-error - Key is private
    var key = (0, exports.validateKey)(client.key);
    return {
        appName: appName,
        ephemeralPub: ephemeralPub,
        sharedSecret: sharedSecret,
        url: url,
        fwConstants: fwConstants,
        fwVersion: fwVersion,
        key: key,
    };
};
exports.validateConnectedClient = validateConnectedClient;
var validateEphemeralPub = function (ephemeralPub) {
    if (!ephemeralPub) {
        throw new Error('`ephemeralPub` (ephemeral public key) is required. Please reconnect.');
    }
    return ephemeralPub;
};
exports.validateEphemeralPub = validateEphemeralPub;
var validateSharedSecret = function (sharedSecret) {
    if (!sharedSecret) {
        throw new Error('Shared secret required. Please reconnect.');
    }
    return sharedSecret;
};
exports.validateSharedSecret = validateSharedSecret;
var validateKey = function (key) {
    if (!key) {
        throw new Error('Key is required. Please reconnect.');
    }
    return key;
};
exports.validateKey = validateKey;
var validateActiveWallets = function (activeWallets) {
    var _a, _b, _c, _d;
    if (!activeWallets ||
        (((_b = (_a = activeWallets === null || activeWallets === void 0 ? void 0 : activeWallets.internal) === null || _a === void 0 ? void 0 : _a.uid) === null || _b === void 0 ? void 0 : _b.equals(constants_1.EMPTY_WALLET_UID)) &&
            ((_d = (_c = activeWallets === null || activeWallets === void 0 ? void 0 : activeWallets.external) === null || _c === void 0 ? void 0 : _c.uid) === null || _d === void 0 ? void 0 : _d.equals(constants_1.EMPTY_WALLET_UID)))) {
        throw new Error('No active wallet.');
    }
    return activeWallets;
};
exports.validateActiveWallets = validateActiveWallets;
var validateKvRecords = function (records, fwConstants) {
    if (!fwConstants || !fwConstants.kvActionsAllowed) {
        throw new Error('Unsupported. Please update firmware.');
    }
    else if (typeof records !== 'object' || Object.keys(records).length < 1) {
        throw new Error('One or more key-value mapping must be provided in `records` param.');
    }
    else if (Object.keys(records).length > fwConstants.kvActionMaxNum) {
        throw new Error("Too many keys provided. Please only provide up to ".concat(fwConstants.kvActionMaxNum, "."));
    }
    return records;
};
exports.validateKvRecords = validateKvRecords;
var validateKvRecord = function (_a, fwConstants) {
    var key = _a.key, val = _a.val;
    if (typeof key !== 'string' ||
        String(key).length > fwConstants.kvKeyMaxStrSz) {
        throw new Error("Key ".concat(key, " too large. Must be <=").concat(fwConstants.kvKeyMaxStrSz, " characters."));
    }
    else if (typeof val !== 'string' ||
        String(val).length > fwConstants.kvValMaxStrSz) {
        throw new Error("Value ".concat(val, " too large. Must be <=").concat(fwConstants.kvValMaxStrSz, " characters."));
    }
    else if (String(key).length === 0 || String(val).length === 0) {
        throw new Error('Keys and values must be >0 characters.');
    }
    else if (!constants_1.ASCII_REGEX.test(key) || !constants_1.ASCII_REGEX.test(val)) {
        throw new Error('Unicode characters are not supported.');
    }
    return { key: key, val: val };
};
exports.validateKvRecord = validateKvRecord;
var isValidBlockExplorerResponse = function (data) {
    try {
        var result = JSON.parse(data.result);
        return !(0, isEmpty_1.default)(result);
    }
    catch (err) {
        return false;
    }
};
exports.isValidBlockExplorerResponse = isValidBlockExplorerResponse;
var isValid4ByteResponse = function (data) {
    try {
        return !(0, isEmpty_1.default)(data.results);
    }
    catch (err) {
        return false;
    }
};
exports.isValid4ByteResponse = isValid4ByteResponse;

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\shared\\validators.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\util.js", {".":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\index.js","./constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\constants.js","./protocol":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\protocol\\index.js","./shared/validators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\dist\\shared\\validators.js","@ethereumjs/tx":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ethereumjs\\tx\\dist\\index.js","aes-js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\aes-js\\index.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\bignumber.js\\bignumber.js","bn.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bn.js\\lib\\bn.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","crc-32":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\crc-32\\crc32.js","elliptic":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\elliptic\\lib\\elliptic.js","hash.js/lib/hash/sha":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\hash.js\\lib\\hash\\sha.js","js-sha3":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\js-sha3\\src\\sha3.js","lodash/inRange":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\inRange.js","lodash/isInteger":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\isInteger.js","rlp":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\rlp\\dist\\index.js","secp256k1":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\gridplus-sdk\\node_modules\\secp256k1\\elliptic.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cnode_modules%5Cgridplus-sdk%5Cdist%5Cutil.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXTERNAL = exports.getV = exports.generateAppSecret = exports.fetchCalldataDecoder = exports.fetchWithTimeout = exports.selectDefFrom4byteABI = exports.isUInt4 = exports.randomBytes = exports.existsIn = exports.isAsciiStr = exports.buildSignerPathBuf = exports.getP256KeyPairFromPub = exports.getP256KeyPair = exports.parseDER = exports.aes256_decrypt = exports.aes256_encrypt = exports.fixLen = exports.ensureHexBuffer = exports.splitFrames = exports.isValidAssetPath = exports.toPaddedDER = exports.checksum = exports.parseLattice1Response = void 0;
// Static utility functions
var tx_1 = require("@ethereumjs/tx");
var aes_js_1 = __importDefault(require("aes-js"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var bn_js_1 = require("bn.js");
var crc_32_1 = __importDefault(require("crc-32"));
var elliptic_1 = __importDefault(require("elliptic"));
var sha_1 = require("hash.js/lib/hash/sha");
var js_sha3_1 = require("js-sha3");
var inRange_1 = __importDefault(require("lodash/inRange"));
var isInteger_1 = __importDefault(require("lodash/isInteger"));
var rlp_1 = require("rlp");
var secp256k1_1 = require("secp256k1");
var _1 = require(".");
var constants_1 = require("./constants");
var protocol_1 = require("./protocol");
var validators_1 = require("./shared/validators");
var COINS = constants_1.BIP_CONSTANTS.COINS, PURPOSES = constants_1.BIP_CONSTANTS.PURPOSES;
var EC = elliptic_1.default.ec;
var ec;
//--------------------------------------------------
// LATTICE UTILS
//--------------------------------------------------
/** @internal Parse a response from the Lattice1 */
var parseLattice1Response = function (r) {
    var parsed = {
        errorMessage: null,
        data: null,
    };
    var b = Buffer.from(r, 'hex');
    var off = 0;
    // Get protocol version
    var protoVer = b.readUInt8(off);
    off++;
    if (protoVer !== constants_1.VERSION_BYTE) {
        parsed.errorMessage = 'Incorrect protocol version. Please update your SDK';
        return parsed;
    }
    // Get the type of response
    // Should always be 0x00
    var msgType = b.readUInt8(off);
    off++;
    if (msgType !== 0x00) {
        parsed.errorMessage = 'Incorrect response from Lattice1';
        return parsed;
    }
    // Get the payload
    b.readUInt32BE(off);
    off += 4; // First 4 bytes is the id, but we don't need that anymore
    var len = b.readUInt16BE(off);
    off += 2;
    var payload = b.slice(off, off + len);
    off += len;
    // Get response code
    var responseCode = payload.readUInt8(0);
    if (responseCode !== protocol_1.LatticeResponseCode.success) {
        var errMsg = protocol_1.ProtocolConstants.responseMsg[responseCode];
        parsed.errorMessage = "[Lattice] ".concat(errMsg ? errMsg : 'Unknown Error');
        parsed.responseCode = responseCode;
        return parsed;
    }
    else {
        parsed.data = payload.slice(1, payload.length);
    }
    // Verify checksum
    var cs = b.readUInt32BE(off);
    var expectedCs = (0, exports.checksum)(b.slice(0, b.length - 4));
    if (cs !== expectedCs) {
        parsed.errorMessage = 'Invalid checksum from device response';
        parsed.data = null;
        return parsed;
    }
    return parsed;
};
exports.parseLattice1Response = parseLattice1Response;
/** @internal */
var checksum = function (x) {
    // crc32 returns a signed integer - need to cast it to unsigned
    // Note that this uses the default 0xedb88320 polynomial
    return crc_32_1.default.buf(x) >>> 0; // Need this to be a uint, hence the bit shift
};
exports.checksum = checksum;
// Get a 74-byte padded DER-encoded signature buffer
// `sig` must be the signature output from elliptic.js
/** @internal */
var toPaddedDER = function (sig) {
    // We use 74 as the maximum length of a DER signature. All sigs must
    // be right-padded with zeros so that this can be a fixed size field
    var b = Buffer.alloc(74);
    var ds = Buffer.from(sig.toDER());
    ds.copy(b);
    return b;
};
exports.toPaddedDER = toPaddedDER;
//--------------------------------------------------
// TRANSACTION UTILS
//--------------------------------------------------
/** @internal */
var isValidAssetPath = function (path, fwConstants) {
    var allowedPurposes = [
        PURPOSES.ETH,
        PURPOSES.BTC_LEGACY,
        PURPOSES.BTC_WRAPPED_SEGWIT,
        PURPOSES.BTC_SEGWIT,
    ];
    var allowedCoins = [COINS.ETH, COINS.BTC, COINS.BTC_TESTNET];
    // These coin types were given to us by MyCrypto. They should be allowed, but we expect
    // an Ethereum-type address with these coin types.
    // These all use SLIP44: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    var allowedMyCryptoCoins = [
        60, 61, 966, 700, 9006, 9000, 1007, 553, 178, 137, 37310, 108, 40, 889,
        1987, 820, 6060, 1620, 1313114, 76, 246529, 246785, 1001, 227, 916, 464,
        2221, 344, 73799, 246,
    ];
    // Make sure firmware supports this Bitcoin path
    var isBitcoin = path[1] === COINS.BTC || path[1] === COINS.BTC_TESTNET;
    var isBitcoinNonWrappedSegwit = isBitcoin && path[0] !== PURPOSES.BTC_WRAPPED_SEGWIT;
    if (isBitcoinNonWrappedSegwit && !fwConstants.allowBtcLegacyAndSegwitAddrs)
        return false;
    // Make sure this path is otherwise valid
    return (allowedPurposes.indexOf(path[0]) >= 0 &&
        (allowedCoins.indexOf(path[1]) >= 0 ||
            allowedMyCryptoCoins.indexOf(path[1] - constants_1.HARDENED_OFFSET) > 0));
};
exports.isValidAssetPath = isValidAssetPath;
/** @internal */
var splitFrames = function (data, frameSz) {
    var frames = [];
    var n = Math.ceil(data.length / frameSz);
    var off = 0;
    for (var i = 0; i < n; i++) {
        frames.push(data.slice(off, off + frameSz));
        off += frameSz;
    }
    return frames;
};
exports.splitFrames = splitFrames;
/** @internal */
function isBase10NumStr(x) {
    var bn = new bignumber_js_1.default(x).toFixed().split('.').join('');
    var s = new String(x);
    // Note that the JS native `String()` loses precision for large numbers, but we only
    // want to validate the base of the number so we don't care about far out precision.
    return bn.slice(0, 8) === s.slice(0, 8);
}
/** @internal Ensure a param is represented by a buffer */
var ensureHexBuffer = function (x, zeroIsNull) {
    if (zeroIsNull === void 0) { zeroIsNull = true; }
    try {
        // For null values, return a 0-sized buffer. For most situations we assume
        // 0 should be represented with a zero-length buffer (e.g. for RLP-building
        // txs), but it can also be treated as a 1-byte buffer (`00`) if needed
        if (x === null || (x === 0 && zeroIsNull === true))
            return Buffer.alloc(0);
        var isNumber = typeof x === 'number' || isBase10NumStr(x);
        // Otherwise try to get this converted to a hex string
        if (isNumber) {
            // If this is a number or a base-10 number string, convert it to hex
            x = "".concat(new bignumber_js_1.default(x).toString(16));
        }
        else if (typeof x === 'string' && x.slice(0, 2) === '0x') {
            x = x.slice(2);
        }
        else {
            x = x.toString('hex');
        }
        if (x.length % 2 > 0)
            x = "0".concat(x);
        if (x === '00' && !isNumber)
            return Buffer.alloc(0);
        return Buffer.from(x, 'hex');
    }
    catch (err) {
        throw new Error("Cannot convert ".concat(x.toString(), " to hex buffer (").concat(err.toString(), ")"));
    }
};
exports.ensureHexBuffer = ensureHexBuffer;
/** @internal */
var fixLen = function (msg, length) {
    var buf = Buffer.alloc(length);
    if (msg.length < length) {
        msg.copy(buf, length - msg.length);
        return buf;
    }
    return msg.slice(-length);
};
exports.fixLen = fixLen;
//--------------------------------------------------
// CRYPTO UTILS
//--------------------------------------------------
/** @internal */
var aes256_encrypt = function (data, key) {
    var iv = Buffer.from(protocol_1.ProtocolConstants.aesIv);
    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
    var paddedData = data.length % 16 === 0 ? data : aes_js_1.default.padding.pkcs7.pad(data);
    return Buffer.from(aesCbc.encrypt(paddedData));
};
exports.aes256_encrypt = aes256_encrypt;
/** @internal */
var aes256_decrypt = function (data, key) {
    var iv = Buffer.from(protocol_1.ProtocolConstants.aesIv);
    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
    return Buffer.from(aesCbc.decrypt(data));
};
exports.aes256_decrypt = aes256_decrypt;
// Decode a DER signature. Returns signature object {r, s } or null if there is an error
/** @internal */
var parseDER = function (sigBuf) {
    if (sigBuf[0] !== 0x30 || sigBuf[2] !== 0x02)
        throw new Error('Failed to decode DER signature');
    var off = 3;
    var rLen = sigBuf[off];
    off++;
    var r = sigBuf.slice(off, off + rLen);
    off += rLen;
    if (sigBuf[off] !== 0x02)
        throw new Error('Failed to decode DER signature');
    off++;
    var sLen = sigBuf[off];
    off++;
    var s = sigBuf.slice(off, off + sLen);
    return { r: r, s: s };
};
exports.parseDER = parseDER;
/** @internal */
var getP256KeyPair = function (priv) {
    if (ec === undefined)
        ec = new EC('p256');
    return ec.keyFromPrivate(priv, 'hex');
};
exports.getP256KeyPair = getP256KeyPair;
/** @internal */
var getP256KeyPairFromPub = function (pub) {
    if (ec === undefined)
        ec = new EC('p256');
    return ec.keyFromPublic(pub, 'hex');
};
exports.getP256KeyPairFromPub = getP256KeyPairFromPub;
/** @internal */
var buildSignerPathBuf = function (signerPath, varAddrPathSzAllowed) {
    var buf = Buffer.alloc(24);
    var off = 0;
    if (varAddrPathSzAllowed && signerPath.length > 5)
        throw new Error('Signer path must be <=5 indices.');
    if (!varAddrPathSzAllowed && signerPath.length !== 5)
        throw new Error('Your Lattice firmware only supports 5-index derivation paths. Please upgrade.');
    buf.writeUInt32LE(signerPath.length, off);
    off += 4;
    for (var i = 0; i < 5; i++) {
        if (i < signerPath.length)
            buf.writeUInt32LE(signerPath[i], off);
        else
            buf.writeUInt32LE(0, off);
        off += 4;
    }
    return buf;
};
exports.buildSignerPathBuf = buildSignerPathBuf;
//--------------------------------------------------
// OTHER UTILS
//--------------------------------------------------
/** @internal */
var isAsciiStr = function (str, allowFormatChars) {
    if (allowFormatChars === void 0) { allowFormatChars = false; }
    if (typeof str !== 'string') {
        return false;
    }
    var extraChars = allowFormatChars ?
        [
            0x0020,
            0x000a, // New line
        ] : [];
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (extraChars.indexOf(c) < 0 && (c < 0x0020 || c > 0x007f)) {
            return false;
        }
    }
    return true;
};
exports.isAsciiStr = isAsciiStr;
/** @internal Check if a value exists in an object. Only checks first level of keys. */
var existsIn = function (val, obj) {
    return Object.keys(obj).some(function (key) { return obj[key] === val; });
};
exports.existsIn = existsIn;
/** @internal Create a buffer of size `n` and fill it with random data */
var randomBytes = function (n) {
    var buf = Buffer.alloc(n);
    for (var i = 0; i < n; i++) {
        buf[i] = Math.round(Math.random() * 255);
    }
    return buf;
};
exports.randomBytes = randomBytes;
/** @internal `isUInt4` accepts a number and returns true if it is a UInt4 */
var isUInt4 = function (n) { return (0, isInteger_1.default)(n) && (0, inRange_1.default)(n, 0, 16); };
exports.isUInt4 = isUInt4;
/**
 * Fetches an external JSON file containing networks indexed by chain id from a GridPlus repo, and
 * returns the parsed JSON.
 */
function fetchExternalNetworkForChainId(chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var body, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fetch(constants_1.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL)
                            .then(function (res) { return res.json(); })];
                case 1:
                    body = _a.sent();
                    if (body) {
                        return [2 /*return*/, body[chainId]];
                    }
                    else {
                        return [2 /*return*/, undefined];
                    }
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    console.warn('Fetching external networks failed.\n', err_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
/**
 * Builds a URL for fetching calldata from block explorers for any supported chains
 * */
function buildUrlForSupportedChainAndAddress(_a) {
    var supportedChain = _a.supportedChain, address = _a.address;
    var baseUrl = supportedChain.baseUrl;
    var apiRoute = supportedChain.apiRoute;
    var urlWithRoute = "".concat(baseUrl, "/").concat(apiRoute, "&address=").concat(address);
    var apiKey = null;
    var apiKeyParam = apiKey ? "&apiKey=".concat(null) : '';
    return urlWithRoute + apiKeyParam;
}
/**
 * Takes a list of ABI data objects and a selector, and returns the earliest ABI data object that
 * matches the selector.
 */
function selectDefFrom4byteABI(abiData, selector) {
    if (abiData.length > 1) {
        console.warn('WARNING: There are multiple results. Using the first one.');
    }
    var def;
    abiData
        .sort(function (a, b) {
        var aTime = new Date(a.created_at).getTime();
        var bTime = new Date(b.created_at).getTime();
        return aTime - bTime;
    })
        .find(function (result) {
        try {
            def = _1.Calldata.EVM.parsers.parseCanonicalName(selector, result.text_signature);
            return !!def;
        }
        catch (err) {
            return false;
        }
    });
    if (def) {
        return def;
    }
    else {
        throw new Error('Could not find definition for selector');
    }
}
exports.selectDefFrom4byteABI = selectDefFrom4byteABI;
function fetchWithTimeout(url, options) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, timeout, controller, timeoutId, response;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = options.timeout, timeout = _a === void 0 ? 8000 : _a;
                    controller = new AbortController();
                    timeoutId = setTimeout(function () { return controller.abort(); }, timeout);
                    return [4 /*yield*/, fetch(url, __assign(__assign({}, options), { signal: controller.signal }))];
                case 1:
                    response = _b.sent();
                    clearTimeout(timeoutId);
                    return [2 /*return*/, response];
            }
        });
    });
}
exports.fetchWithTimeout = fetchWithTimeout;
function fetchAndCache(url, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var cache, request, match, response, responseClone, data, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 11, , 12]);
                    if (!(globalThis.caches && globalThis.Request)) return [3 /*break*/, 9];
                    return [4 /*yield*/, caches.open('gp-calldata')];
                case 1:
                    cache = _a.sent();
                    request = new Request(url, opts);
                    return [4 /*yield*/, cache.match(request)];
                case 2:
                    match = _a.sent();
                    if (!match) return [3 /*break*/, 3];
                    return [2 /*return*/, match];
                case 3: return [4 /*yield*/, fetch(request, opts)];
                case 4:
                    response = _a.sent();
                    responseClone = response.clone();
                    return [4 /*yield*/, response.json()];
                case 5:
                    data = _a.sent();
                    if (!(response.ok &&
                        ((0, validators_1.isValidBlockExplorerResponse)(data) || (0, validators_1.isValid4ByteResponse)(data)))) return [3 /*break*/, 7];
                    return [4 /*yield*/, cache.put(request, responseClone)];
                case 6:
                    _a.sent();
                    return [2 /*return*/, cache.match(request, opts)];
                case 7: return [2 /*return*/, response];
                case 8: return [3 /*break*/, 10];
                case 9: return [2 /*return*/, fetch(url, opts)];
                case 10: return [3 /*break*/, 12];
                case 11:
                    err_2 = _a.sent();
                    console.error(err_2);
                    throw err_2;
                case 12: return [2 /*return*/];
            }
        });
    });
}
function fetchSupportedChainData(address, supportedChain) {
    return __awaiter(this, void 0, void 0, function () {
        var url;
        return __generator(this, function (_a) {
            url = buildUrlForSupportedChainAndAddress({ address: address, supportedChain: supportedChain });
            return [2 /*return*/, fetchAndCache(url)
                    .then(function (res) { return res.json(); })
                    .then(function (body) {
                    if (body && body.result) {
                        return JSON.parse(body.result);
                    }
                    else {
                        throw new Error('Server response was malformed');
                    }
                })
                    .catch(function () {
                    throw new Error('Fetching data from external network failed');
                })];
        });
    });
}
function fetch4byteData(selector) {
    return __awaiter(this, void 0, void 0, function () {
        var url;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = "https://www.4byte.directory/api/v1/signatures/?hex_signature=0x".concat(selector);
                    return [4 /*yield*/, fetch(url)
                            .then(function (res) { return res.json(); })
                            .then(function (body) {
                            if (body && body.results) {
                                return body.results;
                            }
                            else {
                                throw new Error('No results found');
                            }
                        })
                            .catch(function (err) {
                            throw new Error("Fetching data from 4byte failed: ".concat(err.message));
                        })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function encodeDef(def) {
    return Buffer.from((0, rlp_1.encode)(def));
}
/**
 * Post-process fetched ABI definition.
 * @param def - Calldata decoder data definition for calling function
 * @param calldata - Raw transaction calldata
 * @return - Updated `def`
 */
function postProcessDef(def, calldata) {
    var e_1, _a, e_2, _b;
    return __awaiter(this, void 0, void 0, function () {
        var nestedCalldata, nestedDefs, _c, _e, i, _f, _g, j, _h, _j, e_2_1, _k, _l, e_1_1, newDef;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    nestedCalldata = _1.Calldata.EVM.processors.getNestedCalldata(def, calldata);
                    return [4 /*yield*/, replaceNestedDefs(nestedCalldata)];
                case 1:
                    nestedDefs = _m.sent();
                    _m.label = 2;
                case 2:
                    _m.trys.push([2, 22, 23, 28]);
                    _c = __asyncValues(nestedDefs.entries());
                    _m.label = 3;
                case 3: return [4 /*yield*/, _c.next()];
                case 4:
                    if (!(_e = _m.sent(), !_e.done)) return [3 /*break*/, 21];
                    i = _e.value[0];
                    if (!(Array.isArray(nestedDefs[i]) && typeof nestedDefs[i][0] !== 'string')) return [3 /*break*/, 18];
                    _m.label = 5;
                case 5:
                    _m.trys.push([5, 11, 12, 17]);
                    _f = (e_2 = void 0, __asyncValues(nestedDefs[i].entries()));
                    _m.label = 6;
                case 6: return [4 /*yield*/, _f.next()];
                case 7:
                    if (!(_g = _m.sent(), !_g.done)) return [3 /*break*/, 10];
                    j = _g.value[0];
                    if (!(nestedDefs[i][j] !== null)) return [3 /*break*/, 9];
                    _h = nestedDefs[i];
                    _j = j;
                    return [4 /*yield*/, postProcessDef(nestedDefs[i][j], Buffer.from(nestedCalldata[i][j].slice(2), 'hex'))];
                case 8:
                    _h[_j] = _m.sent();
                    _m.label = 9;
                case 9: return [3 /*break*/, 6];
                case 10: return [3 /*break*/, 17];
                case 11:
                    e_2_1 = _m.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 17];
                case 12:
                    _m.trys.push([12, , 15, 16]);
                    if (!(_g && !_g.done && (_b = _f.return))) return [3 /*break*/, 14];
                    return [4 /*yield*/, _b.call(_f)];
                case 13:
                    _m.sent();
                    _m.label = 14;
                case 14: return [3 /*break*/, 16];
                case 15:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 16: return [7 /*endfinally*/];
                case 17: return [3 /*break*/, 20];
                case 18:
                    if (!(nestedDefs[i] !== null)) return [3 /*break*/, 20];
                    _k = nestedDefs;
                    _l = i;
                    return [4 /*yield*/, postProcessDef(nestedDefs[i], Buffer.from(nestedCalldata[i].slice(2), 'hex'))];
                case 19:
                    _k[_l] = _m.sent();
                    _m.label = 20;
                case 20: return [3 /*break*/, 3];
                case 21: return [3 /*break*/, 28];
                case 22:
                    e_1_1 = _m.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 28];
                case 23:
                    _m.trys.push([23, , 26, 27]);
                    if (!(_e && !_e.done && (_a = _c.return))) return [3 /*break*/, 25];
                    return [4 /*yield*/, _a.call(_c)];
                case 24:
                    _m.sent();
                    _m.label = 25;
                case 25: return [3 /*break*/, 27];
                case 26:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 27: return [7 /*endfinally*/];
                case 28:
                    newDef = _1.Calldata.EVM.processors.replaceNestedDefs(def, nestedDefs);
                    return [2 /*return*/, newDef];
            }
        });
    });
}
/**
 * Given a set of possible nested defs, slice out selectors and look up
 * definitions on 4byte.
 * @param possNestedDefs - result of `getPossibleNestedDefs` processor
 * @return Array containing calldata decoding data for each parameter
 *          that had a possible nested def. If there was no possible
 *          nested def or if a def could not be fetched from 4byte, the
 *          array item will be `null`. In the case of multiple possible
 *          defs behind one param (e.g. multicall pattern), ALL nested
 *          items must have defs associated or the item will map to a
 *          single `null` value in the return array.
 *
 */
function replaceNestedDefs(possNestedDefs) {
    var possNestedDefs_1, possNestedDefs_1_1;
    var e_3, _a, e_4, _b;
    return __awaiter(this, void 0, void 0, function () {
        var nestedDefs, d, _nestedDefs, shouldInclude, d_1, d_1_1, _d, _nestedSelector, _nestedAbi, _nestedDef, err_3, e_4_1, nestedSelector, nestedAbi, nestedDef, err_4, e_3_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    nestedDefs = [];
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 26, 27, 32]);
                    possNestedDefs_1 = __asyncValues(possNestedDefs);
                    _c.label = 2;
                case 2: return [4 /*yield*/, possNestedDefs_1.next()];
                case 3:
                    if (!(possNestedDefs_1_1 = _c.sent(), !possNestedDefs_1_1.done)) return [3 /*break*/, 25];
                    d = possNestedDefs_1_1.value;
                    if (!(d !== null)) return [3 /*break*/, 23];
                    if (!Array.isArray(d)) return [3 /*break*/, 19];
                    _nestedDefs = [];
                    shouldInclude = true;
                    _c.label = 4;
                case 4:
                    _c.trys.push([4, 12, 13, 18]);
                    d_1 = (e_4 = void 0, __asyncValues(d));
                    _c.label = 5;
                case 5: return [4 /*yield*/, d_1.next()];
                case 6:
                    if (!(d_1_1 = _c.sent(), !d_1_1.done)) return [3 /*break*/, 11];
                    _d = d_1_1.value;
                    _c.label = 7;
                case 7:
                    _c.trys.push([7, 9, , 10]);
                    _nestedSelector = _d.slice(2, 10);
                    return [4 /*yield*/, fetch4byteData(_nestedSelector)];
                case 8:
                    _nestedAbi = _c.sent();
                    _nestedDef = selectDefFrom4byteABI(_nestedAbi, _nestedSelector);
                    _nestedDefs.push(_nestedDef);
                    return [3 /*break*/, 10];
                case 9:
                    err_3 = _c.sent();
                    shouldInclude = false;
                    _nestedDefs.push(null);
                    return [3 /*break*/, 10];
                case 10: return [3 /*break*/, 5];
                case 11: return [3 /*break*/, 18];
                case 12:
                    e_4_1 = _c.sent();
                    e_4 = { error: e_4_1 };
                    return [3 /*break*/, 18];
                case 13:
                    _c.trys.push([13, , 16, 17]);
                    if (!(d_1_1 && !d_1_1.done && (_b = d_1.return))) return [3 /*break*/, 15];
                    return [4 /*yield*/, _b.call(d_1)];
                case 14:
                    _c.sent();
                    _c.label = 15;
                case 15: return [3 /*break*/, 17];
                case 16:
                    if (e_4) throw e_4.error;
                    return [7 /*endfinally*/];
                case 17: return [7 /*endfinally*/];
                case 18:
                    if (shouldInclude) {
                        nestedDefs.push(_nestedDefs);
                    }
                    else {
                        nestedDefs.push(null);
                    }
                    return [3 /*break*/, 22];
                case 19:
                    _c.trys.push([19, 21, , 22]);
                    nestedSelector = d.slice(2, 10);
                    return [4 /*yield*/, fetch4byteData(nestedSelector)];
                case 20:
                    nestedAbi = _c.sent();
                    nestedDef = selectDefFrom4byteABI(nestedAbi, nestedSelector);
                    nestedDefs.push(nestedDef);
                    return [3 /*break*/, 22];
                case 21:
                    err_4 = _c.sent();
                    nestedDefs.push(null);
                    return [3 /*break*/, 22];
                case 22: return [3 /*break*/, 24];
                case 23:
                    nestedDefs.push(null);
                    _c.label = 24;
                case 24: return [3 /*break*/, 2];
                case 25: return [3 /*break*/, 32];
                case 26:
                    e_3_1 = _c.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 32];
                case 27:
                    _c.trys.push([27, , 30, 31]);
                    if (!(possNestedDefs_1_1 && !possNestedDefs_1_1.done && (_a = possNestedDefs_1.return))) return [3 /*break*/, 29];
                    return [4 /*yield*/, _a.call(possNestedDefs_1)];
                case 28:
                    _c.sent();
                    _c.label = 29;
                case 29: return [3 /*break*/, 31];
                case 30:
                    if (e_3) throw e_3.error;
                    return [7 /*endfinally*/];
                case 31: return [7 /*endfinally*/];
                case 32: 
                // For all nested defs, replace the 
                return [2 /*return*/, nestedDefs];
            }
        });
    });
}
//--------------------------------------------------
//--------------------------------------------------
// EXTERNAL UTILS
//--------------------------------------------------
//--------------------------------------------------
/**
 *  Fetches calldata from a remote scanner based on the transaction's `chainId`
 */
function fetchCalldataDecoder(_data, to, _chainId, recurse) {
    if (recurse === void 0) { recurse = true; }
    return __awaiter(this, void 0, void 0, function () {
        var isHexString, data, selector, chainId, cachedNetwork, supportedChain, _a, abi_1, parsedAbi, def_1, err_5, abi, def, err_6;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 15, , 16]);
                    // Exit if there is no data. The 2 comes from the 0x prefix, but a later
                    // check will confirm that there are at least 4 bytes of data in the buffer.
                    if (!_data || _data.length < 2) {
                        throw new Error('Data is either undefined or less than two bytes');
                    }
                    isHexString = typeof _data === 'string' && _data.slice(0, 2) === '0x';
                    data = isHexString ?
                        Buffer.from(_data.slice(2), 'hex') :
                        //@ts-expect-error - Buffer doesn't recognize Uint8Array type properly
                        Buffer.from(_data, 'hex');
                    if (data.length < 4) {
                        throw new Error('Data must contain at least 4 bytes of data to define the selector');
                    }
                    selector = Buffer.from(data.slice(0, 4)).toString('hex');
                    chainId = Number(_chainId);
                    cachedNetwork = constants_1.NETWORKS_BY_CHAIN_ID[chainId];
                    if (!cachedNetwork) return [3 /*break*/, 1];
                    _a = cachedNetwork;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, fetchExternalNetworkForChainId(chainId)];
                case 2:
                    _a = _b.sent();
                    _b.label = 3;
                case 3:
                    supportedChain = _a;
                    _b.label = 4;
                case 4:
                    _b.trys.push([4, 10, , 11]);
                    if (!supportedChain) return [3 /*break*/, 8];
                    return [4 /*yield*/, fetchSupportedChainData(to, supportedChain)];
                case 5:
                    abi_1 = _b.sent();
                    parsedAbi = _1.Calldata.EVM.parsers.parseSolidityJSONABI(selector, abi_1);
                    def_1 = parsedAbi.def;
                    if (!recurse) return [3 /*break*/, 7];
                    return [4 /*yield*/, postProcessDef(def_1, data)];
                case 6:
                    def_1 = _b.sent();
                    _b.label = 7;
                case 7: return [2 /*return*/, { abi: abi_1, def: encodeDef(def_1) }];
                case 8: throw new Error("Chain (id: ".concat(chainId, ") is not supported"));
                case 9: return [3 /*break*/, 11];
                case 10:
                    err_5 = _b.sent();
                    console.warn(err_5.message, '\n', 'Falling back to 4byte');
                    return [3 /*break*/, 11];
                case 11: return [4 /*yield*/, fetch4byteData(selector)];
                case 12:
                    abi = _b.sent();
                    def = selectDefFrom4byteABI(abi, selector);
                    if (!recurse) return [3 /*break*/, 14];
                    return [4 /*yield*/, postProcessDef(def, data)];
                case 13:
                    def = _b.sent();
                    _b.label = 14;
                case 14: return [2 /*return*/, { abi: abi, def: encodeDef(def) }];
                case 15:
                    err_6 = _b.sent();
                    console.warn("Fetching calldata failed: ".concat(err_6.message));
                    return [3 /*break*/, 16];
                case 16: return [2 /*return*/, { def: null, abi: null }];
            }
        });
    });
}
exports.fetchCalldataDecoder = fetchCalldataDecoder;
/**
 * Generates an application secret for use in maintaining connection to device.
 * @param deviceId - The device ID of the device you want to generate a token for.
 * @param password - The password entered when connecting to the device.
 * @param appName - The name of the application.
 * @returns an application secret as a Buffer
 * @public
 */
var generateAppSecret = function (deviceId, password, appName) {
    var deviceIdBuffer = typeof deviceId === 'string' ? Buffer.from(deviceId) : deviceId;
    var passwordBuffer = typeof password === 'string' ? Buffer.from(password) : password;
    var appNameBuffer = typeof appName === 'string' ? Buffer.from(appName) : appName;
    var preImage = Buffer.concat([
        deviceIdBuffer,
        passwordBuffer,
        appNameBuffer,
    ]);
    return Buffer.from((0, sha_1.sha256)().update(preImage).digest('hex'), 'hex');
};
exports.generateAppSecret = generateAppSecret;
/**
 * Generic signing does not return a `v` value like legacy ETH signing requests did.
 * Get the `v` component of the signature as well as an `initV`
 * parameter, which is what you need to use to re-create an `@ethereumjs/tx`
 * object. There is a lot of tech debt in `@ethereumjs/tx` which also
 * inherits the tech debt of ethereumjs-util.
 * 1.  The legacy `Transaction` type can call `_processSignature` with the regular
 *     `v` value.
 * 2.  Newer transaction types such as `FeeMarketEIP1559Transaction` will subtract
 *     27 from the `v` that gets passed in, so we need to add `27` to create `initV`
 * @param tx - An @ethereumjs/tx Transaction object or Buffer (serialized tx)
 * @param resp - response from Lattice. Can be either legacy or generic signing variety
 * @returns bn.js BN object containing the `v` param
 */
var getV = function (tx, resp) {
    var chainId, hash, type;
    var txIsBuf = Buffer.isBuffer(tx);
    if (txIsBuf) {
        hash = Buffer.from((0, js_sha3_1.keccak256)(tx), 'hex');
        try {
            var legacyTxArray = (0, rlp_1.decode)(tx);
            if (legacyTxArray.length === 6) {
                // Six item array means this is a pre-EIP155 transaction
                chainId = null;
            }
            else {
                // Otherwise the `v` param is the `chainId`
                chainId = new bn_js_1.BN(legacyTxArray[6]);
            }
            // Legacy tx = type 0
            type = 0;
        }
        catch (err) {
            // This is likely a typed transaction
            try {
                var txObj = tx_1.TransactionFactory.fromSerializedData(tx);
                //@ts-expect-error -- Accessing private property
                type = txObj._type;
            }
            catch (err) {
                // If we can't RLP decode and can't hydrate an @ethereumjs/tx object,
                // we don't know what this is and should abort.
                throw new Error('Could not recover V. Bad transaction data.');
            }
        }
    }
    else {
        // @ethereumjs/tx object passed in
        type = tx._type;
        hash = type ?
            tx.getMessageToSign(true) : // newer tx types
            (0, rlp_1.encode)(tx.getMessageToSign(false)); // legacy tx
        if (tx.supports(tx_1.Capability.EIP155ReplayProtection)) {
            chainId = tx.common.chainIdBN().toNumber();
        }
    }
    var rs = new Uint8Array(Buffer.concat([resp.sig.r, resp.sig.s]));
    var pubkey = new Uint8Array(resp.pubkey);
    var recovery0 = (0, secp256k1_1.ecdsaRecover)(rs, 0, hash, false);
    var recovery1 = (0, secp256k1_1.ecdsaRecover)(rs, 1, hash, false);
    var pubkeyStr = Buffer.from(pubkey).toString('hex');
    var recovery0Str = Buffer.from(recovery0).toString('hex');
    var recovery1Str = Buffer.from(recovery1).toString('hex');
    var recovery;
    if (pubkeyStr === recovery0Str) {
        recovery = 0;
    }
    else if (pubkeyStr === recovery1Str) {
        recovery = 1;
    }
    else {
        // If we fail a second time, exit here.
        throw new Error('Failed to recover V parameter. Bad signature or transaction data.');
    }
    // Newer transaction types just use the [0, 1] value
    if (type) {
        return new bn_js_1.BN(recovery);
    }
    // If there is no chain ID, this is a pre-EIP155 tx
    if (!chainId) {
        return new bn_js_1.BN(recovery).addn(27);
    }
    // EIP155 replay protection is included in the `v` param
    // and uses the chainId value.
    return chainId.muln(2).addn(35).addn(recovery);
};
exports.getV = getV;
/** @internal */
exports.EXTERNAL = {
    fetchCalldataDecoder: fetchCalldataDecoder,
    generateAppSecret: exports.generateAppSecret,
    getV: exports.getV,
};

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"eth-lattice-keyring>gridplus-sdk",file:"node_modules\\gridplus-sdk\\dist\\util.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
