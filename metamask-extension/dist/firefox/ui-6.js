LavaPack.loadBundle([
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container.component.js", {".":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\index.js","../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../../shared/lib/token-util.ts":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\token-util.ts","../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/error-keys":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\error-keys.js","../../../hooks/experiences/useRamps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\experiences\\useRamps.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/actionable-message/actionable-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/error-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\error-message\\index.js","../../ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../ui/sender-to-recipient":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\index.js","../advanced-gas-fee-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\advanced-gas-fee-popover\\index.js","../edit-gas-fee-popover/edit-gas-fee-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js","../edit-gas-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\index.js","../network-account-balance-header/network-account-balance-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js","../set-approval-for-all-warning":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\set-approval-for-all-warning\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconfirm-page-container%5Cconfirm-page-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _gas = require("../../../../shared/constants/gas");
var _gasFee = require("../../../contexts/gasFee");
var _transaction = require("../../../../shared/constants/transaction");
var _network = require("../../../../shared/constants/network");
var _pageContainer = require("../../ui/page-container");
var _button = _interopRequireDefault(require("../../ui/button"));
var _actionableMessage = _interopRequireDefault(require("../../ui/actionable-message/actionable-message"));
var _senderToRecipient = _interopRequireDefault(require("../../ui/sender-to-recipient"));
var _advancedGasFeePopover = _interopRequireDefault(require("../advanced-gas-fee-popover"));
var _editGasFeePopover = _interopRequireDefault(require("../edit-gas-fee-popover/edit-gas-fee-popover"));
var _editGasPopover = _interopRequireDefault(require("../edit-gas-popover"));
var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));
var _errorKeys = require("../../../helpers/constants/error-keys");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _networkAccountBalanceHeader = _interopRequireDefault(require("../network-account-balance-header/network-account-balance-header"));
var _tokenUtil = require("../../../../shared/lib/token-util.ts");
var _setApprovalForAllWarning = _interopRequireDefault(require("../set-approval-for-all-warning"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _useRamps = _interopRequireDefault(require("../../../hooks/experiences/useRamps"));
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _ = require(".");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)

///: END:ONLY_INCLUDE_IN

const ConfirmPageContainer = props => {
  const {
    showEdit,
    onEdit,
    fromName,
    fromAddress,
    toEns,
    toNickname,
    toAddress,
    disabled,
    errorKey,
    errorMessage,
    contentComponent,
    action,
    title,
    image,
    titleComponent,
    subtitleComponent,
    detailsComponent,
    dataComponent,
    dataHexComponent,
    onCancelAll,
    onCancel,
    onSubmit,
    onSetApprovalForAll,
    showWarningModal,
    tokenAddress,
    nonce,
    unapprovedTxCount,
    warning,
    hideSenderToRecipient,
    showAccountInHeader,
    origin,
    ethGasPriceWarning,
    editingGas,
    handleCloseEditGas,
    currentTransaction,
    supportsEIP1559,
    nativeCurrency,
    txData,
    assetStandard,
    isApprovalOrRejection
  } = props;
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const [collectionBalance, setCollectionBalance] = (0, _react.useState)(0);
  const isBuyableChain = (0, _reactRedux.useSelector)(_selectors.getIsBuyableChain);
  const contact = (0, _reactRedux.useSelector)(state => (0, _selectors.getAddressBookEntry)(state, toAddress));
  const networkIdentifier = (0, _reactRedux.useSelector)(_selectors.getNetworkIdentifier);
  const defaultToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken);
  const accountBalance = defaultToken.string;
  const identities = (0, _reactRedux.useSelector)(_selectors.getMetaMaskIdentities);
  const ownedAccountName = (0, _selectors.getAccountName)(identities, toAddress);
  const toName = ownedAccountName || (contact === null || contact === void 0 ? void 0 : contact.name);
  const recipientIsOwnedAccount = Boolean(ownedAccountName);
  const toMetadataName = (0, _reactRedux.useSelector)(state => (0, _selectors.getMetadataContractName)(state, toAddress));
  const metaMetricsId = (0, _reactRedux.useSelector)(_selectors.getMetaMetricsId);

  // TODO: Move useRamps hook to the confirm-transaction-base parent component.
  // TODO: openBuyCryptoInPdapp should be passed to this component as a custom prop.
  // We try to keep this component for layout purpose only, we need to move this hook to the confirm-transaction-base parent
  // component once it is converted to a functional component
  const {
    openBuyCryptoInPdapp
  } = (0, _useRamps.default)();
  const isSetApproveForAll = currentTransaction.type === _transaction.TransactionType.tokenMethodSetApprovalForAll;
  const shouldDisplayWarning = contentComponent && disabled && (errorKey || errorMessage);
  const networkName = _network.NETWORK_TO_NAME_MAP[currentTransaction.chainId] || networkIdentifier;
  const fetchCollectionBalance = (0, _react.useCallback)(async () => {
    var _tokenBalance$balance, _tokenBalance$balance2;
    const tokenBalance = await (0, _tokenUtil.fetchTokenBalance)(tokenAddress, fromAddress, global.ethereumProvider);
    setCollectionBalance((tokenBalance === null || tokenBalance === void 0 ? void 0 : (_tokenBalance$balance = tokenBalance.balance) === null || _tokenBalance$balance === void 0 ? void 0 : (_tokenBalance$balance2 = _tokenBalance$balance.words) === null || _tokenBalance$balance2 === void 0 ? void 0 : _tokenBalance$balance2[0]) || 0);
  }, [fromAddress, tokenAddress]);
  (0, _react.useEffect)(() => {
    if (isSetApproveForAll && assetStandard === _transaction.TokenStandard.ERC721) {
      fetchCollectionBalance();
    }
  }, [currentTransaction, assetStandard, isSetApproveForAll, fetchCollectionBalance, collectionBalance]);
  return /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
    transaction: currentTransaction
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container",
    "data-testid": "page-container"
  }, /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerNavigation, null), assetStandard === _transaction.TokenStandard.ERC20 || assetStandard === _transaction.TokenStandard.ERC721 || assetStandard === _transaction.TokenStandard.ERC1155 ? /*#__PURE__*/_react.default.createElement(_networkAccountBalanceHeader.default, {
    accountName: fromName,
    accountBalance: accountBalance,
    tokenName: nativeCurrency,
    accountAddress: fromAddress,
    networkName: networkName,
    chainId: currentTransaction.chainId
  }) : /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerHeader, {
    showEdit: showEdit,
    onEdit: () => onEdit(),
    showAccountInHeader: showAccountInHeader,
    accountAddress: fromAddress
  }, hideSenderToRecipient ? null : /*#__PURE__*/_react.default.createElement(_senderToRecipient.default, {
    senderName: fromName,
    senderAddress: fromAddress,
    recipientName: toName,
    recipientMetadataName: toMetadataName,
    recipientAddress: toAddress,
    recipientEns: toEns,
    recipientNickname: toNickname,
    recipientIsOwnedAccount: recipientIsOwnedAccount
  })), contentComponent || /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerContent, {
    metaMetricsId: metaMetricsId,
    action: action,
    title: title,
    image: image,
    titleComponent: titleComponent,
    subtitleComponent: subtitleComponent,
    detailsComponent: detailsComponent,
    dataComponent: dataComponent,
    dataHexComponent: dataHexComponent,
    errorMessage: errorMessage,
    errorKey: errorKey,
    tokenAddress: tokenAddress,
    nonce: nonce,
    warning: warning,
    onCancelAll: onCancelAll,
    onCancel: onCancel,
    cancelText: t('reject'),
    onSubmit: onSubmit,
    submitText: t('confirm'),
    disabled: disabled,
    unapprovedTxCount: unapprovedTxCount,
    rejectNText: t('rejectTxsN', [unapprovedTxCount]),
    origin: origin,
    ethGasPriceWarning: ethGasPriceWarning,
    supportsEIP1559: supportsEIP1559,
    currentTransaction: currentTransaction,
    nativeCurrency: nativeCurrency,
    networkName: networkName,
    toAddress: toAddress,
    transactionType: currentTransaction.type,
    isBuyableChain: isBuyableChain,
    txData: txData
  }), shouldDisplayWarning && errorKey === _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY && /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-approve-content__warning"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: isBuyableChain ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      textAlign: _designSystem.TextAlign.Left,
      as: "h6"
    }, t('insufficientCurrencyBuyOrDeposit', [nativeCurrency, networkName,
    /*#__PURE__*/
    ///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)
    _react.default.createElement(_button.default, {
      type: "inline",
      className: "confirm-page-container-content__link",
      onClick: () => {
        openBuyCryptoInPdapp();
        trackEvent({
          event: _metametrics2.MetaMetricsEventName.NavBuyButtonClicked,
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          properties: {
            location: 'Transaction Confirmation',
            text: 'Buy'
          }
        });
      },
      key: `${nativeCurrency}-buy-button`
    }, t('buyAsset', [nativeCurrency]))
    ///: END:ONLY_INCLUDE_IN
    ])) : /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      textAlign: _designSystem.TextAlign.Left,
      as: "h6"
    }, t('insufficientCurrencyDeposit', [nativeCurrency, networkName])),
    useIcon: true,
    iconFillColor: "var(--color-error-default)",
    type: "danger"
  })), shouldDisplayWarning && errorKey !== _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY && /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-approve-content__warning"
  }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: errorKey
  })), showWarningModal && /*#__PURE__*/_react.default.createElement(_setApprovalForAllWarning.default, {
    collectionName: title,
    senderAddress: fromAddress,
    name: fromName,
    isERC721: assetStandard === _transaction.TokenStandard.ERC20,
    total: collectionBalance,
    onSubmit: onSubmit,
    onCancel: onCancel
  }), contentComponent && /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    onCancel: onCancel,
    cancelText: t('reject'),
    onSubmit: isSetApproveForAll && isApprovalOrRejection ? onSetApprovalForAll : onSubmit,
    submitText: t('confirm'),
    submitButtonType: isSetApproveForAll && isApprovalOrRejection ? 'danger-primary' : 'primary',
    disabled: disabled
  }, unapprovedTxCount > 1 && /*#__PURE__*/_react.default.createElement("a", {
    onClick: onCancelAll
  }, t('rejectTxsN', [unapprovedTxCount]))), editingGas && !supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
    mode: _gas.EditGasModes.modifyInPlace,
    onClose: handleCloseEditGas,
    transaction: currentTransaction
  }), supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))));
};
ConfirmPageContainer.propTypes = {
  // Header
  action: _propTypes.default.string,
  onEdit: _propTypes.default.func,
  showEdit: _propTypes.default.bool,
  subtitleComponent: _propTypes.default.node,
  title: _propTypes.default.string,
  image: _propTypes.default.string,
  titleComponent: _propTypes.default.node,
  hideSenderToRecipient: _propTypes.default.bool,
  showAccountInHeader: _propTypes.default.bool,
  assetStandard: _propTypes.default.string,
  // Sender to Recipient
  fromAddress: _propTypes.default.string,
  fromName: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  toEns: _propTypes.default.string,
  toNickname: _propTypes.default.string,
  // Content
  contentComponent: _propTypes.default.node,
  errorKey: _propTypes.default.string,
  errorMessage: _propTypes.default.string,
  dataComponent: _propTypes.default.node,
  dataHexComponent: _propTypes.default.node,
  detailsComponent: _propTypes.default.node,
  txData: _propTypes.default.object,
  tokenAddress: _propTypes.default.string,
  nonce: _propTypes.default.string,
  warning: _propTypes.default.string,
  unapprovedTxCount: _propTypes.default.number,
  origin: _propTypes.default.string.isRequired,
  ethGasPriceWarning: _propTypes.default.string,
  // Footer
  onCancelAll: _propTypes.default.func,
  onCancel: _propTypes.default.func,
  onSubmit: _propTypes.default.func,
  onSetApprovalForAll: _propTypes.default.func,
  showWarningModal: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  editingGas: _propTypes.default.bool,
  handleCloseEditGas: _propTypes.default.func,
  // Gas Popover
  currentTransaction: _propTypes.default.object.isRequired,
  supportsEIP1559: _propTypes.default.bool,
  nativeCurrency: _propTypes.default.string,
  isApprovalOrRejection: _propTypes.default.bool
};
var _default = ConfirmPageContainer;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\confirm-page-container\\confirm-page-container.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\index.js", {"./confirm-detail-row":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-detail-row\\index.js","./confirm-page-container-content":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container-content\\index.js","./confirm-page-container-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container-header\\index.js","./confirm-page-container-navigation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container-navigation\\index.js","./confirm-page-container.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconfirm-page-container%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ConfirmDetailRow", {
  enumerable: true,
  get: function () {
    return _confirmDetailRow.default;
  }
});
Object.defineProperty(exports, "ConfirmPageContainerContent", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerContent.default;
  }
});
Object.defineProperty(exports, "ConfirmPageContainerHeader", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerHeader.default;
  }
});
Object.defineProperty(exports, "ConfirmPageContainerNavigation", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerNavigation.default;
  }
});
Object.defineProperty(exports, "ConfirmPageContainerSummary", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerContent.ConfirmPageContainerSummary;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmPageContainer.default;
  }
});
var _confirmPageContainer = _interopRequireDefault(require("./confirm-page-container.component"));
var _confirmPageContainerHeader = _interopRequireDefault(require("./confirm-page-container-header"));
var _confirmDetailRow = _interopRequireDefault(require("./confirm-detail-row"));
var _confirmPageContainerNavigation = _interopRequireDefault(require("./confirm-page-container-navigation"));
var _confirmPageContainerContent = _interopRequireWildcard(require("./confirm-page-container-content"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\confirm-page-container\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-subtitle\\confirm-subtitle.js", {"../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useTransactionInfo":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionInfo.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconfirm-subtitle%5Cconfirm-subtitle.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _common = require("../../../helpers/constants/common");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));
var _selectors = require("../../../selectors");
var _useTransactionInfo = require("../../../hooks/useTransactionInfo");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConfirmSubTitle = ({
  txData,
  hexTransactionAmount,
  subtitleComponent
}) => {
  const shouldShowFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const {
    isNftTransfer
  } = (0, _useTransactionInfo.useTransactionInfo)(txData);
  if (!shouldShowFiat && !isNftTransfer) {
    return null;
  }
  if (subtitleComponent) {
    return subtitleComponent;
  }
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "h5",
    ellipsis: true,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
    variant: _designSystem.TextVariant.bodyMd,
    color: _designSystem.Color.textAlternative
  }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    value: hexTransactionAmount,
    type: _common.SECONDARY,
    showEthLogo: true,
    hideLabel: true
  }));
};
ConfirmSubTitle.propTypes = {
  hexTransactionAmount: _propTypes.default.string,
  subtitleComponent: _propTypes.default.element,
  txData: _propTypes.default.object.isRequired
};
var _default = ConfirmSubTitle;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\confirm-subtitle\\confirm-subtitle.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-subtitle\\index.js", {"./confirm-subtitle":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-subtitle\\confirm-subtitle.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconfirm-subtitle%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ConfirmSubTitle", {
  enumerable: true,
  get: function () {
    return _confirmSubtitle.default;
  }
});
var _confirmSubtitle = _interopRequireDefault(require("./confirm-subtitle"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\confirm-subtitle\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-title\\confirm-title.js", {"../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconfirm-title%5Cconfirm-title.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _transaction = require("../../../../shared/constants/transaction");
var _common = require("../../../helpers/constants/common");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConfirmTitle = ({
  title,
  hexTransactionAmount,
  txData
}) => {
  var _txData$txParams;
  const isContractInteraction = txData.type === _transaction.TransactionType.contractInteraction;
  const hideTitle = (isContractInteraction || txData.type === _transaction.TransactionType.deployContract) && ((_txData$txParams = txData.txParams) === null || _txData$txParams === void 0 ? void 0 : _txData$txParams.value) === '0x0';
  if (hideTitle) {
    return null;
  }
  if (title) {
    return /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      as: title && title.length < 10 ? 'h1' : 'h3',
      ellipsis: true,
      title: title,
      variant: title && title.length < 10 ? _designSystem.TextVariant.displayMd : _designSystem.TextVariant.headingMd,
      fontWeight: _designSystem.FONT_WEIGHT.NORMAL
    }, title);
  }
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "h3",
    ellipsis: true,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL,
    variant: _designSystem.TextVariant.headingMd
  }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    ethLogoHeight: 24,
    hideLabel: !isContractInteraction,
    showCurrencySuffix: isContractInteraction,
    showEthLogo: true,
    type: _common.PRIMARY,
    value: hexTransactionAmount
  }));
};
ConfirmTitle.propTypes = {
  txData: _propTypes.default.object.isRequired,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  hexTransactionAmount: _propTypes.default.string
};
var _default = ConfirmTitle;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\confirm-title\\confirm-title.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-title\\index.js", {"./confirm-title":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-title\\confirm-title.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconfirm-title%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ConfirmTitle", {
  enumerable: true,
  get: function () {
    return _confirmTitle.default;
  }
});
var _confirmTitle = _interopRequireDefault(require("./confirm-title"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\confirm-title\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirmation-warning-modal\\confirmation-warning-modal.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconfirmation-warning-modal%5Cconfirmation-warning-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConfirmationWarningModal = ({
  onSubmit,
  onCancel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "confirmation-warning-modal__content",
    footer: /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
      justifyContent: _designSystem.JustifyContent.spaceBetween,
      className: "confirmation-warning-modal__footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "confirmation-warning-modal__footer__approve-button",
      type: "danger-primary",
      onClick: onSubmit
    }, t('approveButtonText')), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "confirmation-warning-modal__footer__cancel-button",
      type: "secondary",
      onClick: onCancel
    }, t('reject')))
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center,
    padding: 3,
    margin: 0,
    className: "confirmation-warning-modal__content__header"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Danger,
    color: _designSystem.IconColor.errorDefault,
    className: "confirmation-warning-modal__content__header__warning-icon",
    size: _componentLibrary.IconSize.Xl
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingSm,
    as: "h4",
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('addEthereumChainWarningModalTitle'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginLeft: 6,
    marginRight: 6,
    marginTop: 0,
    marginBottom: 3
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    marginTop: 4,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('addEthereumChainWarningModalHeader', [/*#__PURE__*/_react.default.createElement("strong", {
    key: "part-2"
  }, t('addEthereumChainWarningModalHeaderPartTwo'))])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    marginTop: 4,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('addEthereumChainWarningModalListHeader')), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    marginTop: 2,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('addEthereumChainWarningModalListPointOne'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    marginTop: 2,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('addEthereumChainWarningModalListPointTwo'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    marginTop: 2,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('addEthereumChainWarningModalListPointThree'))))));
};
ConfirmationWarningModal.propTypes = {
  /**
   * Function that approves collection
   */
  onSubmit: _propTypes.default.func,
  /**
   * Function that rejects collection
   */
  onCancel: _propTypes.default.func
};
var _default = ConfirmationWarningModal;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\confirmation-warning-modal\\confirmation-warning-modal.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirmation-warning-modal\\index.js", {"./confirmation-warning-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirmation-warning-modal\\confirmation-warning-modal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconfirmation-warning-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmationWarningModal.default;
  }
});
var _confirmationWarningModal = _interopRequireDefault(require("./confirmation-warning-modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\confirmation-warning-modal\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\connected-accounts-list-item.component.js", {"../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list-item%5Cconnected-accounts-list-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConnectedAccountsListItem extends _react.PureComponent {
  render() {
    const {
      address,
      className,
      name,
      status,
      action,
      options
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('connected-accounts-list__row', className)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "connected-accounts-list__row-content"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "connected-accounts-list__identicon",
      address: address,
      diameter: 32
    }), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", {
      className: "connected-accounts-list__account-name"
    }, /*#__PURE__*/_react.default.createElement("strong", null, name)), status ? /*#__PURE__*/_react.default.createElement("p", {
      className: "connected-accounts-list__account-status"
    }, "\xA0\xA0", status) : null, action)), options);
  }
}
exports.default = ConnectedAccountsListItem;
_defineProperty(ConnectedAccountsListItem, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
_defineProperty(ConnectedAccountsListItem, "propTypes", {
  address: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  name: _propTypes.default.node.isRequired,
  status: _propTypes.default.string,
  action: _propTypes.default.node,
  options: _propTypes.default.node
});
_defineProperty(ConnectedAccountsListItem, "defaultProps", {
  className: null,
  options: null,
  action: null
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\connected-accounts-list-item.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\index.js", {"./connected-accounts-list-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\connected-accounts-list-item.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsListItem.default;
  }
});
var _connectedAccountsListItem = _interopRequireDefault(require("./connected-accounts-list-item.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\connected-accounts-list-options.component.js", {"../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\menu\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list-options%5Cconnected-accounts-list-options.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _menu = require("../../../ui/menu");
var _componentLibrary = require("../../../component-library");
var _useI18nContext = require("../../../../hooks/useI18nContext");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConnectedAccountsListOptions = ({
  children,
  onShowOptions,
  onHideOptions,
  show
}) => {
  const ref = (0, _react.useRef)(false);
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.MoreVertical,
    className: "connected-accounts-options__button",
    onClick: onShowOptions,
    ariaLabel: t('options')
  }), show ? /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: ref.current,
    onHide: onHideOptions,
    popperOptions: {
      modifiers: [{
        name: 'preventOverflow',
        options: {
          altBoundary: true
        }
      }]
    }
  }, children) : null);
};
ConnectedAccountsListOptions.propTypes = {
  children: _propTypes.default.node.isRequired,
  onHideOptions: _propTypes.default.func.isRequired,
  onShowOptions: _propTypes.default.func.isRequired,
  show: _propTypes.default.bool.isRequired
};
var _default = ConnectedAccountsListOptions;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\connected-accounts-list-options.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\index.js", {"./connected-accounts-list-options.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\connected-accounts-list-options.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list-options%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsListOptions.default;
  }
});
var _connectedAccountsListOptions = _interopRequireDefault(require("./connected-accounts-list-options.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list.component.js", {"../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\menu\\index.js","./connected-accounts-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\index.js","./connected-accounts-list-options":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _componentLibrary = require("../../component-library");
var _menu = require("../../ui/menu");
var _connectedAccountsListItem = _interopRequireDefault(require("./connected-accounts-list-item"));
var _connectedAccountsListOptions = _interopRequireDefault(require("./connected-accounts-list-options"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConnectedAccountsList extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      accountWithOptionsShown: null
    });
    _defineProperty(this, "disconnectAccount", () => {
      this.hideAccountOptions();
      this.props.removePermittedAccount(this.state.accountWithOptionsShown);
    });
    _defineProperty(this, "switchAccount", address => {
      this.hideAccountOptions();
      this.props.setSelectedAddress(address);
    });
    _defineProperty(this, "hideAccountOptions", () => {
      this.setState({
        accountWithOptionsShown: null
      });
    });
    _defineProperty(this, "showAccountOptions", address => {
      this.setState({
        accountWithOptionsShown: address
      });
    });
  }
  renderUnconnectedAccount() {
    const {
      accountToConnect,
      connectAccount
    } = this.props;
    const {
      t
    } = this.context;
    if (!accountToConnect) {
      return null;
    }
    const {
      address,
      name
    } = accountToConnect;
    return /*#__PURE__*/_react.default.createElement(_connectedAccountsListItem.default, {
      className: "connected-accounts-list__row--highlight",
      address: address,
      name: `${name} (…${address.substr(-4, 4)})`,
      status: t('statusNotConnected'),
      action: /*#__PURE__*/_react.default.createElement("a", {
        className: "connected-accounts-list__account-status-link",
        onClick: () => connectAccount(accountToConnect.address)
      }, t('connect'))
    });
  }
  renderListItemOptions(address) {
    const {
      accountWithOptionsShown
    } = this.state;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_connectedAccountsListOptions.default, {
      onHideOptions: this.hideAccountOptions,
      onShowOptions: this.showAccountOptions.bind(null, address),
      show: accountWithOptionsShown === address
    }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
      iconName: _componentLibrary.IconName.Logout,
      onClick: this.disconnectAccount
    }, t('disconnectThisAccount')));
  }
  renderListItemAction(address) {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("a", {
      className: "connected-accounts-list__account-status-link",
      onClick: () => this.switchAccount(address)
    }, t('switchToThisAccount'));
  }
  render() {
    const {
      connectedAccounts,
      selectedAddress,
      shouldRenderListOptions
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("main", {
      className: "connected-accounts-list"
    }, this.renderUnconnectedAccount(), connectedAccounts.map(({
      address,
      name
    }, index) => {
      return /*#__PURE__*/_react.default.createElement(_connectedAccountsListItem.default, {
        key: address,
        address: address,
        name: `${name} (…${address.substr(-4, 4)})`,
        status: index === 0 ? t('active') : null,
        options: shouldRenderListOptions ? this.renderListItemOptions(address) : null,
        action: address === selectedAddress ? null : this.renderListItemAction(address)
      });
    })));
  }
}
exports.default = ConnectedAccountsList;
_defineProperty(ConnectedAccountsList, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
_defineProperty(ConnectedAccountsList, "defaultProps", {
  accountToConnect: null
});
_defineProperty(ConnectedAccountsList, "propTypes", {
  accountToConnect: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired
  }),
  connectedAccounts: _propTypes.default.arrayOf(_propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    lastActive: _propTypes.default.number
  })).isRequired,
  connectAccount: _propTypes.default.func.isRequired,
  selectedAddress: _propTypes.default.string.isRequired,
  removePermittedAccount: _propTypes.default.func,
  setSelectedAddress: _propTypes.default.func.isRequired,
  shouldRenderListOptions: (props, propName, componentName) => {
    if (typeof props[propName] !== 'boolean') {
      return new Error(`Warning: Failed prop type: '${propName}' of component '${componentName}' must be a boolean. Received: ${typeof props[propName]}`);
    } else if (props[propName] && !props.removePermittedAccount) {
      return new Error(`Warning: Failed prop type: '${propName}' of component '${componentName}' requires prop 'removePermittedAccount'.`);
    }
    return undefined;
  }
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\index.js", {"./connected-accounts-list.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsList.default;
  }
});
var _connectedAccountsList = _interopRequireDefault(require("./connected-accounts-list.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-permissions\\connected-accounts-permissions.js", {"../../../helpers/utils/permission":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\permission.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/check-box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-permissions%5Cconnected-accounts-permissions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var _checkBox = _interopRequireDefault(require("../../ui/check-box"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _permission = require("../../../helpers/utils/permission");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConnectedAccountsPermissions = ({
  permissions
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [expanded, setExpanded] = (0, _react.useState)(false);
  const toggleExpanded = () => {
    setExpanded(_expanded => !_expanded);
  };
  if (!permissions.length) {
    return null;
  }
  const permissionLabels = (0, _lodash.flatten)(permissions.map(({
    key,
    value
  }) => (0, _permission.getPermissionDescription)({
    t,
    permissionName: key,
    permissionValue: value
  })));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "connected-accounts-permissions"
  }, /*#__PURE__*/_react.default.createElement("p", {
    className: "connected-accounts-permissions__header",
    onClick: toggleExpanded
  }, /*#__PURE__*/_react.default.createElement("strong", null, t('permissions')), /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)('fas', {
      'fa-angle-down': !expanded,
      'fa-angle-up': expanded
    }),
    title: t('showPermissions')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('connected-accounts-permissions__list-container', {
      'connected-accounts-permissions__list-container--expanded': expanded
    })
  }, /*#__PURE__*/_react.default.createElement("p", null, t('authorizedPermissions'), ":"), /*#__PURE__*/_react.default.createElement("ul", {
    className: "connected-accounts-permissions__list"
  }, permissionLabels.map(({
    label
  }, idx) => /*#__PURE__*/_react.default.createElement("li", {
    key: `connected-permission-${idx}`,
    className: "connected-accounts-permissions__list-item"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    checked: true,
    disabled: true,
    id: `connected-permission-${idx}`,
    className: "connected-accounts-permissions__checkbox"
  }), /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: `connected-permission-${idx}`
  }, label))))));
};
ConnectedAccountsPermissions.propTypes = {
  permissions: _propTypes.default.arrayOf(_propTypes.default.shape({
    key: _propTypes.default.string.isRequired
  }))
};
ConnectedAccountsPermissions.defaultProps = {
  permissions: []
};
ConnectedAccountsPermissions.displayName = 'ConnectedAccountsPermissions';
var _default = /*#__PURE__*/_react.default.memo(ConnectedAccountsPermissions);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-permissions\\connected-accounts-permissions.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-permissions\\index.js", {"./connected-accounts-permissions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-accounts-permissions\\connected-accounts-permissions.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-permissions%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsPermissions.default;
  }
});
var _connectedAccountsPermissions = _interopRequireDefault(require("./connected-accounts-permissions"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-permissions\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-sites-list\\connected-sites-list.component.js", {"../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/site-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\site-icon\\index.js","../../ui/site-origin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-sites-list%5Cconnected-sites-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _siteIcon = _interopRequireDefault(require("../../ui/site-icon"));
var _util = require("../../../helpers/utils/util");
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConnectedSitesList extends _react.Component {
  render() {
    const {
      connectedSubjects,
      onDisconnect
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("main", {
      className: "connected-sites-list__content-rows"
    }, connectedSubjects.map(subject => /*#__PURE__*/_react.default.createElement("div", {
      key: subject.origin,
      className: "connected-sites-list__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "connected-sites-list__subject-info"
    }, /*#__PURE__*/_react.default.createElement(_siteIcon.default, {
      icon: subject.iconUrl,
      name: subject.name,
      size: 32,
      className: "connected-sites-list__subject-icon"
    }), /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      className: "connected-sites-list__subject-name",
      title: subject.extensionId || subject.origin,
      siteOrigin: this.getSubjectDisplayName(subject)
    })), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "connected-sites-list__content-row-link-button",
      onClick: () => onDisconnect(subject.origin),
      type: "link"
    }, t('disconnect')))));
  }
  getSubjectDisplayName(subject) {
    if (subject.extensionId) {
      return this.context.t('externalExtension');
    }

    // We strip https schemes only, and only if the URL has no port.
    return (0, _util.stripHttpsSchemeWithoutPort)(subject.origin);
  }
}
exports.default = ConnectedSitesList;
_defineProperty(ConnectedSitesList, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(ConnectedSitesList, "propTypes", {
  connectedSubjects: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    origin: _propTypes.default.string
  })).isRequired,
  onDisconnect: _propTypes.default.func.isRequired
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-sites-list\\connected-sites-list.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-sites-list\\index.js", {"./connected-sites-list.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-sites-list\\connected-sites-list.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-sites-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedSitesList.default;
  }
});
var _connectedSitesList = _interopRequireDefault(require("./connected-sites-list.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-sites-list\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-status-indicator\\connected-status-indicator.js", {"../../../helpers/constants/connected-sites":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\connected-sites.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../multichain":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\index.js","../../ui/color-indicator":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\color-indicator\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-status-indicator%5Cconnected-status-indicator.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConnectedStatusIndicator;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _connectedSites = require("../../../helpers/constants/connected-sites");
var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _multichain = require("../../multichain");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConnectedStatusIndicator({
  onClick
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const selectedAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const addressConnectedSubjectMap = (0, _reactRedux.useSelector)(_selectors.getAddressConnectedSubjectMap);
  const originOfCurrentTab = (0, _reactRedux.useSelector)(_selectors.getOriginOfCurrentTab);
  const selectedAddressSubjectMap = addressConnectedSubjectMap[selectedAddress];
  const currentTabIsConnectedToSelectedAddress = Boolean(selectedAddressSubjectMap && selectedAddressSubjectMap[originOfCurrentTab]);
  let status;
  if (currentTabIsConnectedToSelectedAddress) {
    status = _connectedSites.STATUS_CONNECTED;
  } else if ((0, _lodash.findKey)(addressConnectedSubjectMap, originOfCurrentTab)) {
    status = _connectedSites.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT;
  } else {
    status = _connectedSites.STATUS_NOT_CONNECTED;
  }
  let indicatorType = _colorIndicator.default.TYPES.OUTLINE;
  let indicatorColor = _designSystem.Color.iconDefault;
  let globalMenuColor = _designSystem.Color.iconAlternative;
  if (status === _connectedSites.STATUS_CONNECTED) {
    indicatorColor = _designSystem.Color.successDefault;
    indicatorType = _colorIndicator.default.TYPES.PARTIAL;
    globalMenuColor = _designSystem.Color.successDefault;
  } else if (status === _connectedSites.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT) {
    indicatorColor = _designSystem.Color.errorDefault;
    globalMenuColor = _designSystem.BackgroundColor.backgroundDefault;
  }
  const text = status === _connectedSites.STATUS_CONNECTED ? t('statusConnected') : t('statusNotConnected'); // TODO: Remove text since we only need the tooltip text for new permission icon
  const tooltipText = status === _connectedSites.STATUS_CONNECTED ? t('tooltipSatusConnected') : t('tooltipSatusNotConnected');
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, false ? /*#__PURE__*/_react.default.createElement(_multichain.MultichainConnectedSiteMenu, {
    status: status,
    globalMenuColor: globalMenuColor,
    text: tooltipText,
    as: "button",
    onClick: onClick
  }) : /*#__PURE__*/_react.default.createElement("button", {
    className: "connected-status-indicator",
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
    color: indicatorColor,
    type: indicatorType
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "connected-status-indicator__text"
  }, text)));
}
ConnectedStatusIndicator.defaultProps = {
  onClick: undefined
};
ConnectedStatusIndicator.propTypes = {
  onClick: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-status-indicator\\connected-status-indicator.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-status-indicator\\index.js", {"./connected-status-indicator":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-status-indicator\\connected-status-indicator.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cconnected-status-indicator%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedStatusIndicator.default;
  }
});
var _connectedStatusIndicator = _interopRequireDefault(require("./connected-status-indicator"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-status-indicator\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\contact-list\\contact-list.component.js", {"../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","./recipient-group/recipient-group.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\contact-list\\recipient-group\\recipient-group.component.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccontact-list%5Ccontact-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _button = _interopRequireDefault(require("../../ui/button"));
var _recipientGroup = _interopRequireDefault(require("./recipient-group/recipient-group.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ContactList extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isShowingAllRecent: false
    });
  }
  renderRecents() {
    const {
      t
    } = this.context;
    const {
      isShowingAllRecent
    } = this.state;
    const nonContacts = this.props.searchForRecents();
    const showLoadMore = !isShowingAllRecent && nonContacts.length > 2;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__recent-group-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_recipientGroup.default, {
      label: t('recents'),
      items: showLoadMore ? nonContacts.slice(0, 2) : nonContacts,
      onSelect: this.props.selectRecipient,
      selectedAddress: this.props.selectedAddress
    }), showLoadMore && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "send__select-recipient-wrapper__recent-group-wrapper__load-more",
      onClick: () => this.setState({
        isShowingAllRecent: true
      })
    }, t('loadMore')));
  }
  renderAddressBook() {
    const unsortedContactsByLetter = this.props.searchForContacts().reduce((obj, contact) => {
      const firstLetter = contact.name[0].toUpperCase();
      return {
        ...obj,
        [firstLetter]: [...(obj[firstLetter] || []), contact]
      };
    }, {});
    const letters = Object.keys(unsortedContactsByLetter).sort();
    const sortedContactGroups = letters.map(letter => {
      return [letter, (0, _lodash.sortBy)(unsortedContactsByLetter[letter], contact => {
        return contact.name.toLowerCase();
      })];
    });
    return sortedContactGroups.map(([letter, groupItems]) => /*#__PURE__*/_react.default.createElement(_recipientGroup.default, {
      key: `${letter}-contact-group`,
      label: letter,
      items: groupItems,
      onSelect: this.props.selectRecipient,
      selectedAddress: this.props.selectedAddress
    }));
  }
  renderMyAccounts() {
    const myAccounts = this.props.searchForMyAccounts();
    return /*#__PURE__*/_react.default.createElement(_recipientGroup.default, {
      items: myAccounts,
      onSelect: this.props.selectRecipient,
      selectedAddress: this.props.selectedAddress
    });
  }
  render() {
    const {
      children,
      searchForRecents,
      searchForContacts,
      searchForMyAccounts
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__list"
    }, children || null, searchForRecents ? this.renderRecents() : null, searchForContacts ? this.renderAddressBook() : null, searchForMyAccounts ? this.renderMyAccounts() : null);
  }
}
exports.default = ContactList;
_defineProperty(ContactList, "propTypes", {
  searchForContacts: _propTypes.default.func,
  searchForRecents: _propTypes.default.func,
  searchForMyAccounts: _propTypes.default.func,
  selectRecipient: _propTypes.default.func,
  children: _propTypes.default.node,
  selectedAddress: _propTypes.default.string
});
_defineProperty(ContactList, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\contact-list\\contact-list.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\contact-list\\index.js", {"./contact-list.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\contact-list\\contact-list.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccontact-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _contactList.default;
  }
});
var _contactList = _interopRequireDefault(require("./contact-list.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\contact-list\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\contact-list\\recipient-group\\recipient-group.component.js", {"../../../../pages/send/send.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\send\\send.utils.js","../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccontact-list%5Crecipient-group%5Crecipient-group.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RecipientGroup;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _send = require("../../../../pages/send/send.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function addressesEqual(address1, address2) {
  return String(address1).toLowerCase() === String(address2).toLowerCase();
}
function RecipientGroup({
  label,
  items,
  onSelect,
  selectedAddress
}) {
  if (!items || !items.length) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group",
    "data-testid": "recipient-group"
  }, label && /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group-label"
  }, label), items.map(({
    address,
    name
  }) => /*#__PURE__*/_react.default.createElement("div", {
    key: address,
    onClick: () => onSelect(address, name),
    className: (0, _classnames.default)({
      'send__select-recipient-wrapper__group-item': !addressesEqual(address, selectedAddress),
      'send__select-recipient-wrapper__group-item--selected': addressesEqual(address, selectedAddress)
    })
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: address,
    diameter: 28
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group-item__content",
    "data-testid": "recipient"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group-item__title"
  }, name || (0, _send.ellipsify)(address)), name && /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group-item__subtitle"
  }, (0, _send.ellipsify)(address))))));
}
RecipientGroup.propTypes = {
  label: _propTypes.default.string,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    name: _propTypes.default.string
  })),
  onSelect: _propTypes.default.func.isRequired,
  selectedAddress: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\contact-list\\recipient-group\\recipient-group.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\create-new-vault\\create-new-vault.js", {"../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/check-box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","../../ui/text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../srp-input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\srp-input\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccreate-new-vault%5Ccreate-new-vault.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreateNewVault;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _textField = _interopRequireDefault(require("../../ui/text-field"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _checkBox = _interopRequireDefault(require("../../ui/check-box"));
var _componentLibrary = require("../../component-library");
var _srpInput = _interopRequireDefault(require("../srp-input"));
var _common = require("../../../helpers/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function CreateNewVault({
  disabled = false,
  includeTerms = false,
  onSubmit,
  submitText
}) {
  const [confirmPassword, setConfirmPassword] = (0, _react.useState)('');
  const [confirmPasswordError, setConfirmPasswordError] = (0, _react.useState)('');
  const [password, setPassword] = (0, _react.useState)('');
  const [passwordError, setPasswordError] = (0, _react.useState)('');
  const [seedPhrase, setSeedPhrase] = (0, _react.useState)('');
  const [termsChecked, setTermsChecked] = (0, _react.useState)(false);
  const t = (0, _useI18nContext.useI18nContext)();
  const onPasswordChange = (0, _react.useCallback)(newPassword => {
    let newConfirmPasswordError = '';
    let newPasswordError = '';
    if (newPassword && newPassword.length < _common.PASSWORD_MIN_LENGTH) {
      newPasswordError = t('passwordNotLongEnough');
    }
    if (confirmPassword && newPassword !== confirmPassword) {
      newConfirmPasswordError = t('passwordsDontMatch');
    }
    setPassword(newPassword);
    setPasswordError(newPasswordError);
    setConfirmPasswordError(newConfirmPasswordError);
  }, [confirmPassword, t]);
  const onConfirmPasswordChange = (0, _react.useCallback)(newConfirmPassword => {
    let newConfirmPasswordError = '';
    if (password !== newConfirmPassword) {
      newConfirmPasswordError = t('passwordsDontMatch');
    }
    setConfirmPassword(newConfirmPassword);
    setConfirmPasswordError(newConfirmPasswordError);
  }, [password, t]);
  const isValid = !disabled && password && confirmPassword && password === confirmPassword && seedPhrase && (!includeTerms || termsChecked) && !passwordError && !confirmPasswordError;
  const onImport = (0, _react.useCallback)(async event => {
    event.preventDefault();
    if (!isValid) {
      return;
    }
    await onSubmit(password, seedPhrase);
  }, [isValid, onSubmit, password, seedPhrase]);
  const toggleTermsCheck = (0, _react.useCallback)(() => {
    setTermsChecked(currentTermsChecked => !currentTermsChecked);
  }, []);
  const termsOfUse = t('acceptTermsOfUse', [/*#__PURE__*/_react.default.createElement("a", {
    className: "create-new-vault__terms-link",
    key: "create-new-vault__link-text",
    href: "https://metamask.io/terms.html",
    target: "_blank",
    rel: "noopener noreferrer"
  }, t('terms'))]);
  return /*#__PURE__*/_react.default.createElement("form", {
    className: "create-new-vault__form",
    onSubmit: onImport
  }, /*#__PURE__*/_react.default.createElement(_srpInput.default, {
    onChange: setSeedPhrase,
    srpText: t('secretRecoveryPhrase')
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "create-new-vault__create-password"
  }, /*#__PURE__*/_react.default.createElement(_textField.default, {
    "data-testid": "create-vault-password",
    id: "password",
    label: t('newPassword'),
    type: "password",
    value: password,
    onChange: event => onPasswordChange(event.target.value),
    error: passwordError,
    autoComplete: "new-password",
    margin: "normal",
    largeLabel: true
  }), /*#__PURE__*/_react.default.createElement(_textField.default, {
    "data-testid": "create-vault-confirm-password",
    id: "confirm-password",
    label: t('confirmPassword'),
    type: "password",
    value: confirmPassword,
    onChange: event => onConfirmPasswordChange(event.target.value),
    error: confirmPasswordError,
    autoComplete: "new-password",
    margin: "normal",
    largeLabel: true
  })), includeTerms ? /*#__PURE__*/_react.default.createElement("div", {
    className: "create-new-vault__terms"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "create-new-vault__terms-checkbox",
    dataTestId: "create-new-vault__terms-checkbox",
    checked: termsChecked,
    onClick: toggleTermsCheck
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "create-new-vault__terms-label",
    htmlFor: "create-new-vault__terms-checkbox"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span"
  }, termsOfUse))) : null, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "create-new-vault-submit-button",
    className: "create-new-vault__submit-button",
    type: "primary",
    submit: true,
    disabled: !isValid
  }, submitText));
}
CreateNewVault.propTypes = {
  disabled: _propTypes.default.bool,
  includeTerms: _propTypes.default.bool,
  onSubmit: _propTypes.default.func.isRequired,
  submitText: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\create-new-vault\\create-new-vault.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\create-new-vault\\index.js", {"./create-new-vault":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\create-new-vault\\create-new-vault.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccreate-new-vault%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _createNewVault.default;
  }
});
var _createNewVault = _interopRequireDefault(require("./create-new-vault"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\create-new-vault\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\currency-input\\currency-input.js", {"../../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../ui/currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","../../ui/unit-input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\unit-input\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccurrency-input%5Ccurrency-input.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CurrencyInput;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _unitInput = _interopRequireDefault(require("../../ui/unit-input"));
var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));
var _i18n = require("../../../contexts/i18n");
var _metamask = require("../../../ducks/metamask/metamask");
var _selectors = require("../../../selectors");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _common = require("../../../../shared/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Component that allows user to enter currency values as a number, and props receive a converted
 * hex value in WEI. props.value, used as a default or forced value, should be a hex value, which
 * gets converted into a decimal value depending on the currency (ETH or Fiat).
 *
 * @param options0
 * @param options0.hexValue
 * @param options0.featureSecondary
 * @param options0.onChange
 * @param options0.onPreferenceToggle
 */
function CurrencyInput({
  hexValue,
  featureSecondary,
  onChange,
  onPreferenceToggle
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const preferredCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const secondaryCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const hideSecondary = !showFiat;
  const primarySuffix = preferredCurrency || _common.EtherDenomination.ETH;
  const secondarySuffix = secondaryCurrency.toUpperCase();
  const [isSwapped, setSwapped] = (0, _react.useState)(false);
  const [newHexValue, setNewHexValue] = (0, _react.useState)(hexValue);
  const [shouldDisplayFiat, setShouldDisplayFiat] = (0, _react.useState)(featureSecondary);
  const shouldUseFiat = hideSecondary ? false : Boolean(shouldDisplayFiat);
  const getDecimalValue = () => {
    const decimalValueString = shouldUseFiat ? (0, _conversion.getValueFromWeiHex)({
      value: hexValue,
      toCurrency: secondaryCurrency,
      conversionRate,
      numberOfDecimals: 2
    }) : (0, _conversion.getValueFromWeiHex)({
      value: hexValue,
      toCurrency: _common.EtherDenomination.ETH,
      numberOfDecimals: 8
    });
    return Number(decimalValueString) || 0;
  };
  const initialDecimalValue = hexValue ? getDecimalValue() : 0;
  const swap = async () => {
    await onPreferenceToggle();
    setSwapped(!isSwapped);
    setShouldDisplayFiat(!shouldDisplayFiat);
  };
  const handleChange = newDecimalValue => {
    const hexValueNew = shouldUseFiat ? (0, _conversion.getWeiHexFromDecimalValue)({
      value: newDecimalValue,
      fromCurrency: secondaryCurrency,
      conversionRate,
      invertConversionRate: true
    }) : (0, _conversion.getWeiHexFromDecimalValue)({
      value: newDecimalValue,
      fromCurrency: _common.EtherDenomination.ETH,
      fromDenomination: _common.EtherDenomination.ETH,
      conversionRate
    });
    setNewHexValue(hexValueNew);
    onChange(hexValueNew);
    setSwapped(!isSwapped);
  };
  (0, _react.useEffect)(() => {
    setNewHexValue(hexValue);
  }, [hexValue]);
  (0, _react.useEffect)(() => {
    if (featureSecondary) {
      handleChange(initialDecimalValue);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [featureSecondary, initialDecimalValue]);
  const renderConversionComponent = () => {
    let currency, numberOfDecimals;
    if (hideSecondary) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "currency-input__conversion-component"
      }, t('noConversionRateAvailable'));
    }
    if (shouldUseFiat) {
      // Display ETH
      currency = preferredCurrency || _common.EtherDenomination.ETH;
      numberOfDecimals = 8;
    } else {
      // Display Fiat
      currency = secondaryCurrency;
      numberOfDecimals = 2;
    }
    return /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "currency-input__conversion-component",
      currency: currency,
      value: newHexValue,
      numberOfDecimals: numberOfDecimals
    });
  };
  return /*#__PURE__*/_react.default.createElement(_unitInput.default, {
    hexValue,
    preferredCurrency,
    secondaryCurrency,
    hideSecondary,
    featureSecondary,
    conversionRate,
    onChange,
    onPreferenceToggle,
    dataTestId: "currency-input",
    suffix: shouldUseFiat ? secondarySuffix : primarySuffix,
    onChange: handleChange,
    value: initialDecimalValue,
    actionComponent: /*#__PURE__*/_react.default.createElement("button", {
      className: "currency-input__swap-component",
      "data-testid": "currency-swap",
      onClick: swap
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-retweet fa-lg"
    }))
  }, renderConversionComponent());
}
CurrencyInput.propTypes = {
  hexValue: _propTypes.default.string,
  featureSecondary: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  onPreferenceToggle: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\currency-input\\currency-input.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\currency-input\\index.js", {"./currency-input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\currency-input\\currency-input.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccurrency-input%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _currencyInput.default;
  }
});
var _currencyInput = _interopRequireDefault(require("./currency-input"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\currency-input\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\custom-spending-cap\\custom-spending-cap-tooltip.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccustom-spending-cap%5Ccustom-spending-cap-tooltip.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomSpendingCapTooltip = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const CustomSpendingCapTooltip = ({
  tooltipContentText,
  tooltipIcon
}) => /*#__PURE__*/_react.default.createElement(_box.default, {
  display: _designSystem.DISPLAY.INLINE_BLOCK
}, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
  interactive: true,
  position: "top",
  html: /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    margin: 3,
    color: _designSystem.TextColor.textAlternative,
    className: "form-field__heading-title__tooltip"
  }, tooltipContentText)
}, tooltipIcon ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
  name: _componentLibrary.IconName.Danger,
  className: "form-field__heading-title__tooltip__warning-icon",
  size: _componentLibrary.IconSize.Inherit,
  style: {
    'vertical-align': 'bottom'
  }
}) : tooltipIcon !== '' && /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
  name: _componentLibrary.IconName.Question,
  size: _componentLibrary.IconSize.Inherit
})));
exports.CustomSpendingCapTooltip = CustomSpendingCapTooltip;
CustomSpendingCapTooltip.propTypes = {
  tooltipContentText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  tooltipIcon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool])
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\custom-spending-cap\\custom-spending-cap-tooltip.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\custom-spending-cap\\custom-spending-cap.js", {"../../../../shared/constants/tokens":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\tokens.js","../../../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/app/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\app\\app.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../pages/confirm-approve/confirm-approve.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirm-approve\\confirm-approve.util.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/form-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\form-field\\index.js","./custom-spending-cap-tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\custom-spending-cap\\custom-spending-cap-tooltip.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","ethereumjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ccustom-spending-cap%5Ccustom-spending-cap.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CustomSpendingCap;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _ethereumjsUtil = require("ethereumjs-util");
var _i18n = require("../../../contexts/i18n");
var _box = _interopRequireDefault(require("../../ui/box"));
var _formField = _interopRequireDefault(require("../../ui/form-field"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _selectors = require("../../../selectors");
var _app = require("../../../ducks/app/app");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _tokens = require("../../../../shared/constants/tokens");
var _Numeric = require("../../../../shared/modules/Numeric");
var _actions = require("../../../store/actions");
var _confirmApprove = require("../../../pages/confirm-approve/confirm-approve.util");
var _gasFee = require("../../../contexts/gasFee");
var _customSpendingCapTooltip = require("./custom-spending-cap-tooltip");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function CustomSpendingCap({
  txParams,
  tokenName,
  currentTokenBalance,
  dappProposedValue,
  siteOrigin,
  passTheErrorText,
  decimals,
  setInputChangeInProgress
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    updateTransaction
  } = (0, _gasFee.useGasFeeContext)();
  const inputRef = (0, _react.useRef)(null);
  const value = (0, _reactRedux.useSelector)(_selectors.getCustomTokenAmount);
  const [error, setError] = (0, _react.useState)('');
  const [showUseDefaultButton, setShowUseDefaultButton] = (0, _react.useState)(value !== String(dappProposedValue) && true);
  const inputLogicEmptyStateText = t('inputLogicEmptyState');
  const replaceCommaToDot = inputValue => {
    return inputValue.replace(/,/gu, '.');
  };
  const decConversionGreaterThan = (tokenValue, tokenBalance) => {
    return new _Numeric.Numeric(Number(replaceCommaToDot(tokenValue)), 10).greaterThan(Number(tokenBalance), 10);
  };
  const getInputTextLogic = inputNumber => {
    if (new _Numeric.Numeric(Number(replaceCommaToDot(inputNumber)), 10).lessThanOrEqualTo(new _Numeric.Numeric(Number(currentTokenBalance), 10))) {
      return {
        className: 'custom-spending-cap__lowerValue',
        description: t('inputLogicEqualOrSmallerNumber', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
          key: "custom-spending-cap",
          variant: _designSystem.TextVariant.bodySmBold,
          as: "h6",
          className: "custom-spending-cap__input-value-and-token-name"
        }, replaceCommaToDot(inputNumber), " ", tokenName)])
      };
    } else if (decConversionGreaterThan(inputNumber, currentTokenBalance)) {
      return {
        className: 'custom-spending-cap__higherValue',
        description: t('inputLogicHigherNumber')
      };
    }
    return {
      className: 'custom-spending-cap__emptyState',
      description: t('inputLogicEmptyState')
    };
  };
  const [customSpendingCapText, setCustomSpendingCapText] = (0, _react.useState)(getInputTextLogic(value).description);
  const handleChange = async valueInput => {
    var _match$;
    if (!txParams) {
      return;
    }
    setInputChangeInProgress(true);
    let spendingCapError = '';
    const inputTextLogic = getInputTextLogic(valueInput);
    const inputTextLogicDescription = inputTextLogic.description;
    const match = _tokens.DECIMAL_REGEX.exec(replaceCommaToDot(valueInput));
    if ((match === null || match === void 0 ? void 0 : (_match$ = match[1]) === null || _match$ === void 0 ? void 0 : _match$.length) > decimals) {
      setInputChangeInProgress(false);
      return;
    }
    if (valueInput && !_tokens.NUM_W_OPT_DECIMAL_COMMA_OR_DOT_REGEX.test(valueInput)) {
      spendingCapError = t('spendingCapError');
      setCustomSpendingCapText(t('spendingCapErrorDescription', [siteOrigin]));
      setError(spendingCapError);
    } else {
      setCustomSpendingCapText(inputTextLogicDescription);
      setError('');
    }
    const maxTokenAmount = (0, _transactionsControllerUtils.calcTokenAmount)(_tokens.MAX_TOKEN_ALLOWANCE_AMOUNT, decimals);
    if (Number(valueInput.length) > 1 && Number(valueInput)) {
      const customSpendLimitNumber = new _bignumber.default(valueInput);
      if (customSpendLimitNumber.greaterThan(maxTokenAmount)) {
        spendingCapError = t('spendLimitTooLarge');
        setError(spendingCapError);
      }
    }
    dispatch((0, _app.setCustomTokenAmount)(String(valueInput)));
    try {
      const newData = (0, _confirmApprove.getCustomTxParamsData)(txParams.data, {
        customPermissionAmount: valueInput,
        decimals
      });
      const {
        from,
        to,
        value: txValue
      } = txParams;
      const estimatedGasLimit = await (0, _actions.estimateGas)({
        from,
        to,
        value: txValue,
        data: newData
      });
      if (estimatedGasLimit) {
        await updateTransaction({
          gasLimit: (0, _conversion.hexToDecimal)((0, _ethereumjsUtil.addHexPrefix)(estimatedGasLimit))
        });
      }
    } catch (exp) {
      console.error('Error in trying to update gas limit', exp);
    }
    setInputChangeInProgress(false);
  };
  (0, _react.useEffect)(() => {
    if (value !== String(dappProposedValue)) {
      setShowUseDefaultButton(true);
    }
  }, [value, dappProposedValue]);
  (0, _react.useEffect)(() => {
    passTheErrorText(error);
  }, [error, passTheErrorText]);
  (0, _react.useEffect)(() => {
    if (inputRef.current) {
      inputRef.current.focus({
        preventScroll: true
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [inputRef.current]);
  const chooseTooltipContentText = decConversionGreaterThan(value, currentTokenBalance) ? t('warningTooltipText', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    key: "tooltip-text",
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    color: _designSystem.TextColor.errorDefault
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Warning
  }), " ", t('beCareful'))]) : t('inputLogicEmptyState');
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "custom-spending-cap",
    borderRadius: _designSystem.Size.SM,
    paddingTop: 2,
    paddingRight: 6,
    paddingLeft: 6,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexStart,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    backgroundColor: _designSystem.BackgroundColor.backgroundAlternative,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JustifyContent.center,
    display: _designSystem.DISPLAY.BLOCK,
    className: "custom-spending-cap__input"
  }, /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: decConversionGreaterThan(value, currentTokenBalance) ? 'custom-spending-cap-input-value' : 'custom-spending-cap'
  }, /*#__PURE__*/_react.default.createElement(_formField.default, {
    inputRef: inputRef,
    dataTestId: "custom-spending-cap-input",
    wrappingLabelProps: {
      as: 'div'
    },
    id: decConversionGreaterThan(value, currentTokenBalance) ? 'custom-spending-cap-input-value' : 'custom-spending-cap',
    TooltipCustomComponent: /*#__PURE__*/_react.default.createElement(_customSpendingCapTooltip.CustomSpendingCapTooltip, {
      tooltipContentText: replaceCommaToDot(value) ? chooseTooltipContentText : '',
      tooltipIcon: replaceCommaToDot(value) ? decConversionGreaterThan(value, currentTokenBalance) : ''
    }),
    onChange: handleChange,
    titleText: t('customSpendingCap'),
    placeholder: t('enterANumber'),
    error: error,
    value: value,
    titleDetail: showUseDefaultButton && /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
      size: _designSystem.Size.auto,
      onClick: e => {
        e.preventDefault();
        setShowUseDefaultButton(false);
        handleChange(dappProposedValue);
      }
    }, t('useDefault')),
    titleDetailWrapperProps: {
      marginBottom: 2,
      marginRight: 0
    }
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.MAX,
    marginLeft: "auto",
    paddingRight: 4,
    paddingBottom: 2,
    textAlign: _designSystem.TEXT_ALIGN.END,
    className: (0, _classnames.default)('custom-spending-cap__max', {
      'custom-spending-cap__max--with-error-message': error
    })
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    size: _designSystem.Size.auto,
    onClick: e => {
      e.preventDefault();
      handleChange(currentTokenBalance);
    }
  }, t('max'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: (0, _classnames.default)('custom-spending-cap__description', {
      'custom-spending-cap__description--with-error-message': error
    })
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    paddingTop: 2,
    paddingBottom: 2
  }, replaceCommaToDot(value) ? customSpendingCapText : inputLogicEmptyStateText))))));
}
CustomSpendingCap.propTypes = {
  /**
   * Transaction params
   */
  txParams: _propTypes.default.object.isRequired,
  /**
   * Displayed the token name currently tracked in description related to the input state
   */
  tokenName: _propTypes.default.string,
  /**
   * The current token balance of the token
   */
  currentTokenBalance: _propTypes.default.string,
  /**
   * The dapp suggested amount
   */
  dappProposedValue: _propTypes.default.string,
  /**
   * The origin of the site generally the URL
   */
  siteOrigin: _propTypes.default.string,
  /**
   * Parent component's callback function passed in order to get the error text
   */
  passTheErrorText: _propTypes.default.func,
  /**
   * Number of decimals
   */
  decimals: _propTypes.default.string,
  /**
   * Updating input state to changing
   */
  setInputChangeInProgress: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\custom-spending-cap\\custom-spending-cap.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-address\\detected-token-address.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../hooks/useCopyToClipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-address%5Cdetected-token-address.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _useCopyToClipboard = require("../../../../hooks/useCopyToClipboard");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _util = require("../../../../helpers/utils/util");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DetectedTokenAddress = ({
  tokenAddress
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_FLEX,
    className: "detected-token-address"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textDefault
  }, `${t('tokenAddress')}:`), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.primaryDefault,
    marginLeft: 2,
    marginRight: 2
  }, (0, _util.shortenAddress)(tokenAddress)), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "detected-token-address__copy-link",
    onClick: () => {
      handleCopy(tokenAddress);
    }
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-copy"
  }))));
};
DetectedTokenAddress.propTypes = {
  tokenAddress: _propTypes.default.string
};
var _default = DetectedTokenAddress;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-address\\detected-token-address.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-aggregators\\detected-token-aggregators.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-aggregators%5Cdetected-token-aggregators.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NUMBER_OF_AGGREGATORS_TO_DISPLAY = 2;
const DetectedTokenAggregators = ({
  aggregators
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const numOfHiddenAggregators = parseInt(aggregators.length, 10) - NUMBER_OF_AGGREGATORS_TO_DISPLAY;
  const [displayMore, setDisplayMore] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_FLEX,
    className: "detected-token-aggregators"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Normal
  }, t('fromTokenLists', [numOfHiddenAggregators > 0 && !displayMore ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Normal,
    key: "detected-token-aggrgators-with-more"
  }, `${aggregators.slice(0, NUMBER_OF_AGGREGATORS_TO_DISPLAY).join(', ')}`, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "detected-token-aggregators__link",
    onClick: () => setDisplayMore(true),
    key: "detected-token-aggrgators-link"
  }, t('plusXMore', [numOfHiddenAggregators]))) : /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Normal,
    key: "detected-token-aggrgators-without-more"
  }, `${aggregators.join(', ')}.`)])));
};
DetectedTokenAggregators.propTypes = {
  aggregators: _propTypes.default.array.isRequired
};
var _default = DetectedTokenAggregators;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-aggregators\\detected-token-aggregators.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-details\\detected-token-details.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../detected-token-address/detected-token-address":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-address\\detected-token-address.js","../detected-token-aggregators/detected-token-aggregators":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-aggregators\\detected-token-aggregators.js","../detected-token-values/detected-token-values":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-values\\detected-token-values.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-details%5Cdetected-token-details.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _detectedTokenValues = _interopRequireDefault(require("../detected-token-values/detected-token-values"));
var _detectedTokenAddress = _interopRequireDefault(require("../detected-token-address/detected-token-address"));
var _detectedTokenAggregators = _interopRequireDefault(require("../detected-token-aggregators/detected-token-aggregators"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _selectors = require("../../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DetectedTokenDetails = ({
  token,
  handleTokenSelection,
  tokensListDetected
}) => {
  var _token$address;
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const tokenData = tokenList[(_token$address = token.address) === null || _token$address === void 0 ? void 0 : _token$address.toLowerCase()];
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    className: "detected-token-details",
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "detected-token-details__identicon",
    address: token.address,
    diameter: 40
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.GRID,
    marginLeft: 2,
    className: "detected-token-details__data"
  }, /*#__PURE__*/_react.default.createElement(_detectedTokenValues.default, {
    token: token,
    handleTokenSelection: handleTokenSelection,
    tokensListDetected: tokensListDetected
  }), /*#__PURE__*/_react.default.createElement(_detectedTokenAddress.default, {
    tokenAddress: token.address
  }), (tokenData === null || tokenData === void 0 ? void 0 : tokenData.aggregators.length) > 0 && /*#__PURE__*/_react.default.createElement(_detectedTokenAggregators.default, {
    aggregators: tokenData === null || tokenData === void 0 ? void 0 : tokenData.aggregators
  })));
};
DetectedTokenDetails.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    aggregators: _propTypes.default.array
  }),
  handleTokenSelection: _propTypes.default.func.isRequired,
  tokensListDetected: _propTypes.default.object
};
var _default = DetectedTokenDetails;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-details\\detected-token-details.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-ignored-popover\\detected-token-ignored-popover.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-ignored-popover%5Cdetected-token-ignored-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _popover = _interopRequireDefault(require("../../../ui/popover"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DetectedTokenIgnoredPopover = ({
  partiallyIgnoreDetectedTokens,
  onCancelIgnore,
  handleClearTokensSelection
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "detected-token-ignored-popover__ignore-button",
    type: "secondary",
    onClick: onCancelIgnore
  }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "detected-token-ignored-popover__import-button",
    type: "primary",
    onClick: handleClearTokensSelection
  }, t('confirm')));
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: partiallyIgnoreDetectedTokens ? t('importSelectedTokens') : t('areYouSure'),
    className: (0, _classnames.default)('detected-token-ignored-popover', {
      'detected-token-ignored-popover--import': partiallyIgnoreDetectedTokens,
      'detected-token-ignored-popover--ignore': !partiallyIgnoreDetectedTokens
    }),
    footer: footer
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginTop: 0,
    marginRight: 5,
    marginBottom: 7,
    marginLeft: 5
  }, partiallyIgnoreDetectedTokens ? t('importSelectedTokensDescription') : t('ignoreTokenWarning')));
};
DetectedTokenIgnoredPopover.propTypes = {
  partiallyIgnoreDetectedTokens: _propTypes.default.bool.isRequired,
  onCancelIgnore: _propTypes.default.func.isRequired,
  handleClearTokensSelection: _propTypes.default.func.isRequired
};
var _default = DetectedTokenIgnoredPopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-ignored-popover\\detected-token-ignored-popover.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-selection-popover\\detected-token-selection-popover.js", {"../../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../detected-token-details/detected-token-details":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-details\\detected-token-details.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-selection-popover%5Cdetected-token-selection-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _metametrics = require("../../../../contexts/metametrics");
var _metametrics2 = require("../../../../../shared/constants/metametrics");
var _selectors = require("../../../../selectors");
var _popover = _interopRequireDefault(require("../../../ui/popover"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _detectedTokenDetails = _interopRequireDefault(require("../detected-token-details/detected-token-details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DetectedTokenSelectionPopover = ({
  tokensListDetected,
  handleTokenSelection,
  onImport,
  onIgnoreAll,
  setShowDetectedTokens,
  sortingBasedOnTokenSelection
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const detectedTokens = (0, _reactRedux.useSelector)(_selectors.getDetectedTokensInCurrentNetwork);
  const {
    selected: selectedTokens = []
  } = sortingBasedOnTokenSelection(tokensListDetected);
  const numOfTokensImporting = selectedTokens.length === detectedTokens.length ? `All` : `(${selectedTokens.length})`;
  const onClose = () => {
    setShowDetectedTokens(false);
    const eventTokensDetails = detectedTokens.map(({
      address,
      symbol
    }) => `${symbol} - ${address}`);
    trackEvent({
      event: _metametrics2.MetaMetricsEventName.TokenImportCanceled,
      category: _metametrics2.MetaMetricsEventCategory.Wallet,
      properties: {
        source_connection_method: _metametrics2.MetaMetricsTokenEventSource.Detected,
        chain_id: chainId,
        tokens: eventTokensDetails
      }
    });
  };
  const footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "detected-token-selection-popover__ignore-button",
    type: "secondary",
    onClick: () => onIgnoreAll()
  }, t('ignoreAll')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "detected-token-selection-popover__import-button",
    type: "primary",
    onClick: onImport,
    disabled: selectedTokens.length === 0
  }, t('importWithCount', [numOfTokensImporting])));
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "detected-token-selection-popover",
    title: detectedTokens.length === 1 ? t('tokenFoundTitle') : t('tokensFoundTitle', [detectedTokens.length]),
    onClose: onClose,
    footer: footer
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: 3
  }, detectedTokens.map((token, index) => {
    return /*#__PURE__*/_react.default.createElement(_detectedTokenDetails.default, {
      key: index,
      token: token,
      handleTokenSelection: handleTokenSelection,
      tokensListDetected: tokensListDetected
    });
  })));
};
DetectedTokenSelectionPopover.propTypes = {
  tokensListDetected: _propTypes.default.object,
  handleTokenSelection: _propTypes.default.func.isRequired,
  onIgnoreAll: _propTypes.default.func.isRequired,
  onImport: _propTypes.default.func.isRequired,
  setShowDetectedTokens: _propTypes.default.func.isRequired,
  sortingBasedOnTokenSelection: _propTypes.default.func.isRequired
};
var _default = DetectedTokenSelectionPopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-selection-popover\\detected-token-selection-popover.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-values\\detected-token-values.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useTokenFiatAmount":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../../../hooks/useTokenTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/check-box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-values%5Cdetected-token-values.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _checkBox = _interopRequireDefault(require("../../../ui/check-box"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _useTokenTracker = require("../../../../hooks/useTokenTracker");
var _useTokenFiatAmount = require("../../../../hooks/useTokenFiatAmount");
var _selectors = require("../../../../selectors");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DetectedTokenValues = ({
  token,
  handleTokenSelection,
  tokensListDetected
}) => {
  var _tokensWithBalances$;
  const [tokenSelection, setTokenSelection] = (0, _react.useState)(() => {
    var _tokensListDetected$t;
    return (_tokensListDetected$t = tokensListDetected[token.address]) === null || _tokensListDetected$t === void 0 ? void 0 : _tokensListDetected$t.selected;
  });
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const balanceString = (_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.string;
  const formattedFiatBalance = (0, _useTokenFiatAmount.useTokenFiatAmount)(token.address, balanceString, token.symbol);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  (0, _react.useEffect)(() => {
    var _tokensListDetected$t2;
    setTokenSelection((_tokensListDetected$t2 = tokensListDetected[token.address]) === null || _tokensListDetected$t2 === void 0 ? void 0 : _tokensListDetected$t2.selected);
  }, [tokensListDetected, token.address, tokenSelection, setTokenSelection]);
  const handleCheckBoxSelection = () => {
    setTokenSelection(!tokenSelection);
    handleTokenSelection(token);
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_FLEX,
    className: "detected-token-values"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 1
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    as: "h4"
  }, `${balanceString || '0'} ${token.symbol}`), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative
  }, useCurrencyRateCheck ? formattedFiatBalance || '$0' // since formattedFiatBalance will be when teh conversion rate is not obtained, should be replace the `$0` with `N/A`
  : formattedFiatBalance)), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "detected-token-values__checkbox"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    checked: tokenSelection,
    onClick: handleCheckBoxSelection
  })));
};
DetectedTokenValues.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    aggregators: _propTypes.default.array
  }),
  handleTokenSelection: _propTypes.default.func.isRequired,
  tokensListDetected: _propTypes.default.object
};
var _default = DetectedTokenValues;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-values\\detected-token-values.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./detected-token-ignored-popover/detected-token-ignored-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-ignored-popover\\detected-token-ignored-popover.js","./detected-token-selection-popover/detected-token-selection-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\detected-token\\detected-token-selection-popover\\detected-token-selection-popover.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _actions = require("../../../store/actions");
var _selectors = require("../../../selectors");
var _metametrics = require("../../../contexts/metametrics");
var _transaction = require("../../../../shared/constants/transaction");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _detectedTokenSelectionPopover = _interopRequireDefault(require("./detected-token-selection-popover/detected-token-selection-popover"));
var _detectedTokenIgnoredPopover = _interopRequireDefault(require("./detected-token-ignored-popover/detected-token-ignored-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const sortingBasedOnTokenSelection = tokensDetected => {
  return (0, _lodash.chain)(tokensDetected)
  // get the values
  .values()
  // create a new object with keys 'selected', 'deselected' and group the tokens
  .groupBy(token => token.selected ? 'selected' : 'deselected')
  // ditch the 'selected' property and get just the tokens'
  .mapValues(group => group.map(({
    token
  }) => {
    const {
      address,
      symbol,
      decimals,
      aggregators
    } = token;
    return {
      address,
      symbol,
      decimals,
      aggregators
    };
  }))
  // Exit the chain and get the underlying value, an object.
  .value();
};
const DetectedToken = ({
  setShowDetectedTokens
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const detectedTokens = (0, _reactRedux.useSelector)(_selectors.getDetectedTokensInCurrentNetwork);
  const [tokensListDetected, setTokensListDetected] = (0, _react.useState)(() => detectedTokens.reduce((tokenObj, token) => {
    tokenObj[token.address] = {
      token,
      selected: true
    };
    return tokenObj;
  }, {}));
  const [showDetectedTokenIgnoredPopover, setShowDetectedTokenIgnoredPopover] = (0, _react.useState)(false);
  const [partiallyIgnoreDetectedTokens, setPartiallyIgnoreDetectedTokens] = (0, _react.useState)(false);
  const importSelectedTokens = async selectedTokens => {
    selectedTokens.forEach(importedToken => {
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.TokenAdded,
        category: _metametrics2.MetaMetricsEventCategory.Wallet,
        sensitiveProperties: {
          token_symbol: importedToken.symbol,
          token_contract_address: importedToken.address,
          token_decimal_precision: importedToken.decimals,
          source_connection_method: _metametrics2.MetaMetricsTokenEventSource.Detected,
          token_standard: _transaction.TokenStandard.ERC20,
          asset_type: _transaction.AssetType.token,
          token_added_type: 'detected',
          chain_id: chainId
        }
      });
    });
    await dispatch((0, _actions.addImportedTokens)(selectedTokens));
    const tokenSymbols = selectedTokens.map(({
      symbol
    }) => symbol);
    dispatch((0, _actions.setNewTokensImported)(tokenSymbols.join(', ')));
  };
  const handleClearTokensSelection = async () => {
    const {
      selected: selectedTokens = [],
      deselected: deSelectedTokens = []
    } = sortingBasedOnTokenSelection(tokensListDetected);
    if (deSelectedTokens.length < detectedTokens.length) {
      await importSelectedTokens(selectedTokens);
    }
    const tokensDetailsList = deSelectedTokens.map(({
      symbol,
      address
    }) => `${symbol} - ${address}`);
    trackEvent({
      event: _metametrics2.MetaMetricsEventName.TokenHidden,
      category: _metametrics2.MetaMetricsEventCategory.Wallet,
      sensitiveProperties: {
        tokens: tokensDetailsList,
        location: _metametrics2.MetaMetricsEventLocation.TokenDetection,
        token_standard: _transaction.TokenStandard.ERC20,
        asset_type: _transaction.AssetType.token
      }
    });
    const deSelectedTokensAddresses = deSelectedTokens.map(({
      address
    }) => address);
    await dispatch((0, _actions.ignoreTokens)({
      tokensToIgnore: deSelectedTokensAddresses,
      dontShowLoadingIndicator: true
    }));
    setShowDetectedTokens(false);
    setPartiallyIgnoreDetectedTokens(false);
  };
  const handleTokenSelection = token => {
    setTokensListDetected(prevState => ({
      ...prevState,
      [token.address]: {
        ...prevState[token.address],
        selected: !prevState[token.address].selected
      }
    }));
  };
  const onImport = async () => {
    const {
      selected: selectedTokens = []
    } = sortingBasedOnTokenSelection(tokensListDetected);
    if (selectedTokens.length < detectedTokens.length) {
      setShowDetectedTokenIgnoredPopover(true);
      setPartiallyIgnoreDetectedTokens(true);
    } else {
      await importSelectedTokens(selectedTokens);
      setShowDetectedTokens(false);
    }
  };
  const onIgnoreAll = () => {
    const newTokensListDetected = {
      ...tokensListDetected
    };
    for (const tokenAddress of Object.keys(tokensListDetected)) {
      newTokensListDetected[tokenAddress].selected = false;
    }
    setTokensListDetected(newTokensListDetected);
    setShowDetectedTokenIgnoredPopover(true);
  };
  const onCancelIgnore = () => {
    setShowDetectedTokenIgnoredPopover(false);
    setPartiallyIgnoreDetectedTokens(false);
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showDetectedTokenIgnoredPopover && /*#__PURE__*/_react.default.createElement(_detectedTokenIgnoredPopover.default, {
    onCancelIgnore: onCancelIgnore,
    handleClearTokensSelection: handleClearTokensSelection,
    partiallyIgnoreDetectedTokens: partiallyIgnoreDetectedTokens
  }), detectedTokens.length > 0 && /*#__PURE__*/_react.default.createElement(_detectedTokenSelectionPopover.default, {
    detectedTokens: detectedTokens,
    tokensListDetected: tokensListDetected,
    handleTokenSelection: handleTokenSelection,
    onImport: onImport,
    onIgnoreAll: onIgnoreAll,
    setShowDetectedTokens: setShowDetectedTokens,
    sortingBasedOnTokenSelection: sortingBasedOnTokenSelection
  }));
};
DetectedToken.propTypes = {
  setShowDetectedTokens: _propTypes.default.func.isRequired
};
var _default = DetectedToken;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\dropdowns\\dropdown.js", {"../menu-droppo":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\menu-droppo.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdropdowns%5Cdropdown.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownMenuItem = exports.Dropdown = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _menuDroppo = _interopRequireDefault(require("../menu-droppo"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class Dropdown extends _react.Component {
  render() {
    const {
      containerClassName,
      isOpen,
      onClickOutside,
      style,
      innerStyle,
      children,
      useCssTransition
    } = this.props;
    const innerStyleDefaults = {
      borderRadius: '4px',
      padding: '8px 16px',
      background: 'var(--color-background-default)',
      boxShadow: 'var(--shadow-size-sm) var(--color-shadow-default)',
      ...innerStyle
    };
    return /*#__PURE__*/_react.default.createElement(_menuDroppo.default, {
      containerClassName: containerClassName,
      useCssTransition: useCssTransition,
      isOpen: isOpen,
      zIndex: 55,
      onClickOutside: onClickOutside,
      style: style,
      innerStyle: innerStyleDefaults
    }, /*#__PURE__*/_react.default.createElement("style", null, `
            li.dropdown-menu-item:hover {
              color:var(--color-text-default);
              background-color: var(--color-background-default-hover);
              border-radius: 4px;
            }
          `), children);
  }
}
exports.Dropdown = Dropdown;
Dropdown.defaultProps = {
  useCssTransition: false
};
Dropdown.propTypes = {
  isOpen: _propTypes.default.bool.isRequired,
  children: _propTypes.default.node,
  style: _propTypes.default.object.isRequired,
  onClickOutside: _propTypes.default.func,
  innerStyle: _propTypes.default.object,
  useCssTransition: _propTypes.default.bool,
  containerClassName: _propTypes.default.string
};
class DropdownMenuItem extends _react.Component {
  render() {
    const {
      onClick,
      closeMenu,
      children,
      style
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("li", {
      className: "dropdown-menu-item",
      "data-testid": "dropdown-menu-item",
      onClick: () => {
        onClick();
        closeMenu();
      },
      onKeyPress: event => {
        if (event.key === 'Enter') {
          onClick();
          closeMenu();
        }
      },
      style: {
        listStyle: 'none',
        padding: '8px 0px',
        fontSize: '18px',
        fontStyle: 'normal',
        cursor: 'pointer',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'center',
        ...style
      },
      tabIndex: "0"
    }, children);
  }
}
exports.DropdownMenuItem = DropdownMenuItem;
DropdownMenuItem.propTypes = {
  closeMenu: _propTypes.default.func.isRequired,
  onClick: _propTypes.default.func.isRequired,
  children: _propTypes.default.node,
  style: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\dropdowns\\dropdown.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\dropdowns\\network-dropdown.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/modules/network.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\network.utils.ts","../../../ducks/alerts/invalid-custom-network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\alerts\\invalid-custom-network.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../component-library/button-icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/color-indicator":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\color-indicator\\index.js","./dropdown":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\dropdowns\\dropdown.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cdropdowns%5Cnetwork-dropdown.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _redux = require("redux");
var _lodash = require("lodash");
var _button = _interopRequireDefault(require("../../ui/button"));
var actions = _interopRequireWildcard(require("../../../store/actions"));
var _invalidCustomNetwork = require("../../../ducks/alerts/invalid-custom-network");
var _metamask = require("../../../ducks/metamask/metamask");
var _network = require("../../../../shared/constants/network");
var _network2 = require("../../../../shared/modules/network.utils");
var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));
var _designSystem = require("../../../helpers/constants/design-system");
var _selectors = require("../../../selectors");
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _metametrics = require("../../../../shared/constants/metametrics");
var _routes = require("../../../helpers/constants/routes");
var _deprecated = require("../../component-library/button-icon/deprecated");
var _componentLibrary = require("../../component-library");
var _dropdown = require("./dropdown");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// classes from nodes of the toggle element.
const notToggleElementClassnames = ['menu-icon', 'network-name', 'network-indicator', 'network-caret', 'network-component', 'modal-container__footer-button'];
const DROP_DOWN_MENU_ITEM_STYLE = {
  fontSize: '16px',
  lineHeight: '20px',
  padding: '16px'
};
function mapStateToProps(state) {
  return {
    providerConfig: (0, _metamask.getProviderConfig)(state),
    shouldShowTestNetworks: (0, _selectors.getShowTestNetworks)(state),
    networkConfigurations: state.metamask.networkConfigurations,
    networkDropdownOpen: state.appState.networkDropdownOpen,
    showTestnetMessageInDropdown: state.metamask.showTestnetMessageInDropdown
  };
}
function mapDispatchToProps(dispatch) {
  return {
    setProviderType: type => {
      dispatch(actions.setProviderType(type));
    },
    setActiveNetwork: networkConfigurationId => {
      dispatch(actions.setActiveNetwork(networkConfigurationId));
    },
    upsertNetworkConfiguration: (...args) => dispatch(actions.upsertNetworkConfiguration(...args)),
    hideNetworkDropdown: () => dispatch(actions.hideNetworkDropdown()),
    displayInvalidCustomNetworkAlert: networkName => {
      dispatch((0, _invalidCustomNetwork.openAlert)(networkName));
    },
    showConfirmDeleteNetworkModal: ({
      target,
      onConfirm
    }) => {
      return dispatch(actions.showModal({
        name: 'CONFIRM_DELETE_NETWORK',
        target,
        onConfirm
      }));
    },
    hideTestNetMessage: () => actions.hideTestNetMessage()
  };
}
class NetworkDropdown extends _react.Component {
  handleClick(newProviderType) {
    const {
      providerConfig: {
        type: providerType
      },
      setProviderType
    } = this.props;
    const {
      trackEvent
    } = this.context;
    trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Navigation,
      event: _metametrics.MetaMetricsEventName.NavNetworkSwitched,
      properties: {
        from_network: providerType,
        to_network: newProviderType
      }
    });
    setProviderType(newProviderType);
  }
  renderAddCustomButton() {
    const {
      onAddClick
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "network__add-network-button"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: () => {
        if (onAddClick) {
          onAddClick();
        } else {
          (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? global.platform.openExtensionInBrowser(_routes.ADD_POPULAR_CUSTOM_NETWORK) : this.props.history.push(_routes.ADD_POPULAR_CUSTOM_NETWORK);
        }
        this.props.hideNetworkDropdown();
      }
    }, this.context.t('addNetwork')));
  }
  renderCustomRpcList(networkConfigurations, providerConfig, opts = {}) {
    return Object.entries(networkConfigurations).map(([networkConfigurationId, networkConfiguration]) => {
      const {
        rpcUrl,
        chainId,
        nickname = '',
        id
      } = networkConfiguration;
      const isCurrentRpcTarget = providerConfig.type === _network.NETWORK_TYPES.RPC && rpcUrl === providerConfig.rpcUrl;
      return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
        key: `common${rpcUrl}`,
        closeMenu: () => this.props.hideNetworkDropdown(),
        onClick: () => {
          if ((0, _network2.isPrefixedFormattedHexString)(chainId)) {
            this.props.setActiveNetwork(networkConfigurationId);
          } else {
            this.props.displayInvalidCustomNetworkAlert(nickname || rpcUrl);
          }
        },
        style: {
          fontSize: '16px',
          lineHeight: '20px',
          padding: '16px'
        }
      }, isCurrentRpcTarget ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Check,
        color: _designSystem.IconColor.successDefault
      }) : /*#__PURE__*/_react.default.createElement("div", {
        className: "network-check__transparent"
      }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
        color: opts.isLocalHost ? 'localhost' : _designSystem.IconColor.iconMuted,
        size: _designSystem.Size.LG,
        type: _colorIndicator.default.TYPES.FILLED
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: "network-name-item",
        "data-testid": `${nickname}-network-item`,
        style: {
          color: isCurrentRpcTarget ? 'var(--color-text-default)' : 'var(--color-text-alternative)'
        }
      }, nickname || rpcUrl), isCurrentRpcTarget ? null : /*#__PURE__*/_react.default.createElement(_deprecated.ButtonIcon, {
        className: "delete",
        iconName: _componentLibrary.IconName.Close,
        size: _componentLibrary.IconSize.Sm,
        ariaLabel: this.context.t('delete'),
        onClick: e => {
          e.stopPropagation();
          this.props.showConfirmDeleteNetworkModal({
            target: id,
            onConfirm: () => undefined
          });
        }
      }));
    });
  }
  getNetworkName() {
    const {
      providerConfig
    } = this.props;
    const providerName = providerConfig.type;
    const {
      t
    } = this.context;
    switch (providerName) {
      case _network.NETWORK_TYPES.MAINNET:
        return t('mainnet');
      case _network.NETWORK_TYPES.GOERLI:
        return t('goerli');
      case _network.NETWORK_TYPES.SEPOLIA:
        return t('sepolia');
      case _network.NETWORK_TYPES.LINEA_TESTNET:
        return t('lineatestnet');
      case _network.NETWORK_TYPES.LOCALHOST:
        return t('localhost');
      default:
        return providerConfig.nickname || t('unknownNetwork');
    }
  }
  renderNetworkEntry(network) {
    const {
      providerConfig: {
        type: providerType
      }
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
      key: network,
      closeMenu: this.props.hideNetworkDropdown,
      onClick: () => this.handleClick(network),
      style: DROP_DOWN_MENU_ITEM_STYLE
    }, providerType === network ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Check,
      color: _designSystem.IconColor.successDefault
    }) : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-check__transparent"
    }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: network,
      size: _designSystem.Size.LG,
      type: _colorIndicator.default.TYPES.FILLED
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "network-name-item",
      "data-testid": `${network}-network-item`,
      style: {
        color: providerType === network ? 'var(--color-text-default)' : 'var(--color-text-alternative)'
      }
    }, this.context.t(network)));
  }
  renderNonInfuraDefaultNetwork(networkConfigurations, network) {
    const {
      providerConfig,
      setActiveNetwork,
      upsertNetworkConfiguration
    } = this.props;
    const {
      chainId,
      ticker,
      blockExplorerUrl
    } = _network.BUILT_IN_NETWORKS[network];
    const networkName = _network.NETWORK_TO_NAME_MAP[network];
    const rpcUrl = _network.CHAIN_ID_TO_RPC_URL_MAP[chainId];
    const isCurrentRpcTarget = providerConfig.type === _network.NETWORK_TYPES.RPC && rpcUrl === providerConfig.rpcUrl;
    return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
      key: network,
      closeMenu: this.props.hideNetworkDropdown,
      onClick: async () => {
        const networkConfiguration = (0, _lodash.pickBy)(networkConfigurations, config => config.rpcUrl === _network.CHAIN_ID_TO_RPC_URL_MAP[chainId]);
        let configurationId = null;
        // eslint-disable-next-line no-extra-boolean-cast, no-implicit-coercion
        if (!!networkConfiguration) {
          configurationId = await upsertNetworkConfiguration({
            rpcUrl,
            ticker,
            chainId,
            nickname: networkName,
            rpcPrefs: {
              blockExplorerUrl
            }
          }, {
            setActive: true,
            source: _metametrics.MetaMetricsNetworkEventSource.CustomNetworkForm
          });
        }
        setActiveNetwork(configurationId);
      },
      style: DROP_DOWN_MENU_ITEM_STYLE
    }, isCurrentRpcTarget ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Check,
      color: _designSystem.IconColor.successDefault
    }) : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-check__transparent"
    }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: network,
      size: _designSystem.Size.LG,
      type: _colorIndicator.default.TYPES.FILLED
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "network-name-item",
      "data-testid": `${network}-network-item`,
      style: {
        color: providerConfig.type === network ? 'var(--color-text-default)' : 'var(--color-text-alternative)'
      }
    }, this.context.t(network)));
  }
  render() {
    const {
      history,
      hideElementsForOnboarding,
      hideNetworkDropdown,
      shouldShowTestNetworks,
      showTestnetMessageInDropdown,
      hideTestNetMessage,
      networkConfigurations
    } = this.props;
    const rpcListDetailWithoutLocalHostAndLinea = (0, _lodash.pickBy)(networkConfigurations, config => config.rpcUrl !== _network.LOCALHOST_RPC_URL && config.rpcUrl !== _network.LINEA_TESTNET_RPC_URL);
    const rpcListDetailForLocalHost = (0, _lodash.pickBy)(networkConfigurations, config => config.rpcUrl === _network.LOCALHOST_RPC_URL);
    const isOpen = this.props.networkDropdownOpen;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_dropdown.Dropdown, {
      isOpen: isOpen,
      onClickOutside: event => {
        const {
          classList
        } = event.target;
        const isInClassList = className => classList.contains(className);
        const notToggleElementIndex = notToggleElementClassnames.findIndex(isInClassList);
        if (notToggleElementIndex === -1) {
          event.stopPropagation();
          hideNetworkDropdown();
        }
      },
      containerClassName: "network-droppo",
      zIndex: 55,
      style: this.props.dropdownStyles || {
        position: 'absolute',
        top: '58px',
        width: '309px',
        zIndex: '55'
      },
      innerStyle: {
        padding: '16px 0'
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-header"
    }, hideElementsForOnboarding ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-title"
    }, t('networks')), hideElementsForOnboarding ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-divider"
    }), showTestnetMessageInDropdown && !hideElementsForOnboarding ? /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-content"
    }, t('toggleTestNetworks', [/*#__PURE__*/_react.default.createElement("a", {
      href: "#",
      key: "advancedSettingsLink",
      className: "network-dropdown-content--link",
      onClick: e => {
        e.preventDefault();
        hideNetworkDropdown();
        history.push(`${_routes.ADVANCED_ROUTE}#show-testnets`);
      }
    }, t('showHide'))]), /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: hideTestNetMessage,
      className: "network-dropdown-content--dismiss"
    }, t('dismiss'))) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-list"
    }, this.renderNetworkEntry(_network.NETWORK_TYPES.MAINNET), this.renderCustomRpcList(rpcListDetailWithoutLocalHostAndLinea, this.props.providerConfig), shouldShowTestNetworks && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.renderNetworkEntry(_network.NETWORK_TYPES.GOERLI), this.renderNetworkEntry(_network.NETWORK_TYPES.SEPOLIA), _network.SHOULD_SHOW_LINEA_TESTNET_NETWORK && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.renderNonInfuraDefaultNetwork(networkConfigurations, _network.NETWORK_TYPES.LINEA_TESTNET)), this.renderCustomRpcList(rpcListDetailForLocalHost, this.props.providerConfig, {
      isLocalHost: true
    }))), this.renderAddCustomButton());
  }
}
_defineProperty(NetworkDropdown, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
_defineProperty(NetworkDropdown, "propTypes", {
  providerConfig: _propTypes.default.shape({
    nickname: _propTypes.default.string,
    rpcUrl: _propTypes.default.string,
    type: _propTypes.default.string,
    ticker: _propTypes.default.string
  }).isRequired,
  setProviderType: _propTypes.default.func.isRequired,
  setActiveNetwork: _propTypes.default.func.isRequired,
  hideNetworkDropdown: _propTypes.default.func.isRequired,
  networkConfigurations: _propTypes.default.object.isRequired,
  shouldShowTestNetworks: _propTypes.default.bool,
  networkDropdownOpen: _propTypes.default.bool.isRequired,
  displayInvalidCustomNetworkAlert: _propTypes.default.func.isRequired,
  showConfirmDeleteNetworkModal: _propTypes.default.func.isRequired,
  showTestnetMessageInDropdown: _propTypes.default.bool.isRequired,
  hideTestNetMessage: _propTypes.default.func.isRequired,
  history: _propTypes.default.object,
  dropdownStyles: _propTypes.default.object,
  hideElementsForOnboarding: _propTypes.default.bool,
  onAddClick: _propTypes.default.func,
  upsertNetworkConfiguration: _propTypes.default.func.isRequired
});
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(NetworkDropdown);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\dropdowns\\network-dropdown.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-display\\edit-gas-display.component.js", {"../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/actionable-message/actionable-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/error-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\error-message\\index.js","../../ui/info-tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../advanced-gas-controls/advanced-gas-controls.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\advanced-gas-controls\\advanced-gas-controls.component.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-display%5Cedit-gas-display.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasDisplay;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _gas = require("../../../../shared/constants/gas");
var _button = _interopRequireDefault(require("../../ui/button"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
var _confirmTx = require("../../../helpers/utils/confirm-tx.util");
var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip"));
var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));
var _advancedGasControls = _interopRequireDefault(require("../advanced-gas-controls/advanced-gas-controls.component"));
var _actionableMessage = _interopRequireDefault(require("../../ui/actionable-message/actionable-message"));
var _i18n = require("../../../contexts/i18n");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function EditGasDisplay({
  mode = _gas.EditGasModes.modifyInPlace,
  estimatedMinimumNative,
  transaction,
  gasPrice,
  setGasPrice,
  gasLimit,
  setGasLimit,
  properGasLimit,
  dappSuggestedGasFeeAcknowledged,
  setDappSuggestedGasFeeAcknowledged,
  onManualChange,
  minimumGasLimit,
  balanceError,
  gasErrors,
  txParamsHaveBeenCustomized
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const scrollRef = (0, _react.useRef)(null);
  const dappSuggestedAndTxParamGasFeesAreTheSame = (0, _confirmTx.areDappSuggestedAndTxParamGasFeesTheSame)(transaction);
  const requireDappAcknowledgement = Boolean((transaction === null || transaction === void 0 ? void 0 : transaction.dappSuggestedGasFees) && !dappSuggestedGasFeeAcknowledged && dappSuggestedAndTxParamGasFeesAreTheSame);
  let warningMessage;
  if (gasLimit !== undefined && properGasLimit !== undefined && new _bignumber.default(gasLimit).lessThan(new _bignumber.default(properGasLimit))) {
    warningMessage = t('gasLimitRecommended', [properGasLimit]);
  }
  const showTopError = balanceError && txParamsHaveBeenCustomized;
  let errorKey;
  if (balanceError) {
    errorKey = 'insufficientFunds';
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__content"
  }, showTopError && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__warning"
  }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: errorKey
  })), warningMessage && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__warning"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "actionable-message--warning",
    message: warningMessage,
    iconFillColor: "var(--color-warning-default)",
    useIcon: true
  })), requireDappAcknowledgement && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__dapp-acknowledgement-warning"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "actionable-message--warning",
    message: t('gasDisplayDappWarning', [transaction.origin]),
    iconFillColor: "var(--color-warning-default)",
    useIcon: true
  })), mode === _gas.EditGasModes.speedUp && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__top-tooltip"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold
  }, t('speedUpTooltipText'), ' ', /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('speedUpExplanation')
  }))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.displayMd,
    as: "h1",
    textAlign: _designSystem.TextAlign.Center
  }, estimatedMinimumNative), requireDappAcknowledgement && /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "edit-gas-display__dapp-acknowledgement-button",
    onClick: () => setDappSuggestedGasFeeAcknowledged(true)
  }, t('gasDisplayAcknowledgeDappButtonText')), !requireDappAcknowledgement && /*#__PURE__*/_react.default.createElement(_advancedGasControls.default, {
    gasLimit: gasLimit,
    setGasLimit: setGasLimit,
    gasPrice: gasPrice,
    setGasPrice: setGasPrice,
    onManualChange: onManualChange,
    minimumGasLimit: minimumGasLimit,
    gasErrors: gasErrors
  })), /*#__PURE__*/_react.default.createElement("div", {
    ref: scrollRef,
    className: "edit-gas-display__scroll-bottom"
  }));
}
EditGasDisplay.propTypes = {
  mode: _propTypes.default.oneOf(Object.values(_gas.EditGasModes)),
  estimatedMinimumNative: _propTypes.default.string,
  gasPrice: _propTypes.default.string,
  setGasPrice: _propTypes.default.func,
  gasLimit: _propTypes.default.number,
  setGasLimit: _propTypes.default.func,
  properGasLimit: _propTypes.default.number,
  dappSuggestedGasFeeAcknowledged: _propTypes.default.bool,
  setDappSuggestedGasFeeAcknowledged: _propTypes.default.func,
  transaction: _propTypes.default.object,
  onManualChange: _propTypes.default.func,
  minimumGasLimit: _propTypes.default.string,
  balanceError: _propTypes.default.bool,
  gasErrors: _propTypes.default.object,
  txParamsHaveBeenCustomized: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-display\\edit-gas-display.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-display\\index.js", {"./edit-gas-display.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-display\\edit-gas-display.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-display%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasDisplay.default;
  }
});
var _editGasDisplay = _interopRequireDefault(require("./edit-gas-display.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-display\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\edit-gas-fee-button.js", {"../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/transaction-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTransactionEventFragment":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionEventFragment.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/info-tooltip/info-tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-button%5Cedit-gas-fee-button.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasFeeButton;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _gas = require("../../../../shared/constants/gas");
var _designSystem = require("../../../helpers/constants/design-system");
var _gas2 = require("../../../helpers/constants/gas");
var _gasFee = require("../../../contexts/gasFee");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _useTransactionEventFragment = require("../../../hooks/useTransactionEventFragment");
var _transactionModal = require("../../../contexts/transaction-modal");
var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip/info-tooltip"));
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function EditGasFeeButton({
  userAcknowledgedGasMissing
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    editGasMode,
    gasLimit,
    hasSimulationError,
    estimateUsed,
    maxFeePerGas,
    maxPriorityFeePerGas,
    supportsEIP1559,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const {
    updateTransactionEventFragment
  } = (0, _useTransactionEventFragment.useTransactionEventFragment)();
  const {
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const editEnabled = !hasSimulationError || userAcknowledgedGasMissing === true;
  if (!supportsEIP1559 || !estimateUsed || !editEnabled) {
    return null;
  }
  let icon = estimateUsed;
  let title = estimateUsed;
  if (estimateUsed === _gas.PriorityLevels.high && editGasMode === _gas.EditGasModes.swaps) {
    icon = 'swapSuggested';
    title = 'swapSuggested';
  } else if (estimateUsed === _gas.PriorityLevels.tenPercentIncreased) {
    icon = undefined;
    title = 'tenPercentIncreased';
  }
  const openEditGasFeeModal = () => {
    updateTransactionEventFragment({
      gas_edit_attempted: 'basic'
    });
    openModal('editGasFee');
  };
  const openAdvancedGasFeeModal = () => {
    updateTransactionEventFragment({
      gas_edit_attempted: 'advanced'
    });
    openModal('advancedGasFee');
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-button"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: openEditGasFeeModal,
    "data-testid": "edit-gas-fee-button"
  }, icon && /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-button__icon"
  }, _gas2.PRIORITY_LEVEL_ICON_MAP[icon]), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-button__label"
  }, t(title)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.ArrowRight,
    color: _designSystem.Color.primaryDefault,
    size: _componentLibrary.IconSize.Xs
  })), estimateUsed === 'custom' && /*#__PURE__*/_react.default.createElement("button", {
    onClick: openAdvancedGasFeeModal
  }, t('edit')), estimateUsed === 'dappSuggested' && /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-gas-fee-button__tooltip"
    }, (transaction === null || transaction === void 0 ? void 0 : transaction.origin) && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6",
      color: _designSystem.TextColor.textAlternative
    }, t('dappSuggestedTooltip', [transaction.origin])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement("b", null, t('maxBaseFee')), " ", maxFeePerGas), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement("b", null, t('maxPriorityFee')), " ", maxPriorityFeePerGas), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement("b", null, t('gasLimit')), " ", gasLimit)),
    position: "top"
  }));
}
EditGasFeeButton.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-button\\edit-gas-fee-button.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\index.js", {"./edit-gas-fee-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\edit-gas-fee-button.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-button%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasFeeButton.default;
  }
});
var _editGasFeeButton = _interopRequireDefault(require("./edit-gas-fee-button"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-button\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js", {"../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/transaction-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/error-keys":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\error-keys.js","../../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/error-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\error-message\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../app-loading-spinner":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\app-loading-spinner\\index.js","./edit-gas-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\index.js","./network-statistics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-fee-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _gas = require("../../../../shared/constants/gas");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _transactionModal = require("../../../contexts/transaction-modal");
var _box = _interopRequireDefault(require("../../ui/box"));
var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _designSystem = require("../../../helpers/constants/design-system");
var _errorKeys = require("../../../helpers/constants/error-keys");
var _gasFee = require("../../../contexts/gasFee");
var _appLoadingSpinner = _interopRequireDefault(require("../app-loading-spinner"));
var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));
var _componentLibrary = require("../../component-library");
var _editGasItem = _interopRequireDefault(require("./edit-gas-item"));
var _networkStatistics = _interopRequireDefault(require("./network-statistics"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const EditGasFeePopover = () => {
  const {
    balanceError,
    editGasMode
  } = (0, _gasFee.useGasFeeContext)();
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    closeAllModals,
    closeModal,
    currentModal,
    openModalCount
  } = (0, _transactionModal.useTransactionModalContext)();
  if (currentModal !== 'editGasFee') {
    return null;
  }
  let popupTitle = 'editGasFeeModalTitle';
  if (editGasMode === _gas.EditGasModes.cancel) {
    popupTitle = 'editCancellationGasFeeModalTitle';
  } else if (editGasMode === _gas.EditGasModes.speedUp) {
    popupTitle = 'editSpeedUpEditGasFeeModalTitle';
  }
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: t(popupTitle)
    // below logic ensures that back button is visible only if there are other modals open before this.
    ,
    onBack: openModalCount === 1 ? undefined : () => closeModal(['editGasFee']),
    onClose: closeAllModals,
    className: "edit-gas-fee-popover"
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_appLoadingSpinner.default, null), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__wrapper"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, null, balanceError && /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content__header"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-option"
  }, t('gasOption')), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-time"
  }, editGasMode !== _gas.EditGasModes.swaps && t('time')), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-max-fee"
  }, t('maxFee'))), (editGasMode === _gas.EditGasModes.cancel || editGasMode === _gas.EditGasModes.speedUp) && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.tenPercentIncreased
  }), editGasMode === _gas.EditGasModes.modifyInPlace && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.low
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.medium
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.high
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content__separator"
  }), editGasMode === _gas.EditGasModes.modifyInPlace && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.dAppSuggested
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.custom
  })), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_networkStatistics.default, null), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    className: "edit-gas-fee-popover__know-more",
    align: "center",
    color: _designSystem.TextColor.textAlternative,
    tag: _designSystem.TextVariant.bodyMd,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('learnMoreAboutGas', [/*#__PURE__*/_react.default.createElement("a", {
    key: "learnMoreLink",
    target: "_blank",
    rel: "noopener noreferrer",
    href: _zendeskUrl.default.USER_GUIDE_GAS
  }, t('learnMore'))])))))));
};
var _default = EditGasFeePopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\edit-gas-item.js", {"../../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../../contexts/transaction-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../../helpers/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../hooks/useTransactionEventFragment":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionEventFragment.js","../../../ui/info-tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../../ui/loading-heartbeat":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js","../../user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../edit-gas-tooltip/edit-gas-tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-tooltip\\edit-gas-tooltip.js","./useGasItemFeeDetails":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useGasItemFeeDetails.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-item%5Cedit-gas-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _gas = require("../../../../../shared/constants/gas");
var _gas2 = require("../../../../helpers/constants/gas");
var _common = require("../../../../helpers/constants/common");
var _util = require("../../../../helpers/utils/util");
var _gasFee = require("../../../../contexts/gasFee");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _useTransactionEventFragment = require("../../../../hooks/useTransactionEventFragment");
var _transactionModal = require("../../../../contexts/transaction-modal");
var _infoTooltip = _interopRequireDefault(require("../../../ui/info-tooltip"));
var _loadingHeartbeat = _interopRequireDefault(require("../../../ui/loading-heartbeat"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../user-preferenced-currency-display"));
var _editGasTooltip = _interopRequireDefault(require("../edit-gas-tooltip/edit-gas-tooltip"));
var _useGasItemFeeDetails = require("./useGasItemFeeDetails");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const getTitleAndIcon = (priorityLevel, editGasMode) => {
  let icon = priorityLevel;
  let title = priorityLevel;
  if (priorityLevel === _gas.PriorityLevels.dAppSuggested) {
    title = 'dappSuggestedShortLabel';
  } else if (priorityLevel === _gas.PriorityLevels.tenPercentIncreased) {
    icon = null;
    title = 'tenPercentIncreased';
  } else if (priorityLevel === _gas.PriorityLevels.high && editGasMode === _gas.EditGasModes.swaps) {
    icon = 'swapSuggested';
    title = 'swapSuggested';
  }
  return {
    title,
    icon
  };
};
const EditGasItem = ({
  priorityLevel
}) => {
  const {
    editGasMode,
    estimateUsed,
    gasLimit,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const {
    updateTransactionEventFragment
  } = (0, _useTransactionEventFragment.useTransactionEventFragment)();
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    closeModal,
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const {
    dappSuggestedGasFees
  } = transaction;
  const {
    // for cancel or speedup estimateGreaterThaGasUse is true if previous gas used
    // was more than estimate for the priorityLevel
    estimateGreaterThanGasUse,
    hexMaximumTransactionFee,
    maxFeePerGas,
    maxPriorityFeePerGas,
    minWaitTime
  } = (0, _useGasItemFeeDetails.useGasItemFeeDetails)(priorityLevel);
  if (priorityLevel === _gas.PriorityLevels.dAppSuggested && !(dappSuggestedGasFees !== null && dappSuggestedGasFees !== void 0 && dappSuggestedGasFees.maxFeePerGas) && !(dappSuggestedGasFees !== null && dappSuggestedGasFees !== void 0 && dappSuggestedGasFees.gasPrice)) {
    return null;
  }
  const onOptionSelect = () => {
    if (priorityLevel === _gas.PriorityLevels.custom) {
      updateTransactionEventFragment({
        properties: {
          gas_edit_attempted: 'advanced'
        }
      });
      openModal('advancedGasFee');
    } else {
      updateTransactionEventFragment({
        properties: {
          gas_edit_type: 'basic'
        }
      });
      closeModal(['editGasFee']);
      if (priorityLevel === _gas.PriorityLevels.tenPercentIncreased) {
        updateTransactionToTenPercentIncreasedGasFee();
      } else if (priorityLevel === _gas.PriorityLevels.dAppSuggested) {
        updateTransactionUsingDAPPSuggestedValues();
      } else {
        updateTransactionUsingEstimate(priorityLevel);
      }
    }
  };
  const {
    title,
    icon
  } = getTitleAndIcon(priorityLevel, editGasMode);
  return /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)('edit-gas-item', {
      'edit-gas-item--selected': priorityLevel === estimateUsed,
      'edit-gas-item--disabled': estimateGreaterThanGasUse
    }),
    onClick: onOptionSelect,
    "aria-label": priorityLevel,
    autoFocus: priorityLevel === estimateUsed,
    disabled: estimateGreaterThanGasUse,
    "data-testid": `edit-gas-fee-item-${priorityLevel}`
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-item__name"
  }, icon && /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__icon edit-gas-item__icon-${priorityLevel}`
  }, _gas2.PRIORITY_LEVEL_ICON_MAP[icon]), t(title)), /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__time-estimate edit-gas-item__time-estimate-${priorityLevel}`
  }, editGasMode !== _gas.EditGasModes.swaps && (minWaitTime ? (0, _util.toHumanReadableTime)(t, minWaitTime) : '--')), /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__fee-estimate edit-gas-item__fee-estimate-${priorityLevel}`
  }, hexMaximumTransactionFee ? /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-item__maxfee"
  }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
    backgroundColor: priorityLevel === estimateUsed ? 'var(--color-background-alternative)' : 'var(--color-background-default)',
    estimateUsed: priorityLevel
  }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    key: "editGasSubTextFeeAmount",
    type: _common.PRIMARY,
    value: hexMaximumTransactionFee
  })) : '--'), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-item__tooltip",
    "data-testid": "gas-tooltip"
  }, /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement(_editGasTooltip.default, {
      t: t,
      priorityLevel: priorityLevel,
      maxFeePerGas: maxFeePerGas,
      maxPriorityFeePerGas: maxPriorityFeePerGas,
      editGasMode: editGasMode,
      gasLimit: gasLimit,
      transaction: transaction,
      estimateGreaterThanGasUse: estimateGreaterThanGasUse
    }),
    position: "top"
  })));
};
EditGasItem.propTypes = {
  priorityLevel: _propTypes.default.string
};
var _default = EditGasItem;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\edit-gas-item.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\index.js", {"./edit-gas-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\edit-gas-item.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasItem.default;
  }
});
var _editGasItem = _interopRequireDefault(require("./edit-gas-item"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useCustomTimeEstimate.js", {"../../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-item%5CuseCustomTimeEstimate.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCustomTimeEstimate = void 0;
var _react = require("react");
var _reactRedux = require("react-redux");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _gas = require("../../../../../shared/constants/gas");
var _metamask = require("../../../../ducks/metamask/metamask");
var _actions = require("../../../../store/actions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const useCustomTimeEstimate = ({
  gasFeeEstimates,
  maxFeePerGas,
  maxPriorityFeePerGas
}) => {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const [customEstimatedTime, setCustomEstimatedTime] = (0, _react.useState)(null);
  const returnNoEstimates = isGasEstimatesLoading || gasEstimateType !== _gas.GasEstimateTypes.feeMarket || !maxPriorityFeePerGas;

  // If the user has chosen a value lower than the low gas fee estimate,
  // We'll need to use the useEffect hook below to make a call to calculate
  // the time to show
  const isUnknownLow = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low) && Number(maxPriorityFeePerGas) < Number(gasFeeEstimates.low.suggestedMaxPriorityFeePerGas);
  (0, _react.useEffect)(() => {
    if (isGasEstimatesLoading || gasEstimateType !== _gas.GasEstimateTypes.feeMarket || !maxPriorityFeePerGas) {
      return;
    }
    if (isUnknownLow) {
      // getGasFeeTimeEstimate requires parameters in string format
      (0, _actions.getGasFeeTimeEstimate)(new _bignumber.default(maxPriorityFeePerGas, 10).toString(10), new _bignumber.default(maxFeePerGas, 10).toString(10)).then(result => {
        setCustomEstimatedTime(result);
      });
    }
  }, [gasEstimateType, isUnknownLow, isGasEstimatesLoading, maxFeePerGas, maxPriorityFeePerGas, returnNoEstimates]);
  if (returnNoEstimates) {
    return {};
  }
  const {
    low = {},
    medium = {},
    high = {}
  } = gasFeeEstimates;
  let waitTimeEstimate = '';
  if (isUnknownLow && customEstimatedTime && customEstimatedTime !== 'unknown' && (customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound) !== 'unknown') {
    waitTimeEstimate = Number(customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound);
  } else if (Number(maxPriorityFeePerGas) >= Number(medium.suggestedMaxPriorityFeePerGas)) {
    waitTimeEstimate = high.minWaitTimeEstimate;
  } else {
    waitTimeEstimate = low.maxWaitTimeEstimate;
  }
  return {
    waitTimeEstimate
  };
};
exports.useCustomTimeEstimate = useCustomTimeEstimate;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useCustomTimeEstimate.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useGasItemFeeDetails.js", {"../../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../../shared/modules/gas.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\gas.utils.js","../../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../../helpers/utils/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./useCustomTimeEstimate":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useCustomTimeEstimate.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-item%5CuseGasItemFeeDetails.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasItemFeeDetails = void 0;
var _react = require("react");
var _reactRedux = require("react-redux");
var _gas = require("../../../../../shared/constants/gas");
var _gas2 = require("../../../../../shared/modules/gas.utils");
var _gas3 = require("../../../../helpers/utils/gas");
var _selectors = require("../../../../selectors");
var _gasFee = require("../../../../contexts/gasFee");
var _conversion = require("../../../../../shared/modules/conversion.utils");
var _useCustomTimeEstimate = require("./useCustomTimeEstimate");
const useGasItemFeeDetails = priorityLevel => {
  const {
    editGasMode,
    estimateUsed,
    gasFeeEstimates,
    gasLimit,
    maxFeePerGas: maxFeePerGasValue,
    maxPriorityFeePerGas: maxPriorityFeePerGasValue,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const [estimateGreaterThanGasUse, setEstimateGreaterThanGasUse] = (0, _react.useState)(false);
  const advancedGasFeeValues = (0, _reactRedux.useSelector)(_selectors.getAdvancedGasFeeValues);
  let maxFeePerGas;
  let maxPriorityFeePerGas;
  let minWaitTime;
  const {
    dappSuggestedGasFees
  } = transaction;
  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates[priorityLevel]) {
    maxFeePerGas = gasFeeEstimates[priorityLevel].suggestedMaxFeePerGas;
    maxPriorityFeePerGas = gasFeeEstimates[priorityLevel].suggestedMaxPriorityFeePerGas;
  } else if (priorityLevel === _gas.PriorityLevels.dAppSuggested && dappSuggestedGasFees) {
    maxFeePerGas = (0, _conversion.hexWEIToDecGWEI)(dappSuggestedGasFees.maxFeePerGas || dappSuggestedGasFees.gasPrice);
    maxPriorityFeePerGas = (0, _conversion.hexWEIToDecGWEI)(dappSuggestedGasFees.maxPriorityFeePerGas || maxFeePerGas);
  } else if (priorityLevel === _gas.PriorityLevels.custom) {
    if (estimateUsed === _gas.PriorityLevels.custom) {
      maxFeePerGas = maxFeePerGasValue;
      maxPriorityFeePerGas = maxPriorityFeePerGasValue;
    } else if (advancedGasFeeValues && editGasMode !== _gas.EditGasModes.swaps) {
      maxFeePerGas = advancedGasFeeValues.maxBaseFee;
      maxPriorityFeePerGas = advancedGasFeeValues.priorityFee;
    }
  } else if (priorityLevel === _gas.PriorityLevels.tenPercentIncreased && transaction.previousGas) {
    var _transaction$previous, _transaction$previous2;
    maxFeePerGas = (0, _conversion.hexWEIToDecGWEI)((0, _gas3.addTenPercentAndRound)((_transaction$previous = transaction.previousGas) === null || _transaction$previous === void 0 ? void 0 : _transaction$previous.maxFeePerGas));
    maxPriorityFeePerGas = (0, _conversion.hexWEIToDecGWEI)((0, _gas3.addTenPercentAndRound)((_transaction$previous2 = transaction.previousGas) === null || _transaction$previous2 === void 0 ? void 0 : _transaction$previous2.maxPriorityFeePerGas));
  }
  const {
    waitTimeEstimate
  } = (0, _useCustomTimeEstimate.useCustomTimeEstimate)({
    gasFeeEstimates,
    maxFeePerGas,
    maxPriorityFeePerGas
  });
  if (gasFeeEstimates[priorityLevel]) {
    minWaitTime = priorityLevel === _gas.PriorityLevels.high ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.high.minWaitTimeEstimate : gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low.maxWaitTimeEstimate;
  } else {
    minWaitTime = waitTimeEstimate;
  }
  const hexMaximumTransactionFee = maxFeePerGas ? (0, _gas2.getMaximumGasTotalInHexWei)({
    gasLimit: (0, _conversion.decimalToHex)(gasLimit),
    maxFeePerGas: (0, _conversion.decGWEIToHexWEI)(maxFeePerGas)
  }) : null;
  (0, _react.useEffect)(() => {
    // For cancel and speed-up medium / high option is disabled if
    // gas used in transaction + 10% is greater tham estimate
    if ((editGasMode === _gas.EditGasModes.cancel || editGasMode === _gas.EditGasModes.speedUp) && (priorityLevel === _gas.PriorityLevels.medium || priorityLevel === _gas.PriorityLevels.high)) {
      const estimateGreater = !(0, _gas3.gasEstimateGreaterThanGasUsedPlusTenPercent)(transaction.previousGas || transaction.txParams, gasFeeEstimates, priorityLevel);
      setEstimateGreaterThanGasUse(estimateGreater);
    }
  }, [editGasMode, gasFeeEstimates, priorityLevel, transaction]);
  return {
    estimateGreaterThanGasUse,
    maxFeePerGas,
    maxPriorityFeePerGas,
    minWaitTime,
    hexMaximumTransactionFee
  };
};
exports.useGasItemFeeDetails = useGasItemFeeDetails;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useGasItemFeeDetails.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-tooltip\\edit-gas-tooltip.js", {"../../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-tooltip%5Cedit-gas-tooltip.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _gas = require("../../../../../shared/constants/gas");
var _designSystem = require("../../../../helpers/constants/design-system");
var _gas2 = require("../../../../helpers/utils/gas");
var _util = require("../../../../helpers/utils/util");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const EditGasToolTip = ({
  editGasMode,
  estimateGreaterThanGasUse,
  gasLimit,
  priorityLevel,
  // maxFeePerGas & maxPriorityFeePerGas are derived from conditional logic
  // related to the source of the estimates. We pass these values from the
  // the parent component (edit-gas-item) rather than recalculate them
  maxFeePerGas,
  maxPriorityFeePerGas,
  transaction,
  t
}) => {
  const toolTipMessage = (0, _react.useMemo)(() => {
    switch (priorityLevel) {
      case _gas.PriorityLevels.low:
        return t('lowGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('low')))]);
      case _gas.PriorityLevels.medium:
        if (estimateGreaterThanGasUse) {
          return t('disabledGasOptionToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
            key: `disabled-priority-level-${priorityLevel}`
          }, t(priorityLevel))]);
        }
        return t('mediumGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('medium')))]);
      case _gas.PriorityLevels.high:
        if (estimateGreaterThanGasUse) {
          return t('disabledGasOptionToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
            key: `disabled-priority-level-${priorityLevel}`
          }, t(priorityLevel))]);
        }
        if (editGasMode === _gas.EditGasModes.swaps) {
          return t('swapSuggestedGasSettingToolTipMessage');
        }
        return t('highGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('high')))]);
      case _gas.PriorityLevels.custom:
        return t('customGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('custom')))]);
      case _gas.PriorityLevels.dAppSuggested:
        return transaction !== null && transaction !== void 0 && transaction.origin ? t('dappSuggestedGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: transaction === null || transaction === void 0 ? void 0 : transaction.origin
        }, transaction === null || transaction === void 0 ? void 0 : transaction.origin)]) : null;
      default:
        return '';
    }
  }, [editGasMode, estimateGreaterThanGasUse, priorityLevel, transaction, t]);
  let imgAltText;
  if (priorityLevel === _gas.PriorityLevels.low) {
    imgAltText = t('curveLowGasEstimate');
  } else if (priorityLevel === _gas.PriorityLevels.medium) {
    imgAltText = t('curveMediumGasEstimate');
  } else if (priorityLevel === _gas.PriorityLevels.high) {
    imgAltText = t('curveHighGasEstimate');
  }

  // Gas estimate curve is visible for low/medium/high gas estimates
  // the curve is not visible for high estimates for swaps
  // also it is not visible in case of cancel/speedup if the medium/high option is disabled
  const showGasEstimateCurve = (0, _gas2.isMetamaskSuggestedGasEstimate)(priorityLevel) && !(priorityLevel === _gas.PriorityLevels.high && editGasMode === _gas.EditGasModes.swaps) && !estimateGreaterThanGasUse;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container"
  }, showGasEstimateCurve ? /*#__PURE__*/_react.default.createElement("img", {
    alt: imgAltText,
    src: `./images/curve-${priorityLevel}.svg`
  }) : null, toolTipMessage && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__message"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, toolTipMessage)), priorityLevel === _gas.PriorityLevels.custom || estimateGreaterThanGasUse ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__values"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold,
    className: "edit-gas-tooltip__container__label"
  }, t('maxBaseFee')), maxFeePerGas && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(maxFeePerGas, 4))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold,
    className: "edit-gas-tooltip__container__label"
  }, t('priorityFeeProperCase')), maxPriorityFeePerGas && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(maxPriorityFeePerGas, 4))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold,
    className: "edit-gas-tooltip__container__label"
  }, t('gasLimit')), gasLimit && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(gasLimit, 4)))));
};
EditGasToolTip.propTypes = {
  estimateGreaterThanGasUse: _propTypes.default.bool,
  priorityLevel: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  maxPriorityFeePerGas: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  t: _propTypes.default.func,
  editGasMode: _propTypes.default.string,
  gasLimit: _propTypes.default.number,
  transaction: _propTypes.default.object
};
var _default = EditGasToolTip;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-tooltip\\edit-gas-tooltip.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\index.js", {"./edit-gas-fee-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasFeePopover.default;
  }
});
var _editGasFeePopover = _interopRequireDefault(require("./edit-gas-fee-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\index.js", {"./network-statistics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\network-statistics.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networkStatistics.default;
  }
});
var _networkStatistics = _interopRequireDefault(require("./network-statistics"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\network-statistics.js", {"../../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\gas.js","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","./status-slider":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\index.js","./tooltips":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Cnetwork-statistics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _util = require("../../../../helpers/utils/util");
var _gas = require("../../../../helpers/utils/gas");
var _i18n = require("../../../../contexts/i18n");
var _gasFee = require("../../../../contexts/gasFee");
var _componentLibrary = require("../../../component-library");
var _tooltips = require("./tooltips");
var _statusSlider = _interopRequireDefault(require("./status-slider"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NetworkStatistics = () => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const {
    gasFeeEstimates
  } = (0, _gasFee.useGasFeeContext)();
  const formattedLatestBaseFee = (0, _gas.formatGasFeeOrFeeRange)(gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.estimatedBaseFee, {
    precision: 0
  });
  const formattedLatestPriorityFeeRange = (0, _gas.formatGasFeeOrFeeRange)(gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.latestPriorityFeeRange, {
    precision: [1, 0]
  });
  const networkCongestion = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.networkCongestion;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    fontWeight: _designSystem.FontWeight.Bold,
    marginTop: 3,
    marginBottom: 3,
    variant: _designSystem.TextVariant.bodyXs,
    as: "h6"
  }, t('networkStatus')), /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__info"
  }, (0, _util.isNullish)(formattedLatestBaseFee) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field",
    "data-testid": "formatted-latest-base-fee"
  }, /*#__PURE__*/_react.default.createElement(_tooltips.BaseFeeTooltip, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-data"
  }, formattedLatestBaseFee), /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-label"
  }, t('baseFee')))), (0, _util.isNullish)(formattedLatestPriorityFeeRange) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field",
    "data-testid": "formatted-latest-priority-fee-range"
  }, /*#__PURE__*/_react.default.createElement(_tooltips.PriorityFeeTooltip, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-data"
  }, formattedLatestPriorityFeeRange), /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-label"
  }, t('priorityFee')))), (0, _util.isNullish)(networkCongestion) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field"
  }, /*#__PURE__*/_react.default.createElement(_statusSlider.default, null))));
};
var _default = NetworkStatistics;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\network-statistics.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\index.js", {"./status-slider":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\status-slider.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Cstatus-slider%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _statusSlider.default;
  }
});
var _statusSlider = _interopRequireDefault(require("./status-slider"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\status-slider.js", {"../../../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../tooltips":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Cstatus-slider%5Cstatus-slider.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _gas = require("../../../../../../shared/constants/gas");
var _gasFee = require("../../../../../contexts/gasFee");
var _useI18nContext = require("../../../../../hooks/useI18nContext");
var _tooltips = require("../tooltips");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GRADIENT_COLORS = ['#037DD6', '#1876C8', '#2D70BA', '#4369AB', '#57629E', '#6A5D92', '#805683', '#9A4D71', '#B44561', '#C54055', '#D73A49'];
const determineStatusInfo = givenNetworkCongestion => {
  const networkCongestion = givenNetworkCongestion ?? 0.5;
  const colorIndex = Math.round(networkCongestion * 10);
  const color = GRADIENT_COLORS[colorIndex];
  const sliderTickValue = colorIndex * 10;
  if (networkCongestion >= _gas.NetworkCongestionThresholds.busy) {
    return {
      statusLabel: 'busy',
      tooltipLabel: 'highLowercase',
      color,
      sliderTickValue
    };
  } else if (networkCongestion >= _gas.NetworkCongestionThresholds.stable) {
    return {
      statusLabel: 'stable',
      tooltipLabel: 'stableLowercase',
      color,
      sliderTickValue
    };
  }
  return {
    statusLabel: 'notBusy',
    tooltipLabel: 'lowLowercase',
    color,
    sliderTickValue
  };
};
const StatusSlider = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    gasFeeEstimates
  } = (0, _gasFee.useGasFeeContext)();
  const statusInfo = determineStatusInfo(gasFeeEstimates.networkCongestion);
  return /*#__PURE__*/_react.default.createElement(_tooltips.NetworkStabilityTooltip, {
    color: statusInfo.color,
    tooltipLabel: statusInfo.tooltipLabel
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow-border",
    style: {
      marginLeft: `${statusInfo.sliderTickValue}%`
    },
    "data-testid": "status-slider-arrow-border"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow",
    style: {
      borderTopColor: statusInfo.color
    },
    "data-testid": "status-slider-arrow"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__line"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__label",
    style: {
      color: statusInfo.color
    },
    "data-testid": "status-slider-label"
  }, t(statusInfo.statusLabel))));
};
var _default = StatusSlider;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\status-slider.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Ctooltips.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PriorityFeeTooltip = exports.NetworkStabilityTooltip = exports.BaseFeeTooltip = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const NetworkStatusTooltip = ({
  children,
  html,
  title
}) => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
  position: "top",
  html: html,
  title: title
}, /*#__PURE__*/_react.default.createElement(_box.default, {
  display: _designSystem.DISPLAY.FLEX,
  flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
}, children));
NetworkStatusTooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  html: _propTypes.default.node,
  title: _propTypes.default.string
};
const BaseFeeTooltip = ({
  children
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    html: t('networkStatusBaseFeeTooltip', [/*#__PURE__*/_react.default.createElement("strong", {
      key: "base_fee_medium_estimate",
      className: "network-status__tooltip-label"
    }, t('medium')), /*#__PURE__*/_react.default.createElement("strong", {
      key: "base_fee_high_estimate",
      className: "network-status__tooltip-label"
    }, t('high'))])
  }, children);
};
exports.BaseFeeTooltip = BaseFeeTooltip;
BaseFeeTooltip.propTypes = {
  children: _propTypes.default.node.isRequired
};
const PriorityFeeTooltip = ({
  children
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    title: t('networkStatusPriorityFeeTooltip')
  }, children);
};
exports.PriorityFeeTooltip = PriorityFeeTooltip;
PriorityFeeTooltip.propTypes = {
  children: _propTypes.default.node.isRequired
};
const NetworkStabilityTooltip = ({
  children,
  color,
  tooltipLabel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    html: t('networkStatusStabilityFeeTooltip', [/*#__PURE__*/_react.default.createElement("strong", {
      key: "network-status__tooltip",
      className: "network-status__tooltip-label",
      style: {
        color
      }
    }, t(tooltipLabel))])
  }, children);
};
exports.NetworkStabilityTooltip = NetworkStabilityTooltip;
NetworkStabilityTooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  color: _propTypes.default.string.isRequired,
  tooltipLabel: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js", {"../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../hooks/gasFeeInput/useGasFeeInputs":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js","../../../hooks/useIncrementedGasFees":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useIncrementedGasFees.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/loading-heartbeat":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../edit-gas-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-display\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-popover%5Cedit-gas-popover.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasPopover;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _useGasFeeInputs = require("../../../hooks/gasFeeInput/useGasFeeInputs");
var _transaction = require("../../../../shared/modules/transaction.utils");
var _gas = require("../../../../shared/constants/gas");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _editGasDisplay = _interopRequireDefault(require("../edit-gas-display"));
var _i18n = require("../../../contexts/i18n");
var _actions = require("../../../store/actions");
var _loadingHeartbeat = _interopRequireDefault(require("../../ui/loading-heartbeat"));
var _useIncrementedGasFees = require("../../../hooks/useIncrementedGasFees");
var _conversion = require("../../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function EditGasPopover({
  popoverTitle = '',
  confirmButtonText = '',
  editGasDisplayProps = {},
  transaction,
  mode,
  onClose,
  minimumGasLimit = _gas.GAS_LIMITS.SIMPLE
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const [dappSuggestedGasFeeAcknowledged, setDappSuggestedGasFeeAcknowledged] = (0, _react.useState)(false);
  const minimumGasLimitDec = (0, _conversion.hexToDecimal)(minimumGasLimit);
  const updatedCustomGasSettings = (0, _useIncrementedGasFees.useIncrementedGasFees)(transaction);
  let updatedTransaction = transaction;
  if (mode === _gas.EditGasModes.speedUp || mode === _gas.EditGasModes.cancel) {
    updatedTransaction = {
      ...transaction,
      userFeeLevel: _gas.CUSTOM_GAS_ESTIMATE,
      txParams: {
        ...transaction.txParams,
        ...updatedCustomGasSettings
      }
    };
  }
  const {
    estimatedMinimumNative,
    gasPrice,
    setGasPrice,
    gasLimit,
    setGasLimit,
    properGasLimit,
    estimateToUse,
    hasGasErrors,
    gasErrors,
    onManualChange,
    balanceError
  } = (0, _useGasFeeInputs.useGasFeeInputs)(_gas.GasRecommendations.medium, updatedTransaction, minimumGasLimit, mode);
  const txParamsHaveBeenCustomized = estimateToUse === _gas.CUSTOM_GAS_ESTIMATE || (0, _transaction.txParamsAreDappSuggested)(updatedTransaction);

  /**
   * Temporary placeholder, this should be managed by the parent component but
   * we will be extracting this component from the hard to maintain modal
   * component. For now this is just to be able to appropriately close
   * the modal in testing
   */
  const closePopover = (0, _react.useCallback)(() => {
    if (onClose) {
      onClose();
    } else {
      dispatch((0, _actions.hideModal)());
    }
  }, [onClose, dispatch]);
  const onSubmit = (0, _react.useCallback)(async () => {
    if (!updatedTransaction || !mode) {
      closePopover();
    }
    const newGasSettings = {
      gas: (0, _conversion.decimalToHex)(gasLimit),
      gasLimit: (0, _conversion.decimalToHex)(gasLimit),
      estimateUsed: estimateToUse,
      gasPrice: (0, _conversion.decGWEIToHexWEI)(gasPrice)
    };
    const cleanTransactionParams = {
      ...updatedTransaction.txParams
    };
    const updatedTxMeta = {
      ...updatedTransaction,
      userEditedGasLimit: gasLimit !== Number(transaction.originalGasEstimate),
      userFeeLevel: estimateToUse || _gas.CUSTOM_GAS_ESTIMATE,
      txParams: {
        ...cleanTransactionParams,
        ...newGasSettings
      }
    };
    switch (mode) {
      case _gas.EditGasModes.cancel:
        dispatch((0, _actions.createCancelTransaction)(updatedTransaction.id, newGasSettings));
        break;
      case _gas.EditGasModes.speedUp:
        dispatch((0, _actions.createSpeedUpTransaction)(updatedTransaction.id, newGasSettings));
        break;
      case _gas.EditGasModes.modifyInPlace:
        newGasSettings.userEditedGasLimit = updatedTxMeta.userEditedGasLimit;
        newGasSettings.userFeeLevel = updatedTxMeta.userFeeLevel;
        dispatch((0, _actions.showLoadingIndication)());
        await dispatch((0, _actions.updateTransactionGasFees)(updatedTxMeta.id, newGasSettings));
        dispatch((0, _actions.hideLoadingIndication)());
        break;
      default:
        break;
    }
    closePopover();
  }, [updatedTransaction, mode, dispatch, closePopover, gasLimit, gasPrice, transaction.originalGasEstimate, estimateToUse]);
  let title = t('editGasTitle');
  if (popoverTitle) {
    title = popoverTitle;
  } else if (mode === _gas.EditGasModes.speedUp) {
    title = t('speedUpPopoverTitle');
  } else if (mode === _gas.EditGasModes.cancel) {
    title = t('cancelPopoverTitle');
  }
  const footerButtonText = confirmButtonText || t('save');
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: title,
    onClose: closePopover,
    className: "edit-gas-popover__wrapper",
    footer: /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onSubmit,
      disabled: hasGasErrors || balanceError || !txParamsHaveBeenCustomized
    }, footerButtonText)
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: '0 20px 20px 20px',
      position: 'relative'
    }
  }, false ? null : /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), /*#__PURE__*/_react.default.createElement(_editGasDisplay.default, _extends({
    dappSuggestedGasFeeAcknowledged: dappSuggestedGasFeeAcknowledged,
    setDappSuggestedGasFeeAcknowledged: setDappSuggestedGasFeeAcknowledged,
    estimatedMinimumNative: estimatedMinimumNative,
    gasPrice: gasPrice,
    setGasPrice: setGasPrice,
    gasLimit: gasLimit,
    setGasLimit: setGasLimit,
    properGasLimit: properGasLimit,
    mode: mode,
    transaction: updatedTransaction,
    onManualChange: onManualChange,
    minimumGasLimit: minimumGasLimitDec,
    balanceError: balanceError,
    txParamsHaveBeenCustomized: txParamsHaveBeenCustomized,
    gasErrors: gasErrors
  }, editGasDisplayProps))));
}
EditGasPopover.propTypes = {
  popoverTitle: _propTypes.default.string,
  editGasDisplayProps: _propTypes.default.object,
  confirmButtonText: _propTypes.default.string,
  onClose: _propTypes.default.func,
  transaction: _propTypes.default.object,
  mode: _propTypes.default.oneOf(Object.values(_gas.EditGasModes)),
  minimumGasLimit: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\index.js", {"./edit-gas-popover.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cedit-gas-popover%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasPopover.default;
  }
});
var _editGasPopover = _interopRequireDefault(require("./edit-gas-popover.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-popover\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\gas-details-item-title.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/info-tooltip/info-tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cgas-details-item%5Cgas-details-item-title%5Cgas-details-item-title.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _designSystem = require("../../../../helpers/constants/design-system");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _selectors = require("../../../../selectors");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _infoTooltip = _interopRequireDefault(require("../../../ui/info-tooltip/info-tooltip"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GasDetailsItemTitle = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: "flex"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginRight: 1
  }, t('gas')), /*#__PURE__*/_react.default.createElement("span", {
    className: "gas-details-item-title__estimate"
  }, "(", t('transactionDetailGasInfoV2'), ")"), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, t('transactionDetailGasTooltipIntro', [isMainnet ? t('networkNameEthereum') : ''])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, t('transactionDetailGasTooltipExplanation')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement("a", {
      href: "https://community.metamask.io/t/what-is-gas-why-do-transactions-take-so-long/3172",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('transactionDetailGasTooltipConversion')))),
    position: "bottom"
  }));
};
var _default = GasDetailsItemTitle;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-details-item\\gas-details-item-title\\gas-details-item-title.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\index.js", {"./gas-details-item-title":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\gas-details-item-title.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cgas-details-item%5Cgas-details-item-title%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _gasDetailsItemTitle.default;
  }
});
var _gasDetailsItemTitle = _interopRequireDefault(require("./gas-details-item-title"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-details-item\\gas-details-item-title\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item.js", {"../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useDraftTransactionWithTxParams":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useDraftTransactionWithTxParams.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/loading-heartbeat":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\loading-heartbeat\\index.js","../gas-timing/gas-timing.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-timing\\gas-timing.component.js","../transaction-detail-item/transaction-detail-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","./gas-details-item-title":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cgas-details-item%5Cgas-details-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _designSystem = require("../../../helpers/constants/design-system");
var _common = require("../../../helpers/constants/common");
var _selectors = require("../../../selectors");
var _send = require("../../../ducks/send");
var _gasFee = require("../../../contexts/gasFee");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../ui/box"));
var _loadingHeartbeat = _interopRequireDefault(require("../../ui/loading-heartbeat"));
var _gasTiming = _interopRequireDefault(require("../gas-timing/gas-timing.component"));
var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));
var _conversion = require("../../../../shared/modules/conversion.utils");
var _useDraftTransactionWithTxParams = require("../../../hooks/useDraftTransactionWithTxParams");
var _gasDetailsItemTitle = _interopRequireDefault(require("./gas-details-item-title"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GasDetailsItem = ({
  userAcknowledgedGasMissing = false
}) => {
  var _transactionData$txPa, _transactionData$txPa2;
  const t = (0, _useI18nContext.useI18nContext)();
  const draftTransaction = (0, _reactRedux.useSelector)(_send.getCurrentDraftTransaction);
  const transactionData = (0, _useDraftTransactionWithTxParams.useDraftTransactionWithTxParams)();
  const {
    hexMinimumTransactionFee: draftHexMinimumTransactionFee,
    hexMaximumTransactionFee: draftHexMaximumTransactionFee
  } = (0, _reactRedux.useSelector)(state => (0, _selectors.transactionFeeSelector)(state, transactionData));
  const {
    estimateUsed,
    hasSimulationError,
    maximumCostInHexWei: hexMaximumTransactionFee,
    minimumCostInHexWei: hexMinimumTransactionFee,
    maxPriorityFeePerGas,
    maxFeePerGas
  } = (0, _gasFee.useGasFeeContext)();
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _reactRedux.useSelector)(_selectors.getPreferences);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  if (hasSimulationError && !userAcknowledgedGasMissing) {
    return null;
  }
  const maxPriorityFeePerGasToRender = (maxPriorityFeePerGas ?? (0, _conversion.hexWEIToDecGWEI)(((_transactionData$txPa = transactionData.txParams) === null || _transactionData$txPa === void 0 ? void 0 : _transactionData$txPa.maxPriorityFeePerGas) ?? '0x0')).toString();
  const maxFeePerGasToRender = (maxFeePerGas ?? (0, _conversion.hexWEIToDecGWEI)(((_transactionData$txPa2 = transactionData.txParams) === null || _transactionData$txPa2 === void 0 ? void 0 : _transactionData$txPa2.maxFeePerGas) ?? '0x0')).toString();
  return /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "gas-details-item",
    detailTitle: /*#__PURE__*/_react.default.createElement(_gasDetailsItemTitle.default, null),
    detailTitleColor: _designSystem.TextColor.textDefault,
    detailText: useCurrencyRateCheck && Object.keys(draftTransaction).length === 0 && /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.SECONDARY,
      value: hexMinimumTransactionFee,
      hideLabel: Boolean(useNativeCurrencyAsPrimaryCurrency)
    })),
    detailTotal: /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.PRIMARY,
      value: hexMinimumTransactionFee || draftHexMinimumTransactionFee,
      hideLabel: !useNativeCurrencyAsPrimaryCurrency
    })),
    subText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
      key: "editGasSubTextFeeLabel",
      display: "inline-flex",
      className: (0, _classnames.default)('gas-details-item__gasfee-label', {
        'gas-details-item__gas-fee-warning': estimateUsed === 'high'
      })
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_box.default, {
      marginRight: 1
    }, /*#__PURE__*/_react.default.createElement("strong", null, estimateUsed === 'high' && '⚠ ', t('editGasSubTextFeeLabel'))), /*#__PURE__*/_react.default.createElement("div", {
      key: "editGasSubTextFeeValue",
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      key: "editGasSubTextFeeAmount",
      type: _common.PRIMARY,
      value: hexMaximumTransactionFee || draftHexMaximumTransactionFee,
      hideLabel: !useNativeCurrencyAsPrimaryCurrency
    })))),
    subTitle: /*#__PURE__*/_react.default.createElement(_gasTiming.default, {
      maxPriorityFeePerGas: maxPriorityFeePerGasToRender,
      maxFeePerGas: maxFeePerGasToRender
    })
  });
};
GasDetailsItem.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool
};
var _default = GasDetailsItem;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-details-item\\gas-details-item.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-details-item\\index.js", {"./gas-details-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-details-item\\gas-details-item.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cgas-details-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _gasDetailsItem.default;
  }
});
var _gasDetailsItem = _interopRequireDefault(require("./gas-details-item"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-details-item\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\gas-timing\\gas-timing.component.js", {"../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\gas.js","../../../hooks/usePrevious":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../ui/typography/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cgas-timing%5Cgas-timing.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GasTiming;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _gas = require("../../../../shared/constants/gas");
var _usePrevious = require("../../../hooks/usePrevious");
var _i18n = require("../../../contexts/i18n");
var _gasFee = require("../../../contexts/gasFee");
var _metamask = require("../../../ducks/metamask/metamask");
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _designSystem = require("../../../helpers/constants/design-system");
var _actions = require("../../../store/actions");
var _gas2 = require("../../../helpers/constants/gas");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Once we reach this second threshold, we switch to minutes as a unit
const SECOND_CUTOFF = 90;

// Shows "seconds" as unit of time if under SECOND_CUTOFF, otherwise "minutes"
const toHumanReadableTime = (milliseconds = 1, t) => {
  const seconds = Math.ceil(milliseconds / 1000);
  if (seconds <= SECOND_CUTOFF) {
    return t('gasTimingSeconds', [seconds]);
  }
  return t('gasTimingMinutes', [Math.ceil(seconds / 60)]);
};
function GasTiming({
  maxFeePerGas = 0,
  maxPriorityFeePerGas = 0,
  gasWarnings
}) {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const gasFeeEstimates = (0, _reactRedux.useSelector)(_metamask.getGasFeeEstimates);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const [customEstimatedTime, setCustomEstimatedTime] = (0, _react.useState)(null);
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const {
    estimateUsed
  } = (0, _gasFee.useGasFeeContext)();

  // If the user has chosen a value lower than the low gas fee estimate,
  // We'll need to use the useEffect hook below to make a call to calculate
  // the time to show
  const isUnknownLow = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low) && Number(maxPriorityFeePerGas) < Number(gasFeeEstimates.low.suggestedMaxPriorityFeePerGas);
  const previousMaxFeePerGas = (0, _usePrevious.usePrevious)(maxFeePerGas);
  const previousMaxPriorityFeePerGas = (0, _usePrevious.usePrevious)(maxPriorityFeePerGas);
  const previousIsUnknownLow = (0, _usePrevious.usePrevious)(isUnknownLow);
  (0, _react.useEffect)(() => {
    const priority = maxPriorityFeePerGas;
    const fee = maxFeePerGas;
    if (isUnknownLow || priority && priority !== previousMaxPriorityFeePerGas || fee && fee !== previousMaxFeePerGas) {
      // getGasFeeTimeEstimate requires parameters in string format
      (0, _actions.getGasFeeTimeEstimate)(new _bignumber.default(priority, 10).toString(10), new _bignumber.default(fee, 10).toString(10)).then(result => {
        if (maxFeePerGas === fee && maxPriorityFeePerGas === priority) {
          setCustomEstimatedTime(result);
        }
      });
    }
    if (isUnknownLow !== false && previousIsUnknownLow === true) {
      setCustomEstimatedTime(null);
    }
  }, [maxPriorityFeePerGas, maxFeePerGas, isUnknownLow, previousMaxFeePerGas, previousMaxPriorityFeePerGas, previousIsUnknownLow]);
  if ((gasWarnings === null || gasWarnings === void 0 ? void 0 : gasWarnings.maxPriorityFee) === _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW || (gasWarnings === null || gasWarnings === void 0 ? void 0 : gasWarnings.maxFee) === _gas2.GAS_FORM_ERRORS.MAX_FEE_TOO_LOW) {
    return /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H7,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD,
      className: (0, _classnames.default)('gas-timing', 'gas-timing--negative')
    }, t('editGasTooLow'));
  }

  // Don't show anything if we don't have enough information
  if (isGasEstimatesLoading || gasEstimateType !== _gas.GasEstimateTypes.feeMarket) {
    return null;
  }
  const {
    low = {},
    medium = {},
    high = {}
  } = gasFeeEstimates;
  let text = '';
  let attitude = 'positive';

  // Anything medium or faster is positive
  if (Number(maxPriorityFeePerGas) >= Number(medium.suggestedMaxPriorityFeePerGas)) {
    // High+ is very likely, medium is likely
    if (Number(maxPriorityFeePerGas) < Number(high.suggestedMaxPriorityFeePerGas)) {
      // Medium
      text = t('gasTimingPositive', [toHumanReadableTime(low.maxWaitTimeEstimate, t)]);
    } else {
      // High
      text = t('gasTimingVeryPositive', [toHumanReadableTime(high.minWaitTimeEstimate, t)]);
    }
  } else {
    if (estimateUsed === 'low') {
      attitude = 'negative';
    }
    // If the user has chosen a value less than our low estimate,
    // calculate a potential wait time
    if (isUnknownLow) {
      // If we didn't get any useful information, show the
      // "unknown processing time" message
      if (!customEstimatedTime || customEstimatedTime === 'unknown' || (customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound) === 'unknown') {
        text = t('editGasTooLow');
      } else {
        text = t('gasTimingNegative', [toHumanReadableTime(Number(customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound), t)]);
      }
    } else {
      text = t('gasTimingNegative', [toHumanReadableTime(low.maxWaitTimeEstimate, t)]);
    }
  }
  return /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H7,
    className: (0, _classnames.default)('gas-timing', {
      [`gas-timing--${attitude}`]: attitude
    })
  }, text);
}
GasTiming.propTypes = {
  maxPriorityFeePerGas: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.string,
  gasWarnings: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-timing\\gas-timing.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\hold-to-reveal-button\\hold-to-reveal-button.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Chold-to-reveal-button%5Chold-to-reveal-button.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HoldToRevealButton;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("../../../contexts/i18n");
var _componentLibrary = require("../../component-library");
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const radius = 14;
const strokeWidth = 2;
const radiusWithStroke = radius - strokeWidth / 2;
function HoldToRevealButton({
  buttonText,
  onLongPressed
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const isLongPressing = (0, _react.useRef)(false);
  const [isUnlocking, setIsUnlocking] = (0, _react.useState)(false);
  const [hasTriggeredUnlock, setHasTriggeredUnlock] = (0, _react.useState)(false);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);

  /**
   * Prevent animation events from propogating up
   *
   * @param e - Native animation event - React.AnimationEvent<HTMLDivElement>
   */
  const preventPropogation = e => {
    e.stopPropagation();
  };

  /**
   * Event for mouse click down
   */
  const onMouseDown = () => {
    isLongPressing.current = true;
    trackEvent({
      category: _metametrics2.MetaMetricsEventCategory.Keys,
      event: _metametrics2.MetaMetricsEventName.SrpHoldToRevealClickStarted,
      properties: {
        key_type: _metametrics2.MetaMetricsEventKeyType.Srp
      }
    });
  };

  /**
   * Event for mouse click up
   */
  const onMouseUp = () => {
    isLongPressing.current = false;
  };

  /**
   * 1. Progress cirle completed. Begin next animation phase (Shrink halo and show unlocked padlock)
   */
  const onProgressComplete = () => {
    isLongPressing.current && setIsUnlocking(true);
  };

  /**
   * 2. Trigger onLongPressed callback. Begin next animation phase (Shrink unlocked padlock and fade in original content)
   *
   * @param e - Native animation event - React.AnimationEvent<HTMLDivElement>
   */
  const triggerOnLongPressed = (0, _react.useCallback)(e => {
    trackEvent({
      category: _metametrics2.MetaMetricsEventCategory.Keys,
      event: _metametrics2.MetaMetricsEventName.SrpHoldToRevealCompleted,
      properties: {
        key_type: _metametrics2.MetaMetricsEventKeyType.Srp
      }
    });
    trackEvent({
      category: _metametrics2.MetaMetricsEventCategory.Keys,
      event: _metametrics2.MetaMetricsEventName.SrpRevealViewed,
      properties: {
        key_type: _metametrics2.MetaMetricsEventKeyType.Srp
      }
    });
    onLongPressed();
    setHasTriggeredUnlock(true);
    preventPropogation(e);
  }, [onLongPressed]);

  /**
   * 3. Reset animation states
   */
  const resetAnimationStates = () => {
    setIsUnlocking(false);
    setHasTriggeredUnlock(false);
  };
  const renderPreCompleteContent = (0, _react.useCallback)(() => {
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      className: (0, _classnames.default)('hold-to-reveal-button__absolute-fill', {
        'hold-to-reveal-button__absolute-fill': isUnlocking,
        'hold-to-reveal-button__main-icon-show': hasTriggeredUnlock
      })
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "hold-to-reveal-button__absolute-fill"
    }, /*#__PURE__*/_react.default.createElement("svg", {
      className: "hold-to-reveal-button__circle-svg"
    }, /*#__PURE__*/_react.default.createElement("circle", {
      className: "hold-to-reveal-button__circle-background",
      cx: radius,
      cy: radius,
      r: radiusWithStroke
    }))), /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "hold-to-reveal-button__absolute-fill"
    }, /*#__PURE__*/_react.default.createElement("svg", {
      className: "hold-to-reveal-button__circle-svg"
    }, /*#__PURE__*/_react.default.createElement("circle", {
      "aria-label": t('holdToRevealLockedLabel'),
      onTransitionEnd: onProgressComplete,
      className: "hold-to-reveal-button__circle-foreground",
      cx: radius,
      cy: radius,
      r: radiusWithStroke
    }))), /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      alignItems: _designSystem.AlignItems.center,
      justifyContent: _designSystem.JustifyContent.center,
      className: "hold-to-reveal-button__lock-icon-container"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/lock-icon.svg",
      alt: t('padlock'),
      className: "hold-to-reveal-button__lock-icon"
    })));
  }, [isUnlocking, hasTriggeredUnlock, t]);
  const renderPostCompleteContent = (0, _react.useCallback)(() => {
    return isUnlocking ? /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('hold-to-reveal-button__absolute-fill', {
        'hold-to-reveal-button__unlock-icon-hide': hasTriggeredUnlock
      }),
      onAnimationEnd: resetAnimationStates
    }, /*#__PURE__*/_react.default.createElement("div", {
      onAnimationEnd: preventPropogation,
      className: "hold-to-reveal-button__absolute-fill hold-to-reveal-button__circle-static-outer-container"
    }, /*#__PURE__*/_react.default.createElement("svg", {
      className: "hold-to-reveal-button__circle-svg"
    }, /*#__PURE__*/_react.default.createElement("circle", {
      className: "hold-to-reveal-button__circle-static-outer",
      cx: 14,
      cy: 14,
      r: 14
    }))), /*#__PURE__*/_react.default.createElement("div", {
      onAnimationEnd: preventPropogation,
      className: "hold-to-reveal-button__absolute-fill hold-to-reveal-button__circle-static-inner-container"
    }, /*#__PURE__*/_react.default.createElement("svg", {
      className: "hold-to-reveal-button__circle-svg"
    }, /*#__PURE__*/_react.default.createElement("circle", {
      className: "hold-to-reveal-button__circle-static-inner",
      cx: 14,
      cy: 14,
      r: 12
    }))), /*#__PURE__*/_react.default.createElement("div", {
      "aria-label": t('holdToRevealUnlockedLabel'),
      className: "hold-to-reveal-button__unlock-icon-container",
      onAnimationEnd: triggerOnLongPressed
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/unlock-icon.svg",
      alt: t('padlock'),
      className: "hold-to-reveal-button__unlock-icon"
    }))) : null;
  }, [isUnlocking, hasTriggeredUnlock, triggerOnLongPressed, t]);
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp,
    className: "hold-to-reveal-button__button-hold",
    textProps: {
      display: _designSystem.DISPLAY.FLEX,
      alignItems: _designSystem.AlignItems.center
    }
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "hold-to-reveal-button__icon-container",
    marginRight: 2
  }, renderPreCompleteContent(), renderPostCompleteContent()), buttonText);
}
HoldToRevealButton.propTypes = {
  /**
   * Text to be displayed on the button
   */
  buttonText: _propTypes.default.string.isRequired,
  /**
   * Function to be called after the animation is finished
   */
  onLongPressed: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\hold-to-reveal-button\\hold-to-reveal-button.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\hold-to-reveal-button\\index.js", {"./hold-to-reveal-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\hold-to-reveal-button\\hold-to-reveal-button.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Chold-to-reveal-button%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _holdToRevealButton.default;
  }
});
var _holdToRevealButton = _interopRequireDefault(require("./hold-to-reveal-button"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\hold-to-reveal-button\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\home-notification\\home-notification.component.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/check-box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Chome-notification%5Chome-notification.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _checkBox = _interopRequireDefault(require("../../ui/check-box"));
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const HomeNotification = ({
  acceptText,
  checkboxText,
  checkboxTooltipText,
  classNames = [],
  descriptionText,
  ignoreText,
  infoText,
  onAccept,
  onIgnore
}) => {
  const [checkboxState, setCheckBoxState] = (0, _react.useState)(false);
  const checkboxElement = checkboxText && /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "homeNotification_checkbox",
    checked: checkboxState,
    className: "home-notification__checkbox",
    onClick: () => setCheckBoxState(checked => !checked)
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('home-notification', ...classNames)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__content-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__text"
  }, descriptionText)), infoText ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: infoText,
    wrapperClassName: "home-notification__tooltip-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Info,
    color: _designSystem.IconColor.iconDefault
  })) : null), /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__buttons"
  }, onAccept && acceptText ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "home-notification__accept-button",
    onClick: onAccept
  }, acceptText) : null, onIgnore && ignoreText ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "home-notification__ignore-button"
    // Some onIgnore handlers use the checkboxState to determine whether
    // to disable the notification
    ,
    onClick: () => onIgnore(checkboxState)
  }, ignoreText) : null, checkboxText ? /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__checkbox-wrapper"
  }, checkboxTooltipText ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: checkboxTooltipText,
    wrapperClassName: "home-notification__checkbox-label-tooltip"
  }, checkboxElement) : checkboxElement, /*#__PURE__*/_react.default.createElement("label", {
    className: "home-notification__checkbox-label",
    htmlFor: "homeNotification_checkbox"
  }, checkboxText)) : null));
};
HomeNotification.propTypes = {
  /**
   * The text for the "Accept" button. This must be accompanied by the `onAccept` prop.
   *
   * The "Accept" button is only rendered if this prop is set.
   */
  acceptText: _propTypes.default.node,
  /**
   * The text to display alongside the checkbox.
   *
   * The checkbox state is passed to the `onIgnore` handler, so this should only be used if the `onIgnore` prop is set.
   *
   * The checkbox is only rendered if this prop is set.
   */
  checkboxText: _propTypes.default.node,
  /**
   * The text to display in the checkbox tooltip.
   *
   * The tooltip is only rendered if this prop is set.
   */
  checkboxTooltipText: _propTypes.default.node,
  /**
   * Custom class names.
   */
  classNames: _propTypes.default.array,
  /**
   * The notification description.
   */
  descriptionText: _propTypes.default.node.isRequired,
  /**
   * The text for the "Ignore" button. This must be accompanied by the `onIgnore` prop.
   *
   * The "Ignore" button is only rendered if this prop is set.
   */
  ignoreText: _propTypes.default.node,
  /**
   * The text for the info icon tooltip in the top-right of the notification.
   *
   * The info-icon is only rendered if this prop is set.
   */
  infoText: _propTypes.default.node,
  /**
   * The handler for the "Accept" button. This must be accompanied by the `acceptText` prop.
   */
  onAccept: _propTypes.default.func,
  /**
   * The handler for the "Ignore" button. This must be accompanied by the `ignoreText` prop.
   *
   * If `checkboxText` is set, the checkbox state will be passed to this function as a boolean.
   */
  onIgnore: _propTypes.default.func
};
var _default = HomeNotification;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\home-notification\\home-notification.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\home-notification\\index.js", {"./home-notification.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\home-notification\\home-notification.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Chome-notification%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _homeNotification.default;
  }
});
var _homeNotification = _interopRequireDefault(require("./home-notification.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\home-notification\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\import-token-link\\import-token-link.component.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cimport-token-link%5Cimport-token-link.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ImportTokenLink;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _routes = require("../../../helpers/constants/routes");
var _button = _interopRequireDefault(require("../../ui/button"));
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _actions = require("../../../store/actions");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _selectors = require("../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ImportTokenLink() {
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const isTokenDetectionSupported = (0, _reactRedux.useSelector)(_selectors.getIsTokenDetectionSupported);
  const isTokenDetectionInactiveOnMainnet = (0, _reactRedux.useSelector)(_selectors.getIsTokenDetectionInactiveOnMainnet);
  const isTokenDetectionAvailable = isTokenDetectionSupported || isTokenDetectionInactiveOnMainnet || Boolean(false);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "import-token-link",
    textAlign: _designSystem.TEXT_ALIGN.CENTER
  }, isTokenDetectionAvailable && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "import-token-link__link",
    "data-testid": "refresh-list-button",
    type: "link",
    onClick: () => (0, _actions.detectNewTokens)()
  }, t('refreshList')), t('or')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "import-token-link__link",
    "data-testid": "import-token-button",
    type: "link",
    onClick: () => {
      history.push(_routes.IMPORT_TOKEN_ROUTE);
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.TokenImportButtonClicked,
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Home'
        }
      });
    }
  }, isTokenDetectionAvailable ? t('importTokens') : t('importTokens').charAt(0).toUpperCase() + t('importTokens').slice(1)));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\import-token-link\\import-token-link.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\import-token-link\\index.js", {"./import-token-link.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\import-token-link\\import-token-link.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cimport-token-link%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _importTokenLink.default;
  }
});
var _importTokenLink = _interopRequireDefault(require("./import-token-link.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\import-token-link\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js", {"./ledger-instruction-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cledger-instruction-field%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _ledgerInstructionField.default;
  }
});
var _ledgerInstructionField = _interopRequireDefault(require("./ledger-instruction-field"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\ledger-instruction-field\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/hardware-wallets":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\hardware-wallets.ts","../../../ducks/app/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\app\\app.ts","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cledger-instruction-field%5Cledger-instruction-field.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LedgerInstructionField;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");
var _app = require("../../../../shared/constants/app");
var _app2 = require("../../../ducks/app/app");
var _componentLibrary = require("../../component-library");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _designSystem = require("../../../helpers/constants/design-system");
var _util = require("../../../../app/scripts/lib/util");
var _metamask = require("../../../ducks/metamask/metamask");
var _actions = require("../../../store/actions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const renderInstructionStep = (text, show = true, color = _designSystem.TextColor.textDefault) => {
  return show && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: color,
    as: "h6"
  }, text);
};
function LedgerInstructionField({
  showDataInstruction
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const webHidConnectedStatus = (0, _reactRedux.useSelector)(_app2.getLedgerWebHidConnectedStatus);
  const ledgerTransportType = (0, _reactRedux.useSelector)(_metamask.getLedgerTransportType);
  const transportStatus = (0, _reactRedux.useSelector)(_app2.getLedgerTransportStatus);
  const environmentType = (0, _util.getEnvironmentType)();
  const environmentTypeIsFullScreen = environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN;
  (0, _react.useEffect)(() => {
    const initialConnectedDeviceCheck = async () => {
      if (ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid && webHidConnectedStatus !== _hardwareWallets.WebHIDConnectedStatuses.connected) {
        var _window$navigator, _window$navigator$hid;
        const devices = await ((_window$navigator = window.navigator) === null || _window$navigator === void 0 ? void 0 : (_window$navigator$hid = _window$navigator.hid) === null || _window$navigator$hid === void 0 ? void 0 : _window$navigator$hid.getDevices());
        const webHidIsConnected = devices === null || devices === void 0 ? void 0 : devices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        dispatch((0, _app2.setLedgerWebHidConnectedStatus)(webHidIsConnected ? _hardwareWallets.WebHIDConnectedStatuses.connected : _hardwareWallets.WebHIDConnectedStatuses.notConnected));
      }
    };
    const determineTransportStatus = async () => {
      if (ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid && webHidConnectedStatus === _hardwareWallets.WebHIDConnectedStatuses.connected && transportStatus === _hardwareWallets.HardwareTransportStates.none) {
        try {
          const transportedCreated = await (0, _actions.attemptLedgerTransportCreation)();
          dispatch((0, _app2.setLedgerTransportStatus)(transportedCreated ? _hardwareWallets.HardwareTransportStates.verified : _hardwareWallets.HardwareTransportStates.unknownFailure));
        } catch (e) {
          if (e.message.match('Failed to open the device')) {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.HardwareTransportStates.deviceOpenFailure));
          } else if (e.message.match('the device is already open')) {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.HardwareTransportStates.verified));
          } else {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.HardwareTransportStates.unknownFailure));
          }
        }
      }
    };
    determineTransportStatus();
    initialConnectedDeviceCheck();
  }, [dispatch, ledgerTransportType, webHidConnectedStatus, transportStatus]);
  (0, _react.useEffect)(() => {
    return () => {
      dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.HardwareTransportStates.none));
    };
  }, [dispatch]);
  const usingLedgerLive = ledgerTransportType === _hardwareWallets.LedgerTransportTypes.live;
  const usingWebHID = ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid;
  const isFirefox = (0, _util.getPlatform)() === _app.PLATFORM_FIREFOX;
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.INFO
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "ledger-live-dialog"
  }, renderInstructionStep(t('ledgerConnectionInstructionHeader')), renderInstructionStep(`• ${t('ledgerConnectionInstructionStepOne')}`, !isFirefox && usingLedgerLive), renderInstructionStep(`• ${t('ledgerConnectionInstructionStepTwo')}`, !isFirefox && usingLedgerLive), renderInstructionStep(`• ${t('ledgerConnectionInstructionStepThree')}`), renderInstructionStep(`• ${t('ledgerConnectionInstructionStepFour')}`, showDataInstruction), renderInstructionStep( /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    textAlign: _designSystem.TEXT_ALIGN.LEFT,
    onClick: async () => {
      if (environmentTypeIsFullScreen) {
        window.location.reload();
      } else {
        global.platform.openExtensionInBrowser(null, null, true);
      }
    }
  }, t('ledgerConnectionInstructionCloseOtherApps'))), transportStatus === _hardwareWallets.HardwareTransportStates.deviceOpenFailure), renderInstructionStep( /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    textAlign: _designSystem.TEXT_ALIGN.LEFT,
    onClick: async () => {
      if (environmentTypeIsFullScreen) {
        const connectedDevices = await window.navigator.hid.requestDevice({
          filters: [{
            vendorId: _hardwareWallets.LEDGER_USB_VENDOR_ID
          }]
        });
        const webHidIsConnected = connectedDevices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        dispatch((0, _app2.setLedgerWebHidConnectedStatus)({
          webHidConnectedStatus: webHidIsConnected ? _hardwareWallets.WebHIDConnectedStatuses.connected : _hardwareWallets.WebHIDConnectedStatuses.notConnected
        }));
      } else {
        global.platform.openExtensionInBrowser(null, null, true);
      }
    }
  }, environmentTypeIsFullScreen ? t('clickToConnectLedgerViaWebHID') : t('openFullScreenForLedgerWebHid'))), usingWebHID && webHidConnectedStatus === _hardwareWallets.WebHIDConnectedStatuses.notConnected, _designSystem.TextColor.WARNING_DEFAULT)))));
}
LedgerInstructionField.propTypes = {
  // whether or not to show the data instruction
  showDataInstruction: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\loading-network-screen\\index.js", {"./loading-network-screen.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cloading-network-screen%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _loadingNetworkScreen.default;
  }
});
var _loadingNetworkScreen = _interopRequireDefault(require("./loading-network-screen.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\loading-network-screen\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js", {"../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/loading-screen":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\loading-screen\\index.js","../../ui/popover/popover.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\popover.component.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cloading-network-screen%5Cloading-network-screen.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _loadingScreen = _interopRequireDefault(require("../../ui/loading-screen"));
var _time = require("../../../../shared/constants/time");
var _network = require("../../../../shared/constants/network");
var _popover = _interopRequireDefault(require("../../ui/popover/popover.component"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box/box"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class LoadingNetworkScreen extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showErrorScreen: false
    });
    _defineProperty(this, "componentDidMount", () => {
      this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
    });
    _defineProperty(this, "getConnectingLabel", function (loadingMessage) {
      if (loadingMessage) {
        return loadingMessage;
      }
      const {
        providerConfig,
        providerId
      } = this.props;
      const providerName = providerConfig.type;
      const {
        t
      } = this.context;
      switch (providerName) {
        case _network.NETWORK_TYPES.MAINNET:
          return t('connectingToMainnet');
        case _network.NETWORK_TYPES.GOERLI:
          return t('connectingToGoerli');
        case _network.NETWORK_TYPES.SEPOLIA:
          return t('connectingToSepolia');
        case _network.NETWORK_TYPES.LINEA_TESTNET:
          return t('connectingToLineaTestnet');
        default:
          return t('connectingTo', [providerId]);
      }
    });
    _defineProperty(this, "renderConnectionFailureNotification", (message, showTryAgain = false) => {
      const {
        showNetworkDropdown,
        setProviderArgs,
        setProviderType
      } = this.props;
      return /*#__PURE__*/_react.default.createElement(_popover.default, {
        onClose: () => {
          window.clearTimeout(this.cancelCallTimeout);
        },
        centerTitle: true,
        title: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
          name: _componentLibrary.IconName.Danger,
          size: _componentLibrary.IconSize.Xl,
          color: _designSystem.IconColor.warningDefault
        })
      }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyLgMedium,
        textAlign: _designSystem.TextAlign.Center,
        margin: [0, 4, 4, 4]
      }, message), /*#__PURE__*/_react.default.createElement(_box.default, {
        display: _designSystem.DISPLAY.FLEX,
        padding: 4,
        gap: 2
      }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonSecondary, {
        onClick: () => {
          window.clearTimeout(this.cancelCallTimeout);
          showNetworkDropdown();
        },
        variant: _designSystem.TextVariant.bodySm,
        block: true
      }, this.context.t('switchNetworks')), showTryAgain ? /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
        onClick: () => {
          this.setState({
            showErrorScreen: false
          });
          setProviderType(...setProviderArgs);
          window.clearTimeout(this.cancelCallTimeout);
          this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
        },
        variant: _designSystem.TextVariant.bodySm,
        block: true
      }, this.context.t('tryAgain')) : null));
    });
    _defineProperty(this, "renderDeprecatedRpcUrlWarning", () => {
      return this.renderConnectionFailureNotification(this.context.t('currentRpcUrlDeprecated'), false);
    });
    _defineProperty(this, "renderErrorScreenContent", () => {
      const {
        providerConfig
      } = this.props;
      return this.renderConnectionFailureNotification(this.context.t('networkSwitchConnectionError', [providerConfig.nickname]), true);
    });
    _defineProperty(this, "cancelCall", () => {
      const {
        isNetworkLoading
      } = this.props;
      if (isNetworkLoading) {
        this.setState({
          showErrorScreen: true
        });
      }
    });
    _defineProperty(this, "componentDidUpdate", prevProps => {
      const {
        providerConfig
      } = this.props;
      const {
        providerConfig: prevProvider
      } = prevProps;
      if (providerConfig.type !== prevProvider.type) {
        window.clearTimeout(this.cancelCallTimeout);
        this.setState({
          showErrorScreen: false
        });
        this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
      }
    });
    _defineProperty(this, "componentWillUnmount", () => {
      window.clearTimeout(this.cancelCallTimeout);
    });
  }
  render() {
    const {
      rollbackToPreviousProvider,
      showDeprecatedRpcUrlWarning
    } = this.props;
    let loadingMessageToRender;
    if (this.state.showErrorScreen) {
      loadingMessageToRender = this.renderErrorScreenContent();
    } else if (showDeprecatedRpcUrlWarning) {
      loadingMessageToRender = this.renderDeprecatedRpcUrlWarning();
    } else {
      loadingMessageToRender = this.getConnectingLabel(this.props.loadingMessage);
    }
    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, {
      header: /*#__PURE__*/_react.default.createElement("div", {
        className: "page-container__header-close",
        onClick: rollbackToPreviousProvider
      }),
      showLoadingSpinner: !this.state.showErrorScreen,
      loadingMessage: loadingMessageToRender
    });
  }
}
exports.default = LoadingNetworkScreen;
_defineProperty(LoadingNetworkScreen, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(LoadingNetworkScreen, "propTypes", {
  loadingMessage: _propTypes.default.string,
  cancelTime: _propTypes.default.number,
  providerConfig: _propTypes.default.object,
  providerId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  showNetworkDropdown: _propTypes.default.func,
  setProviderArgs: _propTypes.default.array,
  setProviderType: _propTypes.default.func,
  rollbackToPreviousProvider: _propTypes.default.func,
  isNetworkLoading: _propTypes.default.bool,
  showDeprecatedRpcUrlWarning: _propTypes.default.bool
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js", {"../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./loading-network-screen.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cloading-network-screen%5Cloading-network-screen.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _network = require("../../../../shared/constants/network");
var actions = _interopRequireWildcard(require("../../../store/actions"));
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _loadingNetworkScreen = _interopRequireDefault(require("./loading-network-screen.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DEPRECATED_TEST_NET_CHAINIDS = ['0x3', '0x2a', '0x4'];
const mapStateToProps = state => {
  const {
    loadingMessage
  } = state.appState;
  const providerConfig = (0, _metamask.getProviderConfig)(state);
  const {
    rpcUrl,
    chainId,
    ticker,
    nickname,
    type
  } = providerConfig;
  const setProviderArgs = type === _network.NETWORK_TYPES.RPC ? [rpcUrl, chainId, ticker, nickname] : [type];
  const providerChainId = chainId;
  const isDeprecatedNetwork = DEPRECATED_TEST_NET_CHAINIDS.includes(providerChainId);
  const isInfuraRpcUrl = rpcUrl && new URL(rpcUrl).host.endsWith('.infura.io');
  const showDeprecatedRpcUrlWarning = isDeprecatedNetwork && isInfuraRpcUrl;

  // Ensure we have a nickname to provide the user
  // in case of connection error
  let networkName = nickname;
  if (networkName === undefined) {
    const networks = (0, _selectors.getAllEnabledNetworks)(state);
    const desiredNetwork = networks.find(network => network.chainId === chainId);
    if (desiredNetwork) {
      networkName = desiredNetwork.nickname;
    }
  }
  return {
    isNetworkLoading: (0, _selectors.isNetworkLoading)(state),
    loadingMessage,
    setProviderArgs,
    providerConfig: {
      ...providerConfig,
      nickname: networkName
    },
    providerId: (0, _selectors.getNetworkIdentifier)(state),
    showDeprecatedRpcUrlWarning
  };
};
const mapDispatchToProps = dispatch => {
  return {
    setProviderType: type => {
      dispatch(actions.setProviderType(type));
    },
    rollbackToPreviousProvider: () => dispatch(actions.rollbackToPreviousProvider()),
    showNetworkDropdown: () => {
      if (false) {
        return dispatch(actions.toggleNetworkMenu());
      }
      return dispatch(actions.showNetworkDropdown());
    }
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_loadingNetworkScreen.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\menu-bar\\account-options-menu.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/keyring":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\keyring.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\menu\\index.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmenu-bar%5Caccount-options-menu.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountOptionsMenu;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _etherscanLink = require("@metamask/etherscan-link");
var _actions = require("../../../store/actions");
var _routes = require("../../../helpers/constants/routes");
var _util = require("../../../helpers/utils/util");
var _menu = require("../../ui/menu");
var _selectors = require("../../../selectors");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _util2 = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _keyring = require("../../../../shared/constants/keyring");
var _metametrics = require("../../../../shared/constants/metametrics");
var _metametrics2 = require("../../../contexts/metametrics");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function AccountOptionsMenu({
  anchorElement,
  onClose
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const selectedIdentity = (0, _reactRedux.useSelector)(_selectors.getSelectedIdentity);
  const {
    address
  } = selectedIdentity;
  const addressLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
  const {
    blockExplorerUrl
  } = rpcPrefs;
  const blockExplorerUrlSubTitle = (0, _util.getURLHostName)(blockExplorerUrl);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const blockExplorerLinkText = (0, _reactRedux.useSelector)(_selectors.getBlockExplorerLinkText);
  const isRemovable = keyring.type !== _keyring.KeyringType.hdKeyTree;
  const routeToAddBlockExplorerUrl = () => {
    history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
  };
  const openBlockExplorer = () => {
    trackEvent({
      event: _metametrics.MetaMetricsEventName.ExternalLinkClicked,
      category: _metametrics.MetaMetricsEventCategory.Navigation,
      properties: {
        link_type: _metametrics.MetaMetricsEventLinkType.AccountTracker,
        location: 'Account Options',
        url_domain: (0, _util.getURLHostName)(addressLink)
      }
    });
    global.platform.openTab({
      url: addressLink
    });
    onClose();
  };
  return /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: anchorElement,
    className: "account-options-menu",
    onHide: onClose
  }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer,
    subtitle: blockExplorerUrlSubTitle ? /*#__PURE__*/_react.default.createElement("span", {
      className: "account-options-menu__explorer-origin"
    }, blockExplorerUrlSubTitle) : null,
    iconName: _componentLibrary.IconName.Export
  }, t(blockExplorerLinkText.firstPart, blockExplorerLinkText.secondPart === '' ? null : [t(blockExplorerLinkText.secondPart)])), (0, _util2.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_FULLSCREEN ? null : /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    onClick: () => {
      trackEvent({
        event: _metametrics.MetaMetricsEventName.AppWindowExpanded,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Account Options'
        }
      });
      global.platform.openExtensionInBrowser();
      onClose();
    },
    iconName: _componentLibrary.IconName.Expand
  }, t('expandView')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__account-details",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'ACCOUNT_DETAILS'
      }));
      trackEvent({
        event: _metametrics.MetaMetricsEventName.NavAccountDetailsOpened,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Account Options'
        }
      });
      onClose();
    },
    iconName: _componentLibrary.IconName.ScanBarcode
  }, t('accountDetails')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__connected-sites",
    onClick: () => {
      trackEvent({
        event: _metametrics.MetaMetricsEventName.NavConnectedSitesOpened,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Account Options'
        }
      });
      history.push(_routes.CONNECTED_ROUTE);
      onClose();
    },
    iconName: _componentLibrary.IconName.Connect
  }, t('connectedSites')), isRemovable ? /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__remove-account",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'CONFIRM_REMOVE_ACCOUNT',
        identity: selectedIdentity
      }));
      onClose();
    },
    iconName: _componentLibrary.IconName.Trash
  }, t('removeAccount')) : null);
}
AccountOptionsMenu.propTypes = {
  anchorElement: _propTypes.default.instanceOf(window.Element),
  onClose: _propTypes.default.func.isRequired
};
AccountOptionsMenu.defaultProps = {
  anchorElement: undefined
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\menu-bar\\account-options-menu.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\menu-bar\\index.js", {"./menu-bar":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\menu-bar\\menu-bar.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmenu-bar%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _menuBar.default;
  }
});
var _menuBar = _interopRequireDefault(require("./menu-bar"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\menu-bar\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\menu-bar\\menu-bar.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../connected-status-indicator":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-status-indicator\\index.js","../selected-account":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\selected-account\\index.js","./account-options-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\menu-bar\\account-options-menu.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","webextension-polyfill":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmenu-bar%5Cmenu-bar.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MenuBar;
var _react = _interopRequireWildcard(require("react"));
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _selectedAccount = _interopRequireDefault(require("../selected-account"));
var _connectedStatusIndicator = _interopRequireDefault(require("../connected-status-indicator"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _metametrics = require("../../../../shared/constants/metametrics");
var _routes = require("../../../helpers/constants/routes");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _metametrics2 = require("../../../contexts/metametrics");
var _componentLibrary = require("../../component-library");
var _accountOptionsMenu = _interopRequireDefault(require("./account-options-menu"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function MenuBar() {
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const [accountOptionsMenuOpen, setAccountOptionsMenuOpen] = (0, _react.useState)(false);
  const origin = (0, _reactRedux.useSelector)(_selectors.getOriginOfCurrentTab);
  const ref = (0, _react.useRef)(false);
  const showStatus = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP && origin && origin !== _webextensionPolyfill.default.runtime.id;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "menu-bar"
  }, showStatus ? /*#__PURE__*/_react.default.createElement(_connectedStatusIndicator.default, {
    onClick: () => history.push(_routes.CONNECTED_ACCOUNTS_ROUTE)
  }) : null, /*#__PURE__*/_react.default.createElement(_selectedAccount.default, null), /*#__PURE__*/_react.default.createElement("span", {
    style: {
      display: 'inherit'
    },
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.MoreVertical,
    className: "menu-bar__account-options",
    "data-testid": "account-options-menu-button",
    ariaLabel: t('accountOptions'),
    onClick: () => {
      trackEvent({
        event: _metametrics.MetaMetricsEventName.NavAccountMenuOpened,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Home'
        }
      });
      setAccountOptionsMenuOpen(true);
    }
  })), accountOptionsMenuOpen && /*#__PURE__*/_react.default.createElement(_accountOptionsMenu.default, {
    anchorElement: ref.current,
    onClose: () => setAccountOptionsMenuOpen(false)
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\menu-bar\\menu-bar.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\menu-droppo.js", {"prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-dom\\index.js","react-transition-group/CSSTransitionGroup":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-transition-group\\CSSTransitionGroup.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmenu-droppo.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _CSSTransitionGroup = _interopRequireDefault(require("react-transition-group/CSSTransitionGroup"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class MenuDroppoComponent extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "globalClickOccurred", event => {
      const {
        target
      } = event;
      // eslint-disable-next-line react/no-find-dom-node
      const container = (0, _reactDom.findDOMNode)(this);
      if (this.props.isOpen && target !== container && !this.container.contains(event.target)) {
        var _this$props$onClickOu, _this$props;
        (_this$props$onClickOu = (_this$props = this.props).onClickOutside) === null || _this$props$onClickOu === void 0 ? void 0 : _this$props$onClickOu.call(_this$props, event);
      }
    });
  }
  renderPrimary() {
    const {
      isOpen
    } = this.props;
    if (!isOpen) {
      return null;
    }
    const innerStyle = this.props.innerStyle || {};
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "menu-droppo",
      key: "menu-droppo-drawer",
      "data-testid": "menu-droppo",
      style: innerStyle
    }, this.props.children);
  }
  componentDidMount() {
    if (this && document.body) {
      document.body.addEventListener('click', this.globalClickOccurred);
      // eslint-disable-next-line react/no-find-dom-node
      const container = (0, _reactDom.findDOMNode)(this);
      this.container = container;
    }
  }
  componentWillUnmount() {
    if (this && document.body) {
      document.body.removeEventListener('click', this.globalClickOccurred);
    }
  }
  render() {
    const {
      containerClassName = '',
      style
    } = this.props;
    const speed = this.props.speed || '300ms';
    const {
      useCssTransition
    } = this.props;
    const zIndex = 'zIndex' in this.props ? this.props.zIndex : 0;
    const baseStyle = {
      position: 'fixed',
      ...style,
      zIndex
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      style: baseStyle,
      className: `menu-droppo-container ${containerClassName}`,
      "data-testid": containerClassName
    }, /*#__PURE__*/_react.default.createElement("style", null, `
          .menu-droppo-enter {
            transition: transform ${speed} ease-in-out;
            transform: translateY(-200%);
          }

          .menu-droppo-enter.menu-droppo-enter-active {
            transition: transform ${speed} ease-in-out;
            transform: translateY(0%);
          }

          .menu-droppo-leave {
            transition: transform ${speed} ease-in-out;
            transform: translateY(0%);
          }

          .menu-droppo-leave.menu-droppo-leave-active {
            transition: transform ${speed} ease-in-out;
            transform: translateY(-200%);
          }
        `), useCssTransition ? /*#__PURE__*/_react.default.createElement(_CSSTransitionGroup.default, {
      className: "css-transition-group",
      transitionName: "menu-droppo",
      transitionEnterTimeout: parseInt(speed, 10),
      transitionLeaveTimeout: parseInt(speed, 10)
    }, this.renderPrimary()) : this.renderPrimary());
  }
}
exports.default = MenuDroppoComponent;
_defineProperty(MenuDroppoComponent, "propTypes", {
  isOpen: _propTypes.default.bool.isRequired,
  innerStyle: _propTypes.default.object,
  children: _propTypes.default.node.isRequired,
  onClickOutside: _propTypes.default.func,
  containerClassName: _propTypes.default.string,
  zIndex: _propTypes.default.number,
  style: _propTypes.default.object.isRequired,
  useCssTransition: _propTypes.default.bool,
  speed: _propTypes.default.string
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\menu-droppo.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\index.js", {"./metamask-template-renderer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js","./section-shape":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\section-shape.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmetamask-template-renderer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "SectionShape", {
  enumerable: true,
  get: function () {
    return _sectionShape.SectionShape;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metamaskTemplateRenderer.default;
  }
});
var _metamaskTemplateRenderer = _interopRequireDefault(require("./metamask-template-renderer"));
var _sectionShape = require("./section-shape");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-template-renderer\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js", {"./safe-component-list":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\safe-component-list.js","./section-shape":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\section-shape.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmetamask-template-renderer%5Cmetamask-template-renderer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var _safeComponentList = require("./safe-component-list");
var _sectionShape = require("./section-shape");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function getElement(section) {
  const {
    element
  } = section;
  const Element = _safeComponentList.safeComponentList[element];
  if (!Element) {
    throw new Error(`${element} is not in the safe component list for MetaMask template renderer`);
  }
  return Element;
}
const MetaMaskTemplateRenderer = ({
  sections
}) => {
  if (!sections) {
    // If sections is null eject early by returning null
    return null;
  } else if (typeof sections === 'string') {
    // React can render strings directly, so return the string
    return sections;
  } else if (sections && typeof sections === 'object' && !Array.isArray(sections)) {
    // If dealing with a single entry, then render a single object without key
    const Element = getElement(sections);
    return /*#__PURE__*/_react.default.createElement(Element, sections.props, typeof sections.children === 'object' ? /*#__PURE__*/_react.default.createElement(MetaMaskTemplateRenderer, {
      sections: sections.children
    }) : sections === null || sections === void 0 ? void 0 : sections.children);
  }

  // The last case is dealing with an array of objects
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, sections.reduce((allChildren, child) => {
    if ((child === null || child === void 0 ? void 0 : child.hide) === true) {
      return allChildren;
    }
    if (typeof child === 'string') {
      // React can render strings directly, so push them into the accumulator
      allChildren.push(child);
    } else {
      // If the entry in array is not a string, then it must be a Section.
      // Sections are handled by the main function, but must
      // be provided a key when a part of an array.
      if (!child.key) {
        throw new Error('When using array syntax in MetaMask Template Language, you must specify a key for each child of the array');
      }
      if (typeof (child === null || child === void 0 ? void 0 : child.children) === 'object') {
        // If this child has its own children, check if children is an
        // object, and in that case use recursion to render.
        allChildren.push( /*#__PURE__*/_react.default.createElement(MetaMaskTemplateRenderer, {
          sections: child,
          key: child.key
        }));
      } else {
        // Otherwise render the element.
        const Element = getElement(child);
        allChildren.push( /*#__PURE__*/_react.default.createElement(Element, _extends({
          key: child.key
        }, child.props), child === null || child === void 0 ? void 0 : child.children));
      }
    }
    return allChildren;
  }, []));
};
MetaMaskTemplateRenderer.propTypes = {
  sections: _sectionShape.ValidChildren
};
var _default = /*#__PURE__*/(0, _react.memo)(MetaMaskTemplateRenderer, (prevProps, nextProps) => {
  return (0, _lodash.isEqual)(prevProps.sections, nextProps.sections);
});
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\safe-component-list.js", {"../../../pages/confirmation/components/confirmation-network-switch":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\confirmation\\components\\confirmation-network-switch\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/chip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\chip\\index.js","../../ui/definition-list":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\definition-list\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../ui/text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../ui/textarea/textarea":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\textarea\\textarea.js","../../ui/tooltip/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js","../../ui/truncated-definition-list":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\truncated-definition-list\\index.js","../../ui/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../ui/url-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\url-icon\\index.js","../metamask-translation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-translation\\index.js","../network-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-display\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmetamask-template-renderer%5Csafe-component-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeComponentList = void 0;
var _button = _interopRequireDefault(require("../../ui/button"));
var _chip = _interopRequireDefault(require("../../ui/chip"));
var _definitionList = _interopRequireDefault(require("../../ui/definition-list"));
var _truncatedDefinitionList = _interopRequireDefault(require("../../ui/truncated-definition-list"));
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _typography = _interopRequireDefault(require("../../ui/typography"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _metamaskTranslation = _interopRequireDefault(require("../metamask-translation"));
var _networkDisplay = _interopRequireDefault(require("../network-display"));
var _textarea = _interopRequireDefault(require("../../ui/textarea/textarea"));
var _textField = _interopRequireDefault(require("../../ui/text-field"));
var _confirmationNetworkSwitch = _interopRequireDefault(require("../../../pages/confirmation/components/confirmation-network-switch"));
var _urlIcon = _interopRequireDefault(require("../../ui/url-icon"));
var _tooltip = _interopRequireDefault(require("../../ui/tooltip/tooltip"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const safeComponentList = {
  a: 'a',
  b: 'b',
  i: 'i',
  p: 'p',
  div: 'div',
  span: 'span',
  Box: _box.default,
  Button: _button.default,
  Chip: _chip.default,
  ConfirmationNetworkSwitch: _confirmationNetworkSwitch.default,
  DefinitionList: _definitionList.default,
  MetaMaskTranslation: _metamaskTranslation.default,
  NetworkDisplay: _networkDisplay.default,
  Popover: _popover.default,
  TextArea: _textarea.default,
  TextField: _textField.default,
  Tooltip: _tooltip.default,
  TruncatedDefinitionList: _truncatedDefinitionList.default,
  Typography: _typography.default,
  UrlIcon: _urlIcon.default
};
exports.safeComponentList = safeComponentList;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-template-renderer\\safe-component-list.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\section-shape.js", {"prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmetamask-template-renderer%5Csection-shape.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidChildren = exports.SectionShape = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SectionShape = {
  props: _propTypes.default.object,
  element: _propTypes.default.string,
  key: _propTypes.default.string
};
exports.SectionShape = SectionShape;
const ValidChildren = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape(SectionShape), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.shape(SectionShape), _propTypes.default.string]))]);
exports.ValidChildren = ValidChildren;
SectionShape.children = ValidChildren;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-template-renderer\\section-shape.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-translation\\index.js", {"./metamask-translation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-translation\\metamask-translation.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmetamask-translation%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metamaskTranslation.default;
  }
});
var _metamaskTranslation = _interopRequireDefault(require("./metamask-translation"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-translation\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-translation\\metamask-translation.js", {"../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../metamask-template-renderer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\index.js","../metamask-template-renderer/section-shape":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\metamask-template-renderer\\section-shape.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmetamask-translation%5Cmetamask-translation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MetaMaskTranslation;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _metamaskTemplateRenderer = _interopRequireDefault(require("../metamask-template-renderer"));
var _sectionShape = require("../metamask-template-renderer/section-shape");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * MetaMaskTranslation is a simple helper component for adding full translation
 * support to the template system. We do pass the translation function to the
 * template getValues function, but passing it React components as variables
 * would require React to be in scope, and breaks the object pattern paradigm.
 *
 * This component gets around that by converting variables that are templates
 * themselves into tiny React trees. This component does additional validation
 * to make sure that the tree has a single root node, with maximum two leaves.
 * Each subnode can have a maximum of one child that must be a string.
 *
 * This enforces a maximum recursion depth of 2, preventing translation strings
 * from being performance hogs. We could further limit this, and also attenuate
 * the safeComponentList for what kind of components we allow these special
 * trees to contain.
 *
 * @param options
 * @param options.translationKey
 * @param options.variables
 */
function MetaMaskTranslation({
  translationKey,
  variables
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return t(translationKey, variables === null || variables === void 0 ? void 0 : variables.map(variable => {
    if (typeof variable === 'object' && !Array.isArray(variable) && variable.element) {
      var _variable$children, _variable$children$, _variable$children2, _variable$children2$;
      if (!variable.key) {
        throw new Error(`When using MetaMask Template Language in a MetaMaskTranslation variable, you must provide a key for the section regardless of syntax.
            Section with element '${variable.element}' for translationKey: '${translationKey}' has no key property`);
      }
      if (variable.children && Array.isArray(variable.children) && variable.children.length > 2) {
        throw new Error('MetaMaskTranslation only renders templates with a single section and maximum two children');
      } else if (((_variable$children = variable.children) === null || _variable$children === void 0 ? void 0 : (_variable$children$ = _variable$children[0]) === null || _variable$children$ === void 0 ? void 0 : _variable$children$.children) !== undefined && typeof variable.children[0].children !== 'string' || ((_variable$children2 = variable.children) === null || _variable$children2 === void 0 ? void 0 : (_variable$children2$ = _variable$children2[1]) === null || _variable$children2$ === void 0 ? void 0 : _variable$children2$.children) !== undefined && typeof variable.children[1].children !== 'string') {
        throw new Error('MetaMaskTranslation does not allow for component trees of non trivial depth');
      }
      return /*#__PURE__*/_react.default.createElement(_metamaskTemplateRenderer.default, {
        key: `${translationKey}-${variable.key}`,
        sections: variable
      });
    }
    return variable;
  }));
}
MetaMaskTranslation.propTypes = {
  /**
   * Translation object key
   */
  translationKey: _propTypes.default.string.isRequired,
  /**
   * Array of variables for the MetaMaskTranslation component
   */
  variables: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.shape(_sectionShape.SectionShape)]))
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-translation\\metamask-translation.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js", {"./modal-content":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\modal-content\\index.js","./modal.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\modal.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalContent", {
  enumerable: true,
  get: function () {
    return _modalContent.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});
var _modal = _interopRequireDefault(require("./modal.component"));
var _modalContent = _interopRequireDefault(require("./modal-content"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modal\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\modal-content\\index.js", {"./modal-content.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\modal-content\\modal-content.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodal%5Cmodal-content%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _modalContent.default;
  }
});
var _modalContent = _interopRequireDefault(require("./modal-content.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modal\\modal-content\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\modal-content\\modal-content.component.js", {"prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodal%5Cmodal-content%5Cmodal-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ModalContent extends _react.PureComponent {
  render() {
    const {
      title,
      description
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content"
    }, title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content__title"
    }, title) : null, description && /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content__description"
    }, description));
  }
}
exports.default = ModalContent;
_defineProperty(ModalContent, "propTypes", {
  title: _propTypes.default.string,
  description: _propTypes.default.string
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modal\\modal-content\\modal-content.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\modal.component.js", {"../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodal%5Cmodal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _button = _interopRequireDefault(require("../../ui/button"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class Modal extends _react.PureComponent {
  render() {
    const {
      children,
      headerText,
      onClose,
      onSubmit,
      submitType,
      submitText,
      submitDisabled,
      onCancel,
      cancelType,
      cancelText,
      contentClass,
      containerClass,
      hideFooter
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('modal-container', containerClass)
    }, headerText && /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header-text"
    }, headerText), /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header-close",
      "data-testid": "modal-header-close",
      onClick: onClose
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('modal-container__content', contentClass)
    }, children), hideFooter ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__footer"
    }, onCancel && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: cancelType,
      onClick: onCancel,
      className: "modal-container__footer-button"
    }, cancelText), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: submitType,
      onClick: onSubmit,
      disabled: submitDisabled,
      className: "modal-container__footer-button"
    }, submitText)));
  }
}
exports.default = Modal;
_defineProperty(Modal, "propTypes", {
  children: _propTypes.default.node,
  contentClass: _propTypes.default.string,
  containerClass: _propTypes.default.string,
  // Header text
  headerText: _propTypes.default.string,
  onClose: _propTypes.default.func,
  // Submit button (right button)
  onSubmit: _propTypes.default.func,
  submitType: _propTypes.default.string,
  submitText: _propTypes.default.string,
  submitDisabled: _propTypes.default.bool,
  hideFooter: _propTypes.default.bool,
  // Cancel button (left button)
  onCancel: _propTypes.default.func,
  cancelType: _propTypes.default.string,
  cancelText: _propTypes.default.string
});
_defineProperty(Modal, "defaultProps", {
  submitType: 'primary',
  cancelType: 'secondary'
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modal\\modal.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.component.js", {"../../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../../helpers/utils/hardware":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\hardware.js","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/editable-label":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\editable-label\\index.js","../../../ui/qr-code":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\qr-code\\index.js","../account-modal-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\index.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-details-modal%5Caccount-details-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _accountModalContainer = _interopRequireDefault(require("../account-modal-container"));
var _qrCode = _interopRequireDefault(require("../../../ui/qr-code"));
var _editableLabel = _interopRequireDefault(require("../../../ui/editable-label"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _util = require("../../../../helpers/utils/util");
var _hardware = require("../../../../helpers/utils/hardware");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _routes = require("../../../../helpers/constants/routes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class AccountDetailsModal extends _react.Component {
  render() {
    const {
      selectedIdentity,
      chainId,
      showExportPrivateKeyModal,
      setAccountLabel,
      keyrings,
      rpcPrefs,
      history,
      hideModal,
      blockExplorerLinkText
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity;
    const keyring = keyrings.find(kr => {
      return kr.accounts.includes(address);
    });
    let exportPrivateKeyFeatureEnabled = true;
    // This feature is disabled for hardware wallets
    if ((0, _hardware.isHardwareKeyring)(keyring === null || keyring === void 0 ? void 0 : keyring.type)) {
      exportPrivateKeyFeatureEnabled = false;
    }
    const routeToAddBlockExplorerUrl = () => {
      hideModal();
      history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
    };
    const openBlockExplorer = () => {
      const accountLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
      this.context.trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        event: _metametrics.MetaMetricsEventName.ExternalLinkClicked,
        properties: {
          link_type: _metametrics.MetaMetricsEventLinkType.AccountTracker,
          location: 'Account Details Modal',
          url_domain: (0, _util.getURLHostName)(accountLink)
        }
      });
      global.platform.openTab({
        url: accountLink
      });
    };
    return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
      className: "account-details-modal"
    }, /*#__PURE__*/_react.default.createElement(_editableLabel.default, {
      className: "account-details-modal__name",
      defaultValue: name,
      onSubmit: label => setAccountLabel(address, label),
      accounts: this.props.accounts
    }), /*#__PURE__*/_react.default.createElement(_qrCode.default, {
      Qr: {
        data: address
      }
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "account-details-modal__divider"
    }), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "account-details-modal__button",
      onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer
    }, this.context.t(blockExplorerLinkText.firstPart, [blockExplorerLinkText.secondPart])), exportPrivateKeyFeatureEnabled && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "account-details-modal__button",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Accounts,
          event: _metametrics.MetaMetricsEventName.KeyExportSelected,
          properties: {
            key_type: _metametrics.MetaMetricsEventKeyType.Pkey,
            location: 'Account Details Modal'
          }
        });
        showExportPrivateKeyModal();
      }
    }, this.context.t('exportPrivateKey')));
  }
}
exports.default = AccountDetailsModal;
_defineProperty(AccountDetailsModal, "propTypes", {
  selectedIdentity: _propTypes.default.object,
  chainId: _propTypes.default.string,
  showExportPrivateKeyModal: _propTypes.default.func,
  setAccountLabel: _propTypes.default.func,
  keyrings: _propTypes.default.array,
  rpcPrefs: _propTypes.default.object,
  accounts: _propTypes.default.array,
  history: _propTypes.default.object,
  hideModal: _propTypes.default.func,
  blockExplorerLinkText: _propTypes.default.object
});
_defineProperty(AccountDetailsModal, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-details-modal\\account-details-modal.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.container.js", {"../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./account-details-modal.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-details-modal%5Caccount-details-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reactRouterDom = require("react-router-dom");
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  return {
    chainId: (0, _selectors.getCurrentChainId)(state),
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state),
    keyrings: state.metamask.keyrings,
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state),
    accounts: (0, _selectors.getMetaMaskAccountsOrdered)(state),
    blockExplorerLinkText: (0, _selectors.getBlockExplorerLinkText)(state, true)
  };
};
const mapDispatchToProps = dispatch => {
  return {
    showExportPrivateKeyModal: () => dispatch((0, _actions.showModal)({
      name: 'EXPORT_PRIVATE_KEY'
    })),
    setAccountLabel: (address, label) => dispatch((0, _actions.setAccountLabel)(address, label)),
    hideModal: () => {
      dispatch((0, _actions.hideModal)());
    }
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_accountDetailsModal.default);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-details-modal\\account-details-modal.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\index.js", {"./account-details-modal.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-details-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountDetailsModal.default;
  }
});
var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-details-modal\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.component.js", {"../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-modal-container%5Caccount-modal-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountModalContainer;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function AccountModalContainer(props, context) {
  const {
    className,
    selectedIdentity,
    showBackButton,
    backButtonAction,
    hideModal,
    children
  } = props;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(className, 'account-modal'),
    style: {
      borderRadius: '4px'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "account-modal__container"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: selectedIdentity.address,
    diameter: 64
  })), showBackButton && /*#__PURE__*/_react.default.createElement("div", {
    className: "account-modal__back",
    onClick: backButtonAction
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-left fa-lg"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "account-modal__back-text"
  }, context.t('back'))), /*#__PURE__*/_react.default.createElement("button", {
    className: "account-modal__close",
    onClick: hideModal
  }), children));
}
AccountModalContainer.contextTypes = {
  t: _propTypes.default.func
};
AccountModalContainer.defaultProps = {
  showBackButton: false,
  children: null,
  backButtonAction: undefined
};
AccountModalContainer.propTypes = {
  className: _propTypes.default.string,
  selectedIdentity: _propTypes.default.object.isRequired,
  showBackButton: _propTypes.default.bool,
  backButtonAction: _propTypes.default.func,
  hideModal: _propTypes.default.func.isRequired,
  children: _propTypes.default.node
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-modal-container\\account-modal-container.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.container.js", {"../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./account-modal-container.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-modal-container%5Caccount-modal-container.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _accountModalContainer = _interopRequireDefault(require("./account-modal-container.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToProps(state, ownProps) {
  return {
    selectedIdentity: ownProps.selectedIdentity || (0, _selectors.getSelectedIdentity)(state)
  };
}
function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => {
      dispatch((0, _actions.hideModal)());
    }
  };
}
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_accountModalContainer.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-modal-container\\account-modal-container.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\index.js", {"./account-modal-container.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-modal-container%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountModalContainer.default;
  }
});
var _accountModalContainer = _interopRequireDefault(require("./account-modal-container.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-modal-container\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.component.js", {"../../modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-delete-network%5Cconfirm-delete-network.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modal = _interopRequireWildcard(require("../../modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmDeleteNetwork extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleDelete", () => {
      this.props.removeNetworkConfiguration(this.props.target).then(() => {
        this.props.onConfirm();
        this.props.hideModal();
      });
    });
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleDelete,
      onCancel: () => this.props.hideModal(),
      submitText: t('delete'),
      cancelText: t('cancel'),
      submitType: "danger-primary"
    }, /*#__PURE__*/_react.default.createElement(_modal.ModalContent, {
      title: t('deleteNetwork'),
      description: t('deleteNetworkDescription')
    }));
  }
}
exports.default = ConfirmDeleteNetwork;
_defineProperty(ConfirmDeleteNetwork, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  removeNetworkConfiguration: _propTypes.default.func.isRequired,
  onConfirm: _propTypes.default.func.isRequired,
  target: _propTypes.default.string.isRequired
});
_defineProperty(ConfirmDeleteNetwork, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./confirm-delete-network.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-delete-network%5Cconfirm-delete-network.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _actions = require("../../../../store/actions");
var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapDispatchToProps = dispatch => {
  return {
    removeNetworkConfiguration: target => dispatch((0, _actions.removeNetworkConfiguration)(target))
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(null, mapDispatchToProps))(_confirmDeleteNetwork.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\index.js", {"./confirm-delete-network.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-delete-network%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmDeleteNetwork.default;
  }
});
var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-delete-network\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.component.js", {"../../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-remove-account%5Cconfirm-remove-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _modal = _interopRequireDefault(require("../../modal"));
var _util = require("../../../../helpers/utils/util");
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _metametrics = require("../../../../../shared/constants/metametrics");
var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmRemoveAccount extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleRemove", () => {
      this.props.removeAccount(this.props.identity.address).then(() => this.props.hideModal());
    });
    _defineProperty(this, "handleCancel", () => {
      this.props.hideModal();
    });
  }
  renderSelectedAccount() {
    const {
      t
    } = this.context;
    const {
      identity,
      rpcPrefs,
      chainId
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__identicon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: identity.address,
      diameter: 32
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__name"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-remove-account__account__label"
    }, t('name')), /*#__PURE__*/_react.default.createElement("span", {
      className: "account_value"
    }, identity.name)), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__address"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-remove-account__account__label"
    }, t('publicAddress')), /*#__PURE__*/_react.default.createElement("span", {
      className: "account_value"
    }, (0, _util.addressSummary)(identity.address, 4, 4))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__link"
    }, /*#__PURE__*/_react.default.createElement("a", {
      onClick: () => {
        const accountLink = (0, _etherscanLink.getAccountLink)(identity.address, chainId, rpcPrefs);
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Accounts,
          event: 'Clicked Block Explorer Link',
          properties: {
            link_type: 'Account Tracker',
            action: 'Remove Account',
            block_explorer_domain: (0, _util.getURLHostName)(accountLink)
          }
        });
        global.platform.openTab({
          url: accountLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer",
      title: t('etherscanView')
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-share-square",
      style: {
        color: 'var(--color-icon-muted)'
      },
      title: t('etherscanView')
    }))));
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: `${t('removeAccount')}?`,
      onClose: this.handleCancel,
      onSubmit: this.handleRemove,
      onCancel: this.handleCancel,
      submitText: t('remove'),
      cancelText: t('nevermind')
    }, /*#__PURE__*/_react.default.createElement("div", null, this.renderSelectedAccount(), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__description"
    }, t('removeAccountDescription'), /*#__PURE__*/_react.default.createElement("a", {
      className: "confirm-remove-account__link",
      rel: "noopener noreferrer",
      target: "_blank",
      href: _zendeskUrl.default.IMPORTED_ACCOUNTS
    }, t('learnMore')))));
  }
}
exports.default = ConfirmRemoveAccount;
_defineProperty(ConfirmRemoveAccount, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  removeAccount: _propTypes.default.func.isRequired,
  identity: _propTypes.default.object.isRequired,
  chainId: _propTypes.default.string.isRequired,
  rpcPrefs: _propTypes.default.object.isRequired
});
_defineProperty(ConfirmRemoveAccount, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./confirm-remove-account.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-remove-account%5Cconfirm-remove-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _selectors = require("../../../../selectors");
var _actions = require("../../../../store/actions");
var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  return {
    chainId: (0, _selectors.getCurrentChainId)(state),
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state)
  };
};
const mapDispatchToProps = dispatch => {
  return {
    removeAccount: address => dispatch((0, _actions.removeAccount)(address))
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmRemoveAccount.default);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\index.js", {"./confirm-remove-account.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-remove-account%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmRemoveAccount.default;
  }
});
var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-remove-account\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.component.js", {"../../modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-reset-account%5Cconfirm-reset-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modal = _interopRequireWildcard(require("../../modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmResetAccount extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleReset", () => {
      this.props.resetAccount().then(() => this.props.hideModal());
    });
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleReset,
      onCancel: () => this.props.hideModal(),
      submitText: t('clear'),
      cancelText: t('nevermind'),
      submitType: "danger-primary"
    }, /*#__PURE__*/_react.default.createElement(_modal.ModalContent, {
      title: `${t('clearActivity')}?`,
      description: t('clearActivityDescription')
    }));
  }
}
exports.default = ConfirmResetAccount;
_defineProperty(ConfirmResetAccount, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  resetAccount: _propTypes.default.func.isRequired
});
_defineProperty(ConfirmResetAccount, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./confirm-reset-account.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-reset-account%5Cconfirm-reset-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _actions = require("../../../../store/actions");
var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapDispatchToProps = dispatch => {
  return {
    resetAccount: () => dispatch((0, _actions.resetAccount)())
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(null, mapDispatchToProps))(_confirmResetAccount.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\index.js", {"./confirm-reset-account.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-reset-account%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmResetAccount.default;
  }
});
var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-reset-account\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js", {"../../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useCopyToClipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../pages/send/send.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\send\\send.utils.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/button/button.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\button.component.js","../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../ui/nft-collection-image/nft-collection-image":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\nft-collection-image\\nft-collection-image.js","../../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../../ui/tooltip/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Ccontract-details-modal%5Ccontract-details-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ContractDetailsModal;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _reactRedux = require("react-redux");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button/button.component"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip/tooltip"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _send = require("../../../../pages/send/send.utils");
var _popover = _interopRequireDefault(require("../../../ui/popover"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _useCopyToClipboard = require("../../../../hooks/useCopyToClipboard");
var _selectors = require("../../../../selectors");
var _transaction = require("../../../../../shared/constants/transaction");
var _nftCollectionImage = _interopRequireDefault(require("../../../ui/nft-collection-image/nft-collection-image"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ContractDetailsModal({
  onClose,
  tokenName,
  tokenAddress,
  toAddress,
  chainId,
  rpcPrefs,
  tokenId,
  assetName,
  assetStandard,
  isContractRequestingSignature
}) {
  var _addressBookEntry$dat, _addressBookEntry$dat2;
  const t = (0, _useI18nContext.useI18nContext)();
  const [copiedTokenAddress, handleCopyTokenAddress] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const [copiedToAddress, handleCopyToAddress] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const addressBookEntry = (0, _reactRedux.useSelector)(state => ({
    data: (0, _selectors.getAddressBookEntry)(state, toAddress)
  }));
  const nft = assetStandard === _transaction.TokenStandard.ERC721 || assetStandard === _transaction.TokenStandard.ERC1155 ||
  // if we don't have an asset standard but we do have either both an assetname and a tokenID or both a tokenName and tokenId we assume its an NFT
  assetName && tokenId || tokenName && tokenId;
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "contract-details-modal"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 6,
    paddingRight: 4,
    paddingBottom: 8,
    paddingLeft: 4,
    className: "contract-details-modal__content"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Bold,
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    display: _designSystem.DISPLAY.FLEX,
    boxProps: {
      marginTop: 0,
      marginBottom: 0
    }
  }, t('contractTitle')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.TextColor.textAlternative,
    boxProps: {
      marginTop: 2,
      marginBottom: 0
    }
  }, t('contractDescription')), !isContractRequestingSignature && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4,
    marginBottom: 2
  }, nft ? t('contractNFT') : t('contractToken')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    borderRadius: _designSystem.Size.SM,
    borderStyle: _designSystem.BorderStyle.solid,
    borderColor: _designSystem.BorderColor.borderDefault,
    className: "contract-details-modal__content__contract"
  }, nft ? /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: 4
  }, /*#__PURE__*/_react.default.createElement(_nftCollectionImage.default, {
    assetName: assetName,
    tokenAddress: tokenAddress
  })) : /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "contract-details-modal__content__contract__identicon",
    address: tokenAddress,
    diameter: 24
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    "data-testid": "recipient"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Bold,
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    marginTop: 4
  }, tokenName || (0, _send.ellipsify)(tokenAddress)), tokenName && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.TextColor.textAlternative,
    marginTop: 0,
    marginBottom: 4
  }, (0, _send.ellipsify)(tokenAddress))), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    marginLeft: "auto",
    marginRight: 4,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: copiedTokenAddress ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    display: _designSystem.DISPLAY.FLEX,
    iconName: copiedTokenAddress ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
    onClick: () => handleCopyTokenAddress(tokenAddress),
    color: _designSystem.Color.iconMuted,
    ariaLabel: copiedTokenAddress ? t('copiedExclamation') : t('copyToClipboard')
  })), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: t('openInBlockExplorer')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    display: _designSystem.DISPLAY.FLEX,
    iconName: _componentLibrary.IconName.Export,
    color: _designSystem.Color.iconMuted,
    onClick: () => {
      const blockExplorerTokenLink = (0, _etherscanLink.getAccountLink)(tokenAddress, chainId, {
        blockExplorerUrl: (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) ?? null
      }, null);
      global.platform.openTab({
        url: blockExplorerTokenLink
      });
    },
    ariaLabel: t('openInBlockExplorer')
  }))))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4,
    marginBottom: 2
  }, nft && t('contractRequestingAccess'), isContractRequestingSignature && t('contractRequestingSignature'), !nft && !isContractRequestingSignature && t('contractRequestingSpendingCap')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    borderRadius: _designSystem.Size.SM,
    borderStyle: _designSystem.BorderStyle.solid,
    borderColor: _designSystem.BorderColor.borderDefault,
    className: "contract-details-modal__content__contract"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "contract-details-modal__content__contract__identicon",
    diameter: 24,
    address: toAddress
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    "data-testid": "recipient"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Bold,
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    marginTop: 4
  }, (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat = addressBookEntry.data) === null || _addressBookEntry$dat === void 0 ? void 0 : _addressBookEntry$dat.name) || (0, _send.ellipsify)(toAddress)), (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat2 = addressBookEntry.data) === null || _addressBookEntry$dat2 === void 0 ? void 0 : _addressBookEntry$dat2.name) && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.TextColor.textAlternative,
    marginTop: 0,
    marginBottom: 4
  }, (0, _send.ellipsify)(toAddress))), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    marginLeft: "auto",
    marginRight: 4,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: copiedToAddress ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    display: _designSystem.DISPLAY.FLEX,
    iconName: copiedToAddress ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
    onClick: () => handleCopyToAddress(toAddress),
    color: _designSystem.Color.iconMuted,
    ariaLabel: copiedTokenAddress ? t('copiedExclamation') : t('copyToClipboard')
  })), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: t('openInBlockExplorer')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    display: _designSystem.DISPLAY.FLEX,
    iconName: _componentLibrary.IconName.Export,
    color: _designSystem.Color.iconMuted,
    onClick: () => {
      const blockExplorerTokenLink = (0, _etherscanLink.getAccountLink)(toAddress, chainId, {
        blockExplorerUrl: (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) ?? null
      }, null);
      global.platform.openTab({
        url: blockExplorerTokenLink
      });
    },
    ariaLabel: t('openInBlockExplorer')
  }))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    paddingTop: 6,
    paddingRight: 4,
    paddingBottom: 6,
    paddingLeft: 4
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: () => onClose()
  }, t('recoveryPhraseReminderConfirm'))));
}
ContractDetailsModal.propTypes = {
  /**
   * Function that should close the modal
   */
  onClose: _propTypes.default.func,
  /**
   * Name of the token that is waiting to be allowed
   */
  tokenName: _propTypes.default.string,
  /**
   * Address of the token that is waiting to be allowed
   */
  tokenAddress: _propTypes.default.string,
  /**
   * Contract address requesting spending cap
   */
  toAddress: _propTypes.default.string,
  /**
   * Current network chainId
   */
  chainId: _propTypes.default.string,
  /**
   * RPC prefs of the current network
   */
  rpcPrefs: _propTypes.default.object,
  /**
   * The token id of the NFT
   */
  tokenId: _propTypes.default.string,
  /**
   * Token Standard
   */
  assetStandard: _propTypes.default.string,
  /**
   * The name of the collection
   */
  assetName: _propTypes.default.string,
  /**
   * Whether contract requesting signature flow has started
   */
  isContractRequestingSignature: _propTypes.default.bool
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js", {"../../../../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../../ui/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconvert-token-to-nft-modal%5Cconvert-token-to-nft-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _modal = _interopRequireDefault(require("../../modal"));
var _typography = _interopRequireDefault(require("../../../ui/typography"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _routes = require("../../../../helpers/constants/routes");
var _metamask = require("../../../../ducks/metamask/metamask");
var _actions = require("../../../../store/actions");
var _stringUtils = require("../../../../../shared/modules/string-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConvertTokenToNFTModal = ({
  hideModal,
  tokenAddress
}) => {
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const allNfts = (0, _reactRedux.useSelector)(_metamask.getNfts);
  const tokenAddedAsNFT = allNfts.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress));
  return /*#__PURE__*/_react.default.createElement(_modal.default, {
    onSubmit: async () => {
      if (tokenAddedAsNFT) {
        await dispatch((0, _actions.ignoreTokens)({
          tokensToIgnore: tokenAddress,
          dontShowLoadingIndicator: true
        }));
        const {
          tokenId
        } = tokenAddedAsNFT;
        history.push({
          pathname: `${_routes.ASSET_ROUTE}/${tokenAddress}/${tokenId}`
        });
      } else {
        history.push({
          pathname: _routes.ADD_NFT_ROUTE,
          state: {
            tokenAddress
          }
        });
      }
      hideModal();
    },
    submitText: t('yes'),
    onCancel: () => hideModal(),
    cancelText: t('cancel')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "convert-token-to-nft-modal"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H6,
    boxProps: {
      marginTop: 2
    }
  }, tokenAddedAsNFT ? t('convertTokenToNFTExistDescription') : t('convertTokenToNFTDescription'))));
};
ConvertTokenToNFTModal.propTypes = {
  hideModal: _propTypes.default.func.isRequired,
  tokenAddress: _propTypes.default.string
};
var _default = (0, _withModalProps.default)(ConvertTokenToNFTModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\customize-nonce\\customize-nonce.component.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Ccustomize-nonce%5Ccustomize-nonce.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modal = _interopRequireDefault(require("../../modal"));
var _textField = _interopRequireDefault(require("../../../ui/text-field"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const CustomizeNonce = ({
  hideModal,
  customNonceValue,
  nextNonce,
  updateCustomNonce,
  getNextNonce
}) => {
  const [customNonce, setCustomNonce] = (0, _react.useState)('');
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_modal.default, {
    onSubmit: () => {
      if (customNonce === '') {
        updateCustomNonce(customNonceValue);
      } else {
        updateCustomNonce(customNonce);
      }
      getNextNonce();
      hideModal();
    },
    submitText: t('save'),
    onCancel: () => hideModal(),
    cancelText: t('cancel'),
    contentClass: "customize-nonce-modal-content",
    containerClass: "customize-nonce-modal-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal__main-header"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    className: "customize-nonce-modal__main-title",
    variant: _designSystem.TextVariant.headingSm,
    as: "h4",
    fontWeight: _designSystem.FontWeight.Bold
  }, t('editNonceField')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.Close,
    className: "customize-nonce-modal__close",
    size: _componentLibrary.ButtonIconSize.Sm,
    ariaLabel: t('close'),
    onClick: hideModal
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 2,
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Normal
  }, t('editNonceMessage'), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "customize-nonce-modal__link",
    rel: "noopener noreferrer",
    target: "_blank",
    href: _zendeskUrl.default.CUSTOMIZE_NONCE
  }, t('learnMoreUpperCase')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold,
    boxProps: {
      width: _designSystem.BLOCK_SIZES.FIVE_SIXTHS
    }
  }, t('editNonceField')), /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.ONE_SIXTH
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "customize-nonce-modal__reset",
    "data-testid": "customize-nonce-reset",
    onClick: () => {
      setCustomNonce(nextNonce);
    }
  }, t('reset')))), /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal__input"
  }, /*#__PURE__*/_react.default.createElement(_textField.default, {
    type: "number",
    "data-testid": "custom-nonce-input",
    min: "0",
    placeholder: customNonceValue || typeof nextNonce === 'number' && nextNonce.toString(),
    onChange: e => {
      setCustomNonce(e.target.value);
    },
    fullWidth: true,
    margin: "dense",
    value: customNonce,
    id: "custom-nonce-id"
  })))));
};
CustomizeNonce.propTypes = {
  hideModal: _propTypes.default.func.isRequired,
  customNonceValue: _propTypes.default.string,
  nextNonce: _propTypes.default.number,
  updateCustomNonce: _propTypes.default.func,
  getNextNonce: _propTypes.default.func
};
var _default = (0, _withModalProps.default)(CustomizeNonce);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\customize-nonce\\customize-nonce.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\customize-nonce\\index.js", {"./customize-nonce.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\customize-nonce\\customize-nonce.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Ccustomize-nonce%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _customizeNonce.default;
  }
});
var _customizeNonce = _interopRequireDefault(require("./customize-nonce.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\customize-nonce\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.component.js", {"../../../../../shared/lib/transactions-controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\transactions-controller-utils.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../ui/text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","../../modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js","bignumber.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\bignumber.js\\bignumber.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cedit-approval-permission%5Cedit-approval-permission.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _modal = _interopRequireDefault(require("../../modal"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _textField = _interopRequireDefault(require("../../../ui/text-field"));
var _transactionsControllerUtils = require("../../../../../shared/lib/transactions-controller-utils");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const MAX_UNSIGNED_256_INT = new _bignumber.default(2).pow(256).minus(1).toString(10);
class EditApprovalPermission extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      // This is used as a TextField value, which should be a string.
      customSpendLimit: this.props.customTokenAmount || '',
      selectedOptionIsUnlimited: !this.props.customTokenAmount
    });
  }
  renderModalContent(error) {
    const {
      t
    } = this.context;
    const {
      hideModal,
      selectedIdentity,
      tokenAmount,
      tokenSymbol,
      tokenBalance,
      customTokenAmount,
      origin
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity || {};
    const {
      selectedOptionIsUnlimited
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__title"
    }, t('editPermission')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      iconName: _componentLibrary.IconName.Close,
      size: _componentLibrary.ButtonIconSize.Lg,
      className: "edit-approval-permission__header__close",
      onClick: hideModal
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__account"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 32
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__name-and-balance-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__name"
    }, name), /*#__PURE__*/_react.default.createElement("div", null, t('balance')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__balance"
    }, `${(0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)(tokenBalance, 9)} ${tokenSymbol}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__title"
    }, t('spendLimitPermission')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__description"
    }, t('allowWithdrawAndSpend', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button",
      onClick: () => this.setState({
        selectedOptionIsUnlimited: true
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__radio-button-outline': !selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__radio-button-outline--selected': selectedOptionIsUnlimited
      })
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-fill"
    }), selectedOptionIsUnlimited && /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-dot"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-text"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__option-label': !selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__option-label--selected': selectedOptionIsUnlimited
      })
    }, new _bignumber.default(tokenAmount).equals(new _bignumber.default(MAX_UNSIGNED_256_INT)) ? t('unlimited') : t('proposedApprovalLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-description"
    }, t('spendLimitRequestedBy', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-value"
    }, `${Number(tokenAmount)} ${tokenSymbol}`))), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button",
      onClick: () => this.setState({
        selectedOptionIsUnlimited: false
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__radio-button-outline': selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__radio-button-outline--selected': !selectedOptionIsUnlimited
      })
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-fill"
    }), !selectedOptionIsUnlimited && /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-dot"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-text"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__option-label': selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__option-label--selected': !selectedOptionIsUnlimited
      })
    }, t('customSpendLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-description"
    }, t('enterMaxSpendLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-input"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "number",
      placeholder: `${Number(customTokenAmount || tokenAmount)} ${tokenSymbol}`,
      onChange: event => {
        this.setState({
          customSpendLimit: event.target.value
        });
        if (selectedOptionIsUnlimited) {
          this.setState({
            selectedOptionIsUnlimited: false
          });
        }
      },
      fullWidth: true,
      margin: "dense",
      value: this.state.customSpendLimit,
      error: error
    }))))));
  }
  validateSpendLimit() {
    const {
      t
    } = this.context;
    const {
      decimals,
      requiredMinimum
    } = this.props;
    const {
      selectedOptionIsUnlimited,
      customSpendLimit
    } = this.state;
    if (selectedOptionIsUnlimited || !customSpendLimit) {
      return undefined;
    }
    let customSpendLimitNumber;
    try {
      customSpendLimitNumber = new _bignumber.default(customSpendLimit);
    } catch (error) {
      _loglevel.default.debug(`Error converting '${customSpendLimit}' to BigNumber:`, error);
      return t('spendLimitInvalid');
    }
    if (customSpendLimitNumber.isNegative()) {
      return t('spendLimitInvalid');
    }
    const maxTokenAmount = (0, _transactionsControllerUtils.calcTokenAmount)(MAX_UNSIGNED_256_INT, decimals);
    if (customSpendLimitNumber.greaterThan(maxTokenAmount)) {
      return t('spendLimitTooLarge');
    }
    if (requiredMinimum !== undefined && customSpendLimitNumber.lessThan(requiredMinimum)) {
      return t('spendLimitInsufficient');
    }
    return undefined;
  }
  render() {
    const {
      t
    } = this.context;
    const {
      setCustomAmount,
      hideModal,
      customTokenAmount
    } = this.props;
    const {
      selectedOptionIsUnlimited,
      customSpendLimit
    } = this.state;
    const error = this.validateSpendLimit();
    const disabled = Boolean(customSpendLimit === customTokenAmount && !selectedOptionIsUnlimited || error);
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: () => {
        setCustomAmount(selectedOptionIsUnlimited ? '' : customSpendLimit);
        hideModal();
      },
      submitText: t('save'),
      contentClass: "edit-approval-permission-modal-content",
      containerClass: "edit-approval-permission-modal-container",
      submitDisabled: disabled
    }, this.renderModalContent(error));
  }
}
exports.default = EditApprovalPermission;
_defineProperty(EditApprovalPermission, "propTypes", {
  decimals: _propTypes.default.number,
  hideModal: _propTypes.default.func.isRequired,
  selectedIdentity: _propTypes.default.object,
  tokenAmount: _propTypes.default.string,
  customTokenAmount: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  tokenBalance: _propTypes.default.string,
  setCustomAmount: _propTypes.default.func,
  origin: _propTypes.default.string.isRequired,
  requiredMinimum: _propTypes.default.instanceOf(_bignumber.default)
});
_defineProperty(EditApprovalPermission, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./edit-approval-permission.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cedit-approval-permission%5Cedit-approval-permission.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _selectors = require("../../../../selectors");
var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const modalStateProps = state.appState.modal.modalState.props || {};
  return {
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state),
    ...modalStateProps
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps))(_editApprovalPermission.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\index.js", {"./edit-approval-permission.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cedit-approval-permission%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editApprovalPermission.default;
  }
});
var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\edit-approval-permission\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\eth-sign-modal\\eth-sign-modal.js", {"../../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/check-box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Ceth-sign-modal%5Ceth-sign-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _checkBox = _interopRequireDefault(require("../../../ui/check-box"));
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _metametrics2 = require("../../../../contexts/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const EthSignModal = ({
  hideModal
}) => {
  const [isEthSignChecked, setIsEthSignChecked] = (0, _react.useState)(false);
  const [showTextField, setShowTextField] = (0, _react.useState)(false);
  const [inputKeyword, setInputKeyword] = (0, _react.useState)('');
  const disabledRpcMethodPreferences = (0, _reactRedux.useSelector)(_selectors.getDisabledRpcMethodPreferences);
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const handleSubmit = () => {
    dispatch((0, _actions.setDisabledRpcMethodPreference)('eth_sign', !disabledRpcMethodPreferences.eth_sign));
    hideModal();
  };
  const isValid = inputKeyword === t('toggleEthSignModalFormValidation');
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "eth-sign-modal",
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    justifyContent: _designSystem.JustifyContent.flexStart,
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    marginBottom: 4,
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    className: "eth-sign-modal__warning-icon",
    name: _componentLibrary.IconName.Danger,
    color: _designSystem.IconColor.errorDefault,
    size: _componentLibrary.IconSize.Lg
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    className: "eth-sign-modal__close",
    iconName: _componentLibrary.IconName.Close,
    size: _designSystem.Size.SM,
    onClick: () => hideModal(),
    ariaLabel: t('close')
  })), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingMd,
    textAlign: _designSystem.TextAlign.Center,
    marginBottom: 6
  }, t('toggleEthSignModalTitle')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd
  }, t('toggleEthSignModalDescription'), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    href: "https://support.metamask.io/hc/en-us/articles/14764161421467",
    externalLink: true
  }, t('learnMoreUpperCase'))), /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.DANGER,
    marginTop: 6,
    marginBottom: 6
  }, t('toggleEthSignModalBannerText'), t('toggleEthSignModalBannerBoldText')), showTextField ? /*#__PURE__*/_react.default.createElement(_componentLibrary.FormTextField, {
    id: "enter-eth-sign-text",
    label: t('toggleEthSignModalFormLabel'),
    error: inputKeyword.length > 0 && !isValid,
    helpText: inputKeyword.length > 0 && !isValid && t('toggleEthSignModalFormError'),
    onChange: event => setInputKeyword(event.target.value),
    value: inputKeyword,
    onPaste: event => event.preventDefault()
  }) : /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.flexStart,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "eth-sign__checkbox",
    className: "eth-sign__checkbox",
    dataTestId: "eth-sign__checkbox",
    checked: isEthSignChecked,
    onClick: () => {
      setIsEthSignChecked(!isEthSignChecked);
    }
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Label, {
    htmlFor: "eth-sign__checkbox"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "span"
  }, t('toggleEthSignModalCheckBox')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    gap: 4,
    marginTop: 6
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonSecondary, {
    onClick: () => hideModal(),
    size: _designSystem.Size.LG,
    block: true
  }, t('cancel')), showTextField ? /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
    danger: true,
    block: true,
    disabled: !isValid,
    onClick: handleSubmit,
    size: _designSystem.Size.LG
  }, t('enableSnap')) : /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
    block: true,
    disabled: !isEthSignChecked,
    size: _designSystem.Size.LG,
    onClick: () => {
      setShowTextField(true);
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Settings,
        event: _metametrics.MetaMetricsEventName.OnboardingWalletAdvancedSettings,
        properties: {
          location: 'Settings',
          enable_eth_sign: true
        }
      });
    }
  }, t('continue'))));
};
EthSignModal.propTypes = {
  // The function to close the Modal
  hideModal: _propTypes.default.func
};
var _default = (0, _withModalProps.default)(EthSignModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\eth-sign-modal\\eth-sign-modal.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.component.js", {"../../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../account-modal-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-modal-container\\index.js","../hold-to-reveal-modal/hold-to-reveal-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hold-to-reveal-modal\\hold-to-reveal-modal.js","./password-input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\password-input.js","./private-key":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\private-key.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cexport-private-key-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _loglevel = _interopRequireDefault(require("loglevel"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
var _accountModalContainer = _interopRequireDefault(require("../account-modal-container"));
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _holdToRevealModal = _interopRequireDefault(require("../hold-to-reveal-modal/hold-to-reveal-modal"));
var _metametrics2 = require("../../../../contexts/metametrics");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _designSystem = require("../../../../helpers/constants/design-system");
var _privateKey = _interopRequireDefault(require("./private-key"));
var _passwordInput = _interopRequireDefault(require("./password-input"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ExportPrivateKeyModal = ({
  clearAccountDetails,
  hideWarning,
  exportAccount,
  selectedIdentity,
  showAccountDetailModal,
  hideModal,
  warning = null,
  previousModalState
}) => {
  const [password, setPassword] = (0, _react.useState)('');
  const [privateKey, setPrivateKey] = (0, _react.useState)(null);
  const [showWarning, setShowWarning] = (0, _react.useState)(true);
  const [showHoldToReveal, setShowHoldToReveal] = (0, _react.useState)(false);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  (0, _react.useEffect)(() => {
    return () => {
      clearAccountDetails();
      hideWarning();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const exportAccountAndGetPrivateKey = async (passwordInput, address) => {
    try {
      const privateKeyRetrieved = await exportAccount(passwordInput, address);
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportRevealed,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey
        }
      }, {});
      setPrivateKey(privateKeyRetrieved);
      setShowWarning(false);
      setShowHoldToReveal(true);
    } catch (e) {
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportFailed,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey,
          reason: 'incorrect_password'
        }
      }, {});
      _loglevel.default.error(e);
    }
  };
  const {
    name,
    address
  } = selectedIdentity;
  if (showHoldToReveal) {
    return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
      className: "export-private-key-modal",
      selectedIdentity: selectedIdentity,
      showBackButton: previousModalState === 'ACCOUNT_DETAILS',
      backButtonAction: () => showAccountDetailModal()
    }, /*#__PURE__*/_react.default.createElement(_holdToRevealModal.default, {
      onLongPressed: () => setShowHoldToReveal(false),
      willHide: false,
      holdToRevealType: "PrivateKey"
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
    className: "export-private-key-modal",
    selectedIdentity: selectedIdentity,
    showBackButton: previousModalState === 'ACCOUNT_DETAILS',
    backButtonAction: () => showAccountDetailModal()
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span",
    marginTop: 2,
    variant: _designSystem.TextVariant.bodyLgMedium,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL
  }, name), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "ellip-address-wrapper",
    borderStyle: _designSystem.BorderStyle.solid,
    borderColor: _designSystem.BorderColor.borderDefault,
    borderWidth: 1,
    marginTop: 2,
    padding: [1, 2, 1, 2]
  }, (0, _hexstringUtils.toChecksumHexAddress)(address)), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "export-private-key-modal__divider",
    width: _designSystem.BLOCK_SIZES.FULL,
    margin: [5, 0, 3, 0]
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    margin: [4, 0, 4, 0],
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL
  }, t('showPrivateKeys')), privateKey ? /*#__PURE__*/_react.default.createElement(_privateKey.default, {
    privateKey: privateKey
  }) : /*#__PURE__*/_react.default.createElement(_passwordInput.default, {
    setPassword: setPassword
  }), showWarning && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.Color.errorDefault,
    variant: _designSystem.TextVariant.bodySm
  }, warning), /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    padding: [1, 3, 0, 3],
    marginLeft: 5,
    marginRight: 5,
    marginTop: 4,
    severity: "danger"
  }, t('privateKeyWarning')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    width: _designSystem.BLOCK_SIZES.FULL,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    marginTop: 3,
    padding: [5, 0, 5, 0]
  }, !privateKey && /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    type: _componentLibrary.BUTTON_VARIANT.SECONDARY,
    size: _componentLibrary.BUTTON_SIZES.LG,
    width: _designSystem.BLOCK_SIZES.HALF,
    marginRight: 4,
    onClick: () => {
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportCanceled,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey
        }
      });
      hideModal();
    }
  }, t('cancel')), privateKey ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    type: _componentLibrary.BUTTON_VARIANT.PRIMARY,
    size: _componentLibrary.BUTTON_SIZES.LG,
    width: _designSystem.BLOCK_SIZES.FULL,
    onClick: () => {
      hideModal();
    }
  }, t('done')) : /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    type: _componentLibrary.BUTTON_VARIANT.PRIMARY,
    size: _componentLibrary.BUTTON_SIZES.LG,
    width: _designSystem.BLOCK_SIZES.HALF,
    onClick: () => {
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportRequested,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey
        }
      });
      exportAccountAndGetPrivateKey(password, address);
    },
    disabled: !password
  }, t('confirm'))));
};
ExportPrivateKeyModal.propTypes = {
  exportAccount: _propTypes.default.func.isRequired,
  selectedIdentity: _propTypes.default.object.isRequired,
  warning: _propTypes.default.node,
  showAccountDetailModal: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  clearAccountDetails: _propTypes.default.func.isRequired,
  previousModalState: _propTypes.default.string
};
var _default = (0, _withModalProps.default)(ExportPrivateKeyModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.container.js", {"../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./export-private-key-modal.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cexport-private-key-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToPropsFactory() {
  let selectedIdentity = null;
  return function mapStateToProps(state) {
    // We should **not** change the identity displayed here even if it changes from underneath us.
    // If we do, we will be showing the user one private key and a **different** address and name.
    // Note that the selected identity **will** change from underneath us when we unlock the keyring
    // which is the expected behavior that we are side-stepping.
    selectedIdentity = selectedIdentity || (0, _selectors.getSelectedIdentity)(state);
    return {
      warning: state.appState.warning,
      privateKey: state.appState.accountDetail.privateKey,
      selectedIdentity,
      previousModalState: state.appState.modal.previousModalState.name
    };
  };
}
function mapDispatchToProps(dispatch) {
  return {
    exportAccount: (password, address) => {
      return dispatch((0, _actions.exportAccount)(password, address)).then(res => {
        dispatch((0, _actions.hideWarning)());
        return res;
      });
    },
    showAccountDetailModal: () => dispatch((0, _actions.showModal)({
      name: 'ACCOUNT_DETAILS'
    })),
    hideModal: () => dispatch((0, _actions.hideModal)()),
    hideWarning: () => dispatch((0, _actions.hideWarning)()),
    clearAccountDetails: () => dispatch((0, _actions.clearAccountDetails)())
  };
}
var _default = (0, _reactRedux.connect)(mapStateToPropsFactory, mapDispatchToProps)(_exportPrivateKeyModal.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\index.js", {"./export-private-key-modal.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _exportPrivateKeyModal.default;
  }
});
var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\password-input.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cpassword-input.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PasswordInput = ({
  setPassword
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.FULL,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexStart,
    paddingLeft: 5,
    paddingRight: 5
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Label, {
    color: _designSystem.Color.textDefault,
    marginBottom: 2,
    variant: _designSystem.TextVariant.bodySm
  }, t('typePassword')), /*#__PURE__*/_react.default.createElement(_componentLibrary.TextField, {
    width: _designSystem.BLOCK_SIZES.FULL,
    placeholder: t('enterPassword'),
    type: _componentLibrary.TEXT_FIELD_TYPES.PASSWORD,
    className: "export-private-key-modal__password-input",
    onChange: event => setPassword(event.target.value),
    "data-testid": "password-input"
  }));
};
PasswordInput.propTypes = {
  setPassword: _propTypes.default.func.isRequired
};
var _default = PasswordInput;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\password-input.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\private-key.js", {"../../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","copy-to-clipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","ethereumjs-util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\ethereumjs-util\\dist.browser\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cprivate-key.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _ethereumjsUtil = require("ethereumjs-util");
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _metametrics2 = require("../../../../contexts/metametrics");
var _designSystem = require("../../../../helpers/constants/design-system");
var _componentLibrary = require("../../../component-library");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PrivateKeyDisplay = ({
  privateKey
}) => {
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  const plainKey = (0, _ethereumjsUtil.stripHexPrefix)(privateKey);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.FULL,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexStart,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Label, {
    color: _designSystem.Color.textDefault,
    marginBottom: 2,
    variant: _designSystem.TextVariant.bodySm
  }, t('copyPrivateKey')), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "export-private-key-modal__private-key-display",
    width: _designSystem.BLOCK_SIZES.FULL,
    borderStyle: _designSystem.BorderStyle.solid,
    borderColor: _designSystem.BorderColor.borderDefault,
    borderRadius: _designSystem.BorderRadius.XS,
    borderWidth: 1,
    padding: [2, 3, 2],
    color: _designSystem.Color.errorDefault,
    onClick: () => {
      (0, _copyToClipboard.default)(plainKey);
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportCopied,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey,
          copy_method: 'clipboard'
        }
      }, {});
    }
  }, plainKey));
};
PrivateKeyDisplay.propTypes = {
  privateKey: _propTypes.default.string.isRequired
};
var _default = PrivateKeyDisplay;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\private-key.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\fade-modal.js", {"prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cfade-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
let index = 0;
let extraSheet;
const insertRule = css => {
  if (!extraSheet) {
    // First time, create an extra stylesheet for adding rules
    extraSheet = document.createElement('style');
    document.getElementsByTagName('head')[0].appendChild(extraSheet);
    // Keep reference to actual StyleSheet object (`styleSheet` for IE < 9)
    extraSheet = extraSheet.sheet || extraSheet.styleSheet;
  }
  extraSheet.insertRule(css, (extraSheet.cssRules || extraSheet.rules).length);
  return extraSheet;
};
const insertKeyframesRule = keyframes => {
  // random name
  // eslint-disable-next-line no-plusplus
  const name = `anim_${++index}${Number(new Date())}`;
  let css = `@keyframes ${name} {`;
  Object.keys(keyframes).forEach(key => {
    css += `${key} {`;
    Object.keys(keyframes[key]).forEach(property => {
      const part = `:${keyframes[key][property]};`;
      css += property + part;
    });
    css += '}';
  });
  css += '}';
  insertRule(css);
  return name;
};
const animation = {
  show: {
    animationDuration: '0.3s',
    animationTimingFunction: 'ease-out'
  },
  hide: {
    animationDuration: '0.3s',
    animationTimingFunction: 'ease-out'
  },
  showContentAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0
    },
    '100%': {
      opacity: 1
    }
  }),
  hideContentAnimation: insertKeyframesRule({
    '0%': {
      opacity: 1
    },
    '100%': {
      opacity: 0
    }
  }),
  showBackdropAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0
    },
    '100%': {
      opacity: 0.9
    }
  }),
  hideBackdropAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0.9
    },
    '100%': {
      opacity: 0
    }
  })
};
const endEvents = ['transitionend', 'animationend'];
function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}
function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}
const removeEndEventListener = (node, eventListener) => {
  if (endEvents.length === 0) {
    return;
  }
  endEvents.forEach(function (endEvent) {
    removeEventListener(node, endEvent, eventListener);
  });
};
const addEndEventListener = (node, eventListener) => {
  if (endEvents.length === 0) {
    // If CSS transitions are not supported, trigger an "end animation"
    // event immediately.
    window.setTimeout(eventListener, 0);
    return;
  }
  endEvents.forEach(function (endEvent) {
    addEventListener(node, endEvent, eventListener);
  });
};
class FadeModal extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "content", null);
    _defineProperty(this, "state", {
      willHide: true,
      hidden: true
    });
    _defineProperty(this, "addTransitionListener", (node, handle) => {
      if (node) {
        const endListener = function (e) {
          if (e && e.target !== node) {
            return;
          }
          removeEndEventListener(node, endListener);
          handle();
        };
        addEndEventListener(node, endListener);
      }
    });
    _defineProperty(this, "handleBackdropClick", () => {
      if (this.props.closeOnClick) {
        this.hide();
      }
    });
    _defineProperty(this, "hasHidden", () => {
      return this.state.hidden;
    });
    _defineProperty(this, "leave", () => {
      this.setState({
        hidden: true
      });
      this.props.onHide(this.state.hideSource);
    });
    _defineProperty(this, "enter", () => {
      this.props.onShow();
    });
    _defineProperty(this, "show", () => {
      if (!this.state.hidden) {
        return;
      }
      this.setState({
        willHide: false,
        hidden: false
      });
      setTimeout(function () {
        this.addTransitionListener(this.content, this.enter);
      }.bind(this), 0);
    });
    _defineProperty(this, "hide", () => {
      if (this.hasHidden()) {
        return;
      }
      this.setState({
        willHide: true
      });
    });
    _defineProperty(this, "listenKeyboard", event => {
      if (typeof this.props.keyboard === 'function') {
        this.props.keyboard(event);
      } else {
        this.closeOnEsc(event);
      }
    });
    _defineProperty(this, "closeOnEsc", event => {
      if (this.props.keyboard && (event.key === 'Escape' || event.keyCode === 27)) {
        this.hide();
      }
    });
    _defineProperty(this, "UNSAFE_componentDidMount", () => {
      window.addEventListener('keydown', this.listenKeyboard, true);
    });
    _defineProperty(this, "UNSAFE_componentWillUnmount", () => {
      window.removeEventListener('keydown', this.listenKeyboard, true);
    });
  }
  render() {
    if (this.state.hidden) {
      return null;
    }
    const {
      willHide
    } = this.state;
    const {
      modalStyle
    } = this.props;
    const backdropStyle = {
      animationName: willHide ? animation.hideBackdropAnimation : animation.showBackdropAnimation,
      animationTimingFunction: (willHide ? animation.hide : animation.show).animationTimingFunction,
      ...this.props.backdropStyle
    };
    const contentStyle = {
      animationDuration: (willHide ? animation.hide : animation.show).animationDuration,
      animationName: willHide ? animation.hideContentAnimation : animation.showContentAnimation,
      animationTimingFunction: (willHide ? animation.hide : animation.show).animationTimingFunction,
      ...this.props.contentStyle
    };
    const backdrop = this.props.backdrop ? /*#__PURE__*/_react.default.createElement("div", {
      className: "modal__backdrop",
      style: backdropStyle,
      onClick: this.props.closeOnClick ? this.handleBackdropClick : null
    }) : undefined;
    if (willHide) {
      this.addTransitionListener(this.content, this.leave);
    }
    return /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal",
      style: modalStyle
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal__content",
      ref: el => this.content = el,
      tabIndex: "-1",
      style: contentStyle
    }, this.props.children)), backdrop);
  }
}
_defineProperty(FadeModal, "propTypes", {
  backdrop: _propTypes.default.bool,
  backdropStyle: _propTypes.default.object,
  closeOnClick: _propTypes.default.bool,
  contentStyle: _propTypes.default.object,
  keyboard: _propTypes.default.bool,
  modalStyle: _propTypes.default.object,
  onShow: _propTypes.default.func,
  onHide: _propTypes.default.func,
  children: _propTypes.default.node
});
_defineProperty(FadeModal, "defaultProps", {
  onShow: () => undefined,
  onHide: () => undefined,
  keyboard: true,
  backdrop: true,
  closeOnClick: true,
  modalStyle: {},
  backdropStyle: {},
  contentStyle: {},
  children: []
});
var _default = FadeModal;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\fade-modal.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\hide-token-confirmation-modal.js", {"../../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Chide-token-confirmation-modal%5Chide-token-confirmation-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var actions = _interopRequireWildcard(require("../../../../store/actions"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _routes = require("../../../../helpers/constants/routes");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function mapStateToProps(state) {
  return {
    token: state.appState.modal.modalState.props.token,
    history: state.appState.modal.modalState.props.history
  };
}
function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => dispatch(actions.hideModal()),
    hideToken: address => {
      dispatch(actions.ignoreTokens({
        tokensToIgnore: address
      })).then(() => {
        dispatch(actions.hideModal());
      });
    }
  };
}
class HideTokenConfirmationModal extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {});
  }
  render() {
    const {
      token,
      hideToken,
      hideModal,
      history
    } = this.props;
    const {
      symbol,
      address,
      image
    } = token;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__title"
    }, this.context.t('hideTokenPrompt')), /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "hide-token-confirmation__identicon",
      diameter: 45,
      address: address,
      image: image
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__symbol"
    }, symbol), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__copy"
    }, this.context.t('readdToken')), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__buttons"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "hide-token-confirmation__button",
      "data-testid": "hide-token-confirmation__cancel",
      onClick: () => hideModal()
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "hide-token-confirmation__button",
      "data-testid": "hide-token-confirmation__hide",
      onClick: () => {
        hideToken(address);
        history.push(_routes.DEFAULT_ROUTE);
      }
    }, this.context.t('hide')))));
  }
}
_defineProperty(HideTokenConfirmationModal, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(HideTokenConfirmationModal, "propTypes", {
  hideToken: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  token: _propTypes.default.shape({
    symbol: _propTypes.default.string,
    address: _propTypes.default.string,
    image: _propTypes.default.string
  }),
  history: _propTypes.default.object
});
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(HideTokenConfirmationModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\hide-token-confirmation-modal\\hide-token-confirmation-modal.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js", {"./hide-token-confirmation-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\hide-token-confirmation-modal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Chide-token-confirmation-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _hideTokenConfirmationModal.default;
  }
});
var _hideTokenConfirmationModal = _interopRequireDefault(require("./hide-token-confirmation-modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hold-to-reveal-modal\\hold-to-reveal-modal.js", {"../../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../hold-to-reveal-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\hold-to-reveal-button\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Chold-to-reveal-modal%5Chold-to-reveal-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
var _holdToRevealButton = _interopRequireDefault(require("../../hold-to-reveal-button"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));
var _metametrics = require("../../../../contexts/metametrics");
var _metametrics2 = require("../../../../../shared/constants/metametrics");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const HoldToRevealModal = ({
  onLongPressed,
  hideModal,
  willHide = true,
  holdToRevealType = 'SRP'
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const holdToRevealTitle = holdToRevealType === 'SRP' ? 'holdToRevealSRPTitle' : 'holdToRevealPrivateKeyTitle';
  const holdToRevealButton = holdToRevealType === 'SRP' ? 'holdToRevealSRP' : 'holdToRevealPrivateKey';
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const unlock = () => {
    onLongPressed();
    if (willHide) {
      hideModal();
    }
  };
  const handleCancel = () => {
    hideModal();
  };
  const renderHoldToRevealPrivateKeyContent = () => {
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
      gap: 4,
      marginBottom: 6
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMd
    }, t('holdToRevealContentPrivateKey1', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: "hold-to-reveal-2",
      variant: _designSystem.TextVariant.bodyMdBold,
      as: "span"
    }, t('holdToRevealContentPrivateKey2'))])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMdBold
    }, t('holdToRevealContent3', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: "hold-to-reveal-4",
      variant: _designSystem.TextVariant.bodyMd,
      as: "span",
      display: _designSystem.DISPLAY.INLINE
    }, t('holdToRevealContent4')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
      key: "hold-to-reveal-5",
      variant: _componentLibrary.BUTTON_VARIANT.LINK,
      size: _componentLibrary.BUTTON_SIZES.INHERIT,
      href: _zendeskUrl.default.NON_CUSTODIAL_WALLET,
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('holdToRevealContent5'))])));
  };
  const renderHoldToRevealSRPContent = () => {
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
      gap: 4,
      marginBottom: 6
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMd
    }, t('holdToRevealContent1', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: "hold-to-reveal-2",
      variant: _designSystem.TextVariant.bodyMdBold,
      as: "span"
    }, t('holdToRevealContent2'))])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMdBold
    }, t('holdToRevealContent3', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: "hold-to-reveal-4",
      variant: _designSystem.TextVariant.bodyMd,
      as: "span",
      display: _designSystem.DISPLAY.INLINE
    }, t('holdToRevealContent4')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
      key: "hold-to-reveal-5",
      variant: _componentLibrary.BUTTON_VARIANT.LINK,
      size: _designSystem.Size.auto,
      href: _zendeskUrl.default.NON_CUSTODIAL_WALLET,
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('holdToRevealContent5'))])));
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "hold-to-reveal-modal",
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    justifyContent: _designSystem.JustifyContent.flexStart,
    padding: 6
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    marginBottom: 6
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingSm
  }, t(holdToRevealTitle)), willHide && /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    className: "hold-to-reveal-modal__close",
    iconName: _componentLibrary.IconName.Close,
    size: _designSystem.Size.SM,
    onClick: () => {
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Keys,
        event: _metametrics2.MetaMetricsEventName.SrpHoldToRevealCloseClicked,
        properties: {
          key_type: _metametrics2.MetaMetricsEventKeyType.Srp
        }
      });
      handleCancel();
    },
    ariaLabel: t('close')
  })), holdToRevealType === 'SRP' ? renderHoldToRevealSRPContent() : renderHoldToRevealPrivateKeyContent(), /*#__PURE__*/_react.default.createElement(_holdToRevealButton.default, {
    buttonText: t(holdToRevealButton),
    onLongPressed: unlock,
    marginLeft: "auto",
    marginRight: "auto"
  }));
};
HoldToRevealModal.propTypes = {
  // The function to be executed after the hold to reveal long press has been completed
  onLongPressed: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func,
  willHide: _propTypes.default.bool,
  holdToRevealType: _propTypes.default.oneOf(['SRP', 'PrivateKey']).isRequired
};
var _default = (0, _withModalProps.default)(HoldToRevealModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\hold-to-reveal-modal\\hold-to-reveal-modal.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hold-to-reveal-modal\\index.js", {"./hold-to-reveal-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hold-to-reveal-modal\\hold-to-reveal-modal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Chold-to-reveal-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _holdToRevealModal.default;
  }
});
var _holdToRevealModal = _interopRequireDefault(require("./hold-to-reveal-modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\hold-to-reveal-modal\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\index.js", {"./modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\modal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});
var _modal = _interopRequireDefault(require("./modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\modal.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../helpers/utils/is-mobile-view":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\is-mobile-view.js","../../../pages/onboarding-flow/add-network-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\onboarding-flow\\add-network-modal\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./account-details-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\account-details-modal\\index.js","./confirm-delete-network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-delete-network\\index.js","./confirm-remove-account":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-remove-account\\index.js","./confirm-reset-account":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\confirm-reset-account\\index.js","./convert-token-to-nft-modal/convert-token-to-nft-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js","./customize-nonce":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\customize-nonce\\index.js","./edit-approval-permission":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\edit-approval-permission\\index.js","./eth-sign-modal/eth-sign-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\eth-sign-modal\\eth-sign-modal.js","./export-private-key-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\export-private-key-modal\\index.js","./fade-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\fade-modal.js","./hide-token-confirmation-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js","./hold-to-reveal-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\hold-to-reveal-modal\\index.js","./new-account-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\index.js","./qr-scanner":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\index.js","./reject-transactions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\index.js","./transaction-confirmed":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cmodal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var actions = _interopRequireWildcard(require("../../../store/actions"));
var _isMobileView = _interopRequireDefault(require("../../../helpers/utils/is-mobile-view"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _addNetworkModal = _interopRequireDefault(require("../../../pages/onboarding-flow/add-network-modal"));
var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal"));
var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal"));
var _hideTokenConfirmationModal = _interopRequireDefault(require("./hide-token-confirmation-modal"));
var _qrScanner = _interopRequireDefault(require("./qr-scanner"));
var _holdToRevealModal = _interopRequireDefault(require("./hold-to-reveal-modal"));
var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account"));
var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account"));
var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed"));
var _fadeModal = _interopRequireDefault(require("./fade-modal"));
var _rejectTransactions = _interopRequireDefault(require("./reject-transactions"));
var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network"));
var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission"));
var _newAccountModal = _interopRequireDefault(require("./new-account-modal"));
var _customizeNonce = _interopRequireDefault(require("./customize-nonce"));
var _convertTokenToNftModal = _interopRequireDefault(require("./convert-token-to-nft-modal/convert-token-to-nft-modal"));
var _ethSignModal = _interopRequireDefault(require("./eth-sign-modal/eth-sign-modal"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } // Modal Components
const modalContainerBaseStyle = {
  transform: 'translate3d(-50%, 0, 0px)',
  border: '1px solid var(--color-border-default)',
  borderRadius: '8px',
  backgroundColor: 'var(--color-background-default)',
  boxShadow: 'var(--shadow-size-sm) var(--color-shadow-default)'
};
const modalContainerLaptopStyle = {
  ...modalContainerBaseStyle,
  width: '344px',
  top: '15%'
};
const modalContainerMobileStyle = {
  ...modalContainerBaseStyle,
  width: '309px',
  top: '12.5%'
};
const accountModalStyle = {
  mobileModalStyle: {
    width: '95%',
    // top: isPopupOrNotification() === 'popup' ? '52vh' : '36.5vh',
    boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
    borderRadius: '4px',
    top: '10%',
    transform: 'none',
    left: '0',
    right: '0',
    margin: '0 auto'
  },
  laptopModalStyle: {
    width: '335px',
    // top: 'calc(33% + 45px)',
    boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
    borderRadius: '4px',
    top: '10%',
    transform: 'none',
    left: '0',
    right: '0',
    margin: '0 auto'
  },
  contentStyle: {
    borderRadius: '4px'
  }
};
const MODALS = {
  ONBOARDING_ADD_NETWORK: {
    contents: /*#__PURE__*/_react.default.createElement(_addNetworkModal.default, null),
    ...accountModalStyle
  },
  NEW_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_newAccountModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: '10%',
      boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    laptopModalStyle: {
      width: '375px',
      top: '10%',
      boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    contentStyle: {
      borderRadius: '10px'
    }
  },
  ACCOUNT_DETAILS: {
    contents: /*#__PURE__*/_react.default.createElement(_accountDetailsModal.default, null),
    ...accountModalStyle
  },
  EXPORT_PRIVATE_KEY: {
    contents: /*#__PURE__*/_react.default.createElement(_exportPrivateKeyModal.default, null),
    ...accountModalStyle
  },
  HOLD_TO_REVEAL_SRP: {
    contents: /*#__PURE__*/_react.default.createElement(_holdToRevealModal.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  HIDE_TOKEN_CONFIRMATION: {
    contents: /*#__PURE__*/_react.default.createElement(_hideTokenConfirmationModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '52vh' : '36.5vh'
    },
    laptopModalStyle: {
      width: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '357px' : '449px',
      top: 'calc(33% + 45px)',
      paddingLeft: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '16px' : null,
      paddingRight: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '16px' : null
    }
  },
  CONFIRM_RESET_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmResetAccount.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  ETH_SIGN: {
    contents: /*#__PURE__*/_react.default.createElement(_ethSignModal.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_REMOVE_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmRemoveAccount.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONVERT_TOKEN_TO_NFT: {
    contents: /*#__PURE__*/_react.default.createElement(_convertTokenToNftModal.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_DELETE_NETWORK: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmDeleteNetwork.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  EDIT_APPROVAL_PERMISSION: {
    contents: /*#__PURE__*/_react.default.createElement(_editApprovalPermission.default, null),
    mobileModalStyle: {
      width: '95vw',
      height: '100vh',
      top: '50px',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto'
    },
    laptopModalStyle: {
      width: 'auto',
      height: '0px',
      top: '80px',
      left: '0px',
      transform: 'none',
      margin: '0 auto',
      position: 'relative'
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  TRANSACTION_CONFIRMED: {
    disableBackdropClick: true,
    contents: /*#__PURE__*/_react.default.createElement(_transactionConfirmed.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  QR_SCANNER: {
    contents: /*#__PURE__*/_react.default.createElement(_qrScanner.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  REJECT_TRANSACTIONS: {
    contents: /*#__PURE__*/_react.default.createElement(_rejectTransactions.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CUSTOMIZE_NONCE: {
    contents: /*#__PURE__*/_react.default.createElement(_customizeNonce.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  DEFAULT: {
    contents: [],
    mobileModalStyle: {},
    laptopModalStyle: {}
  }
};
const BACKDROPSTYLE = {
  backgroundColor: 'var(--color-overlay-default)'
};
function mapStateToProps(state) {
  return {
    active: state.appState.modal.open,
    modalState: state.appState.modal.modalState
  };
}
function mapDispatchToProps(dispatch) {
  return {
    hideModal: customOnHideOpts => {
      dispatch(actions.hideModal());
      if (customOnHideOpts && customOnHideOpts.action) {
        dispatch(customOnHideOpts.action(...customOnHideOpts.args));
      }
    },
    hideWarning: () => {
      dispatch(actions.hideWarning());
    }
  };
}
class Modal extends _react.Component {
  hide() {
    this.modalRef.hide();
  }
  show() {
    this.modalRef.show();
  }
  UNSAFE_componentWillReceiveProps(nextProps, _) {
    if (nextProps.active) {
      this.show();
    } else if (this.props.active) {
      this.hide();
    }
  }
  render() {
    const modal = MODALS[this.props.modalState.name || 'DEFAULT'];
    const {
      contents: children,
      disableBackdropClick = false
    } = modal;
    const modalStyle = modal[(0, _isMobileView.default)() ? 'mobileModalStyle' : 'laptopModalStyle'];
    const contentStyle = modal.contentStyle || {};
    return /*#__PURE__*/_react.default.createElement(_fadeModal.default, {
      keyboard: false,
      onHide: () => {
        if (modal.onHide) {
          modal.onHide({
            hideWarning: this.props.hideWarning
          });
        }
        this.props.hideModal(modal.customOnHideOpts);
      },
      ref: ref => {
        this.modalRef = ref;
      },
      modalStyle: modalStyle,
      contentStyle: contentStyle,
      backdropStyle: BACKDROPSTYLE,
      closeOnClick: !disableBackdropClick
    }, children);
  }
}
_defineProperty(Modal, "propTypes", {
  active: _propTypes.default.bool.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  modalState: _propTypes.default.object.isRequired
});
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Modal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\modal.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\index.js", {"./new-account-modal.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnew-account-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _newAccountModal.default;
  }
});
var _newAccountModal = _interopRequireDefault(require("./new-account-modal.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\new-account-modal\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.component.js", {"../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/button/button.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\button.component.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnew-account-modal%5Cnew-account-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _button = _interopRequireDefault(require("../../../ui/button/button.component"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class NewAccountModal extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      alias: this.context.t('newAccountNumberName', [this.props.newAccountNumber])
    });
    _defineProperty(this, "onChange", e => {
      this.setState({
        alias: e.target.value
      });
    });
    _defineProperty(this, "onSubmit", () => {
      this.props.onSave(this.state.alias).then(this.props.hideModal);
    });
    _defineProperty(this, "onKeyPress", e => {
      if (e.key === 'Enter' && this.state.alias) {
        this.onSubmit();
      }
    });
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__content__header"
    }, t('newAccount'), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      className: "new-account-modal__content__header-close",
      ariaLabel: t('close'),
      onClick: this.props.hideModal,
      iconName: _componentLibrary.IconName.Close
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__input-label"
    }, t('accountName')), /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      className: "new-account-modal__input",
      onChange: this.onChange,
      onKeyPress: this.onKeyPress,
      value: this.state.alias,
      autoFocus: true
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: this.props.hideModal
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: this.onSubmit,
      disabled: !this.state.alias
    }, t('save'))));
  }
}
exports.default = NewAccountModal;
_defineProperty(NewAccountModal, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(NewAccountModal, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  newAccountNumber: _propTypes.default.number.isRequired,
  onSave: _propTypes.default.func.isRequired
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\new-account-modal\\new-account-modal.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.container.js", {"../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./new-account-modal.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnew-account-modal%5Cnew-account-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var actions = _interopRequireWildcard(require("../../../../store/actions"));
var _newAccountModal = _interopRequireDefault(require("./new-account-modal.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function mapStateToProps(state) {
  return {
    ...(state.appState.modal.modalState.props || {})
  };
}
function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => dispatch(actions.hideModal()),
    createAccount: newAccountName => {
      return dispatch(actions.addNewAccount()).then(newAccountAddress => {
        if (newAccountName) {
          dispatch(actions.setAccountLabel(newAccountAddress, newAccountName));
        }
        return newAccountAddress;
      });
    }
  };
}
function mergeProps(stateProps, dispatchProps) {
  const {
    onCreateNewAccount
  } = stateProps;
  const {
    createAccount
  } = dispatchProps;
  return {
    ...stateProps,
    ...dispatchProps,
    onSave: newAccountName => {
      return createAccount(newAccountName).then(newAccountAddress => onCreateNewAccount(newAccountAddress));
    }
  };
}
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_newAccountModal.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\new-account-modal\\new-account-modal.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\index.js", {"./nickname-popovers.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\nickname-popovers.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnickname-popovers%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nicknamePopovers.default;
  }
});
var _nicknamePopovers = _interopRequireDefault(require("./nickname-popovers.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\nickname-popovers\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\nickname-popovers.component.js", {"../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../../ui/nickname-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\nickname-popover\\index.js","../../../ui/update-nickname-popover/update-nickname-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\update-nickname-popover\\update-nickname-popover.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnickname-popovers%5Cnickname-popovers.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _nicknamePopover = _interopRequireDefault(require("../../../ui/nickname-popover"));
var _updateNicknamePopover = _interopRequireDefault(require("../../../ui/update-nickname-popover/update-nickname-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const SHOW_NICKNAME_POPOVER = 'SHOW_NICKNAME_POPOVER';
const ADD_NICKNAME_POPOVER = 'ADD_NICKNAME_POPOVER';
const NicknamePopovers = ({
  address,
  onClose
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const [popoverToDisplay, setPopoverToDisplay] = (0, _react.useState)(SHOW_NICKNAME_POPOVER);
  const addressBook = (0, _reactRedux.useSelector)(_selectors.getAddressBook);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const addressBookEntryObject = addressBook.find(entry => entry.address === address);
  const recipientNickname = addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.name;
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const explorerLink = (0, _etherscanLink.getAccountLink)(address, chainId, {
    blockExplorerUrl: (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) ?? null
  }, null);
  if (popoverToDisplay === ADD_NICKNAME_POPOVER) {
    return /*#__PURE__*/_react.default.createElement(_updateNicknamePopover.default, {
      address: address,
      nickname: recipientNickname || null,
      memo: (addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.memo) || null,
      onClose: () => setPopoverToDisplay(SHOW_NICKNAME_POPOVER),
      onAdd: (recipient, nickname, memo) => dispatch((0, _actions.addToAddressBook)(recipient, nickname, memo))
    });
  }

  // SHOW_NICKNAME_POPOVER case
  return /*#__PURE__*/_react.default.createElement(_nicknamePopover.default, {
    address: address,
    nickname: recipientNickname || null,
    onClose: onClose,
    onAdd: () => setPopoverToDisplay(ADD_NICKNAME_POPOVER),
    explorerLink: explorerLink
  });
};
NicknamePopovers.propTypes = {
  address: _propTypes.default.string,
  onClose: _propTypes.default.func
};
var _default = NicknamePopovers;
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\nickname-popovers\\nickname-popovers.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\index.js", {"./qr-scanner.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cqr-scanner%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _qrScanner = _interopRequireDefault(require("./qr-scanner.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _qrScanner.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\qr-scanner\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.component.js", {"../../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../helpers/utils/webcam-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\webcam-utils.js","../../../ui/page-container/page-container-footer/page-container-footer.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\page-container-footer.component.js","../../../ui/spinner":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","@zxing/library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@zxing\\library\\umd\\index.min.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cqr-scanner%5Cqr-scanner.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _library = require("@zxing/library");
var _util = require("../../../../../app/scripts/lib/util");
var _app = require("../../../../../shared/constants/app");
var _time = require("../../../../../shared/constants/time");
var _spinner = _interopRequireDefault(require("../../../ui/spinner"));
var _webcamUtils = _interopRequireDefault(require("../../../../helpers/utils/webcam-utils"));
var _util2 = require("../../../../helpers/utils/util");
var _pageContainerFooter = _interopRequireDefault(require("../../../ui/page-container/page-container-footer/page-container-footer.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const READY_STATE = {
  ACCESSING_CAMERA: 'ACCESSING_CAMERA',
  NEED_TO_ALLOW_ACCESS: 'NEED_TO_ALLOW_ACCESS',
  READY: 'READY'
};
class QrScanner extends _react.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "checkEnvironment", async () => {
      try {
        const {
          environmentReady
        } = await _webcamUtils.default.checkStatus();
        if (!environmentReady && (0, _util.getEnvironmentType)() !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
          const currentUrl = (0, _util2.getURL)(window.location.href);
          const currentHash = currentUrl === null || currentUrl === void 0 ? void 0 : currentUrl.hash;
          const currentRoute = currentHash ? currentHash.substring(1) : null;
          global.platform.openExtensionInBrowser(currentRoute);
        }
      } catch (error) {
        if (this.mounted) {
          this.setState({
            error
          });
        }
      }
      // initial attempt is required to trigger permission prompt
      this.initCamera();
    });
    _defineProperty(this, "checkPermissions", async () => {
      try {
        const {
          permissions
        } = await _webcamUtils.default.checkStatus();
        if (permissions) {
          // Let the video stream load first...
          await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));
          if (!this.mounted) {
            return;
          }
          this.setState({
            ready: READY_STATE.READY
          });
        } else if (this.mounted) {
          // Keep checking for permissions
          this.permissionChecker = setTimeout(this.checkPermissions, _time.SECOND);
        }
      } catch (error) {
        if (this.mounted) {
          this.setState({
            error
          });
        }
      }
    });
    _defineProperty(this, "initCamera", async () => {
      // The `decodeFromInputVideoDevice` call prompts the browser to show
      // the user the camera permission request.  We must then call it again
      // once we receive permission so that the video displays.
      // It's important to prevent this codeReader from being created twice;
      // Firefox otherwise starts 2 video streams, one of which cannot be stopped
      if (!this.codeReader) {
        this.codeReader = new _library.BrowserQRCodeReader();
      }
      try {
        await this.codeReader.getVideoInputDevices();
        this.checkPermissions();
        const content = await this.codeReader.decodeFromInputVideoDevice(undefined, 'video');
        const result = this.parseContent(content.text);
        if (!this.mounted) {
          return;
        } else if (result.type === 'unknown') {
          this.setState({
            error: new Error(this.context.t('unknownQrCode'))
          });
        } else {
          this.props.qrCodeDetected(result);
          this.stopAndClose();
        }
      } catch (error) {
        if (!this.mounted) {
          return;
        }
        if (error.name === 'NotAllowedError') {
          _loglevel.default.info(`Permission denied: '${error}'`);
          this.setState({
            ready: READY_STATE.NEED_TO_ALLOW_ACCESS
          });
        } else {
          this.setState({
            error
          });
        }
      }
    });
    _defineProperty(this, "stopAndClose", () => {
      if (this.codeReader) {
        this.teardownCodeReader();
      }
      this.props.hideModal();
    });
    _defineProperty(this, "tryAgain", () => {
      clearTimeout(this.permissionChecker);
      if (this.codeReader) {
        this.teardownCodeReader();
      }
      this.setState(this.getInitialState(), () => {
        this.checkEnvironment();
      });
    });
    this.state = this.getInitialState();
    this.codeReader = null;
    this.permissionChecker = null;
    this.mounted = false;

    // Clear pre-existing qr code data before scanning
    this.props.qrCodeDetected(null);
  }
  componentDidMount() {
    this.mounted = true;
    this.checkEnvironment();
  }
  componentDidUpdate(_, prevState) {
    const {
      ready
    } = this.state;
    if (prevState.ready !== ready) {
      if (ready === READY_STATE.READY) {
        this.initCamera();
      } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
        this.checkPermissions();
      }
    }
  }
  getInitialState() {
    return {
      ready: READY_STATE.ACCESSING_CAMERA,
      error: null
    };
  }
  componentWillUnmount() {
    this.mounted = false;
    clearTimeout(this.permissionChecker);
    this.teardownCodeReader();
  }
  teardownCodeReader() {
    if (this.codeReader) {
      this.codeReader.reset();
      this.codeReader.stop();
      this.codeReader = null;
    }
  }
  parseContent(content) {
    let type = 'unknown';
    let values = {};

    // Here we could add more cases
    // To parse other type of links
    // For ex. EIP-681 (https://eips.ethereum.org/EIPS/eip-681)

    // Ethereum address links - fox ex. ethereum:0x.....1111
    if (content.split('ethereum:').length > 1) {
      type = 'address';
      values = {
        address: content.split('ethereum:')[1]
      };

      // Regular ethereum addresses - fox ex. 0x.....1111
    } else if (content.substring(0, 2).toLowerCase() === '0x') {
      type = 'address';
      values = {
        address: content
      };
    }
    return {
      type,
      values
    };
  }
  renderError() {
    const {
      t
    } = this.context;
    const {
      error
    } = this.state;
    let title, msg;
    if (error.type === 'NO_WEBCAM_FOUND') {
      title = t('noWebcamFoundTitle');
      msg = t('noWebcamFound');
    } else if (error.message === t('unknownQrCode')) {
      msg = t('unknownQrCode');
    } else {
      title = t('unknownCameraErrorTitle');
      msg = t('unknownCameraError');
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__image"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/webcam.svg",
      width: "70",
      height: "70",
      alt: ""
    })), title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, title) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__error"
    }, msg), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: this.stopAndClose,
      onSubmit: this.tryAgain,
      cancelText: t('cancel'),
      submitText: t('tryAgain')
    }));
  }
  renderVideo() {
    const {
      t
    } = this.context;
    const {
      ready
    } = this.state;
    let message;
    if (ready === READY_STATE.ACCESSING_CAMERA) {
      message = t('accessingYourCamera');
    } else if (ready === READY_STATE.READY) {
      message = t('scanInstructions');
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      message = t('youNeedToAllowCameraAccess');
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, `${t('scanQrCode')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content__video-wrapper"
    }, /*#__PURE__*/_react.default.createElement("video", {
      id: "video",
      style: {
        display: ready === READY_STATE.READY ? 'block' : 'none'
      }
    }), ready === READY_STATE.READY ? null : /*#__PURE__*/_react.default.createElement(_spinner.default, {
      color: "var(--color-warning-default)"
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__status"
    }, message));
  }
  render() {
    const {
      error
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__close",
      onClick: this.stopAndClose
    }), error ? this.renderError() : this.renderVideo());
  }
}
exports.default = QrScanner;
_defineProperty(QrScanner, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  qrCodeDetected: _propTypes.default.func.isRequired
});
_defineProperty(QrScanner, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\qr-scanner\\qr-scanner.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.container.js", {"../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./qr-scanner.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Cqr-scanner%5Cqr-scanner.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _actions = require("../../../../store/actions");
var _qrScanner = _interopRequireDefault(require("./qr-scanner.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapDispatchToProps = dispatch => {
  return {
    hideModal: () => dispatch((0, _actions.hideModal)()),
    qrCodeDetected: data => dispatch((0, _actions.qrCodeDetected)(data))
  };
};
var _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(_qrScanner.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\qr-scanner\\qr-scanner.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\index.js", {"./reject-transactions.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Creject-transactions%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _rejectTransactions.default;
  }
});
var _rejectTransactions = _interopRequireDefault(require("./reject-transactions.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\reject-transactions\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.component.js", {"../../modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Creject-transactions%5Creject-transactions.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _modal = _interopRequireDefault(require("../../modal"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class RejectTransactionsModal extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "onSubmit", async () => {
      const {
        onSubmit,
        hideModal
      } = this.props;
      await onSubmit();
      hideModal();
    });
  }
  render() {
    const {
      t
    } = this.context;
    const {
      hideModal,
      unapprovedTxCount,
      isRequestType
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: isRequestType ? t('rejectRequestsN', [unapprovedTxCount]) : t('rejectTxsN', [unapprovedTxCount]),
      onClose: hideModal,
      onSubmit: this.onSubmit,
      onCancel: hideModal,
      submitText: t('rejectAll'),
      cancelText: t('cancel')
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "reject-transactions__description"
    }, isRequestType ? t('rejectRequestsDescription', [unapprovedTxCount]) : t('rejectTxsDescription', [unapprovedTxCount]))));
  }
}
exports.default = RejectTransactionsModal;
_defineProperty(RejectTransactionsModal, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
_defineProperty(RejectTransactionsModal, "propTypes", {
  onSubmit: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  unapprovedTxCount: _propTypes.default.number.isRequired,
  isRequestType: _propTypes.default.bool
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\reject-transactions\\reject-transactions.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","./reject-transactions.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Creject-transactions%5Creject-transactions.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _rejectTransactions = _interopRequireDefault(require("./reject-transactions.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (_, ownProps) => {
  const {
    unapprovedTxCount
  } = ownProps;
  return {
    unapprovedTxCount
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps))(_rejectTransactions.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\reject-transactions\\reject-transactions.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\index.js", {"./transaction-confirmed.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Ctransaction-confirmed%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionConfirmed.default;
  }
});
var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\transaction-confirmed\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.component.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modal\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Ctransaction-confirmed%5Ctransaction-confirmed.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modal = _interopRequireDefault(require("../../modal"));
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class TransactionConfirmed extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleSubmit", () => {
      const {
        hideModal,
        onSubmit
      } = this.props;
      hideModal();
      if (onSubmit && typeof onSubmit === 'function') {
        onSubmit();
      }
    });
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleSubmit,
      submitText: t('ok')
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__content"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Check,
      color: _designSystem.IconColor.successDefault,
      size: _componentLibrary.IconSize.Xl
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__title"
    }, `${t('confirmed')}!`), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__description"
    }, t('initialTransactionConfirmed'))));
  }
}
exports.default = TransactionConfirmed;
_defineProperty(TransactionConfirmed, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(TransactionConfirmed, "propTypes", {
  onSubmit: _propTypes.default.func,
  hideModal: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","./transaction-confirmed.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmodals%5Ctransaction-confirmed%5Ctransaction-confirmed.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = (0, _withModalProps.default)(_transactionConfirmed.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\index.js", {"./multi-layer-fee-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\multi-layer-fee-message.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmultilayer-fee-message%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _multiLayerFeeMessage.default;
  }
});
var _multiLayerFeeMessage = _interopRequireDefault(require("./multi-layer-fee-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\multilayer-fee-message\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\multilayer-fee-message\\multi-layer-fee-message.js", {"../../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../helpers/utils/optimism/fetchEstimatedL1Fee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../transaction-detail-item/transaction-detail-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","@sentry/browser":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@sentry\\browser\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmultilayer-fee-message%5Cmulti-layer-fee-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MultilayerFeeMessage;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _browser = require("@sentry/browser");
var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));
var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../../helpers/utils/optimism/fetchEstimatedL1Fee"));
var _common = require("../../../helpers/constants/common");
var _i18n = require("../../../contexts/i18n");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _common2 = require("../../../../shared/constants/common");
var _Numeric = require("../../../../shared/modules/Numeric");
var _selectors = require("../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function MultilayerFeeMessage({
  transaction,
  layer2fee,
  nativeCurrency,
  plainStyle
}) {
  var _transaction$txParams;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [fetchedLayer1Total, setLayer1Total] = (0, _react.useState)(null);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  (0, _react.useEffect)(() => {
    if (!(transaction !== null && transaction !== void 0 && transaction.txParams)) {
      return;
    }
    const getEstimatedL1Fee = async () => {
      try {
        const result = await (0, _fetchEstimatedL1Fee.default)(transaction === null || transaction === void 0 ? void 0 : transaction.chainId, transaction);
        setLayer1Total(result);
      } catch (e) {
        (0, _browser.captureException)(e);
        setLayer1Total(null);
      }
    };
    getEstimatedL1Fee();
  }, [transaction]);
  if (!(transaction !== null && transaction !== void 0 && transaction.txParams)) {
    return null;
  }
  let layer1Total = t('unknown');
  let feeTotalInFiat = t('unknown');
  if (fetchedLayer1Total !== null) {
    const layer1TotalBN = new _Numeric.Numeric(fetchedLayer1Total, 16, _common2.EtherDenomination.WEI);
    layer1Total = `${layer1TotalBN.toDenomination(_common2.EtherDenomination.ETH).toFixed(12)} ${nativeCurrency}`;
    feeTotalInFiat = useCurrencyRateCheck ? /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.SECONDARY,
      value: fetchedLayer1Total,
      showFiat: true,
      hideLabel: true
    }) : null;
  }
  const totalInWeiHex = (0, _conversion.sumHexes)(layer2fee || '0x0', fetchedLayer1Total || '0x0', (transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams = transaction.txParams) === null || _transaction$txParams === void 0 ? void 0 : _transaction$txParams.value) || '0x0');
  const totalBN = new _Numeric.Numeric(totalInWeiHex, 16, _common2.EtherDenomination.WEI);
  const totalInEth = `${totalBN.toDenomination(_common2.EtherDenomination.ETH).toFixed(12)} ${nativeCurrency}`;
  const totalInFiat = useCurrencyRateCheck ? /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    type: _common.SECONDARY,
    value: totalInWeiHex,
    showFiat: true,
    hideLabel: true
  }) : null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "multi-layer-fee-message"
  }, /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "multi-layer-fee-message-total-item-gas-fee",
    detailTitle: t('layer1Fees'),
    detailTotal: layer1Total,
    detailText: useCurrencyRateCheck && feeTotalInFiat,
    noBold: plainStyle,
    flexWidthValues: plainStyle
  }), /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "multi-layer-fee-message-total-item-total",
    detailTitle: t('total'),
    detailTotal: totalInEth,
    detailText: totalInFiat,
    subTitle: t('transactionDetailMultiLayerTotalSubtitle'),
    noBold: plainStyle,
    flexWidthValues: plainStyle
  }));
}
MultilayerFeeMessage.propTypes = {
  transaction: _propTypes.default.object,
  layer2fee: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  plainStyle: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\multilayer-fee-message\\multi-layer-fee-message.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\multiple-notifications\\index.js", {"./multiple-notifications.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\multiple-notifications\\multiple-notifications.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmultiple-notifications%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _multipleNotifications.default;
  }
});
var _multipleNotifications = _interopRequireDefault(require("./multiple-notifications.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\multiple-notifications\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\multiple-notifications\\multiple-notifications.component.js", {"classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cmultiple-notifications%5Cmultiple-notifications.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class MultipleNotifications extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showAll: false
    });
  }
  render() {
    const {
      showAll
    } = this.state;
    const {
      children,
      classNames
    } = this.props;
    const childrenToRender = children.filter(Boolean);
    if (childrenToRender.length === 0) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(...classNames, {
        'home-notification-wrapper--show-all': showAll,
        'home-notification-wrapper--show-first': !showAll
      })
    }, childrenToRender, /*#__PURE__*/_react.default.createElement("div", {
      className: "home-notification-wrapper__i-container",
      onClick: () => this.setState({
        showAll: !showAll
      })
    }, childrenToRender.length > 1 ? /*#__PURE__*/_react.default.createElement("i", {
      className: (0, _classnames.default)('fa fa-sm fa-sort-amount', {
        flipped: !showAll
      })
    }) : null));
  }
}
exports.default = MultipleNotifications;
_defineProperty(MultipleNotifications, "defaultProps", {
  children: [],
  classNames: []
});
_defineProperty(MultipleNotifications, "propTypes", {
  children: _propTypes.default.array,
  classNames: _propTypes.default.array
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\multiple-notifications\\multiple-notifications.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\index.js", {"./network-account-balance-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnetwork-account-balance-header%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networkAccountBalanceHeader.default;
  }
});
var _networkAccountBalanceHeader = _interopRequireDefault(require("./network-account-balance-header"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\network-account-balance-header\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js", {"../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/icon-with-fallback":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon-with-fallback\\index.js","../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnetwork-account-balance-header%5Cnetwork-account-balance-header.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NetworkAccountBalanceHeader;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _iconWithFallback = _interopRequireDefault(require("../../ui/icon-with-fallback"));
var _identicon = _interopRequireDefault(require("../../ui/identicon"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _i18n = require("../../../contexts/i18n");
var _network = require("../../../../shared/constants/network");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function NetworkAccountBalanceHeader({
  networkName,
  accountName,
  accountBalance,
  tokenName,
  // Derived from nativeCurrency
  accountAddress,
  chainId
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const networkIcon = _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[chainId];
  const networkIconWrapperClass = networkIcon ? 'network-account-balance-header__network-account__ident-icon-ethereum' : 'network-account-balance-header__network-account__ident-icon-ethereum--gray';
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    padding: 4,
    className: "network-account-balance-header",
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: accountAddress,
    diameter: 32
  }), /*#__PURE__*/_react.default.createElement(_iconWithFallback.default, {
    name: networkName,
    size: 16,
    icon: networkIcon,
    wrapperClassName: networkIconWrapperClass
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexStart,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    marginBottom: 0
  }, networkName), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textDefault,
    fontWeight: _designSystem.FontWeight.Bold,
    marginTop: 0
  }, accountName))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexEnd,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    marginBottom: 0
  }, t('balance')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textDefault,
    fontWeight: _designSystem.FontWeight.Bold,
    marginTop: 0,
    align: _designSystem.TextAlign.End
  }, accountBalance, " ", tokenName)));
}
NetworkAccountBalanceHeader.propTypes = {
  networkName: _propTypes.default.string,
  accountName: _propTypes.default.string,
  accountBalance: _propTypes.default.string,
  tokenName: _propTypes.default.string,
  accountAddress: _propTypes.default.string,
  chainId: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-display\\index.js", {"./network-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-display\\network-display.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnetwork-display%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networkDisplay.default;
  }
});
var _networkDisplay = _interopRequireDefault(require("./network-display"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\network-display\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-display\\network-display.js", {"../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/chip/chip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\chip\\chip.js","../../ui/color-indicator":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\color-indicator\\index.js","../../ui/loading-indicator":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\loading-indicator\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnetwork-display%5Cnetwork-display.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NetworkDisplay;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _network = require("../../../../shared/constants/network");
var _loadingIndicator = _interopRequireDefault(require("../../ui/loading-indicator"));
var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));
var _designSystem = require("../../../helpers/constants/design-system");
var _chip = _interopRequireDefault(require("../../ui/chip/chip"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _componentLibrary = require("../../component-library");
var _metamask = require("../../../ducks/metamask/metamask");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NetworkDisplay({
  indicatorSize,
  disabled,
  labelProps,
  targetNetwork,
  onClick
}) {
  const networkIsLoading = (0, _reactRedux.useSelector)(_selectors.isNetworkLoading);
  const providerConfig = (0, _reactRedux.useSelector)(_metamask.getProviderConfig);
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    nickname,
    type: networkType
  } = targetNetwork ?? providerConfig;
  return /*#__PURE__*/_react.default.createElement(_chip.default, {
    dataTestId: "network-display",
    borderColor: onClick ? _designSystem.BorderColor.borderDefault : _designSystem.BorderColor.borderMuted,
    onClick: onClick,
    leftIcon: /*#__PURE__*/_react.default.createElement(_loadingIndicator.default, {
      alt: t('attemptingConnect'),
      title: t('attemptingConnect'),
      isLoading: networkIsLoading
    }, /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: networkType === _network.NETWORK_TYPES.RPC ? _designSystem.IconColor.iconMuted : networkType,
      size: indicatorSize,
      type: _colorIndicator.default.TYPES.FILLED,
      iconClassName: networkType === _network.NETWORK_TYPES.RPC && indicatorSize !== _designSystem.Size.XS ? 'fa fa-question' : undefined
    })),
    rightIcon: onClick ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.ArrowDown,
      size: _componentLibrary.IconSize.Xs
    }) : null,
    label: networkType === _network.NETWORK_TYPES.RPC ? nickname ?? t('privateNetwork') : t(networkType),
    className: (0, _classnames.default)('network-display', {
      'network-display--disabled': disabled,
      'network-display--clickable': typeof onClick === 'function'
    }),
    labelProps: {
      variant: _designSystem.TypographyVariant.H7,
      ...labelProps
    }
  });
}
NetworkDisplay.propTypes = {
  /**
   * The size of the indicator
   */
  indicatorSize: _propTypes.default.oneOf(Object.values(_designSystem.Size)),
  /**
   * The label props of the label can use most of the Typography props
   */
  labelProps: _chip.default.propTypes.labelProps,
  /**
   * The target network
   */
  targetNetwork: _propTypes.default.shape({
    type: _propTypes.default.oneOf([...Object.keys(_network.BUILT_IN_NETWORKS), _network.NETWORK_TYPES.RPC]),
    nickname: _propTypes.default.string
  }),
  /**
   * Whether the NetworkDisplay is disabled
   */
  disabled: _propTypes.default.bool,
  /**
   * The onClick event handler of the NetworkDisplay
   * if it is not passed it is assumed that the NetworkDisplay
   * should not be interactive and removes the caret and changes the border color
   * of the NetworkDisplay
   */
  onClick: _propTypes.default.func
};
NetworkDisplay.defaultProps = {
  indicatorSize: _designSystem.Size.LG
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\network-display\\network-display.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-default-image\\index.js", {"./nft-default-image":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-default-image\\nft-default-image.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnft-default-image%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nftDefaultImage.default;
  }
});
var _nftDefaultImage = _interopRequireDefault(require("./nft-default-image"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nft-default-image\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-default-image\\nft-default-image.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnft-default-image%5Cnft-default-image.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftDefaultImage;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NftDefaultImage({
  name,
  tokenId,
  handleImageClick
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const Tag = handleImageClick ? 'button' : 'div';
  return /*#__PURE__*/_react.default.createElement(Tag, {
    tabIndex: 0,
    "data-testid": "nft-default-image",
    className: (0, _classnames.default)('nft-default', {
      'nft-default--clickable': handleImageClick
    }),
    onClick: handleImageClick
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    className: "nft-default__text"
  }, name ?? t('unknownCollection'), " ", /*#__PURE__*/_react.default.createElement("br", null), " #", tokenId));
}
NftDefaultImage.propTypes = {
  /**
   * The name of the NFT collection if not supplied will default to "Unnamed collection"
   */
  name: _propTypes.default.string,
  /**
   * The token id of the nft
   */
  tokenId: _propTypes.default.string,
  /**
   * The click handler for the NFT default image
   */
  handleImageClick: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nft-default-image\\nft-default-image.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-details\\nft-details.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/nfts":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\nfts.js","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useCopyToClipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/usePrevious":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../pages/asset/components/asset-navigation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\pages\\asset\\components\\asset-navigation.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/card":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\card\\index.js","../../ui/info-tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\info-tooltip\\index.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../nft-default-image":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-default-image\\index.js","../nft-options/nft-options":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-options\\nft-options.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnft-details%5Cnft-details.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftDetails;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _lodash = require("lodash");
var _box = _interopRequireDefault(require("../../ui/box"));
var _card = _interopRequireDefault(require("../../ui/card"));
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _util = require("../../../helpers/utils/util");
var _nfts = require("../../../helpers/utils/nfts");
var _selectors = require("../../../selectors");
var _assetNavigation = _interopRequireDefault(require("../../../pages/asset/components/asset-navigation"));
var _metamask = require("../../../ducks/metamask/metamask");
var _routes = require("../../../helpers/constants/routes");
var _actions = require("../../../store/actions");
var _network = require("../../../../shared/constants/network");
var _util2 = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _nftOptions = _interopRequireDefault(require("../nft-options/nft-options"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _send = require("../../../ducks/send");
var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip"));
var _usePrevious = require("../../../hooks/usePrevious");
var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");
var _stringUtils = require("../../../../shared/modules/string-utils");
var _transaction = require("../../../../shared/constants/transaction");
var _nftDefaultImage = _interopRequireDefault(require("../nft-default-image"));
var _componentLibrary = require("../../component-library");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _conversion = require("../../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function NftDetails({
  nft
}) {
  var _nftContracts$find;
  const {
    image,
    imageOriginal,
    name,
    description,
    address,
    tokenId,
    standard,
    isCurrentlyOwned,
    lastSale,
    imageThumbnail
  } = nft;
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const ipfsGateway = (0, _reactRedux.useSelector)(_selectors.getIpfsGateway);
  const nftContracts = (0, _reactRedux.useSelector)(_metamask.getNftContracts);
  const currentNetwork = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const [addressCopied, handleAddressCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const nftContractName = (_nftContracts$find = nftContracts.find(({
    address: contractAddress
  }) => (0, _stringUtils.isEqualCaseInsensitive)(contractAddress, address))) === null || _nftContracts$find === void 0 ? void 0 : _nftContracts$find.name;
  const selectedAccountName = (0, _reactRedux.useSelector)(state => (0, _selectors.getSelectedIdentity)(state).name);
  const nftImageAlt = (0, _nfts.getNftImageAlt)(nft);
  const nftImageURL = (0, _util.getAssetImageURL)(imageOriginal ?? image, ipfsGateway);
  const isDataURI = nftImageURL.startsWith('data:');
  const formattedTimestamp = (0, _util.formatDate)(new Date(lastSale === null || lastSale === void 0 ? void 0 : lastSale.event_timestamp).getTime(), 'M/d/y');
  const onRemove = () => {
    dispatch((0, _actions.removeAndIgnoreNft)(address, tokenId));
    dispatch((0, _actions.setNewNftAddedMessage)(''));
    dispatch((0, _actions.setRemoveNftMessage)('success'));
    history.push(_routes.DEFAULT_ROUTE);
  };
  const prevNft = (0, _usePrevious.usePrevious)(nft);
  (0, _react.useEffect)(() => {
    if (!(0, _lodash.isEqual)(prevNft, nft)) {
      (0, _actions.checkAndUpdateSingleNftOwnershipStatus)(nft);
    }
  }, [nft, prevNft]);
  const getOpenSeaLink = () => {
    switch (currentNetwork) {
      case _network.CHAIN_IDS.MAINNET:
        return `https://opensea.io/assets/${address}/${tokenId}`;
      case _network.CHAIN_IDS.POLYGON:
        return `https://opensea.io/assets/matic/${address}/${tokenId}`;
      case _network.CHAIN_IDS.GOERLI:
      case _network.CHAIN_IDS.SEPOLIA:
        return `https://testnets.opensea.io/assets/${address}/${tokenId}`;
      default:
        return null;
    }
  };
  const openSeaLink = getOpenSeaLink();
  const sendDisabled = standard !== _transaction.TokenStandard.ERC721;
  const inPopUp = (0, _util2.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;
  const onSend = async () => {
    await dispatch((0, _send.startNewDraftTransaction)({
      type: _transaction.AssetType.NFT,
      details: nft
    }));
    history.push(_routes.SEND_ROUTE);
  };
  const renderSendButton = () => {
    if (isCurrentlyOwned === false) {
      return /*#__PURE__*/_react.default.createElement("div", {
        style: {
          height: '30px'
        }
      });
    }
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      width: inPopUp ? _designSystem.BLOCK_SIZES.FULL : _designSystem.BLOCK_SIZES.HALF,
      margin: inPopUp ? [4, 0] : null
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onSend,
      disabled: sendDisabled,
      className: "nft-details__send-button",
      "data-testid": "nft-send-button"
    }, t('send')), sendDisabled ? /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
      position: "top",
      contentText: t('sendingDisabled')
    }) : null);
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_assetNavigation.default, {
    accountName: selectedAccountName,
    assetName: nftContractName,
    onBack: () => history.push(_routes.DEFAULT_ROUTE),
    optionsButton: /*#__PURE__*/_react.default.createElement(_nftOptions.default, {
      onViewOnOpensea: openSeaLink ? () => global.platform.openTab({
        url: openSeaLink
      }) : null,
      onRemove: onRemove
    })
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "nft-details"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "nft-details__top-section"
  }, /*#__PURE__*/_react.default.createElement(_card.default, {
    padding: 0,
    justifyContent: _designSystem.JustifyContent.center,
    className: "nft-details__card"
  }, image ? /*#__PURE__*/_react.default.createElement("img", {
    className: "nft-details__image",
    src: nftImageURL,
    alt: nftImageAlt
  }) : /*#__PURE__*/_react.default.createElement(_nftDefaultImage.default, {
    name: name,
    tokenId: tokenId
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    className: "nft-details__info",
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.headingSm,
    as: "h4",
    fontWeight: _designSystem.FontWeight.Bold,
    marginBottom: 2
  }, name), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textMuted,
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    marginBottom: 4,
    overflowWrap: _designSystem.OverflowWrap.BreakWord
  }, "#", tokenId)), description ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 2,
    className: "nft-details__description"
  }, t('description')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    marginBottom: 4
  }, description)) : null, inPopUp ? null : renderSendButton())), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 2
  }, lastSale ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('lastSold')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    className: "nft-details__contract-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    marginBottom: 4
  }, formattedTimestamp))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('lastPriceSold')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    className: "nft-details__contract-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    marginBottom: 4
  }, `${Number((0, _conversion.decWEIToDecETH)(lastSale.total_price))} ${lastSale.payment_token.symbol}`)))) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('source')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginBottom: 4,
    className: "nft-details__image-source",
    color: isDataURI ? _designSystem.TextColor.textDefault : _designSystem.TextColor.primaryDefault
  }, isDataURI ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, nftImageURL) : /*#__PURE__*/_react.default.createElement("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: nftImageURL,
    title: nftImageURL
  }, nftImageURL))), imageThumbnail ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('link')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginBottom: 4,
    className: "nft-details__image-source",
    color: isDataURI ? _designSystem.TextColor.textDefault : _designSystem.TextColor.primaryDefault
  }, /*#__PURE__*/_react.default.createElement("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: nftImageURL,
    title: nftImageURL
  }, imageThumbnail))) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('contractAddress')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    className: "nft-details__contract-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    marginBottom: 4
  }, (0, _util.shortenAddress)(address)), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    wrapperClassName: "nft-details__tooltip-wrapper",
    position: "bottom",
    title: addressCopied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    ariaLabel: "copy",
    color: _designSystem.IconColor.iconAlternative,
    className: "nft-details__contract-copy-button",
    "data-testid": "nft-address-copy",
    onClick: () => {
      handleAddressCopy(address);
    },
    iconName: addressCopied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy
  })))), inPopUp ? renderSendButton() : null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('nftDisclaimer')))));
}
NftDetails.propTypes = {
  nft: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    tokenId: _propTypes.default.string.isRequired,
    isCurrentlyOwned: _propTypes.default.bool,
    name: _propTypes.default.string,
    description: _propTypes.default.string,
    image: _propTypes.default.string,
    standard: _propTypes.default.string,
    imageThumbnail: _propTypes.default.string,
    imagePreview: _propTypes.default.string,
    imageOriginal: _propTypes.default.string,
    creator: _propTypes.default.shape({
      address: _propTypes.default.string,
      config: _propTypes.default.string,
      profile_img_url: _propTypes.default.string
    }),
    lastSale: _propTypes.default.shape({
      event_timestamp: _propTypes.default.string,
      total_price: _propTypes.default.string,
      payment_token: _propTypes.default.shape({
        symbol: _propTypes.default.string
      })
    })
  })
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nft-details\\nft-details.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-options\\nft-options.js", {"../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\menu\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnft-options%5Cnft-options.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _menu = require("../../ui/menu");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NftOptions = ({
  onRemove,
  onViewOnOpensea
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [nftOptionsOpen, setNftOptionsOpen] = (0, _react.useState)(false);
  const ref = (0, _react.useRef)(false);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.MoreVertical,
    className: "nft-options__button",
    "data-testid": "nft-options__button",
    onClick: () => setNftOptionsOpen(true),
    color: _designSystem.Color.textDefault,
    ariaLabel: t('nftOptions')
  }), nftOptionsOpen ? /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    "data-testid": "close-nft-options-menu",
    anchorElement: ref.current,
    onHide: () => setNftOptionsOpen(false)
  }, onViewOnOpensea ? /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Export,
    "data-testid": "nft-options__view-on-opensea",
    onClick: () => {
      setNftOptionsOpen(false);
      onViewOnOpensea();
    }
  }, t('viewOnOpensea')) : null, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Trash,
    "data-testid": "nft-item-remove",
    onClick: () => {
      setNftOptionsOpen(false);
      onRemove();
    }
  }, t('removeNFT'))) : null);
};
NftOptions.propTypes = {
  onRemove: _propTypes.default.func.isRequired,
  onViewOnOpensea: _propTypes.default.func
};
var _default = NftOptions;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nft-options\\nft-options.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-detection-notice\\index.js", {"./nfts-detection-notice":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-detection-notice\\nfts-detection-notice.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnfts-detection-notice%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nftsDetectionNotice.default;
  }
});
var _nftsDetectionNotice = _interopRequireDefault(require("./nfts-detection-notice"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-detection-notice\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-detection-notice\\nfts-detection-notice.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/dialog":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\dialog\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnfts-detection-notice%5Cnfts-detection-notice.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftsDetectionNotice;
var _react = _interopRequireDefault(require("react"));
var _reactRouterDom = require("react-router-dom");
var _box = _interopRequireDefault(require("../../ui/box"));
var _dialog = _interopRequireDefault(require("../../ui/dialog"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _button = _interopRequireDefault(require("../../ui/button"));
var _routes = require("../../../helpers/constants/routes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NftsDetectionNotice() {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "nfts-detection-notice"
  }, /*#__PURE__*/_react.default.createElement(_dialog.default, {
    type: "message",
    className: "nfts-detection-notice__message"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 1
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Info,
    className: "info-circle",
    color: _designSystem.IconColor.primaryDefault
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    align: _designSystem.TextAlign.Left,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold
  }, t('newNFTsDetected')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    align: _designSystem.TextAlign.Left,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginBottom: 4
  }, t('newNFTDetectedMessage')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: e => {
      e.preventDefault();
      history.push(`${_routes.EXPERIMENTAL_ROUTE}#autodetect-nfts`);
    },
    className: "nfts-detection-notice__message__link"
  }, t('selectNFTPrivacyPreference'))))));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-detection-notice\\nfts-detection-notice.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-items\\index.js", {"./nfts-items":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-items\\nfts-items.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnfts-items%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nftsItems.default;
  }
});
var _nftsItems = _interopRequireDefault(require("./nfts-items"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-items\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-items\\nfts-items.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/nfts":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\nfts.js","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/usePrevious":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\usePrevious.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/card":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\card\\index.js","../../ui/typography/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../nft-default-image":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nft-default-image\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnfts-items%5Cnfts-items.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftsItems;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _lodash = require("lodash");
var _box = _interopRequireDefault(require("../../ui/box"));
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _card = _interopRequireDefault(require("../../ui/card"));
var _designSystem = require("../../../helpers/constants/design-system");
var _app = require("../../../../shared/constants/app");
var _util = require("../../../../app/scripts/lib/util");
var _selectors = require("../../../selectors");
var _routes = require("../../../helpers/constants/routes");
var _util2 = require("../../../helpers/utils/util");
var _nfts = require("../../../helpers/utils/nfts");
var _actions = require("../../../store/actions");
var _usePrevious = require("../../../hooks/usePrevious");
var _metamask = require("../../../ducks/metamask/metamask");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _componentLibrary = require("../../component-library");
var _nftDefaultImage = _interopRequireDefault(require("../nft-default-image"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const width = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? _designSystem.BLOCK_SIZES.ONE_THIRD : _designSystem.BLOCK_SIZES.ONE_SIXTH;
const PREVIOUSLY_OWNED_KEY = 'previouslyOwned';
function NftsItems({
  collections = {},
  previouslyOwnedCollection = {}
}) {
  var _previouslyOwnedColle;
  const dispatch = (0, _reactRedux.useDispatch)();
  const collectionsKeys = Object.keys(collections);
  const nftsDropdownState = (0, _reactRedux.useSelector)(_metamask.getNftsDropdownState);
  const previousCollectionKeys = (0, _usePrevious.usePrevious)(collectionsKeys);
  const selectedAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const t = (0, _useI18nContext.useI18nContext)();
  (0, _react.useEffect)(() => {
    var _nftsDropdownState$se, _nftsDropdownState$se2;
    if (chainId !== undefined && selectedAddress !== undefined && !(0, _lodash.isEqual)(previousCollectionKeys, collectionsKeys) && ((nftsDropdownState === null || nftsDropdownState === void 0 ? void 0 : (_nftsDropdownState$se = nftsDropdownState[selectedAddress]) === null || _nftsDropdownState$se === void 0 ? void 0 : _nftsDropdownState$se[chainId]) === undefined || Object.keys(nftsDropdownState === null || nftsDropdownState === void 0 ? void 0 : (_nftsDropdownState$se2 = nftsDropdownState[selectedAddress]) === null || _nftsDropdownState$se2 === void 0 ? void 0 : _nftsDropdownState$se2[chainId]).length === 0)) {
      const initState = {};
      collectionsKeys.forEach(key => {
        initState[key] = true;
      });
      const newNftDropdownState = {
        ...nftsDropdownState,
        [selectedAddress]: {
          ...(nftsDropdownState === null || nftsDropdownState === void 0 ? void 0 : nftsDropdownState[selectedAddress]),
          [chainId]: initState
        }
      };
      dispatch((0, _actions.updateNftDropDownState)(newNftDropdownState));
    }
  }, [collectionsKeys, previousCollectionKeys, nftsDropdownState, selectedAddress, chainId, dispatch]);
  const ipfsGateway = (0, _reactRedux.useSelector)(_selectors.getIpfsGateway);
  const history = (0, _reactRouterDom.useHistory)();
  const renderCollectionImage = (collectionImage, collectionName) => {
    var _collectionName$;
    if (collectionImage) {
      return /*#__PURE__*/_react.default.createElement("img", {
        alt: collectionName,
        src: (0, _util2.getAssetImageURL)(collectionImage, ipfsGateway),
        className: "nfts-items__collection-image"
      });
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "nfts-items__collection-image-alt"
    }, (collectionName === null || collectionName === void 0 ? void 0 : (_collectionName$ = collectionName[0]) === null || _collectionName$ === void 0 ? void 0 : _collectionName$.toUpperCase()) ?? null);
  };
  const updateNftDropDownStateKey = (key, isExpanded) => {
    const newCurrentAccountState = {
      ...nftsDropdownState[selectedAddress][chainId],
      [key]: !isExpanded
    };
    const newState = {
      ...nftsDropdownState,
      [selectedAddress]: {
        [chainId]: newCurrentAccountState
      }
    };
    dispatch((0, _actions.updateNftDropDownState)(newState));
  };
  const renderCollection = ({
    nfts,
    collectionName,
    collectionImage,
    key
  }) => {
    var _nftsDropdownState$se3, _nftsDropdownState$se4;
    if (!nfts.length) {
      return null;
    }
    const isExpanded = (_nftsDropdownState$se3 = nftsDropdownState[selectedAddress]) === null || _nftsDropdownState$se3 === void 0 ? void 0 : (_nftsDropdownState$se4 = _nftsDropdownState$se3[chainId]) === null || _nftsDropdownState$se4 === void 0 ? void 0 : _nftsDropdownState$se4[key];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "nfts-items__collection",
      key: `collection-${key}`
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: "nfts-items__collection-wrapper",
      "data-testid": "collection-expander-button",
      onClick: () => {
        updateNftDropDownStateKey(key, isExpanded);
      }
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      marginBottom: 2,
      display: _designSystem.DISPLAY.FLEX,
      alignItems: _designSystem.AlignItems.center,
      justifyContent: _designSystem.JustifyContent.spaceBetween,
      className: "nfts-items__collection-accordion-title"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      alignItems: _designSystem.AlignItems.center,
      className: "nfts-items__collection-header"
    }, renderCollectionImage(collectionImage, collectionName), /*#__PURE__*/_react.default.createElement(_typography.default, {
      color: _designSystem.Color.textDefault,
      variant: _designSystem.TypographyVariant.H5,
      margin: 2
    }, `${collectionName ?? t('unknownCollection')} (${nfts.length})`)), /*#__PURE__*/_react.default.createElement(_box.default, {
      alignItems: _designSystem.AlignItems.flexEnd
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: isExpanded ? _componentLibrary.IconName.ArrowDown : _componentLibrary.IconName.ArrowRight,
      color: _designSystem.Color.iconDefault
    })))), isExpanded ? /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      flexWrap: _designSystem.FLEX_WRAP.WRAP,
      gap: 4
    }, nfts.map((nft, i) => {
      const {
        image,
        address,
        tokenId,
        backgroundColor,
        name
      } = nft;
      const nftImage = (0, _util2.getAssetImageURL)(image, ipfsGateway);
      const nftImageAlt = (0, _nfts.getNftImageAlt)(nft);
      const handleImageClick = () => history.push(`${_routes.ASSET_ROUTE}/${address}/${tokenId}`);
      return /*#__PURE__*/_react.default.createElement(_box.default, {
        "data-testid": "nft-wrapper",
        width: width,
        key: `nft-${i}`,
        className: "nfts-items__item-wrapper"
      }, /*#__PURE__*/_react.default.createElement(_card.default, {
        padding: 0,
        justifyContent: _designSystem.JustifyContent.center,
        className: "nfts-items__item-wrapper__card"
      }, nftImage ? /*#__PURE__*/_react.default.createElement("button", {
        className: "nfts-items__item",
        style: {
          backgroundColor
        },
        onClick: handleImageClick
      }, /*#__PURE__*/_react.default.createElement("img", {
        className: "nfts-items__item-image",
        "data-testid": "nft-image",
        src: nftImage,
        alt: nftImageAlt
      })) : /*#__PURE__*/_react.default.createElement(_nftDefaultImage.default, {
        name: name,
        tokenId: tokenId,
        handleImageClick: handleImageClick
      })));
    })) : null);
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "nfts-items"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 6,
    paddingBottom: 6,
    paddingLeft: 4,
    paddingRight: 4,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, collectionsKeys.map(key => {
    const {
      nfts,
      collectionName,
      collectionImage
    } = collections[key];
    return renderCollection({
      nfts,
      collectionName,
      collectionImage,
      key,
      isPreviouslyOwnedCollection: false
    });
  }), renderCollection({
    nfts: previouslyOwnedCollection.nfts,
    collectionName: previouslyOwnedCollection.collectionName,
    collectionImage: (_previouslyOwnedColle = previouslyOwnedCollection.nfts[0]) === null || _previouslyOwnedColle === void 0 ? void 0 : _previouslyOwnedColle.image,
    isPreviouslyOwnedCollection: true,
    key: PREVIOUSLY_OWNED_KEY
  }))));
}
NftsItems.propTypes = {
  previouslyOwnedCollection: _propTypes.default.shape({
    nfts: _propTypes.default.arrayOf(_propTypes.default.shape({
      address: _propTypes.default.string.isRequired,
      tokenId: _propTypes.default.string.isRequired,
      name: _propTypes.default.string,
      description: _propTypes.default.string,
      image: _propTypes.default.string,
      standard: _propTypes.default.string,
      imageThumbnail: _propTypes.default.string,
      imagePreview: _propTypes.default.string,
      creator: _propTypes.default.shape({
        address: _propTypes.default.string,
        config: _propTypes.default.string,
        profile_img_url: _propTypes.default.string
      })
    })),
    collectionName: _propTypes.default.string,
    collectionImage: _propTypes.default.string
  }),
  collections: _propTypes.default.shape({
    nfts: _propTypes.default.arrayOf(_propTypes.default.shape({
      address: _propTypes.default.string.isRequired,
      tokenId: _propTypes.default.string.isRequired,
      name: _propTypes.default.string,
      description: _propTypes.default.string,
      image: _propTypes.default.string,
      standard: _propTypes.default.string,
      imageThumbnail: _propTypes.default.string,
      imagePreview: _propTypes.default.string,
      creator: _propTypes.default.shape({
        address: _propTypes.default.string,
        config: _propTypes.default.string,
        profile_img_url: _propTypes.default.string
      })
    })),
    collectionImage: _propTypes.default.string,
    collectionName: _propTypes.default.string
  })
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-items\\nfts-items.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-tab\\index.js", {"./nfts-tab":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-tab\\nfts-tab.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnfts-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nftsTab.default;
  }
});
var _nftsTab = _interopRequireDefault(require("./nfts-tab"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-tab\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-tab\\nfts-tab.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useNftsCollections":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useNftsCollections.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/typography/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../nfts-detection-notice":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-detection-notice\\index.js","../nfts-items":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\nfts-items\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cnfts-tab%5Cnfts-tab.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftsTab;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _box = _interopRequireDefault(require("../../ui/box"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _nftsDetectionNotice = _interopRequireDefault(require("../nfts-detection-notice"));
var _nftsItems = _interopRequireDefault(require("../nfts-items"));
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _routes = require("../../../helpers/constants/routes");
var _actions = require("../../../store/actions");
var _useNftsCollections = require("../../../hooks/useNftsCollections");
var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NftsTab({
  onAddNFT
}) {
  const useNftDetection = (0, _reactRedux.useSelector)(_selectors.getUseNftDetection);
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    nftsLoading,
    collections,
    previouslyOwnedCollection
  } = (0, _useNftsCollections.useNftsCollections)();
  const onEnableAutoDetect = () => {
    history.push(_routes.EXPERIMENTAL_ROUTE);
  };
  const onRefresh = () => {
    if (isMainnet) {
      dispatch((0, _actions.detectNfts)());
    }
    (0, _actions.checkAndUpdateAllNftsOwnershipStatus)();
  };
  if (nftsLoading) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "nfts-tab__loading"
    }, t('loadingNFTs'));
  }
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "nfts-tab"
  }, Object.keys(collections).length > 0 || previouslyOwnedCollection.nfts.length > 0 ? /*#__PURE__*/_react.default.createElement(_nftsItems.default, {
    collections: collections,
    previouslyOwnedCollection: previouslyOwnedCollection
  }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isMainnet && !useNftDetection ? /*#__PURE__*/_react.default.createElement(_nftsDetectionNotice.default, null) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    padding: 12
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/no-nfts.svg"
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginBottom: 12,
    justifyContent: _designSystem.JustifyContent.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    className: "nfts-tab__link"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.TextColor.textMuted,
    variant: _designSystem.TypographyVariant.H4,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('noNFTs')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    target: "_blank",
    rel: "noopener noreferrer",
    href: _zendeskUrl.default.NFT_TOKENS
  }, t('learnMoreUpperCase'))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4,
    justifyContent: _designSystem.JustifyContent.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.TextColor.textMuted,
    variant: _designSystem.TypographyVariant.H5,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('missingNFT')), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.center
  }, !isMainnet && Object.keys(collections).length < 1 ? null : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "nfts-tab__link",
    justifyContent: _designSystem.JustifyContent.flexEnd
  }, isMainnet && !useNftDetection ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: onEnableAutoDetect
  }, t('enableAutoDetect')) : /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: onRefresh
  }, t('refreshList'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.TextColor.textMuted,
    variant: _designSystem.TypographyVariant.H6,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('or'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JustifyContent.flexStart,
    className: "nfts-tab__link"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: onAddNFT
  }, t('importNFTs'))))));
}
NftsTab.propTypes = {
  onAddNFT: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-tab\\nfts-tab.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\index.js", {"./permission-page-container-content":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\index.js","./permission-page-container.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PermissionPageContainerContent", {
  enumerable: true,
  get: function () {
    return _permissionPageContainerContent.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionPageContainer.default;
  }
});
var _permissionPageContainer = _interopRequireDefault(require("./permission-page-container.container"));
var _permissionPageContainerContent = _interopRequireDefault(require("./permission-page-container-content"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\index.js", {"./permission-page-container-content.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\permission-page-container-content.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cpermission-page-container-content%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionPageContainerContent.default;
  }
});
var _permissionPageContainerContent = _interopRequireDefault(require("./permission-page-container-content.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\permission-page-container-content\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\permission-page-container-content.component.js", {"../../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../permissions-connect-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\index.js","../../permissions-connect-permission-list":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-permission-list\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cpermission-page-container-content%5Cpermission-page-container-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _permissionsConnectHeader = _interopRequireDefault(require("../../permissions-connect-header"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));
var _permissionsConnectPermissionList = _interopRequireDefault(require("../../permissions-connect-permission-list"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PermissionPageContainerContent extends _react.PureComponent {
  renderRequestedPermissions() {
    const {
      selectedPermissions,
      subjectMetadata
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content__requested"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectPermissionList.default, {
      permissions: selectedPermissions,
      targetSubjectMetadata: subjectMetadata
    }));
  }
  renderAccountTooltip(textContent) {
    const {
      selectedIdentities
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      key: "all-account-connect-tooltip",
      position: "bottom",
      wrapperClassName: "permission-approval-container__bold-title-elements",
      html: /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: 'flex',
          flexDirection: 'column'
        }
      }, selectedIdentities.slice(0, 6).map((identity, index) => {
        return /*#__PURE__*/_react.default.createElement("div", {
          key: `tooltip-identity-${index}`
        }, identity.addressLabel);
      }), selectedIdentities.length > 6 ? t('plusXMore', [selectedIdentities.length - 6]) : null)
    }, textContent);
  }
  getTitle() {
    var _selectedIdentities$;
    const {
      subjectMetadata,
      selectedIdentities,
      allIdentitiesSelected,
      selectedPermissions
    } = this.props;
    const {
      t
    } = this.context;
    if (subjectMetadata.extensionId) {
      return t('externalExtension', [subjectMetadata.extensionId]);
    } else if (!selectedPermissions.eth_accounts) {
      return t('permissionRequestCapitalized');
    } else if (allIdentitiesSelected) {
      return t('connectToAll', [this.renderAccountTooltip(t('connectToAllAccounts'))]);
    } else if (selectedIdentities.length > 1) {
      return t('connectToMultiple', [this.renderAccountTooltip(t('connectToMultipleNumberOfAccounts', [selectedIdentities.length]))]);
    }
    return t('connectTo', [(_selectedIdentities$ = selectedIdentities[0]) === null || _selectedIdentities$ === void 0 ? void 0 : _selectedIdentities$.addressLabel]);
  }
  render() {
    const {
      subjectMetadata
    } = this.props;
    const {
      t
    } = this.context;
    const title = this.getTitle();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content-container"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectHeader.default, {
      iconUrl: subjectMetadata.iconUrl,
      iconName: subjectMetadata.name,
      headerTitle: title,
      headerText: subjectMetadata.extensionId ? t('allowExternalExtensionTo', [subjectMetadata.extensionId]) : t('allowThisSiteTo'),
      siteOrigin: subjectMetadata.origin
    }), /*#__PURE__*/_react.default.createElement("section", {
      className: "permission-approval-container__permissions-container"
    }, this.renderRequestedPermissions())));
  }
}
exports.default = PermissionPageContainerContent;
_defineProperty(PermissionPageContainerContent, "propTypes", {
  subjectMetadata: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string.isRequired,
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string
  }),
  selectedPermissions: _propTypes.default.object.isRequired,
  selectedIdentities: _propTypes.default.array,
  allIdentitiesSelected: _propTypes.default.bool
});
_defineProperty(PermissionPageContainerContent, "defaultProps", {
  selectedIdentities: [],
  allIdentitiesSelected: false
});
_defineProperty(PermissionPageContainerContent, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\permission-page-container-content\\permission-page-container-content.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container.component.js", {".":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\index.js","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../permissions-connect-footer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-footer\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cpermission-page-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var _metametrics = require("../../../../shared/constants/metametrics");
var _pageContainer = require("../../ui/page-container");
var _permissionsConnectFooter = _interopRequireDefault(require("../permissions-connect-footer"));
var _ = require(".");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PermissionPageContainer extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      selectedPermissions: this.getRequestedMethodState(this.getRequestedMethodNames(this.props))
    });
    _defineProperty(this, "onCancel", () => {
      const {
        request,
        rejectPermissionsRequest
      } = this.props;
      rejectPermissionsRequest(request.metadata.id);
    });
    _defineProperty(this, "onSubmit", () => {
      const {
        request: _request,
        approvePermissionsRequest,
        rejectPermissionsRequest,
        selectedIdentities
      } = this.props;
      const request = {
        ..._request,
        permissions: {
          ..._request.permissions
        },
        approvedAccounts: selectedIdentities.map(selectedIdentity => selectedIdentity.address)
      };
      Object.keys(this.state.selectedPermissions).forEach(key => {
        if (!this.state.selectedPermissions[key]) {
          delete request.permissions[key];
        }
      });
      if (Object.keys(request.permissions).length > 0) {
        approvePermissionsRequest(request);
      } else {
        rejectPermissionsRequest(request.metadata.id);
      }
    });
  }
  componentDidUpdate() {
    const newMethodNames = this.getRequestedMethodNames(this.props);
    if (!(0, _lodash.isEqual)(Object.keys(this.state.selectedPermissions), newMethodNames)) {
      // this should be a new request, so just overwrite
      this.setState({
        selectedPermissions: this.getRequestedMethodState(newMethodNames)
      });
    }
  }
  getRequestedMethodState(methodNames) {
    return methodNames.reduce((acc, methodName) => {
      acc[methodName] = true;
      return acc;
    }, {});
  }
  getRequestedMethodNames(props) {
    return Object.keys(props.request.permissions || {});
  }
  componentDidMount() {
    this.context.trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Auth,
      event: 'Tab Opened',
      properties: {
        action: 'Connect',
        legacy_event: true
      }
    });
  }
  render() {
    const {
      requestMetadata,
      targetSubjectMetadata,
      selectedIdentities,
      allIdentitiesSelected
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container permission-approval-container"
    }, /*#__PURE__*/_react.default.createElement(_.PermissionPageContainerContent, {
      requestMetadata: requestMetadata,
      subjectMetadata: targetSubjectMetadata,
      selectedPermissions: this.state.selectedPermissions,
      selectedIdentities: selectedIdentities,
      allIdentitiesSelected: allIdentitiesSelected
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__footers"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectFooter.default, null), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      cancelButtonType: "default",
      onCancel: () => this.onCancel(),
      cancelText: this.context.t('cancel'),
      onSubmit: () => this.onSubmit(),
      submitText: this.context.t('connect'),
      buttonSizeLarge: false
    })));
  }
}
exports.default = PermissionPageContainer;
_defineProperty(PermissionPageContainer, "propTypes", {
  approvePermissionsRequest: _propTypes.default.func.isRequired,
  rejectPermissionsRequest: _propTypes.default.func.isRequired,
  selectedIdentities: _propTypes.default.array,
  allIdentitiesSelected: _propTypes.default.bool,
  request: _propTypes.default.object,
  requestMetadata: _propTypes.default.object,
  targetSubjectMetadata: _propTypes.default.shape({
    name: _propTypes.default.string,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string.isRequired,
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string
  })
});
_defineProperty(PermissionPageContainer, "defaultProps", {
  request: {},
  requestMetadata: {},
  selectedIdentities: [],
  allIdentitiesSelected: false
});
_defineProperty(PermissionPageContainer, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\permission-page-container.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container.container.js", {"../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./permission-page-container.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permission-page-container\\permission-page-container.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cpermission-page-container.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _selectors = require("../../../selectors");
var _permissionPageContainer = _interopRequireDefault(require("./permission-page-container.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (state, ownProps) => {
  const {
    selectedIdentities
  } = ownProps;
  const allIdentities = (0, _selectors.getMetaMaskIdentities)(state);
  const allIdentitiesSelected = Object.keys(selectedIdentities).length === Object.keys(allIdentities).length && selectedIdentities.length > 1;
  return {
    allIdentitiesSelected
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps)(_permissionPageContainer.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\permission-page-container.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-footer\\index.js", {"./permissions-connect-footer.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-footer\\permissions-connect-footer.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-footer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectFooter.default;
  }
});
var _permissionsConnectFooter = _interopRequireDefault(require("./permissions-connect-footer.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-footer\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-footer\\permissions-connect-footer.component.js", {"../../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-footer%5Cpermissions-connect-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PermissionsConnectFooter extends _react.Component {
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer__text"
    }, /*#__PURE__*/_react.default.createElement("div", null, t('onlyConnectTrust')), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer__text--link",
      onClick: () => {
        global.platform.openTab({
          url: _zendeskUrl.default.USER_GUIDE_DAPPS
        });
      }
    }, t('learnMoreUpperCase'))));
  }
}
exports.default = PermissionsConnectFooter;
_defineProperty(PermissionsConnectFooter, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-footer\\permissions-connect-footer.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\index.js", {"./permissions-connect-header.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\permissions-connect-header.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-header%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectHeader.default;
  }
});
var _permissionsConnectHeader = _interopRequireDefault(require("./permissions-connect-header.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-header\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\permissions-connect-header.component.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/site-origin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-header%5Cpermissions-connect-header.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PermissionsConnectHeader extends _react.Component {
  renderHeaderIcon() {
    const {
      iconUrl,
      iconName,
      siteOrigin,
      leftIcon,
      rightIcon
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__icon"
    }, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      chip: true,
      siteOrigin: siteOrigin,
      title: siteOrigin,
      iconSrc: iconUrl,
      name: iconName,
      leftIcon: leftIcon,
      rightIcon: rightIcon
    }));
  }
  render() {
    const {
      boxProps,
      className,
      headerTitle,
      headerText
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
      className: (0, _classnames.default)('permissions-connect-header', className),
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
      justifyContent: _designSystem.JustifyContent.center
    }, boxProps), this.renderHeaderIcon(), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__title"
    }, headerTitle), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__subtitle"
    }, headerText));
  }
}
exports.default = PermissionsConnectHeader;
_defineProperty(PermissionsConnectHeader, "propTypes", {
  className: _propTypes.default.string,
  iconUrl: _propTypes.default.string,
  iconName: _propTypes.default.string.isRequired,
  siteOrigin: _propTypes.default.string.isRequired,
  headerTitle: _propTypes.default.node,
  boxProps: _propTypes.default.shape({
    ..._box.default.propTypes
  }),
  headerText: _propTypes.default.string,
  leftIcon: _propTypes.default.node,
  rightIcon: _propTypes.default.node
});
_defineProperty(PermissionsConnectHeader, "defaultProps", {
  iconUrl: null,
  headerTitle: '',
  headerText: '',
  boxProps: {}
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-header\\permissions-connect-header.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-permission-list\\index.js", {"./permissions-connect-permission-list":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-permission-list\\permissions-connect-permission-list.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-permission-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectPermissionList.default;
  }
});
var _permissionsConnectPermissionList = _interopRequireDefault(require("./permissions-connect-permission-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-permission-list\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-permission-list\\permissions-connect-permission-list.js", {"../../../helpers/utils/permission":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\permission.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-permission-list%5Cpermissions-connect-permission-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PermissionsConnectPermissionList;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _permission = require("../../../helpers/utils/permission");
var _useI18nContext = require("../../../hooks/useI18nContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Get one or more permission descriptions for a permission name.
 *
 * @param permission - The permission to render.
 * @param index - The index of the permission.
 * @returns {JSX.Element} A permission description node.
 */
function getDescriptionNode(permission, index) {
  const {
    label,
    leftIcon,
    permissionName
  } = permission;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "permission",
    key: `${permissionName}-${index}`
  }, typeof leftIcon === 'string' ? /*#__PURE__*/_react.default.createElement("i", {
    className: leftIcon
  }) : leftIcon, label, (0, _permission.getRightIcon)(permission));
}
function PermissionsConnectPermissionList({
  permissions,
  targetSubjectMetadata
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-connect-permission-list"
  }, (0, _permission.getWeightedPermissions)(t, permissions, targetSubjectMetadata).map(getDescriptionNode));
}
PermissionsConnectPermissionList.propTypes = {
  permissions: _propTypes.default.object.isRequired,
  targetSubjectMetadata: _propTypes.default.object.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-permission-list\\permissions-connect-permission-list.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\base-reader.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","../../../helpers/utils/webcam-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\webcam-utils.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/page-container/page-container-footer/page-container-footer.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\page-container-footer\\page-container-footer.component.js","./enhanced-reader":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\enhanced-reader.js","@ngraveio/bc-ur":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ngraveio\\bc-ur\\dist\\index.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cbase-reader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _bcUr = require("@ngraveio/bc-ur");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _webcamUtils = _interopRequireDefault(require("../../../helpers/utils/webcam-utils"));
var _pageContainerFooter = _interopRequireDefault(require("../../ui/page-container/page-container-footer/page-container-footer.component"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _time = require("../../../../shared/constants/time");
var _enhancedReader = _interopRequireDefault(require("./enhanced-reader"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const READY_STATE = {
  ACCESSING_CAMERA: 'ACCESSING_CAMERA',
  NEED_TO_ALLOW_ACCESS: 'NEED_TO_ALLOW_ACCESS',
  READY: 'READY'
};
const BaseReader = ({
  isReadingWallet,
  handleCancel,
  handleSuccess,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [ready, setReady] = (0, _react.useState)(READY_STATE.ACCESSING_CAMERA);
  const [error, setError] = (0, _react.useState)(null);
  const [urDecoder, setURDecoder] = (0, _react.useState)(new _bcUr.URDecoder());
  let permissionChecker = null;
  const mounted = (0, _react.useRef)(false);
  const reset = () => {
    setReady(READY_STATE.ACCESSING_CAMERA);
    setError(null);
    setURDecoder(new _bcUr.URDecoder());
  };
  const checkEnvironment = async () => {
    try {
      const {
        environmentReady
      } = await _webcamUtils.default.checkStatus();
      if (!environmentReady && (0, _util.getEnvironmentType)() !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
        const currentUrl = new URL(window.location.href);
        const currentHash = currentUrl.hash;
        const currentRoute = currentHash ? currentHash.substring(1) : null;
        global.platform.openExtensionInBrowser(currentRoute);
      }
    } catch (e) {
      if (mounted.current) {
        setError(e);
      }
    }
    // initial attempt is required to trigger permission prompt
    // eslint-disable-next-line no-use-before-define
    return initCamera();
  };
  const checkPermissions = async () => {
    try {
      const {
        permissions
      } = await _webcamUtils.default.checkStatus();
      if (permissions) {
        // Let the video stream load first...
        await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));
        if (!mounted.current) {
          return;
        }
        setReady(READY_STATE.READY);
      } else if (mounted.current) {
        // Keep checking for permissions
        permissionChecker = setTimeout(checkPermissions, _time.SECOND);
        setReady(READY_STATE.NEED_TO_ALLOW_ACCESS);
      }
    } catch (e) {
      if (mounted.current) {
        setError(e);
      }
    }
  };
  const handleScan = data => {
    try {
      if (!data) {
        return;
      }
      urDecoder.receivePart(data);
      if (urDecoder.isComplete()) {
        const result = urDecoder.resultUR();
        handleSuccess(result).catch(setError);
      }
    } catch (e) {
      if (isReadingWallet) {
        setErrorTitle(t('QRHardwareUnknownQRCodeTitle'));
      } else {
        setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      }
      setError(new Error(t('unknownQrCode')));
    }
  };
  const initCamera = () => {
    try {
      checkPermissions();
    } catch (e) {
      if (!mounted.current) {
        return;
      }
      if (e.name === 'NotAllowedError') {
        _loglevel.default.info(`Permission denied: '${e}'`);
        setReady(READY_STATE.NEED_TO_ALLOW_ACCESS);
      } else {
        setError(e);
      }
    }
  };
  (0, _react.useEffect)(() => {
    mounted.current = true;
    checkEnvironment();
    return () => {
      mounted.current = false;
      clearTimeout(permissionChecker);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _react.useEffect)(() => {
    if (ready === READY_STATE.READY) {
      initCamera();
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      checkPermissions();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ready]);
  const tryAgain = () => {
    clearTimeout(permissionChecker);
    reset();
    checkEnvironment();
  };
  const renderError = () => {
    let title, msg;
    if (error.type === 'NO_WEBCAM_FOUND') {
      title = t('noWebcamFoundTitle');
      msg = t('noWebcamFound');
    } else if (error.message === t('unknownQrCode')) {
      if (isReadingWallet) {
        msg = t('QRHardwareUnknownWalletQRCode');
      } else {
        msg = t('unknownQrCode');
      }
    } else if (error.message === t('QRHardwareMismatchedSignId')) {
      msg = t('QRHardwareMismatchedSignId');
    } else {
      title = t('unknownCameraErrorTitle');
      msg = t('unknownCameraError');
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__image"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/webcam.svg",
      width: "70",
      height: "70",
      alt: ""
    })), title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, title) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__error"
    }, msg), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: () => {
        setErrorTitle('');
        handleCancel();
      },
      onSubmit: () => {
        setErrorTitle('');
        tryAgain();
      },
      cancelText: t('cancel'),
      submitText: t('tryAgain'),
      submitButtonType: "confirm"
    }));
  };
  const renderVideo = () => {
    let message;
    if (ready === READY_STATE.ACCESSING_CAMERA) {
      message = t('accessingYourCamera');
    } else if (ready === READY_STATE.READY) {
      message = t('QRHardwareScanInstructions');
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      message = t('youNeedToAllowCameraAccess');
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content"
    }, /*#__PURE__*/_react.default.createElement(_enhancedReader.default, {
      handleScan: handleScan
    })), message && /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__status"
    }, message));
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-scanner"
  }, error ? renderError() : renderVideo());
};
BaseReader.propTypes = {
  isReadingWallet: _propTypes.default.bool.isRequired,
  handleCancel: _propTypes.default.func.isRequired,
  handleSuccess: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = BaseReader;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\base-reader.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\enhanced-reader.js", {"../../../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","../../ui/spinner":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","@zxing/browser":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@zxing\\browser\\cjs\\index.js","@zxing/library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@zxing\\library\\umd\\index.min.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cenhanced-reader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _library = require("@zxing/library");
var _browser = require("@zxing/browser");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _time = require("../../../../shared/constants/time");
var _spinner = _interopRequireDefault(require("../../ui/spinner"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const EnhancedReader = ({
  handleScan
}) => {
  const [canplay, setCanplay] = (0, _react.useState)(false);
  const codeReader = (0, _react.useMemo)(() => {
    const hint = new Map();
    hint.set(_library.DecodeHintType.POSSIBLE_FORMATS, [_library.BarcodeFormat.QR_CODE]);
    return new _browser.BrowserQRCodeReader(hint, {
      delayBetweenScanAttempts: _time.MILLISECOND * 100,
      delayBetweenScanSuccess: _time.MILLISECOND * 100
    });
  }, []);
  (0, _react.useEffect)(() => {
    const videoElem = document.getElementById('video');
    const canplayListener = () => {
      setCanplay(true);
    };
    videoElem.addEventListener('canplay', canplayListener);
    const promise = codeReader.decodeFromVideoDevice(undefined, 'video', result => {
      if (result) {
        handleScan(result.getText());
      }
    });
    return () => {
      videoElem.removeEventListener('canplay', canplayListener);
      promise.then(controls => {
        if (controls) {
          controls.stop();
        }
      }).catch(_loglevel.default.info);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-scanner__content__video-wrapper"
  }, /*#__PURE__*/_react.default.createElement("video", {
    id: "video",
    style: {
      display: canplay ? 'block' : 'none',
      width: '100%',
      filter: 'blur(4px)'
    }
  }), canplay ? null : /*#__PURE__*/_react.default.createElement(_spinner.default, {
    color: "var(--color-warning-default)"
  }));
};
EnhancedReader.propTypes = {
  handleScan: _propTypes.default.func.isRequired
};
var _default = EnhancedReader;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\enhanced-reader.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\index.js", {"./qr-hardware-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _qrHardwarePopover = _interopRequireDefault(require("./qr-hardware-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _qrHardwarePopover.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js", {"../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","./qr-hardware-sign-request":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js","./qr-hardware-wallet-importer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _selectors = require("../../../selectors");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _actions = require("../../../store/actions");
var _app = require("../../../../shared/constants/app");
var _qrHardwareWalletImporter = _interopRequireDefault(require("./qr-hardware-wallet-importer"));
var _qrHardwareSignRequest = _interopRequireDefault(require("./qr-hardware-sign-request"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const QRHardwarePopover = () => {
  var _sign$request;
  const t = (0, _useI18nContext.useI18nContext)();
  const qrHardware = (0, _reactRedux.useSelector)(_selectors.getCurrentQRHardwareState);
  const {
    sync,
    sign
  } = qrHardware;
  const showWalletImporter = sync === null || sync === void 0 ? void 0 : sync.reading;
  const showSignRequest = sign === null || sign === void 0 ? void 0 : sign.request;
  const showPopover = showWalletImporter || showSignRequest;
  const [errorTitle, setErrorTitle] = (0, _react.useState)('');
  const {
    txData
  } = (0, _reactRedux.useSelector)(state => {
    return state.confirmTransaction;
  });
  // the confirmTransaction's life cycle is not consistent with QR hardware wallet;
  // the confirmTransaction will change after the previous tx is confirmed or cancel,
  // we want to block the changing by sign request id;
  const _txData = (0, _react.useMemo)(() => {
    return txData;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [sign === null || sign === void 0 ? void 0 : (_sign$request = sign.request) === null || _sign$request === void 0 ? void 0 : _sign$request.requestId]);
  const dispatch = (0, _reactRedux.useDispatch)();
  const walletImporterCancel = (0, _react.useCallback)(() => dispatch((0, _actions.cancelSyncQRHardware)()), [dispatch]);
  const signRequestCancel = (0, _react.useCallback)(() => {
    let action = _actions.cancelTx;
    switch (_txData.type) {
      case _app.MESSAGE_TYPE.PERSONAL_SIGN:
        {
          action = _actions.cancelPersonalMsg;
          break;
        }
      case _app.MESSAGE_TYPE.ETH_SIGN:
        {
          action = _actions.cancelMsg;
          break;
        }
      case _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA:
        {
          action = _actions.cancelTypedMsg;
          break;
        }
      default:
        {
          action = _actions.cancelTx;
        }
    }
    dispatch(action(_txData));
    dispatch((0, _actions.cancelQRHardwareSignRequest)());
  }, [dispatch, _txData]);
  const title = (0, _react.useMemo)(() => {
    let _title = '';
    if (showSignRequest) {
      _title = t('QRHardwareSignRequestTitle');
    } else if (showWalletImporter) {
      _title = t('QRHardwareWalletImporterTitle');
    }
    if (errorTitle !== '') {
      _title = errorTitle;
    }
    return _title;
  }, [showSignRequest, showWalletImporter, t, errorTitle]);
  return showPopover ? /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: title,
    onClose: showWalletImporter ? walletImporterCancel : signRequestCancel
  }, showWalletImporter && /*#__PURE__*/_react.default.createElement(_qrHardwareWalletImporter.default, {
    handleCancel: walletImporterCancel,
    setErrorTitle: setErrorTitle
  }), showSignRequest && /*#__PURE__*/_react.default.createElement(_qrHardwareSignRequest.default, {
    setErrorTitle: setErrorTitle,
    handleCancel: signRequestCancel,
    request: sign.request
  })) : null;
};
var _default = QRHardwarePopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js", {"./qr-hardware-sign-request.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\qr-hardware-sign-request.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-sign-request%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _qrHardwareSignRequest = _interopRequireDefault(require("./qr-hardware-sign-request.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _qrHardwareSignRequest.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\player.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","@ngraveio/bc-ur":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ngraveio\\bc-ur\\dist\\index.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","qrcode.react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\qrcode.react\\lib\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-sign-request%5Cplayer.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _qrcode = _interopRequireDefault(require("qrcode.react"));
var _bcUr = require("@ngraveio/bc-ur");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _designSystem = require("../../../../helpers/constants/design-system");
var _pageContainer = require("../../../ui/page-container");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Player = ({
  type,
  cbor,
  cancelQRHardwareSignRequest,
  toRead
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const urEncoder = (0, _react.useMemo)(() => new _bcUr.UREncoder(new _bcUr.UR(Buffer.from(cbor, 'hex'), type), 400), [cbor, type]);
  const [currentQRCode, setCurrentQRCode] = (0, _react.useState)(urEncoder.nextPart());
  (0, _react.useEffect)(() => {
    const id = setInterval(() => {
      setCurrentQRCode(urEncoder.nextPart());
    }, 100);
    return () => {
      clearInterval(id);
    };
  }, [urEncoder]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    align: _designSystem.TextAlign.Center
  }, t('QRHardwareSignRequestSubtitle'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 4,
    paddingBottom: 4,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: 20,
      backgroundColor: 'var(--qr-code-white-background)'
    }
  }, /*#__PURE__*/_react.default.createElement(_qrcode.default, {
    value: currentQRCode.toUpperCase(),
    size: 250
  }))), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingBottom: 4,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    align: _designSystem.TextAlign.Center
  }, t('QRHardwareSignRequestDescription'))), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    onCancel: cancelQRHardwareSignRequest,
    onSubmit: toRead,
    cancelText: t('QRHardwareSignRequestCancel'),
    submitText: t('QRHardwareSignRequestGetSignature'),
    submitButtonType: "confirm"
  }));
};
Player.propTypes = {
  type: _propTypes.default.string.isRequired,
  cbor: _propTypes.default.string.isRequired,
  cancelQRHardwareSignRequest: _propTypes.default.func.isRequired,
  toRead: _propTypes.default.func.isRequired
};
var _default = Player;
exports.default = _default;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\player.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\qr-hardware-sign-request.component.js", {"../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./player":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\player.js","./reader":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\reader.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-sign-request%5Cqr-hardware-sign-request.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _actions = require("../../../../store/actions");
var _player = _interopRequireDefault(require("./player"));
var _reader = _interopRequireDefault(require("./reader"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const QRHardwareSignRequest = ({
  request,
  handleCancel,
  setErrorTitle
}) => {
  const [status, setStatus] = (0, _react.useState)('play');
  const toRead = (0, _react.useCallback)(() => setStatus('read'), []);
  const renderPlayer = () => {
    const {
      payload
    } = request;
    return /*#__PURE__*/_react.default.createElement(_player.default, {
      type: payload.type,
      cbor: payload.cbor,
      cancelQRHardwareSignRequest: handleCancel,
      toRead: toRead
    });
  };
  const renderReader = () => {
    return /*#__PURE__*/_react.default.createElement(_reader.default, {
      cancelQRHardwareSignRequest: handleCancel,
      submitQRHardwareSignature: _actions.submitQRHardwareSignature,
      requestId: request.requestId,
      setErrorTitle: setErrorTitle
    });
  };
  if (status === 'play') {
    return renderPlayer();
  }
  return renderReader();
};
QRHardwareSignRequest.propTypes = {
  request: _propTypes.default.object.isRequired,
  handleCancel: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = QRHardwareSignRequest;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\qr-hardware-sign-request.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\reader.js", {"../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../base-reader":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\base-reader.js","@keystonehq/bc-ur-registry-eth":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@keystonehq\\bc-ur-registry-eth\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","uuid":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-sign-request%5Creader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _bcUrRegistryEth = require("@keystonehq/bc-ur-registry-eth");
var uuid = _interopRequireWildcard(require("uuid"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _baseReader = _interopRequireDefault(require("../base-reader"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Reader = ({
  submitQRHardwareSignature,
  cancelQRHardwareSignRequest,
  requestId,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const cancel = () => {
    cancelQRHardwareSignRequest();
  };
  const handleSuccess = async ur => {
    if (ur.type === 'eth-signature') {
      const ethSignature = _bcUrRegistryEth.ETHSignature.fromCBOR(ur.cbor);
      const buffer = ethSignature.getRequestId();
      const signId = uuid.stringify(buffer);
      if (signId === requestId) {
        return await submitQRHardwareSignature(signId, ur.cbor.toString('hex'));
      }
      setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      throw new Error(t('QRHardwareMismatchedSignId'));
    } else {
      setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      throw new Error(t('unknownQrCode'));
    }
  };
  return /*#__PURE__*/_react.default.createElement(_baseReader.default, {
    isReadingWallet: false,
    handleCancel: cancel,
    handleSuccess: handleSuccess,
    setErrorTitle: setErrorTitle
  });
};
Reader.propTypes = {
  submitQRHardwareSignature: _propTypes.default.func.isRequired,
  cancelQRHardwareSignRequest: _propTypes.default.func.isRequired,
  requestId: _propTypes.default.string.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = Reader;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\reader.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js", {"./qr-hardware-wallet-importer.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\qr-hardware-wallet-importer.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-wallet-importer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _qrHardwareWalletImporter = _interopRequireDefault(require("./qr-hardware-wallet-importer.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _qrHardwareWalletImporter.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\qr-hardware-wallet-importer.component.js", {"../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../base-reader":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\qr-hardware-popover\\base-reader.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-wallet-importer%5Cqr-hardware-wallet-importer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _actions = require("../../../../store/actions");
var _baseReader = _interopRequireDefault(require("../base-reader"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const QRHardwareWalletImporter = ({
  handleCancel,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const handleSuccess = async ur => {
    if (ur.type === 'crypto-hdkey') {
      return await (0, _actions.submitQRHardwareCryptoHDKey)(ur.cbor.toString('hex'));
    } else if (ur.type === 'crypto-account') {
      return await (0, _actions.submitQRHardwareCryptoAccount)(ur.cbor.toString('hex'));
    }
    setErrorTitle(t('QRHardwareUnknownQRCodeTitle'));
    throw new Error(t('unknownQrCode'));
  };
  return /*#__PURE__*/_react.default.createElement(_baseReader.default, {
    isReadingWallet: true,
    handleCancel: handleCancel,
    handleSuccess: handleSuccess,
    setErrorTitle: setErrorTitle
  });
};
QRHardwareWalletImporter.propTypes = {
  handleCancel: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = QRHardwareWalletImporter;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\qr-hardware-wallet-importer.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\recovery-phrase-reminder\\index.js", {"./recovery-phrase-reminder":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\recovery-phrase-reminder\\recovery-phrase-reminder.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Crecovery-phrase-reminder%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _recoveryPhraseReminder.default;
  }
});
var _recoveryPhraseReminder = _interopRequireDefault(require("./recovery-phrase-reminder"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\recovery-phrase-reminder\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\recovery-phrase-reminder\\recovery-phrase-reminder.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Crecovery-phrase-reminder%5Crecovery-phrase-reminder.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RecoveryPhraseReminder;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../ui/box"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _designSystem = require("../../../helpers/constants/design-system");
var _routes = require("../../../helpers/constants/routes");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Components

// Helpers

function RecoveryPhraseReminder({
  onConfirm,
  hasBackedUp
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const handleBackUp = () => {
    history.push(_routes.ONBOARDING_UNLOCK_ROUTE);
  };
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    centerTitle: true,
    title: t('recoveryPhraseReminderTitle')
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingRight: 4,
    paddingBottom: 6,
    paddingLeft: 4,
    className: "recovery-phrase-reminder"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    align: _designSystem.TextAlign.Center,
    variant: _designSystem.TextVariant.bodyMd,
    marginBottom: 4
  }, t('recoveryPhraseReminderSubText')), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginBottom: 8
  }, /*#__PURE__*/_react.default.createElement("ul", {
    className: "recovery-phrase-reminder__list"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    color: _designSystem.TextColor.textDefault,
    fontWeight: _designSystem.FontWeight.Bold
  }, t('recoveryPhraseReminderItemOne')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li"
  }, t('recoveryPhraseReminderItemTwo')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li"
  }, hasBackedUp ? t('recoveryPhraseReminderHasBackedUp') : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('recoveryPhraseReminderHasNotBackedUp'), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_BLOCK,
    marginLeft: 1
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: handleBackUp,
    style: {
      fontSize: 'inherit',
      padding: 0
    }
  }, t('recoveryPhraseReminderBackupStart'))))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.TWO_FIFTHS
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: onConfirm
  }, t('recoveryPhraseReminderConfirm'))))));
}
RecoveryPhraseReminder.propTypes = {
  hasBackedUp: _propTypes.default.bool.isRequired,
  onConfirm: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\recovery-phrase-reminder\\recovery-phrase-reminder.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csecurity-provider-banner-message%5Csecurity-provider-banner-message.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SECURITY_PROVIDER_MESSAGE_SEVERITIES = void 0;
const SECURITY_PROVIDER_MESSAGE_SEVERITIES = {
  NOT_MALICIOUS: 0,
  MALICIOUS: 1,
  NOT_SAFE: 2
};
exports.SECURITY_PROVIDER_MESSAGE_SEVERITIES = SECURITY_PROVIDER_MESSAGE_SEVERITIES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js", {"../../../../.storybook/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\.storybook\\i18n.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","./security-provider-banner-message.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csecurity-provider-banner-message%5Csecurity-provider-banner-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SecurityProviderBannerMessage;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _designSystem = require("../../../helpers/constants/design-system");
var _i18n = require("../../../../.storybook/i18n");
var _componentLibrary = require("../../component-library");
var _securityProviderBannerMessage = require("./security-provider-banner-message.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SecurityProviderBannerMessage({
  securityProviderResponse
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  let messageTitle;
  let messageText;
  let severity;
  if (securityProviderResponse.flagAsDangerous === _securityProviderBannerMessage.SECURITY_PROVIDER_MESSAGE_SEVERITIES.MALICIOUS) {
    messageTitle = securityProviderResponse.reason_header === '' ? t('requestFlaggedAsMaliciousFallbackCopyReasonTitle') : securityProviderResponse.reason_header;
    messageText = securityProviderResponse.reason === '' ? t('requestFlaggedAsMaliciousFallbackCopyReason') : securityProviderResponse.reason;
    severity = _designSystem.SEVERITIES.DANGER;
  } else if (securityProviderResponse.flagAsDangerous === _securityProviderBannerMessage.SECURITY_PROVIDER_MESSAGE_SEVERITIES.NOT_SAFE) {
    messageTitle = t('requestMayNotBeSafe');
    messageText = t('requestMayNotBeSafeError');
    severity = _designSystem.SEVERITIES.WARNING;
  } else {
    messageTitle = t('requestNotVerified');
    messageText = t('requestNotVerifiedError');
    severity = _designSystem.SEVERITIES.WARNING;
  }
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    marginTop: 4,
    marginRight: 4,
    marginLeft: 4,
    title: messageTitle,
    severity: severity
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, messageText), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.Color.textAlternative
  }, t('securityAlert', [/*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    key: "opensea_link",
    size: _designSystem.Size.inherit,
    href: "https://opensea.io/",
    target: "_blank"
  }, t('openSeaNew')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    key: "blockaid_link",
    size: _designSystem.Size.inherit,
    href: "https://blockaid.io/",
    target: "_blank"
  }, t('blockaid'))])));
}
SecurityProviderBannerMessage.propTypes = {
  securityProviderResponse: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\selected-account\\index.js", {"./selected-account.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\selected-account\\selected-account.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cselected-account%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _selectedAccount = _interopRequireDefault(require("./selected-account.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _selectedAccount.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\selected-account\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\selected-account\\selected-account.component.js", {"../../../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","../../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","copy-to-clipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cselected-account%5Cselected-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _util = require("../../../helpers/utils/util");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _time = require("../../../../shared/constants/time");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SelectedAccount extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      copied: false
    });
  }
  componentDidMount() {
    this.copyTimeout = null;
  }
  componentWillUnmount() {
    if (this.copyTimeout) {
      clearTimeout(this.copyTimeout);
      this.copyTimeout = null;
    }
  }
  render() {
    const {
      t
    } = this.context;
    const {
      selectedIdentity
    } = this.props;
    const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(selectedIdentity.address);
    let title = this.state.copied ? t('copiedExclamation') : t('copyToClipboard');
    let showAccountCopyIcon = true;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account"
    }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      wrapperClassName: "selected-account__tooltip-wrapper",
      position: "bottom",
      title: title
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: "selected-account__clickable",
      "data-testid": "selected-account-click",
      onClick: () => {
        this.setState({
          copied: true
        });
        this.copyTimeout = setTimeout(() => this.setState({
          copied: false
        }), _time.SECOND * 3);
        (0, _copyToClipboard.default)(checksummedAddress);
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__name"
    }, selectedIdentity.name), /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__address"
    }, (0, _util.shortenAddress)(checksummedAddress), showAccountCopyIcon && /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__copy"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: this.state.copied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
      size: _componentLibrary.IconSize.Sm,
      color: _designSystem.IconColor.iconAlternative
    }))))));
  }
}
_defineProperty(SelectedAccount, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(SelectedAccount, "propTypes", {
  selectedIdentity: _propTypes.default.object.isRequired
});
var _default = SelectedAccount;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\selected-account\\selected-account.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\selected-account\\selected-account.container.js", {"../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./selected-account.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\selected-account\\selected-account.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cselected-account%5Cselected-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _selectors = require("../../../selectors");
var _selectedAccount = _interopRequireDefault(require("./selected-account.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  return {
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state)
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps)(_selectedAccount.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\selected-account\\selected-account.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\set-approval-for-all-warning\\index.js", {"./set-approval-for-all-warning":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\set-approval-for-all-warning\\set-approval-for-all-warning.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cset-approval-for-all-warning%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _setApprovalForAllWarning.default;
  }
});
var _setApprovalForAllWarning = _interopRequireDefault(require("./set-approval-for-all-warning"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\set-approval-for-all-warning\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\set-approval-for-all-warning\\set-approval-for-all-warning.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cset-approval-for-all-warning%5Cset-approval-for-all-warning.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _identicon = _interopRequireDefault(require("../../ui/identicon"));
var _util = require("../../../helpers/utils/util");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SetApproveForAllWarning = ({
  collectionName,
  senderAddress,
  name,
  total,
  isERC721,
  onSubmit,
  onCancel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const footer = /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    justifyContent: _designSystem.JustifyContent.SPACE_BETWEEN,
    className: "set-approval-for-all-warning__footer",
    gap: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    className: "set-approval-for-all-warning__footer__approve-button",
    variant: _componentLibrary.BUTTON_VARIANT.PRIMARY,
    danger: true,
    onClick: onSubmit
  }, t('approveButtonText')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    className: "set-approval-for-all-warning__footer__cancel-button",
    variant: _componentLibrary.BUTTON_VARIANT.SECONDARY,
    onClick: onCancel
  }, t('reject')));
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "set-approval-for-all-warning__content",
    footer: footer
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    padding: 4,
    className: "set-approval-for-all-warning__content__header"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Danger,
    className: "set-approval-for-all-warning__content__header__warning-icon"
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingSm,
    as: "h4"
  }, t('yourNFTmayBeAtRisk'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    padding: 4,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    className: "set-approval-for-all-warning__content__account"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: senderAddress,
    diameter: 32
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    marginLeft: 2,
    className: "set-approval-for-all-warning__content__account-name"
  }, /*#__PURE__*/_react.default.createElement("strong", null, name), " ", ` (${(0, _util.shortenAddress)(senderAddress)})`)), isERC721 && total && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, null, `${t('total')}: ${total}`)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    margin: 4,
    marginTop: 4,
    marginBottom: 4,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('nftWarningContent', [/*#__PURE__*/_react.default.createElement("strong", {
    key: "non_custodial_bold"
  }, t('nftWarningContentBold', [collectionName || ''])), /*#__PURE__*/_react.default.createElement("strong", {
    key: "non_custodial_grey"
  }, t('nftWarningContentGrey'))])));
};
SetApproveForAllWarning.propTypes = {
  /**
   * NFT collection name that is being approved
   */
  collectionName: _propTypes.default.string,
  /**
   * Address of a current user that is approving collection
   */
  senderAddress: _propTypes.default.string,
  /**
   * Name of a current user that is approving collection
   */
  name: _propTypes.default.string,
  /**
   * Total number of items that are being approved
   */
  total: _propTypes.default.string,
  /**
   * Is asset standard ERC721
   */
  isERC721: _propTypes.default.bool,
  /**
   * Function that approves collection
   */
  onSubmit: _propTypes.default.func,
  /**
   * Function that rejects collection
   */
  onCancel: _propTypes.default.func
};
var _default = SetApproveForAllWarning;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\set-approval-for-all-warning\\set-approval-for-all-warning.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\index.js", {"./signature-request-original.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestOriginal.default;
  }
});
var _signatureRequestOriginal = _interopRequireDefault(require("./signature-request-original.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original-warning\\index.js", {"./signature-request-original-warning":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original-warning\\signature-request-original-warning.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Csignature-request-original-warning%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestOriginalWarning.default;
  }
});
var _signatureRequestOriginalWarning = _interopRequireDefault(require("./signature-request-original-warning"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\signature-request-original-warning\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original-warning\\signature-request-original-warning.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../../ui/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Csignature-request-original-warning%5Csignature-request-original-warning.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _popover = _interopRequireDefault(require("../../../ui/popover"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _typography = _interopRequireDefault(require("../../../ui/typography"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _util = require("../../../../helpers/utils/util");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SignatureRequestOriginalWarning = ({
  senderAddress,
  name,
  onSubmit,
  onCancel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "signature-request-warning__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    padding: 4,
    className: "signature-request-warning__content__header"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Danger,
    color: _designSystem.IconColor.errorDefault,
    className: "signature-request-warning__content__header__warning-icon"
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('yourFundsMayBeAtRisk'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    padding: 4,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    className: "signature-request-warning__content__account"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: senderAddress,
    diameter: 32
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H5,
    marginLeft: 2,
    className: "signature-request-warning__content__account-name"
  }, /*#__PURE__*/_react.default.createElement("b", null, name), " ", ` (${(0, _util.shortenAddress)(senderAddress)})`))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.TextColor.textAlternative,
    margin: 4,
    marginTop: 4,
    marginBottom: 4,
    variant: _designSystem.TypographyVariant.H6
  }, t('signatureRequestWarning', [/*#__PURE__*/_react.default.createElement("a", {
    href: "https://consensys.net/blog/metamask/the-seal-of-approval-know-what-youre-consenting-to-with-permissions-and-approvals-in-metamask/",
    target: "_blank",
    type: "link",
    key: "non_custodial_link",
    rel: "noopener noreferrer",
    style: {
      color: 'var(--color-primary-default)'
    }
  }, t('learnMoreUpperCase'))])), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    padding: 4,
    className: "signature-request-warning__footer"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "signature-request-warning__footer__sign-button",
    type: "danger-primary",
    onClick: onSubmit
  }, t('sign')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "signature-request-warning__footer__reject-button",
    type: "secondary",
    onClick: onCancel
  }, t('reject'))));
};
SignatureRequestOriginalWarning.propTypes = {
  senderAddress: _propTypes.default.string,
  name: _propTypes.default.string,
  onSubmit: _propTypes.default.func,
  onCancel: _propTypes.default.func
};
var _default = SignatureRequestOriginalWarning;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\signature-request-original-warning\\signature-request-original-warning.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
