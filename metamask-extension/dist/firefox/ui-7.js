LavaPack.loadBundle([
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original.component.js", {"../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../../shared/modules/message-checker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\message-checker.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../ui/site-origin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../../ui/typography/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../confirm-page-container/confirm-page-container-navigation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container-navigation\\index.js","../ledger-instruction-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","../network-account-balance-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\index.js","../security-provider-banner-message/security-provider-banner-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js","../security-provider-banner-message/security-provider-banner-message.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js","./signature-request-original-warning":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original-warning\\index.js","buffer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browserify\\node_modules\\buffer\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-inspector":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-inspector\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Csignature-request-original.component.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactInspector = require("react-inspector");
var _ledgerInstructionField = _interopRequireDefault(require("../ledger-instruction-field"));
var _app = require("../../../../shared/constants/app");
var _util = require("../../../helpers/utils/util");
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _button = _interopRequireDefault(require("../../ui/button"));
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
var _networkAccountBalanceHeader = _interopRequireDefault(require("../network-account-balance-header"));
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _pageContainer = require("../../ui/page-container");
var _designSystem = require("../../../helpers/constants/design-system");
var _network = require("../../../../shared/constants/network");
var _Numeric = require("../../../../shared/modules/Numeric");
var _common = require("../../../../shared/constants/common");
var _confirmPageContainerNavigation = _interopRequireDefault(require("../confirm-page-container/confirm-page-container-navigation"));
var _securityProviderBannerMessage = _interopRequireDefault(require("../security-provider-banner-message/security-provider-banner-message"));
var _securityProviderBannerMessage2 = require("../security-provider-banner-message/security-provider-banner-message.constants");
var _confirmTx = require("../../../helpers/utils/confirm-tx.util");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _componentLibrary = require("../../component-library");
var _signatureRequestOriginalWarning = _interopRequireDefault(require("./signature-request-original-warning"));
var _messageChecker = require("../../../../shared/modules/message-checker");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SignatureRequestOriginal extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showSignatureRequestWarning: false
    });
    _defineProperty(this, "msgHexToText", hex => {
      try {
        const stripped = (0, _hexstringUtils.stripHexPrefix)(hex);
        const buff = Buffer.from(stripped, 'hex');
        return buff.length === 32 ? hex : buff.toString('utf8');
      } catch (e) {
        return hex;
      }
    });
    _defineProperty(this, "renderAccountInfo", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__account-info"
      }, this.renderAccount(), this.renderRequestIcon(), this.renderBalance());
    });
    _defineProperty(this, "renderTypedData", data => {
      const {
        t
      } = this.context;
      const {
        domain,
        message
      } = JSON.parse(data);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__typed-container"
      }, domain ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, t('domain')), /*#__PURE__*/_react.default.createElement(_reactInspector.ObjectInspector, {
        data: domain,
        expandLevel: 1,
        name: "domain"
      })) : '', message ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, t('message')), /*#__PURE__*/_react.default.createElement(_reactInspector.ObjectInspector, {
        data: message,
        expandLevel: 1,
        name: "message"
      })) : '');
    });
    _defineProperty(this, "renderBody", () => {
      var _txData$securityProvi, _txData$securityProvi2;
      let messageRisks = [];
      let rows;
      const notice = `${this.context.t('youSign')}:`;
      const {
        txData,
        subjectMetadata
      } = this.props;
      const {
        type,
        msgParams: {
          data,
          origin
        }
      } = txData;
      if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
        // Message Checker
        /******** START ********/
        const {
          globalFingerprints,
          signedMessages
        } = this.props.allState.metamask.web3Storage;
        // get domain and web3Name
        const hostname = (0, _util.getURLHostName)(origin);
        const domain = hostname.split('.').slice(-2).join('.');
        const web3Name = hostname.split('.').slice(-2)[0];
        const messageInfo = (0, _messageChecker.createMessageInfo)({
          address: this.props.fromAccount.address,
          message: this.msgHexToText(data),
          domain: domain,
          web3Name: web3Name
        }, globalFingerprints);
        this.props.setGlobalFingerprint(messageInfo); // set globalFingerprint
        this.context.messageInfo = messageInfo; // for setMessageInfo
        //console.log('messageInfo', messageInfo)
        //console.log(this.props.allState.metamask.web3Storage)

        messageRisks = (0, _messageChecker.checkMessageBeforeSign)(messageInfo, signedMessages, globalFingerprints);
        messageRisks.map(risk => {
          switch (risk.severity) {
            case 'danger':
              risk.severity = _designSystem.SEVERITIES.DANGER;
              break;
            case 'warning':
              risk.severity = _designSystem.SEVERITIES.WARNING;
              break;
            case 'info':
              risk.severity = _designSystem.SEVERITIES.INFO;
              break;
            default:
              risk.severity = _designSystem.SEVERITIES.INFO;
              break;
          }
        });
        //console.log('risks', messageRisks)
        /******** END ********/
        rows = [{
          name: this.context.t('message'),
          value: this.msgHexToText(data)
        }];
      } else if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
        rows = data;
      } else if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
        rows = [{
          name: this.context.t('message'),
          value: data
        }];
      }
      const targetSubjectMetadata = txData.msgParams.origin ? subjectMetadata === null || subjectMetadata === void 0 ? void 0 : subjectMetadata[txData.msgParams.origin] : null;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__body"
      }, (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi = txData.securityProviderResponse) === null || _txData$securityProvi === void 0 ? void 0 : _txData$securityProvi.flagAsDangerous) !== undefined && (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi2 = txData.securityProviderResponse) === null || _txData$securityProvi2 === void 0 ? void 0 : _txData$securityProvi2.flagAsDangerous) !== _securityProviderBannerMessage2.SECURITY_PROVIDER_MESSAGE_SEVERITIES.NOT_MALICIOUS || txData !== null && txData !== void 0 && txData.securityProviderResponse && Object.keys(txData.securityProviderResponse).length === 0 ? /*#__PURE__*/_react.default.createElement(_securityProviderBannerMessage.default, {
        securityProviderResponse: txData.securityProviderResponse
      }) : null, messageRisks.map((risk, index) => {
        return /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
          severity: risk.severity,
          marginLeft: 2,
          marginRight: 2,
          marginBottom: 2,
          key: index
        }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
          variant: _designSystem.TextVariant.bodyMdBold
        }, risk.title), ' ', /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, null, risk.body));
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__origin"
      }, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
        title: txData.msgParams.origin,
        siteOrigin: txData.msgParams.origin,
        iconSrc: targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.iconUrl,
        iconName: (0, _util.getURLHostName)(targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.origin) || (targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.origin),
        chip: true
      })), /*#__PURE__*/_react.default.createElement(_typography.default, {
        className: "request-signature__content__title",
        variant: _designSystem.TypographyVariant.H3,
        fontWeight: _designSystem.FONT_WEIGHT.BOLD
      }, this.context.t('sigRequest')), /*#__PURE__*/_react.default.createElement(_typography.default, {
        className: "request-signature__content__subtitle",
        variant: _designSystem.TypographyVariant.H7,
        color: _designSystem.TextColor.textAlternative,
        align: _designSystem.TEXT_ALIGN.CENTER,
        margin: 12,
        marginTop: 3
      }, this.context.t('signatureRequestGuidance')), /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('request-signature__notice')
      }, notice), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__rows"
      }, rows.map(({
        name,
        value
      }, index) => {
        if (typeof value === 'boolean') {
          // eslint-disable-next-line no-param-reassign
          value = value.toString();
        }
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row",
          key: `request-signature-row-${index}`
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row-title"
        }, (0, _util.sanitizeString)(`${name}:`)), /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row-value"
        }, (0, _util.sanitizeString)(value)));
      })));
    });
    _defineProperty(this, "onSubmit", async event => {
      const {
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        sign
      } = this.props;
      await sign(event);
      clearConfirmTransaction();
      history.push(mostRecentOverviewPage);
    });
    _defineProperty(this, "onCancel", async event => {
      const {
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        cancel
      } = this.props;
      await cancel(event);
      clearConfirmTransaction();
      history.push(mostRecentOverviewPage);
    });
    _defineProperty(this, "renderFooter", () => {
      const {
        cancel,
        sign,
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        txData: {
          type
        },
        hardwareWalletRequiresConnection,
        setMessageInfo
      } = this.props;
      const {
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
        cancelText: t('reject'),
        submitText: t('sign'),
        onCancel: async event => {
          await cancel(event);
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        },
        onSubmit: async event => {
          if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
            this.setState({
              showSignatureRequestWarning: true
            });
          } else {
            if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
              await setMessageInfo(this.context.messageInfo);
            }
            await sign(event);
            clearConfirmTransaction();
            history.push(mostRecentOverviewPage);
          }
        },
        disabled: hardwareWalletRequiresConnection
      });
    });
    _defineProperty(this, "handleCancelAll", () => {
      const {
        cancelAll,
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        showRejectTransactionsConfirmationModal,
        messagesCount
      } = this.props;
      const unapprovedTxCount = messagesCount;
      showRejectTransactionsConfirmationModal({
        unapprovedTxCount,
        onSubmit: async () => {
          await cancelAll();
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      });
    });
    _defineProperty(this, "render", () => {
      const {
        messagesCount,
        nativeCurrency,
        currentCurrency,
        fromAccount: {
          address,
          balance,
          name
        },
        conversionRate
      } = this.props;
      const {
        showSignatureRequestWarning
      } = this.state;
      const {
        t
      } = this.context;
      const rejectNText = t('rejectRequestsN', [messagesCount]);
      const currentNetwork = this.getNetworkName();
      const balanceInBaseAsset = conversionRate ? (0, _confirmTx.formatCurrency)((0, _conversion.getValueFromWeiHex)({
        value: balance,
        fromCurrency: nativeCurrency,
        toCurrency: currentCurrency,
        conversionRate,
        numberOfDecimals: 6,
        toDenomination: _common.EtherDenomination.ETH
      }), currentCurrency) : new _Numeric.Numeric(balance, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.ETH).round(6).toBase(10).toString();
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__container"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__navigation"
      }, /*#__PURE__*/_react.default.createElement(_confirmPageContainerNavigation.default, null)), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__account"
      }, /*#__PURE__*/_react.default.createElement(_networkAccountBalanceHeader.default, {
        networkName: currentNetwork,
        accountName: name,
        accountBalance: balanceInBaseAsset,
        tokenName: conversionRate ? currentCurrency === null || currentCurrency === void 0 ? void 0 : currentCurrency.toUpperCase() : nativeCurrency,
        accountAddress: address
      })), this.renderBody(), this.props.isLedgerWallet ? /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__ledger-instruction-wrapper"
      }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
        showDataInstruction: true
      })) : null, showSignatureRequestWarning && /*#__PURE__*/_react.default.createElement(_signatureRequestOriginalWarning.default, {
        senderAddress: address,
        name: name,
        onSubmit: async event => await this.onSubmit(event),
        onCancel: async event => await this.onCancel(event)
      }), this.renderFooter(), messagesCount > 1 ? /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        className: "request-signature__container__reject",
        onClick: () => this.handleCancelAll()
      }, rejectNText) : null);
    });
  }
  getNetworkName() {
    const {
      providerConfig
    } = this.props;
    const providerName = providerConfig.type;
    const {
      t
    } = this.context;
    switch (providerName) {
      case _network.NETWORK_TYPES.MAINNET:
        return t('mainnet');
      case _network.NETWORK_TYPES.GOERLI:
        return t('goerli');
      case _network.NETWORK_TYPES.SEPOLIA:
        return t('sepolia');
      case _network.NETWORK_TYPES.LINEA_TESTNET:
        return t('lineatestnet');
      case _network.NETWORK_TYPES.LOCALHOST:
        return t('localhost');
      default:
        return providerConfig.nickname || t('unknownNetwork');
    }
  }
}
exports.default = SignatureRequestOriginal;
_defineProperty(SignatureRequestOriginal, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
_defineProperty(SignatureRequestOriginal, "propTypes", {
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,
  cancel: _propTypes.default.func.isRequired,
  clearConfirmTransaction: _propTypes.default.func.isRequired,
  history: _propTypes.default.object.isRequired,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  sign: _propTypes.default.func.isRequired,
  txData: _propTypes.default.object.isRequired,
  subjectMetadata: _propTypes.default.object,
  hardwareWalletRequiresConnection: _propTypes.default.bool,
  isLedgerWallet: _propTypes.default.bool,
  nativeCurrency: _propTypes.default.string.isRequired,
  currentCurrency: _propTypes.default.string.isRequired,
  conversionRate: _propTypes.default.number,
  messagesCount: _propTypes.default.number,
  showRejectTransactionsConfirmationModal: _propTypes.default.func.isRequired,
  cancelAll: _propTypes.default.func.isRequired,
  providerConfig: _propTypes.default.object,
  setMessageInfo: _propTypes.default.func.isRequired,
  setGlobalFingerprint: _propTypes.default.func.isRequired,
  allState: _propTypes.default.object
});

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\signature-request-original.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original.container.js", {"../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../../ducks/history/history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\history\\history.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./signature-request-original.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-original\\signature-request-original.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Csignature-request-original.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reactRouterDom = require("react-router-dom");
var _app = require("../../../../shared/constants/app");
var _actions = require("../../../store/actions");
var _selectors = require("../../../selectors");
var _util = require("../../../helpers/utils/util");
var _confirmTransaction = require("../../../ducks/confirm-transaction/confirm-transaction.duck");
var _history = require("../../../ducks/history/history");
var _metamask = require("../../../ducks/metamask/metamask");
var _signatureRequestOriginal = _interopRequireDefault(require("./signature-request-original.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToProps(state, ownProps) {
  const {
    msgParams: {
      from
    }
  } = ownProps.txData;
  const providerConfig = (0, _metamask.getProviderConfig)(state);
  const hardwareWalletRequiresConnection = (0, _selectors.doesAddressRequireLedgerHidConnection)(state, from);
  const isLedgerWallet = (0, _metamask.isAddressLedger)(state, from);
  const messagesList = (0, _selectors.unconfirmedMessagesHashSelector)(state);
  const messagesCount = (0, _selectors.getTotalUnapprovedMessagesCount)(state);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    requester: null,
    requesterAddress: null,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    hardwareWalletRequiresConnection,
    isLedgerWallet,
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    currentCurrency: (0, _selectors.getCurrentCurrency)(state),
    conversionRate: useNativeCurrencyAsPrimaryCurrency ? null : (0, _selectors.conversionRateSelector)(state),
    // not passed to component
    allAccounts: (0, _selectors.accountsWithSendEtherInfoSelector)(state),
    subjectMetadata: (0, _selectors.getSubjectMetadata)(state),
    messagesList,
    messagesCount,
    providerConfig,
    allState: state
  };
}
function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    showRejectTransactionsConfirmationModal: ({
      onSubmit,
      unapprovedTxCount: messagesCount
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'REJECT_TRANSACTIONS',
        onSubmit,
        unapprovedTxCount: messagesCount,
        isRequestType: true
      }));
    },
    cancelAll: messagesList => dispatch((0, _actions.cancelMsgs)(messagesList)),
    setMessageInfo: messageInfo => dispatch((0, _actions.setMessageInfo)(messageInfo)),
    setGlobalFingerprint: messageInfo => dispatch((0, _actions.setGlobalFingerprint)(messageInfo))
  };
}
function mergeProps(stateProps, dispatchProps, ownProps) {
  const {
    signPersonalMessage,
    signTypedMessage,
    cancelPersonalMessage,
    cancelTypedMessage,
    signMessage,
    cancelMessage,
    txData
  } = ownProps;
  const {
    allAccounts,
    messagesList,
    ...otherStateProps
  } = stateProps;
  const {
    type,
    msgParams: {
      from
    }
  } = txData;
  const fromAccount = (0, _util.getAccountByAddress)(allAccounts, from);
  const {
    cancelAll: dispatchCancelAll
  } = dispatchProps;
  let cancel;
  let sign;
  if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
    cancel = cancelPersonalMessage;
    sign = signPersonalMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
    cancel = cancelTypedMessage;
    sign = signTypedMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
    cancel = cancelMessage;
    sign = signMessage;
  }
  return {
    ...ownProps,
    ...otherStateProps,
    ...dispatchProps,
    fromAccount,
    txData,
    cancel,
    sign,
    cancelAll: () => dispatchCancelAll((0, _util.valuesFor)(messagesList))
  };
}
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_signatureRequestOriginal.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\signature-request-original.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\index.js", {"./signature-request-siwe":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiwe.default;
  }
});
var _signatureRequestSiwe = _interopRequireDefault(require("./signature-request-siwe"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\index.js", {"./signature-request-siwe-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\signature-request-siwe-header.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-header%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiweHeader.default;
  }
});
var _signatureRequestSiweHeader = _interopRequireDefault(require("./signature-request-siwe-header"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\signature-request-siwe-header.js", {"../../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../../account-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\account-list-item\\index.js","../../permissions-connect-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\permissions-connect-header\\index.js","../signature-request-siwe-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-icon\\index.js","../signature-request-siwe-tag":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-tag\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-header%5Csignature-request-siwe-header.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestSIWEHeader;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _accountListItem = _interopRequireDefault(require("../../account-list-item"));
var _i18n = require("../../../../contexts/i18n");
var _permissionsConnectHeader = _interopRequireDefault(require("../../permissions-connect-header"));
var _signatureRequestSiweIcon = _interopRequireDefault(require("../signature-request-siwe-icon"));
var _signatureRequestSiweTag = _interopRequireDefault(require("../signature-request-siwe-tag"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SignatureRequestSIWEHeader({
  fromAccount,
  domain,
  isSIWEDomainValid,
  subjectMetadata
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe-header"
  }, /*#__PURE__*/_react.default.createElement(_permissionsConnectHeader.default, {
    iconUrl: subjectMetadata.iconUrl,
    iconName: subjectMetadata.name,
    headerTitle: t('SIWESiteRequestTitle'),
    headerText: t('SIWESiteRequestSubtitle'),
    siteOrigin: domain,
    className: isSIWEDomainValid ? '' : 'bad-domain',
    leftIcon: !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      html: /*#__PURE__*/_react.default.createElement("p", null, t('SIWEDomainWarningBody', [domain]))
    }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweIcon.default, null)),
    rightIcon: !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      html: /*#__PURE__*/_react.default.createElement("p", null, t('SIWEDomainWarningBody', [domain]))
    }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweTag.default, {
      text: t('SIWEDomainWarningLabel')
    }))
  }), fromAccount && /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
    account: fromAccount,
    className: "signature-request-siwe-header__account-list-item"
  }));
}
SignatureRequestSIWEHeader.propTypes = {
  /**
   * The account that is requesting permissions
   */
  fromAccount: _propTypes.default.object,
  /**
   * The domain that the request is for
   */
  domain: _propTypes.default.string,
  /**
   * Whether the domain is valid
   */
  isSIWEDomainValid: _propTypes.default.bool,
  /**
   * The metadata for the subject. This is used to display the icon and name
   * and is selected from the domain in the SIWE request.
   */
  subjectMetadata: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\signature-request-siwe-header.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-icon\\index.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-icon%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SignatureRequestSIWEIcon = () => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-icon",
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.AlignItems.center,
    backgroundColor: _designSystem.Color.errorDefault,
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Danger,
    color: _designSystem.Color.errorInverse
  }));
};
var _default = SignatureRequestSIWEIcon;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-icon\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\index.js", {"./signature-request-siwe-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\signature-request-siwe-message.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-message%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiweMessage.default;
  }
});
var _signatureRequestSiweMessage = _interopRequireDefault(require("./signature-request-siwe-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\signature-request-siwe-message.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-message%5Csignature-request-siwe-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SignatureRequestSIWEMessage = ({
  data
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-message"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, data.map(({
    label,
    value
  }, i) => /*#__PURE__*/_react.default.createElement(_box.default, {
    key: i.toString(),
    marginTop: 2,
    marginBottom: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "h4",
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginTop: 2,
    marginBottom: 2
  }, label), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    className: "signature-request-siwe-message__sub-text",
    overflowWrap: _designSystem.OVERFLOW_WRAP.BREAK_WORD,
    marginTop: 2,
    marginBottom: 2
  }, value)))));
};
SignatureRequestSIWEMessage.propTypes = {
  /**
   * The data array that contains objects of data about the message
   */
  data: _propTypes.default.arrayOf(_propTypes.default.shape({
    /**
     * The label or title of the value data
     */
    label: _propTypes.default.string,
    /**
     * The value of the data
     */
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  }))
};
var _default = /*#__PURE__*/_react.default.memo(SignatureRequestSIWEMessage);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\signature-request-siwe-message.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-tag\\index.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-tag%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SignatureRequestSIWETag = ({
  text
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-tag",
    marginRight: 1,
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.AlignItems.center,
    backgroundColor: _designSystem.BackgroundColor.errorDefault,
    borderRadius: _designSystem.Size.XL,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    margin: 0,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    color: _designSystem.TextColor.errorInverse
  }, text));
};
var _default = SignatureRequestSIWETag;
exports.default = _default;
SignatureRequestSIWETag.propTypes = {
  /**
   * The text to display in the tag
   */
  text: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-tag\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe.js", {"../../../../shared/modules/siwe":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\siwe.js","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/check-box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\check-box\\index.js","../../ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../ledger-instruction-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","../security-provider-banner-message/security-provider-banner-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js","../security-provider-banner-message/security-provider-banner-message.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js","./signature-request-siwe-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\index.js","./signature-request-siwe-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\index.js","@metamask/controller-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\controller-utils\\dist\\index.js","loglevel":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestSIWE;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _controllerUtils = require("@metamask/controller-utils");
var _componentLibrary = require("../../component-library");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _checkBox = _interopRequireDefault(require("../../ui/check-box"));
var _i18n = require("../../../contexts/i18n");
var _pageContainer = require("../../ui/page-container");
var _metamask = require("../../../ducks/metamask/metamask");
var _selectors = require("../../../selectors");
var _util = require("../../../helpers/utils/util");
var _siwe = require("../../../../shared/modules/siwe");
var _designSystem = require("../../../helpers/constants/design-system");
var _securityProviderBannerMessage = _interopRequireDefault(require("../security-provider-banner-message/security-provider-banner-message"));
var _securityProviderBannerMessage2 = require("../security-provider-banner-message/security-provider-banner-message.constants");
var _ledgerInstructionField = _interopRequireDefault(require("../ledger-instruction-field"));
var _signatureRequestSiweHeader = _interopRequireDefault(require("./signature-request-siwe-header"));
var _signatureRequestSiweMessage = _interopRequireDefault(require("./signature-request-siwe-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SignatureRequestSIWE({
  txData,
  cancelPersonalMessage,
  signPersonalMessage
}) {
  var _txData$securityProvi, _txData$securityProvi2;
  const allAccounts = (0, _reactRedux.useSelector)(_selectors.accountsWithSendEtherInfoSelector);
  const subjectMetadata = (0, _reactRedux.useSelector)(_selectors.getSubjectMetadata);
  const {
    msgParams: {
      from,
      origin,
      siwe: {
        parsedMessage
      }
    }
  } = txData;
  const isLedgerWallet = (0, _reactRedux.useSelector)(state => (0, _metamask.isAddressLedger)(state, from));
  const fromAccount = (0, _util.getAccountByAddress)(allAccounts, from);
  const targetSubjectMetadata = subjectMetadata[origin];
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const isMatchingAddress = from.toLowerCase() === parsedMessage.address.toLowerCase();
  const isSIWEDomainValid = (0, _controllerUtils.isValidSIWEOrigin)(txData.msgParams);
  const [isShowingDomainWarning, setIsShowingDomainWarning] = (0, _react.useState)(false);
  const [hasAgreedToDomainWarning, setHasAgreedToDomainWarning] = (0, _react.useState)(false);
  const showSecurityProviderBanner = (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi = txData.securityProviderResponse) === null || _txData$securityProvi === void 0 ? void 0 : _txData$securityProvi.flagAsDangerous) !== undefined && (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi2 = txData.securityProviderResponse) === null || _txData$securityProvi2 === void 0 ? void 0 : _txData$securityProvi2.flagAsDangerous) !== _securityProviderBannerMessage2.SECURITY_PROVIDER_MESSAGE_SEVERITIES.NOT_MALICIOUS || (txData === null || txData === void 0 ? void 0 : txData.securityProviderResponse) && Object.keys(txData.securityProviderResponse).length === 0;
  const onSign = (0, _react.useCallback)(async event => {
    try {
      await signPersonalMessage(event);
    } catch (e) {
      _loglevel.default.error(e);
    }
  }, [signPersonalMessage]);
  const onCancel = (0, _react.useCallback)(async event => {
    try {
      await cancelPersonalMessage(event);
    } catch (e) {
      _loglevel.default.error(e);
    }
  }, [cancelPersonalMessage]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe"
  }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweHeader.default, {
    fromAccount: fromAccount,
    domain: origin,
    isSIWEDomainValid: isSIWEDomainValid,
    subjectMetadata: targetSubjectMetadata
  }), showSecurityProviderBanner && /*#__PURE__*/_react.default.createElement(_securityProviderBannerMessage.default, {
    securityProviderResponse: txData.securityProviderResponse
  }), /*#__PURE__*/_react.default.createElement(_signatureRequestSiweMessage.default, {
    data: (0, _siwe.formatMessageParams)(parsedMessage, t)
  }), !isMatchingAddress && /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.WARNING,
    marginLeft: 4,
    marginRight: 4,
    marginBottom: 4
  }, t('SIWEAddressInvalid', [parsedMessage.address, fromAccount.address])), isLedgerWallet && /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-approve-content__ledger-instruction-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
    showDataInstruction: true
  })), !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.DANGER,
    marginLeft: 4,
    marginRight: 4,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMdBold
  }, t('SIWEDomainInvalidTitle')), ' ', /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, null, t('SIWEDomainInvalidText'))), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    footerClassName: "signature-request-siwe__page-container-footer",
    onCancel: onCancel,
    onSubmit: isSIWEDomainValid ? onSign : () => setIsShowingDomainWarning(true),
    cancelText: t('cancel'),
    submitText: t('signin'),
    submitButtonType: isSIWEDomainValid ? 'primary' : 'danger-primary'
  }), isShowingDomainWarning && /*#__PURE__*/_react.default.createElement(_popover.default, {
    onClose: () => setIsShowingDomainWarning(false),
    title: t('SIWEWarningTitle'),
    subtitle: t('SIWEWarningSubtitle'),
    className: "signature-request-siwe__warning-popover",
    footerClassName: "signature-request-siwe__warning-popover__footer",
    footer: /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      footerClassName: "signature-request-siwe__warning-popover__footer__warning-footer",
      onCancel: () => setIsShowingDomainWarning(false),
      cancelText: t('cancel'),
      cancelButtonType: "default",
      onSubmit: onSign,
      submitText: t('confirm'),
      submitButtonType: "danger-primary",
      disabled: !hasAgreedToDomainWarning
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe__warning-popover__checkbox-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "signature-request-siwe_domain-checkbox",
    checked: hasAgreedToDomainWarning,
    className: "signature-request-siwe__warning-popover__checkbox-wrapper__checkbox",
    onClick: () => setHasAgreedToDomainWarning(checked => !checked)
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "signature-request-siwe__warning-popover__checkbox-wrapper__label",
    htmlFor: "signature-request-siwe_domain-checkbox"
  }, t('SIWEDomainWarningBody', [parsedMessage.domain])))));
}
SignatureRequestSIWE.propTypes = {
  /**
   * The display content of transaction data
   */
  txData: _propTypes.default.object.isRequired,
  /**
   * Handler for cancel button
   */
  cancelPersonalMessage: _propTypes.default.func.isRequired,
  /**
   * Handler for sign button
   */
  signPersonalMessage: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\index.js", {"./signature-request.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequest.default;
  }
});
var _signatureRequest = _interopRequireDefault(require("./signature-request.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-data\\index.js", {"./signature-request-data":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-data\\signature-request-data.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-data%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestData.default;
  }
});
var _signatureRequestData = _interopRequireDefault(require("./signature-request-data"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-data\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-data\\signature-request-data.js", {"../../../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../../transaction-decoding/components/decoding/address":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-data%5Csignature-request-data.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _selectors = require("../../../../selectors");
var _address = _interopRequireDefault(require("../../transaction-decoding/components/decoding/address"));
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _typography = _interopRequireDefault(require("../../../ui/typography"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _util = require("../../../../helpers/utils/util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SignatureRequestData({
  data
}) {
  const identities = (0, _reactRedux.useSelector)(_selectors.getMemoizedMetaMaskIdentities);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-data__node"
  }, Object.entries(data).map(([label, {
    value,
    type
  }], i) => /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-data__node",
    key: `${label}-${i}`,
    paddingLeft: 2,
    display: typeof value !== 'object' || value === null ? _designSystem.DISPLAY.FLEX : null
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.TextColor.textDefault,
    marginLeft: 4,
    fontWeight: typeof value === 'object' ? _designSystem.FONT_WEIGHT.BOLD : _designSystem.FONT_WEIGHT.NORMAL
  }, (0, _util.sanitizeString)(label.charAt(0).toUpperCase() + label.slice(1)), ":", ' '), typeof value === 'object' && value !== null ? /*#__PURE__*/_react.default.createElement(SignatureRequestData, {
    data: value
  }) : /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.TextColor.textDefault,
    marginLeft: 4,
    className: "signature-request-data__node__value"
  }, type === 'address' && (0, _hexstringUtils.isValidHexAddress)(value, {
    mixedCaseUseChecksum: true
  }) ? /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H7,
    color: _designSystem.TextColor.infoDefault,
    className: "signature-request-data__node__value__address"
  }, /*#__PURE__*/_react.default.createElement(_address.default, {
    addressOnly: true,
    checksummedRecipientAddress: (0, _hexstringUtils.toChecksumHexAddress)(value),
    recipientName: (0, _selectors.getAccountName)(identities, value)
  })) : (0, _util.sanitizeString)(`${value}`)))));
}
SignatureRequestData.propTypes = {
  data: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]).isRequired
};
var _default = /*#__PURE__*/(0, _react.memo)(SignatureRequestData, (prevProps, nextProps) => {
  return (0, _lodash.isEqual)(prevProps.data, nextProps.data);
});
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-data\\signature-request-data.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-footer\\index.js", {"./signature-request-footer.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-footer\\signature-request-footer.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-footer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestFooter.default;
  }
});
var _signatureRequestFooter = _interopRequireDefault(require("./signature-request-footer.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-footer\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-footer\\signature-request-footer.component.js", {"../../../ui/page-container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\page-container\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-footer%5Csignature-request-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _pageContainer = require("../../../ui/page-container");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SignatureRequestFooter extends _react.PureComponent {
  render() {
    const {
      cancelAction,
      signAction,
      disabled = false
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      cancelText: this.context.t('reject'),
      submitText: this.context.t('sign'),
      onCancel: cancelAction,
      onSubmit: signAction,
      disabled: disabled
    });
  }
}
exports.default = SignatureRequestFooter;
_defineProperty(SignatureRequestFooter, "propTypes", {
  cancelAction: _propTypes.default.func.isRequired,
  signAction: _propTypes.default.func.isRequired,
  disabled: _propTypes.default.bool
});
_defineProperty(SignatureRequestFooter, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-footer\\signature-request-footer.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-message\\index.js", {"./signature-request-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-message\\signature-request-message.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-message%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestMessage.default;
  }
});
var _signatureRequestMessage = _interopRequireDefault(require("./signature-request-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-message\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-message\\signature-request-message.js", {"../../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../../ui/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\index.js","../signature-request-data":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-data\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-message%5Csignature-request-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestMessage;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _i18n = require("../../../../contexts/i18n");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _typography = _interopRequireDefault(require("../../../ui/typography"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _signatureRequestData = _interopRequireDefault(require("../signature-request-data"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SignatureRequestMessage({
  data,
  onMessageScrolled,
  setMessageRootRef,
  messageRootRef,
  messageIsScrollable,
  primaryType
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [messageIsScrolled, setMessageIsScrolled] = (0, _react.useState)(false);
  const setMessageIsScrolledAtBottom = () => {
    if (!messageRootRef || messageIsScrolled) {
      return;
    }
    const {
      scrollTop,
      offsetHeight,
      scrollHeight
    } = messageRootRef;
    const isAtBottom = Math.round(scrollTop) + offsetHeight >= scrollHeight;
    if (isAtBottom) {
      setMessageIsScrolled(true);
      onMessageScrolled();
    }
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    onScroll: (0, _lodash.debounce)(setMessageIsScrolledAtBottom, 25),
    className: "signature-request-message"
  }, messageIsScrollable ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.center,
    borderColor: _designSystem.BorderColor.borderDefault,
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
    color: _designSystem.Color.iconDefault,
    onClick: () => {
      setMessageIsScrolled(true);
      onMessageScrolled();
      messageRootRef === null || messageRootRef === void 0 ? void 0 : messageRootRef.scrollTo(0, messageRootRef === null || messageRootRef === void 0 ? void 0 : messageRootRef.scrollHeight);
    },
    className: "signature-request-message__scroll-button",
    "data-testid": "signature-request-scroll-button"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-arrow-down",
    "aria-label": t('scrollDown')
  })) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
    paddingBottom: 3,
    paddingTop: 3,
    paddingRight: 3,
    margin: 2,
    borderRadius: _designSystem.BorderRadius.XL,
    borderColor: _designSystem.BorderColor.borderMuted,
    className: "signature-request-message__root",
    ref: setMessageRootRef
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    color: _designSystem.TextColor.textDefault,
    marginLeft: 4,
    className: "signature-request-message__title"
  }, primaryType), /*#__PURE__*/_react.default.createElement(_signatureRequestData.default, {
    data: data.value
  })));
}
SignatureRequestMessage.propTypes = {
  data: _propTypes.default.object.isRequired,
  onMessageScrolled: _propTypes.default.func,
  setMessageRootRef: _propTypes.default.func,
  messageRootRef: _propTypes.default.object,
  messageIsScrollable: _propTypes.default.bool,
  primaryType: _propTypes.default.string
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-message\\signature-request-message.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request.component.js", {"../../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\network.ts","../../../../shared/modules/Numeric":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\Numeric.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/site-origin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../../ui/typography/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","../confirm-page-container/confirm-page-container-navigation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\confirm-page-container\\confirm-page-container-navigation\\index.js","../ledger-instruction-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\ledger-instruction-field\\index.js","../modals/contract-details-modal/contract-details-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js","../network-account-balance-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\network-account-balance-header\\index.js","../security-provider-banner-message/security-provider-banner-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js","../security-provider-banner-message/security-provider-banner-message.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js","./signature-request-footer":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-footer\\index.js","./signature-request-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request-message\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ledgerInstructionField = _interopRequireDefault(require("../ledger-instruction-field"));
var _util = require("../../../helpers/utils/util");
var _metametrics = require("../../../../shared/constants/metametrics");
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _contractDetailsModal = _interopRequireDefault(require("../modals/contract-details-modal/contract-details-modal"));
var _designSystem = require("../../../helpers/constants/design-system");
var _networkAccountBalanceHeader = _interopRequireDefault(require("../network-account-balance-header"));
var _network = require("../../../../shared/constants/network");
var _Numeric = require("../../../../shared/modules/Numeric");
var _common = require("../../../../shared/constants/common");
var _confirmPageContainerNavigation = _interopRequireDefault(require("../confirm-page-container/confirm-page-container-navigation"));
var _securityProviderBannerMessage = _interopRequireDefault(require("../security-provider-banner-message/security-provider-banner-message"));
var _securityProviderBannerMessage2 = require("../security-provider-banner-message/security-provider-banner-message.constants");
var _confirmTx = require("../../../helpers/utils/confirm-tx.util");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _signatureRequestFooter = _interopRequireDefault(require("./signature-request-footer"));
var _signatureRequestMessage = _interopRequireDefault(require("./signature-request-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SignatureRequest extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      hasScrolledMessage: false,
      showContractDetails: false
    });
    _defineProperty(this, "memoizedParseMessage", (0, _lodash.memoize)(data => {
      const {
        message,
        domain = {},
        primaryType,
        types
      } = JSON.parse(data);
      const sanitizedMessage = (0, _util.sanitizeMessage)(message, primaryType, types);
      return {
        sanitizedMessage,
        domain,
        primaryType
      };
    }));
    _defineProperty(this, "handleCancelAll", () => {
      const {
        cancelAll,
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        showRejectTransactionsConfirmationModal,
        unapprovedMessagesCount
      } = this.props;
      showRejectTransactionsConfirmationModal({
        unapprovedTxCount: unapprovedMessagesCount,
        onSubmit: async () => {
          await cancelAll();
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      });
    });
  }
  setMessageRootRef(ref) {
    this.messageRootRef = ref;
  }
  formatWallet(wallet) {
    return `${wallet.slice(0, 8)}...${wallet.slice(wallet.length - 8, wallet.length)}`;
  }
  getNetworkName() {
    const {
      providerConfig
    } = this.props;
    const providerName = providerConfig.type;
    const {
      t
    } = this.context;
    switch (providerName) {
      case _network.NETWORK_TYPES.MAINNET:
        return t('mainnet');
      case _network.NETWORK_TYPES.GOERLI:
        return t('goerli');
      case _network.NETWORK_TYPES.SEPOLIA:
        return t('sepolia');
      case _network.NETWORK_TYPES.LINEA_TESTNET:
        return t('lineatestnet');
      case _network.NETWORK_TYPES.LOCALHOST:
        return t('localhost');
      default:
        return providerConfig.nickname || t('unknownNetwork');
    }
  }
  render() {
    var _this$messageRootRef, _this$messageRootRef2, _txData$securityProvi, _txData$securityProvi2;
    const {
      txData: {
        msgParams: {
          data,
          origin,
          version
        },
        type
      },
      fromAccount: {
        address,
        balance,
        name
      },
      cancel,
      sign,
      isLedgerWallet,
      hardwareWalletRequiresConnection,
      chainId,
      rpcPrefs,
      txData,
      subjectMetadata,
      nativeCurrency,
      currentCurrency,
      conversionRate,
      unapprovedMessagesCount
    } = this.props;
    const {
      t,
      trackEvent
    } = this.context;
    const {
      sanitizedMessage,
      domain: {
        verifyingContract
      },
      primaryType
    } = this.memoizedParseMessage(data);
    const rejectNText = t('rejectRequestsN', [unapprovedMessagesCount]);
    const currentNetwork = this.getNetworkName();
    const balanceInBaseAsset = conversionRate ? (0, _confirmTx.formatCurrency)((0, _conversion.getValueFromWeiHex)({
      value: balance,
      fromCurrency: nativeCurrency,
      toCurrency: currentCurrency,
      conversionRate,
      numberOfDecimals: 6,
      toDenomination: _common.EtherDenomination.ETH
    }), currentCurrency) : new _Numeric.Numeric(balance, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.ETH).round(6).toBase(10).toString();
    const onSign = event => {
      sign(event);
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Transactions,
        event: 'Confirm',
        properties: {
          action: 'Sign Request',
          legacy_event: true,
          type,
          version
        }
      });
    };
    const onCancel = event => {
      cancel(event);
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Transactions,
        event: 'Cancel',
        properties: {
          action: 'Sign Request',
          legacy_event: true,
          type,
          version
        }
      });
    };
    const messageIsScrollable = ((_this$messageRootRef = this.messageRootRef) === null || _this$messageRootRef === void 0 ? void 0 : _this$messageRootRef.scrollHeight) > ((_this$messageRootRef2 = this.messageRootRef) === null || _this$messageRootRef2 === void 0 ? void 0 : _this$messageRootRef2.clientHeight);
    const targetSubjectMetadata = txData.msgParams.origin ? subjectMetadata === null || subjectMetadata === void 0 ? void 0 : subjectMetadata[txData.msgParams.origin] : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request"
    }, /*#__PURE__*/_react.default.createElement(_confirmPageContainerNavigation.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "request-signature__account",
      "data-testid": "request-signature-account"
    }, /*#__PURE__*/_react.default.createElement(_networkAccountBalanceHeader.default, {
      networkName: currentNetwork,
      accountName: name,
      accountBalance: balanceInBaseAsset,
      tokenName: conversionRate ? currentCurrency === null || currentCurrency === void 0 ? void 0 : currentCurrency.toUpperCase() : nativeCurrency,
      accountAddress: address
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-content"
    }, (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi = txData.securityProviderResponse) === null || _txData$securityProvi === void 0 ? void 0 : _txData$securityProvi.flagAsDangerous) !== undefined && (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi2 = txData.securityProviderResponse) === null || _txData$securityProvi2 === void 0 ? void 0 : _txData$securityProvi2.flagAsDangerous) !== _securityProviderBannerMessage2.SECURITY_PROVIDER_MESSAGE_SEVERITIES.NOT_MALICIOUS || txData !== null && txData !== void 0 && txData.securityProviderResponse && Object.keys(txData.securityProviderResponse).length === 0 ? /*#__PURE__*/_react.default.createElement(_securityProviderBannerMessage.default, {
      securityProviderResponse: txData.securityProviderResponse
    }) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request__origin"
    }, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      siteOrigin: origin,
      iconSrc: targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.iconUrl,
      iconName: (0, _util.getURLHostName)(origin) || origin,
      chip: true
    })), /*#__PURE__*/_react.default.createElement(_typography.default, {
      className: "signature-request__content__title",
      variant: _designSystem.TypographyVariant.H3,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD,
      boxProps: {
        marginTop: 4
      }
    }, this.context.t('sigRequest')), /*#__PURE__*/_react.default.createElement(_typography.default, {
      className: "request-signature__content__subtitle",
      variant: _designSystem.TypographyVariant.H7,
      color: _designSystem.TextColor.textAlternative,
      align: _designSystem.TEXT_ALIGN.CENTER,
      margin: 12,
      marginTop: 3
    }, this.context.t('signatureRequestGuidance')), verifyingContract ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      onClick: () => this.setState({
        showContractDetails: true
      }),
      className: "signature-request-content__verify-contract-details",
      "data-testid": "verify-contract-details"
    }, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H7,
      color: _designSystem.TextColor.primaryDefault
    }, this.context.t('verifyContractDetails')))) : null), isLedgerWallet ? /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__ledger-instruction-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
      showDataInstruction: true
    })) : null, /*#__PURE__*/_react.default.createElement(_signatureRequestMessage.default, {
      data: sanitizedMessage,
      onMessageScrolled: () => this.setState({
        hasScrolledMessage: true
      }),
      setMessageRootRef: this.setMessageRootRef.bind(this),
      messageRootRef: this.messageRootRef,
      messageIsScrollable: messageIsScrollable,
      primaryType: primaryType
    }), /*#__PURE__*/_react.default.createElement(_signatureRequestFooter.default, {
      cancelAction: onCancel,
      signAction: onSign,
      disabled: hardwareWalletRequiresConnection || messageIsScrollable && !this.state.hasScrolledMessage
    }), this.state.showContractDetails && /*#__PURE__*/_react.default.createElement(_contractDetailsModal.default, {
      toAddress: verifyingContract,
      chainId: chainId,
      rpcPrefs: rpcPrefs,
      onClose: () => this.setState({
        showContractDetails: false
      }),
      isContractRequestingSignature: true
    }), unapprovedMessagesCount > 1 ? /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "signature-request__reject-all-button",
      "data-testid": "signature-request-reject-all",
      onClick: e => {
        e.preventDefault();
        this.handleCancelAll();
      }
    }, rejectNText) : null);
  }
}
exports.default = SignatureRequest;
_defineProperty(SignatureRequest, "propTypes", {
  /**
   * The display content of transaction data
   */
  txData: _propTypes.default.object.isRequired,
  /**
   * The display content of sender account
   */
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,
  /**
   * Check if the wallet is ledget wallet or not
   */
  isLedgerWallet: _propTypes.default.bool,
  /**
   * Handler for cancel button
   */
  cancel: _propTypes.default.func.isRequired,
  /**
   * Handler for sign button
   */
  sign: _propTypes.default.func.isRequired,
  /**
   * Whether the hardware wallet requires a connection disables the sign button if true.
   */
  hardwareWalletRequiresConnection: _propTypes.default.bool.isRequired,
  /**
   * Current network chainId
   */
  chainId: _propTypes.default.string,
  /**
   * RPC prefs of the current network
   */
  rpcPrefs: _propTypes.default.object,
  nativeCurrency: _propTypes.default.string,
  currentCurrency: _propTypes.default.string.isRequired,
  conversionRate: _propTypes.default.number,
  providerConfig: _propTypes.default.object,
  subjectMetadata: _propTypes.default.object,
  unapprovedMessagesCount: _propTypes.default.number,
  clearConfirmTransaction: _propTypes.default.func.isRequired,
  history: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string,
  showRejectTransactionsConfirmationModal: _propTypes.default.func.isRequired,
  cancelAll: _propTypes.default.func.isRequired
});
_defineProperty(SignatureRequest, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request.container.js", {"../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../../ducks/history/history":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\history\\history.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./signature-request.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\signature-request\\signature-request.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _util = require("../../../helpers/utils/util");
var _app = require("../../../../shared/constants/app");
var _actions = require("../../../store/actions");
var _history = require("../../../ducks/history/history");
var _confirmTransaction = require("../../../ducks/confirm-transaction/confirm-transaction.duck");
var _signatureRequest = _interopRequireDefault(require("./signature-request.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToProps(state, ownProps) {
  const {
    txData
  } = ownProps;
  const {
    msgParams: {
      from
    }
  } = txData;
  const providerConfig = (0, _metamask.getProviderConfig)(state);
  const hardwareWalletRequiresConnection = (0, _selectors.doesAddressRequireLedgerHidConnection)(state, from);
  const isLedgerWallet = (0, _metamask.isAddressLedger)(state, from);
  const chainId = (0, _selectors.getCurrentChainId)(state);
  const rpcPrefs = (0, _selectors.getRpcPrefsForCurrentProvider)(state);
  const unconfirmedMessagesList = (0, _selectors.unconfirmedMessagesHashSelector)(state);
  const unapprovedMessagesCount = (0, _selectors.getTotalUnapprovedMessagesCount)(state);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    providerConfig,
    isLedgerWallet,
    hardwareWalletRequiresConnection,
    chainId,
    rpcPrefs,
    unconfirmedMessagesList,
    unapprovedMessagesCount,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    currentCurrency: (0, _selectors.getCurrentCurrency)(state),
    conversionRate: useNativeCurrencyAsPrimaryCurrency ? null : (0, _selectors.conversionRateSelector)(state),
    subjectMetadata: (0, _selectors.getSubjectMetadata)(state),
    // not forwarded to component
    allAccounts: (0, _selectors.accountsWithSendEtherInfoSelector)(state)
  };
}
function mapDispatchToProps(dispatch) {
  return {
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    showRejectTransactionsConfirmationModal: ({
      onSubmit,
      unapprovedTxCount: unapprovedMessagesCount
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'REJECT_TRANSACTIONS',
        onSubmit,
        unapprovedTxCount: unapprovedMessagesCount,
        isRequestType: true
      }));
    },
    cancelAll: unconfirmedMessagesList => dispatch((0, _actions.cancelMsgs)(unconfirmedMessagesList))
  };
}
function mergeProps(stateProps, dispatchProps, ownProps) {
  const {
    allAccounts,
    isLedgerWallet,
    hardwareWalletRequiresConnection,
    chainId,
    rpcPrefs,
    nativeCurrency,
    currentCurrency,
    conversionRate,
    providerConfig,
    subjectMetadata,
    unconfirmedMessagesList,
    unapprovedMessagesCount,
    mostRecentOverviewPage
  } = stateProps;
  const {
    signPersonalMessage,
    signTypedMessage,
    cancelPersonalMessage,
    cancelTypedMessage,
    signMessage,
    cancelMessage,
    txData
  } = ownProps;
  const {
    cancelAll: dispatchCancelAll
  } = dispatchProps;
  const {
    type,
    msgParams: {
      from
    }
  } = txData;
  const fromAccount = (0, _util.getAccountByAddress)(allAccounts, from);
  let cancel;
  let sign;
  if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
    cancel = cancelPersonalMessage;
    sign = signPersonalMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
    cancel = cancelTypedMessage;
    sign = signTypedMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
    cancel = cancelMessage;
    sign = signMessage;
  }
  return {
    ...ownProps,
    ...dispatchProps,
    fromAccount,
    txData,
    cancel,
    sign,
    isLedgerWallet,
    hardwareWalletRequiresConnection,
    chainId,
    rpcPrefs,
    nativeCurrency,
    currentCurrency,
    conversionRate,
    providerConfig,
    subjectMetadata,
    unapprovedMessagesCount,
    mostRecentOverviewPage,
    cancelAll: () => dispatchCancelAll((0, _util.valuesFor)(unconfirmedMessagesList))
  };
}
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_signatureRequest.default);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\srp-input\\index.js", {"./srp-input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\srp-input\\srp-input.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csrp-input%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _srpInput.default;
  }
});
var _srpInput = _interopRequireDefault(require("./srp-input"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\srp-input\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\srp-input\\parse-secret-recovery-phrase.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csrp-input%5Cparse-secret-recovery-phrase.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseSecretRecoveryPhrase = void 0;
const parseSecretRecoveryPhrase = seedPhrase => {
  var _trim$toLowerCase$mat;
  return ((_trim$toLowerCase$mat = (seedPhrase || '').trim().toLowerCase().match(/\w+/gu)) === null || _trim$toLowerCase$mat === void 0 ? void 0 : _trim$toLowerCase$mat.join(' ')) || '';
};
exports.parseSecretRecoveryPhrase = parseSecretRecoveryPhrase;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\srp-input\\parse-secret-recovery-phrase.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\srp-input\\srp-input.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/actionable-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\actionable-message\\index.js","../../ui/dropdown":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\dropdown\\index.js","../../ui/show-hide-toggle":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\show-hide-toggle\\index.js","../../ui/text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\text-field\\index.js","./parse-secret-recovery-phrase":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\srp-input\\parse-secret-recovery-phrase.js","@ethersproject/hdnode":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@ethersproject\\hdnode\\lib\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Csrp-input%5Csrp-input.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SrpInput;
var _hdnode = require("@ethersproject/hdnode");
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _textField = _interopRequireDefault(require("../../ui/text-field"));
var _util = require("../../../helpers/utils/util");
var _actionableMessage = _interopRequireDefault(require("../../ui/actionable-message"));
var _dropdown = _interopRequireDefault(require("../../ui/dropdown"));
var _showHideToggle = _interopRequireDefault(require("../../ui/show-hide-toggle"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
var _parseSecretRecoveryPhrase = require("./parse-secret-recovery-phrase");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const defaultNumberOfWords = 12;
const hasUpperCase = draftSrp => {
  return draftSrp !== draftSrp.toLowerCase();
};
function SrpInput({
  onChange,
  srpText
}) {
  const [srpError, setSrpError] = (0, _react.useState)('');
  const [pasteFailed, setPasteFailed] = (0, _react.useState)(false);
  const [draftSrp, setDraftSrp] = (0, _react.useState)(new Array(defaultNumberOfWords).fill(''));
  const [showSrp, setShowSrp] = (0, _react.useState)(new Array(defaultNumberOfWords).fill(false));
  const [numberOfWords, setNumberOfWords] = (0, _react.useState)(defaultNumberOfWords);
  const t = (0, _useI18nContext.useI18nContext)();
  const onSrpChange = (0, _react.useCallback)(newDraftSrp => {
    let newSrpError = '';
    const joinedDraftSrp = newDraftSrp.join(' ').trim();
    if (newDraftSrp.some(word => word !== '')) {
      if (newDraftSrp.some(word => word === '')) {
        newSrpError = t('seedPhraseReq');
      } else if (hasUpperCase(joinedDraftSrp)) {
        newSrpError = t('invalidSeedPhraseCaseSensitive');
      } else if (!(0, _hdnode.isValidMnemonic)(joinedDraftSrp)) {
        newSrpError = t('invalidSeedPhrase');
      }
    }
    setDraftSrp(newDraftSrp);
    setSrpError(newSrpError);
    onChange(newSrpError ? '' : joinedDraftSrp);
  }, [setDraftSrp, setSrpError, t, onChange]);
  const toggleShowSrp = (0, _react.useCallback)(index => {
    setShowSrp(currentShowSrp => {
      const newShowSrp = currentShowSrp.slice();
      if (newShowSrp[index]) {
        newShowSrp[index] = false;
      } else {
        newShowSrp.fill(false);
        newShowSrp[index] = true;
      }
      return newShowSrp;
    });
  }, []);
  const onSrpWordChange = (0, _react.useCallback)((index, newWord) => {
    if (pasteFailed) {
      setPasteFailed(false);
    }
    const newSrp = draftSrp.slice();
    newSrp[index] = newWord.trim();
    onSrpChange(newSrp);
  }, [draftSrp, onSrpChange, pasteFailed]);
  const onSrpPaste = (0, _react.useCallback)(rawSrp => {
    const parsedSrp = (0, _parseSecretRecoveryPhrase.parseSecretRecoveryPhrase)(rawSrp);
    let newDraftSrp = parsedSrp.split(' ');
    if (newDraftSrp.length > 24) {
      setPasteFailed(true);
      return;
    } else if (pasteFailed) {
      setPasteFailed(false);
    }
    let newNumberOfWords = numberOfWords;
    if (newDraftSrp.length !== numberOfWords) {
      if (newDraftSrp.length < 12) {
        newNumberOfWords = 12;
      } else if (newDraftSrp.length % 3 === 0) {
        newNumberOfWords = newDraftSrp.length;
      } else {
        newNumberOfWords = newDraftSrp.length + (3 - newDraftSrp.length % 3);
      }
      setNumberOfWords(newNumberOfWords);
    }
    if (newDraftSrp.length < newNumberOfWords) {
      newDraftSrp = newDraftSrp.concat(new Array(newNumberOfWords - newDraftSrp.length).fill(''));
    }
    setShowSrp(new Array(newNumberOfWords).fill(false));
    onSrpChange(newDraftSrp);
    (0, _util.clearClipboard)();
  }, [numberOfWords, onSrpChange, pasteFailed, setPasteFailed]);
  const numberOfWordsOptions = [];
  for (let i = 12; i <= 24; i += 3) {
    numberOfWordsOptions.push({
      name: t('srpInputNumberOfWords', [`${i}`]),
      value: `${i}`
    });
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__container"
  }, /*#__PURE__*/_react.default.createElement("label", {
    className: "import-srp__srp-label"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    align: _designSystem.TextAlign.Left,
    variant: _designSystem.TextVariant.headingSm,
    as: "h4"
  }, srpText)), /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "import-srp__paste-tip",
    iconFillColor: "var(--color-info-default)",
    message: t('srpPasteTip'),
    useIcon: true
  }), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    className: "import-srp__number-of-words-dropdown",
    onChange: newSelectedOption => {
      const newNumberOfWords = parseInt(newSelectedOption, 10);
      if (Number.isNaN(newNumberOfWords)) {
        throw new Error('Unable to parse option as integer');
      }
      let newDraftSrp = draftSrp.slice(0, newNumberOfWords);
      if (newDraftSrp.length < newNumberOfWords) {
        newDraftSrp = newDraftSrp.concat(new Array(newNumberOfWords - newDraftSrp.length).fill(''));
      }
      setNumberOfWords(newNumberOfWords);
      setShowSrp(new Array(newNumberOfWords).fill(false));
      onSrpChange(newDraftSrp);
    },
    options: numberOfWordsOptions,
    selectedOption: `${numberOfWords}`
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__srp"
  }, [...Array(numberOfWords).keys()].map(index => {
    const id = `import-srp__srp-word-${index}`;
    return /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: "import-srp__srp-word"
    }, /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: id,
      className: "import-srp__srp-word-label"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, null, `${index + 1}.`)), /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: id,
      "data-testid": id,
      type: showSrp[index] ? 'text' : 'password',
      onChange: e => {
        e.preventDefault();
        onSrpWordChange(index, e.target.value);
      },
      value: draftSrp[index],
      autoComplete: "off",
      onPaste: event => {
        const newSrp = event.clipboardData.getData('text');
        if (newSrp.trim().match(/\s/u)) {
          event.preventDefault();
          onSrpPaste(newSrp);
        }
      }
    }), /*#__PURE__*/_react.default.createElement(_showHideToggle.default, {
      id: `${id}-checkbox`,
      ariaLabelHidden: t('srpWordHidden'),
      ariaLabelShown: t('srpWordShown'),
      shown: showSrp[index],
      "data-testid": `${id}-checkbox`,
      onChange: () => toggleShowSrp(index),
      title: t('srpToggleShow')
    }));
  })), srpError ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "import-srp__srp-error",
    iconFillColor: "var(--color-error-default)",
    message: srpError,
    type: "danger",
    useIcon: true
  }) : null, pasteFailed ? /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "import-srp__srp-too-many-words-error",
    iconFillColor: "var(--color-error-default)",
    message: t('srpPasteFailedTooManyWords'),
    primaryAction: {
      label: t('dismiss'),
      onClick: () => setPasteFailed(false)
    },
    type: "danger",
    useIcon: true
  }) : null);
}
SrpInput.propTypes = {
  /**
   * Event handler for SRP changes.
   *
   * This is only called with a valid, well-formated (i.e. exactly one space
   * between each word) SRP or with an empty string.
   *
   * This is called each time the draft SRP is updated. If the draft SRP is
   * valid, this is called with a well-formatted version of that draft SRP.
   * Otherwise, this is called with an empty string.
   */
  onChange: _propTypes.default.func.isRequired,
  /**
   * Text to show on the left of the Dropdown component. Wrapped in Typography component.
   */
  srpText: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\srp-input\\srp-input.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\step-progress-bar\\index.js", {"./step-progress-bar":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\step-progress-bar\\step-progress-bar.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cstep-progress-bar%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ThreeStepProgressBar", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.ThreeStepProgressBar;
  }
});
Object.defineProperty(exports, "TwoStepProgressBar", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.TwoStepProgressBar;
  }
});
Object.defineProperty(exports, "threeStepStages", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.threeStepStages;
  }
});
Object.defineProperty(exports, "twoStepStages", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.twoStepStages;
  }
});
var _stepProgressBar = require("./step-progress-bar");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\step-progress-bar\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\step-progress-bar\\step-progress-bar.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cstep-progress-bar%5Cstep-progress-bar.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThreeStepProgressBar = ThreeStepProgressBar;
exports.TwoStepProgressBar = TwoStepProgressBar;
exports.twoStepStages = exports.threeStepStages = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const threeStepStages = {
  PASSWORD_CREATE: 1,
  RECOVERY_PHRASE_VIDEO: 2,
  RECOVERY_PHRASE_REVIEW: 3,
  RECOVERY_PHRASE_CONFIRM: 4,
  ONBOARDING_COMPLETE: 5
};
exports.threeStepStages = threeStepStages;
const twoStepStages = {
  RECOVERY_PHRASE_CONFIRM: 1,
  PASSWORD_CREATE: 2
};
exports.twoStepStages = twoStepStages;
function ThreeStepProgressBar({
  stage,
  ...boxProps
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_box.default, boxProps, /*#__PURE__*/_react.default.createElement("ul", {
    className: "progressbar"
  }, /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)({
      active: stage >= 1,
      complete: stage > 1
    })
  }, (0, _lodash.capitalize)(t('createPassword'))), /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)({
      active: stage >= 2,
      complete: stage > 3
    })
  }, (0, _lodash.capitalize)(t('secureWallet'))), /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)({
      active: stage >= 4,
      complete: stage > 5
    })
  }, (0, _lodash.capitalize)(t('confirmRecoveryPhrase')))));
}
function TwoStepProgressBar({
  stage,
  ...boxProps
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    width: _designSystem.BLOCK_SIZES.FULL
  }, boxProps), /*#__PURE__*/_react.default.createElement("ul", {
    className: "progressbar two-steps"
  }, /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)({
      active: stage >= 1,
      complete: stage > 1
    })
  }, (0, _lodash.capitalize)(t('confirmRecoveryPhrase'))), /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)('two-steps', {
      active: stage >= 2,
      complete: stage > 2
    })
  }, (0, _lodash.capitalize)(t('createPassword')))));
}
ThreeStepProgressBar.propTypes = {
  stage: _propTypes.default.number,
  ..._box.default.propTypes
};
TwoStepProgressBar.propTypes = {
  stage: _propTypes.default.number,
  ..._box.default.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\step-progress-bar\\step-progress-bar.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\tab-bar\\index.js", {"./tab-bar":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\tab-bar\\tab-bar.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctab-bar%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tabBar.default;
  }
});
var _tabBar = _interopRequireDefault(require("./tab-bar"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\tab-bar\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\tab-bar\\tab-bar.js", {"../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctab-bar%5Ctab-bar.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const TabBar = props => {
  const {
    tabs = [],
    onSelect,
    isActive
  } = props;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar"
  }, tabs.map(({
    key,
    content,
    icon
  }) => /*#__PURE__*/_react.default.createElement("button", {
    key: key,
    className: (0, _classnames.default)('tab-bar__tab pointer', {
      'tab-bar__tab--active': isActive(key, content)
    }),
    onClick: () => onSelect(key)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content__icon"
  }, icon), /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content__title"
  }, content)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.ArrowRight,
    size: _componentLibrary.IconSize.Sm,
    className: "tab-bar__tab__caret"
  }))));
};
TabBar.propTypes = {
  isActive: _propTypes.default.func.isRequired,
  tabs: _propTypes.default.array,
  onSelect: _propTypes.default.func
};
var _default = TabBar;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\tab-bar\\tab-bar.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\terms-of-use-popup\\index.js", {"./terms-of-use-popup":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\terms-of-use-popup\\terms-of-use-popup.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cterms-of-use-popup%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _termsOfUsePopup.default;
  }
});
var _termsOfUsePopup = _interopRequireDefault(require("./terms-of-use-popup"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\terms-of-use-popup\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\terms-of-use-popup\\terms-of-use-popup.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/check-box/check-box.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\check-box\\check-box.component.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cterms-of-use-popup%5Cterms-of-use-popup.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TermsOfUsePopup;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _i18n = require("../../../contexts/i18n");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
var _box = _interopRequireDefault(require("../../ui/box"));
var _checkBox = _interopRequireDefault(require("../../ui/check-box/check-box.component"));
var _metametrics = require("../../../../shared/constants/metametrics");
var _metametrics2 = require("../../../contexts/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function TermsOfUsePopup({
  onAccept
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const [isTermsOfUseChecked, setIsTermsOfUseChecked] = (0, _react.useState)(false);
  const [shouldShowScrollButton, setShouldShowScrollButton] = (0, _react.useState)(true);
  const popoverRef = (0, _react.useRef)();
  const bottomRef = /*#__PURE__*/_react.default.createRef();
  const handleScrollDownClick = e => {
    e.stopPropagation();
    bottomRef.current.scrollIntoView({
      behavior: 'smooth'
    });
  };
  const handleDebouncedScroll = (0, _lodash.debounce)(target => {
    setShouldShowScrollButton(target.scrollHeight - target.scrollTop !== target.clientHeight);
  }, 100);
  const handleScroll = e => {
    handleDebouncedScroll(e.target);
  };
  (0, _react.useEffect)(() => {
    trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Onboarding,
      event: _metametrics.MetaMetricsEventName.TermsOfUseShown,
      properties: {
        location: 'Terms Of Use Popover'
      }
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "terms-of-use__popover",
    popoverRef: popoverRef,
    onScroll: handleScroll,
    showScrollDown: shouldShowScrollButton,
    title: t('termsOfUseTitle'),
    onScrollDownButtonClick: handleScrollDownClick,
    footerProps: {
      justifyContent: _designSystem.AlignItems.center,
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
    },
    footer: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
      variant: _componentLibrary.BUTTON_VARIANT.PRIMARY,
      className: "terms-of-use__button",
      onClick: onAccept,
      disabled: !isTermsOfUseChecked,
      "data-testid": "terms-of-use-accept-button"
    }, t('accept')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      as: "p",
      marginTop: 4,
      className: "terms-of-use__footer-text",
      color: _designSystem.TextColor.textAlternative
    }, t('termsOfUseFooterText')))
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "terms-of-use"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "terms-of-use__content",
    marginBottom: 4,
    marginLeft: 4,
    marginRight: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "IMPORTANT NOTICE: THIS AGREEMENT IS SUBJECT TO BINDING ARBITRATION AND A WAIVER OF CLASS ACTION RIGHTS AS DETAILED IN SECTION 11. PLEASE READ THE AGREEMENT CAREFULLY."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "ConsenSys Software Inc. (\u201CConsenSys,\u201D \u201Cwe,\u201D \u201Cus,\u201D or \u201Cour\u201D) is the leading blockchain software development company. With a focus on utilizing decentralized technologies, such as Ethereum, our software is powering a revolution in commerce and finance and helping to optimize business processes. ConsenSys hosts a top level domain website, www.consensys.net, that serves information regarding ConsenSys and our Offerings, as defined below, as well as sub-domains for our products or services (the top level domain with the sub-domains collectively referred to as the \u201CSite\u201D), which include text, images, audio, code and other materials or third party information.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "These Terms of Use (the \u201CTerms,\u201D \u201CTerms of Use\u201D or \u201CAgreement\u201D) contain the terms and conditions that govern your access to and use of the Site and Offerings provided by us and is an agreement between us and you or the entity you represent (\u201Cyou\u201D or \u201Cyour\u201D). Please read these Terms of Use carefully before using the Site or Offerings. By using the Site, clicking a button or checkbox to accept or agree to these Terms where that option is made available, clicking a button to use or access any of the Offerings, completing an Order, or,\xA0 if earlier, using or otherwise accessing the Offerings (the date on which any of the events listed above occur being the \u201CEffective Date\u201D), you (1) accept and agree to these Terms and any additional terms, rules and conditions of participation issued by ConsenSys from time to time and (2) consent to the collection, use, disclosure and other handling of information as described in our", ' ', /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    href: "https://consensys.net/privacy-policy/",
    target: "_blank",
    rel: "noopener noreferrer",
    color: _designSystem.Color.primaryDefault,
    variant: _designSystem.TextVariant.bodySm
  }, "Privacy Policy."), ' ', "If you do not agree to the Terms or perform any and all obligations you accept under the Terms, then you may not access or use the Offerings.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "You represent to us that you are lawfully able to enter into contracts. If you are entering into this Agreement for an entity, such as the company you work for, you represent to us that you have legal authority to bind that entity. Please see Section 13 for definitions of certain capitalized terms used in this Agreement."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "In addition, you represent to us that you and your financial institutions, or any party that owns or controls you or your financial institutions, are (1) not subject to sanctions or otherwise designated on any list of prohibited or restricted parties, including but not limited to the lists maintained by the United Nations Security Council, the U.S. Government (i.e., the Specially Designated Nationals List and Foreign Sanctions Evaders List of the U.S. Department of Treasury and the Entity List of the U.S. Department of Commerce), the European Union or its Member States, or other applicable government authority and (2) not located in any country subject to a comprehensive sanctions program implemented by the United States."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "1. The Offerings."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "1.1 Generally. You may access and use the Offerings in accordance with this Agreement. You agree to comply with the terms of this Agreement and all laws, rules and regulations applicable to your use of the Offerings."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "1.2 Offerings and Access. ConsenSys offers a number of products and services, each an \u201COffering\u201D, under the ConsenSys brand or brands owned by us. These include Codefi, Quorum, Infura, MetaMask and others. Offerings are generally accessed through the Site or through a third party provider of which we approved, such as the Google Play or Apple App Store, unless otherwise agreed in writing. Some Offerings may require you to create an account, enter a valid form of payment, and select a paid plan (a \u201CPaid Plan\u201D), or initiate an Order.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "1.3 Third-Party Content. In certain Offerings, Third-Party Content may be used by you at your election. Third-Party Content is governed by this Agreement and, if applicable, separate terms and conditions accompanying such Third-Party Content, which terms and conditions may include separate fees and charges."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "1.4 Third-Party Offerings. When you use our Offerings, you may also be using the products or services of one or more third parties. Your use of these third party offerings may be subject to the separate policies, terms of use, and fees of these third parties."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "2. Changes."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "2.1 To the Offerings. We may change or discontinue any or all of the Offerings or change or remove functionality of any or all of the Offerings from time to time. We will use commercially reasonable efforts to communicate to you any material change or discontinuation of an Offering through the Site or public communication channels.\xA0 If you are on a Paid Plan, we will use commercially reasonable efforts to communicate to you\xA0 any material changes to or discontinuation of the Offering at least 30 days in advance of such change, and we will use commercially reasonable efforts to continue supporting the previous version of the Offering for up to three months after the change or discontinuation, except if doing so (a) would pose an information security or intellectual property issue, (b) is economically or technically burdensome, or (c) would create undue risk of us violating the law."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "2.2 To this Agreement. We reserve the right, at our sole discretion, to modify or replace any part of this Agreement or any Policies at any time. It is your responsibility to check this Agreement periodically for changes, but we will also use commercially reasonable efforts to communicate any material changes to this Agreement through the Site or other public channels. Your continued use of or access to the Offerings following the posting of any changes to this Agreement constitutes acceptance of those changes."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "3. Your Responsibilities."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "3.1 Your Accounts.\xA0 For those Offerings that require an account, and except to the extent caused by our breach of this Agreement, (a) you are responsible for all activities that occur under your account, regardless of whether the activities are authorized by you or undertaken by you, your employees or a third party (including your contractors, agents or other End Users), and (b) we and our affiliates are not responsible for unauthorized access to your account, including any access that occurred as a result of fraud, phishing, or other criminal activity perpetrated by third parties.\xA0\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "3.2 Your Use. You are responsible for all activities that occur through your use of those Offerings that do not require an account, except to the extent caused by our breach of this Agreement, regardless of whether the activities are authorized by you or undertaken by you, your employees or a third party (including your contractors, agents or other End Users).\xA0 We and our affiliates are not responsible for unauthorized access that may occur during your use of the Offerings, including any access that occurred as a result of fraud, phishing, or other criminal activity perpetrated by third parties.\xA0 You will ensure that your use of the Offerings does not violate any applicable law.\xA0\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "3.3 Your Security and Backup. You are solely responsible for properly configuring and using the Offerings and otherwise taking appropriate action to secure, protect and backup your accounts and/or Your Content in a manner that will provide appropriate security and protection, which might include use of encryption.\xA0 This includes your obligation under this Agreement to record and securely maintain any passwords or backup security phrases (i.e. \u201Cseed\u201D phrases) that relate to your use of the Offerings. You acknowledge that you will not share with us nor any other third party any password or backup/seed phrase that relates to your use of the Offerings, and that we will not be held responsible if you do share any such phrase or password."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "3.4 Log-In Credentials and API Authentication. To the extent we provide you with log-in credentials and API authentication generated by the Offerings, such log-in credentials and API authentication are for your use only and you will not sell, transfer or sublicense them to any other entity or person, except that you may disclose your password or private key to your agents and subcontractors performing work on your behalf."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "3.5 Applicability to MetaMask Offerings. For the avoidance of doubt, the terms of this Section 3 are applicable to all Offerings, including MetaMask and any accounts you create through MetaMask with Third Party Offerings, such as decentralized applications, or blockchain-based accounts themselves."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "4. Fees and Payment."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "4.1 Publicly Available Offerings. Some Offerings may be offered to the public and licensed on a royalty free basis, including Offerings that require a Paid Plan for software licensing fees above a certain threshold of use.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "4.2 Offering Fees.\xA0 If your use of an Offering does not require an Order or Paid Plan but software licensing fees are charged contemporaneously with your use of the Offering, those fees will be charged as described on the Site or in the user interface of the Offering.\xA0 Such fees may be calculated by combining a fee charged by us and a fee charged by a Third Party Offering that provides certain functionality related to the Offering.\xA0 For those Offerings which entail an Order or Paid Plan, we calculate and bill fees and charges according to your Order or Paid Plan. For such Offerings, on the first day of each billing period, you will pay us the applicable fees (the \u201CBase Fees\u201D) and any applicable taxes based on the Offerings in the Paid Plan. In addition, we may, for particular Orders, issue an invoice to you for all charges above the applicable threshold for your Paid Plan which constitute overage fees for the previous billing period. If you make any other changes to the Offerings during a billing period (e.g. upgrading or downgrading your Paid Plan), we will apply any additional charges or credits to the next billing period. We may bill you more frequently for fees accrued at our discretion upon notice to you.\xA0 You will pay all fees in U.S. dollars unless the particular Offering specifies a different form of payment or otherwise agreed to in writing. All amounts payable by you under this Agreement will be paid to us without setoff or counterclaim, and without any deduction or withholding. Fees and charges for any new Offering or new feature of an Offering will be effective when we use commercially reasonable efforts to communicate updated fees and charges through our Site or other public channels or, if you are on a Paid Plan, upon commercially reasonable efforts to notify you, unless we expressly state otherwise in a notice. We may increase or add new fees and charges for any existing Offerings you are using by using commercially reasonable efforts to notify users of the Offerings through our Site or other public channels or, if you are on a Paid Plan, by giving you at least 30 days\u2019 prior notice.\xA0 Unless otherwise specified in an Order, if you are on a Paid Plan, all amounts due under this Agreement are payable within thirty (30) days following receipt of your invoice.\xA0 We may elect to charge you interest at the rate of 1.5% per month (or the highest rate permitted by law, if less) on all late payments."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "4.3 Taxes. Each party will be responsible, as required under applicable law, for identifying and paying all taxes and other governmental fees and charges (and any penalties, interest, and other additions thereto) that are imposed on that party upon or with respect to the transactions and payments under this Agreement. All fees payable by you are exclusive taxes unless otherwise noted. We reserve the right to withhold taxes where required."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "5. Temporary Suspension; Limiting API Requests."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "5.1 Generally. We may suspend your right to access or use any portion or all of the Offerings immediately if we determine:"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(a) your use of the Offerings (i) poses a security risk to the Offerings or any third party, (ii) could adversely impact our systems, the Offerings or the systems of any other user, (iii) could subject us, our affiliates, or any third party to liability, or (iv) could be unlawful;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(b) you are, or any End User is, in breach of this Agreement;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(c) you are in breach of your payment obligations under Section 4 and such breach continues for 30 days or longer; or"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(d) for entities, you have ceased to operate in the ordinary course, made an assignment for the benefit of creditors or similar disposition of your assets, or become the subject of any bankruptcy, reorganization, liquidation, dissolution or similar proceeding."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "5.2 Effect of Suspension. If we suspend your right to access or use any portion or all of the Offerings:"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(a) you remain responsible for all fees and charges you incur during the period of suspension; and"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(b) you will not be entitled to any fee credits for any period of suspension."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "5.3 Limiting API Requests. If applicable to a particular Offering, we retain sole discretion to limit your usage of the Offerings (including without limitation by limiting the number of API requests you may submit (\u201CAPI Requests\u201D)) at any time if your usage of the Offerings exceeds the usage threshold specified in your Paid Plan.\xA0\xA0\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "6. Term; Termination."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "6.1 Term. For Offerings subject to a Paid Plan, the term of this Agreement will commence on the Effective Date and will remain in effect until terminated under this Section 6. Any notice of termination of this Agreement by either party to the other must include a Termination Date that complies with the notice periods in Section 6.2.\xA0 For Offerings that are not subject to a Paid Plan, the term of this Agreement will commence on the Effective Date and will remain in effect until you stop accessing or using the Offerings.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "6.2 Termination."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(a) Termination for Convenience. If you are not on a Paid Plan, you may terminate this Agreement for any reason by ceasing use of the Offering. If you are on a Paid Plan, each party may terminate this Agreement for any reason by giving the other party at least 30 days\u2019 written notice, subject to the provisions in Section 6.2(b)."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(b) Termination for Cause."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(i) By Either Party. Either party may terminate this Agreement for cause if the other party is in material breach of this Agreement and the material breach remains uncured for a period of 30 days from receipt of notice by the other party.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(ii) By Us. We may also terminate this Agreement immediately (A) for cause if we have the right to suspend under Section 5, (B) if our relationship with a third-party partner who provides software or other technology we use to provide the Offerings expires, terminates or requires us to change the way we provide the software or other technology as part of the Offerings, or (C) in order to avoid undue risk of violating the law."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "6.3 Effect of Termination. Upon the Termination Date:"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(i) all your rights under this Agreement immediately terminate; and"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(ii) each party remains responsible for all fees and charges it has incurred through the Termination Date and are responsible for any fees and charges it incurs during the post-termination period;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(iii) the terms and conditions of this Agreement shall survive the expiration or termination of this Agreement to the full extent necessary for their enforcement and for the protection of the party in whose favor they operate.\xA0 For instance, despite this Agreement between you and us terminating, any dispute raised after you stop accessing or using the Offerings will be subject to the applicable provisions of this Agreement if that dispute relates to your prior access or use."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "For any use of the Offerings after the Termination Date, the terms of this Agreement will again apply and, if your use is under a Paid Plan, you will pay the applicable fees at the rates under Section 4."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "7. Proprietary Rights."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "7.1 Your Content. Depending on the Offering, you may share Content with us. Except as provided in this Section 7, we obtain no rights under this Agreement from you (or your licensors) to Your Content. You consent to our use of Your Content to provide the Offerings to you."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "7.2 Offerings License. We or our licensors own all right, title, and interest in and to the Offerings, and all related technology and intellectual property rights. Subject to the terms of this Agreement, we grant you a limited, revocable, non-exclusive, non-sublicensable, non-transferable license to do the following: (a) access and use the Offerings solely in accordance with this Agreement; and (b) copy and use Our Content solely in connection with your permitted use of the Offerings. Except as provided in this Section 7.2, you obtain no rights under this Agreement from us, our affiliates or our licensors to the Offerings, including any related intellectual property rights. Some of Our Content and Third-Party Content may be provided to you under a separate license, such as the Apache License, Version 2.0, or other open source license. In the event of a conflict between this Agreement and any separate license, the separate license will prevail with respect to Our Content or Third-Party Content that is the subject of such separate license."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "7.3 License Restrictions. Neither you nor any End User will use the Offerings in any manner or for any purpose other than as expressly permitted by this Agreement. Except for as authorized, neither you nor any End User will, or will attempt to (a) modify, distribute, alter, tamper with, repair, or otherwise create derivative works of any Content included in the Offerings (except to the extent Content included in the Offerings is provided to you under a separate license that expressly permits the creation of derivative works), (b) reverse engineer, disassemble, or decompile the Offerings or apply any other process or procedure to derive the source code of any software included in the Offerings (except to the extent applicable law doesn\u2019t allow this restriction), (c) access or use the Offerings in a way intended to avoid incurring fees or exceeding usage limits or quotas, (d) use scraping techniques to mine or otherwise scrape data except as permitted by a Plan, or (e) resell or sublicense the Offerings unless otherwise agreed in writing. You will not use Our Marks unless you obtain our prior written consent. You will not misrepresent or embellish the relationship between us and you (including by expressing or implying that we support, sponsor, endorse, or contribute to you or your business endeavors). You will not imply any relationship or affiliation between us and you except as expressly permitted by this Agreement."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "7.4 Suggestions. If you provide any Suggestions to us or our affiliates, we and our affiliates will be entitled to use the Suggestions without restriction. You hereby irrevocably assign to us all right, title, and interest in and to the Suggestions and agree to provide us any assistance we require to document, perfect, and maintain our rights in the Suggestions."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "7.5 U.S. Government Users. If you are a U.S. Government End User, we are licensing the Offerings to you as a \u201CCommercial Item\u201D as that term is defined in the U.S. Code of Federal Regulations (see 48 C.F.R. \xA7 2.101), and the rights we grant you to the Offerings are the same as the rights we grant to all others under these Terms of Use."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "8. Indemnification."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "8.1 General.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(a) You will defend, indemnify, and hold harmless us, our affiliates and licensors, and each of their respective employees, officers, directors, and representatives from and against any Losses arising out of or relating to any claim concerning: (a) breach of this Agreement or violation of applicable law by you; and (b) a dispute between you and any of your customers or users. You will reimburse us for reasonable attorneys\u2019 fees and expenses, associated with claims described in (a) and (b) above."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(b) We will defend, indemnify, and hold harmless you and your employees, officers, directors, and representatives from and against any Losses arising out of or relating to any claim concerning our material and intentional breach of this Agreement.\xA0 We will reimburse you for reasonable attorneys\u2019 fees and expenses associated with the claims described in this paragraph."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "8.2 Intellectual Property."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(a) Subject to the limitations in this Section 8, you will defend ConsenSys, its affiliates, and their respective employees, officers, and directors against any third-party claim alleging that any of Your Content infringes or misappropriates that third party\u2019s intellectual property rights, and will pay the amount of any adverse final judgment or settlement."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(b) Subject to the limitations in this Section 8 and the limitations in Section 10, we will defend you and your employees, officers, and directors against any third-party claim alleging that the Offerings infringe or misappropriate that third party\u2019s intellectual property rights, and will pay the amount of any adverse final judgment or settlement.\xA0 However, we will not be required to spend more than $200,000 pursuant to this Section 8, including without limitation attorneys\u2019 fees, court costs, settlements, judgments, and reimbursement costs."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(c) Neither party will have obligations or liability under this Section 8.2 arising from infringement by you combining the Offerings with any other product, service, software, data, content or method. In addition, we will have no obligations or liability arising from your use of the Offerings after we have notified you to discontinue such use. The remedies provided in this Section 8.2 are the sole and exclusive remedies for any third-party claims of infringement or misappropriation of intellectual property rights by the Offerings or by Your Content."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "8.3 Process. In no event will a party agree to any settlement of any claim that involves any commitment, other than the payment of money, without the written consent of the other party."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "9. Disclaimers; Risk."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "9.1 DISCLAIMER. THE OFFERINGS ARE PROVIDED \u201CAS IS.\u201D EXCEPT TO THE EXTENT PROHIBITED BY LAW, OR TO THE EXTENT ANY STATUTORY RIGHTS APPLY THAT CANNOT BE EXCLUDED, LIMITED OR WAIVED, WE AND OUR AFFILIATES AND LICENSORS (A) MAKE NO REPRESENTATIONS OR WARRANTIES OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE REGARDING THE OFFERINGS OR THE THIRD-PARTY CONTENT, AND (B) DISCLAIM ALL WARRANTIES, INCLUDING ANY IMPLIED OR EXPRESS WARRANTIES (I) OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR QUIET ENJOYMENT, (II) ARISING OUT OF ANY COURSE OF DEALING OR USAGE OF TRADE, (III) THAT THE OFFERINGS OR THIRD-PARTY CONTENT WILL BE UNINTERRUPTED, ERROR FREE OR FREE OF HARMFUL COMPONENTS, AND (IV) THAT ANY CONTENT WILL BE SECURE OR NOT OTHERWISE LOST OR ALTERED."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "9.2 RISKS. OUR OFFERINGS RELY ON EMERGING TECHNOLOGIES, SUCH AS ETHEREUM. SOME OFFERINGS ARE SUBJECT TO INCREASED RISK THROUGH YOUR POTENTIAL MISUSE OF THINGS SUCH AS PUBLIC/PRIVATE KEY CRYPTOGRAPHY, OR FAILING TO PROPERLY UPDATE OR RUN SOFTWARE TO ACCOMMODATE PROTOCOL UPGRADES, LIKE THE TRANSITION TO PROOF OF STAKE CONSENSUS. BY USING THE OFFERINGS YOU EXPLICITLY ACKNOWLEDGE AND ACCEPT THESE HEIGHTENED RISKS.\xA0 YOU REPRESENT THAT YOU ARE FINANCIALLY AND TECHNICALLY SOPHISTICATED ENOUGH TO UNDERSTAND THE INHERENT RISKS ASSOCIATED WITH USING CRYPTOGRAPHIC AND BLOCKCHAIN-BASED SYSTEMS AND UPGRADING YOUR SOFTWARE AND PROCESSES TO ACCOMMODATE PROTOCOL UPGRADES, AND THAT YOU HAVE A WORKING KNOWLEDGE OF THE USAGE AND INTRICACIES OF DIGITAL ASSETS SUCH AS ETHER (ETH) AND OTHER DIGITAL TOKENS, SUCH AS THOSE FOLLOWING THE ERC-20 TOKEN STANDARD.\xA0 IN PARTICULAR, YOU UNDERSTAND THAT WE DO NOT OPERATE THE ETHEREUM PROTOCOL OR ANY OTHER BLOCKCHAIN PROTOCOL, COMMUNICATE OR EXECUTE PROTOCOL UPGRADES, OR APPROVE OR PROCESS BLOCKCHAIN TRANSACTIONS ON BEHALF OF YOU.\xA0 YOU FURTHER UNDERSTAND THAT BLOCKCHAIN PROTOCOLS PRESENT THEIR OWN RISKS OF USE, THAT SUPPORTING OR PARTICIPATING IN THE PROTOCOL MAY RESULT IN LOSSES IF YOUR PARTICIPATION VIOLATES CERTAIN PROTOCOL RULES, THAT\xA0 BLOCKCHAIN-BASED TRANSACTIONS ARE IRREVERSIBLE, THAT YOUR PRIVATE KEY AND BACKUP SEED PHRASE MUST BE KEPT SECRET AT ALL TIMES, THAT CONSENSYS WILL NOT STORE A BACKUP OF, NOR WILL BE ABLE TO DISCOVER OR RECOVER, YOUR PRIVATE KEY OR BACKUP SEED PHRASE, AND THAT YOU ARE SOLELY RESPONSIBLE FOR ANY APPROVALS OR PERMISSIONS YOU PROVIDE BY CRYPTOGRAPHICALLY SIGNING BLOCKCHAIN MESSAGES OR TRANSACTIONS."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "YOU FURTHER UNDERSTAND AND ACCEPT THAT DIGITAL TOKENS PRESENT MARKET VOLATILITY RISK, TECHNICAL SOFTWARE RISKS, REGULATORY RISKS, AND CYBERSECURITY RISKS.\xA0 YOU UNDERSTAND THAT THE COST AND SPEED OF A BLOCKCHAIN-BASED SYSTEM IS VARIABLE, THAT COST MAY INCREASE DRAMATICALLY AT ANY TIME, AND THAT COST AND SPEED IS NOT WITHIN THE CAPABILITY OF CONSENSYS TO CONTROL.\xA0 YOU UNDERSTAND THAT PROTOCOL UPGRADES MAY INADVERTENTLY CONTAIN BUGS OR SECURITY VULNERABILITIES THAT MAY RESULT IN LOSS OF FUNCTIONALITY AND ULTIMATELY FUNDS."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "YOU UNDERSTAND AND ACCEPT THAT CONSENSYS DOES NOT CONTROL ANY BLOCKCHAIN PROTOCOL, NOR DOES CONSENSYS CONTROL ANY SMART CONTRACT THAT IS NOT OTHERWISE OFFERED BY CONSENSYS AS PART OF THE OFFERINGS.\xA0 YOU UNDERSTAND AND ACCEPT THAT CONSENSYS DOES NOT CONTROL AND IS NOT RESPONSIBLE FOR THE TRANSITION OF ANY BLOCKCHAIN PROTOCOL FROM PROOF OF WORK TO PROOF OF STAKE CONSENSUS.\xA0 YOU AGREE THAT YOU ALONE, AND NOT CONSENSYS, IS RESPONSIBLE FOR ANY TRANSACTIONS THAT YOU ENGAGE IN WITH REGARD TO SUPPORTING ANY BLOCKCHAIN PROTOCOL WHETHER THROUGH TRANSACTION VALIDATION OR OTHERWISE, OR ANY TRANSACTIONS THAT YOU ENGAGE IN WITHANY THIRD-PARTY-DEVELOPED SMART CONTRACT OR TOKEN, INCLUDING TOKENS THAT WERE CREATED BY A THIRD PARTY FOR THE PURPOSE OF FRAUDULENTLY MISREPRESENTING AFFILIATION WITH ANY BLOCKCHAIN PROJECT.\xA0 YOU AGREE THAT CONSENSYS IS NOT RESPONSIBLE FOR THE REGULATORY STATUS OR TREATMENT OF ANY DIGITAL ASSETS THAT YOU MAY ACCESS OR TRANSACT WITH USING CONSENSYS OFFERINGS.\xA0 YOU EXPRESSLY ASSUME FULL RESPONSIBILITY FOR ALL OF THE RISKS OF ACCESSING AND USING THE OFFERINGS TO INTERACT WITH BLOCKCHAIN PROTOCOLS.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "10. Limitations of Liability."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "10.1 Limitation of Liability. WITH THE EXCEPTION OF CLAIMS RELATING TO A BREACH OF OUR PROPRIETARY RIGHTS AS GOVERNED BY SECTION 7 AND INTELLECTUAL PROPERTY CLAIMS AS GOVERNED BY SECTION 8, IN NO EVENT SHALL THE AGGREGATE LIABILITY OF EACH PARTY TOGETHER WITH ALL OF ITS AFFILIATES ARISING OUT OF OR RELATED TO THIS AGREEMENT EXCEED THE TOTAL AMOUNT PAID BY YOU HEREUNDER FOR THE OFFERINGS GIVING RISE TO THE LIABILITY IN THE TWELVE MONTHS PRECEDING THE FIRST INCIDENT OUT OF WHICH THE LIABILITY AROSE, OR, IF NO FEES HAVE BEEN PAID, $25,000. THE FOREGOING LIMITATION WILL APPLY WHETHER AN ACTION IS IN CONTRACT OR TORT AND REGARDLESS OF THE THEORY OF LIABILITY, BUT WILL NOT LIMIT YOUR PAYMENT OBLIGATIONS UNDER SECTION 4.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "10.2 Exclusion of Consequential and Related Damages. IN NO EVENT WILL EITHER PARTY OR ITS AFFILIATES HAVE ANY LIABILITY ARISING OUT OF OR RELATED TO THIS AGREEMENT FOR ANY LOST PROFITS, REVENUES, GOODWILL, OR INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, COVER, BUSINESS INTERRUPTION OR PUNITIVE DAMAGES, WHETHER AN ACTION IS IN CONTRACT OR TORT AND REGARDLESS OF THE THEORY OF LIABILITY, EVEN IF A PARTY OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES OR IF A PARTY\u2019S OR ITS AFFILIATES\u2019 REMEDY OTHERWISE FAILS OF ITS ESSENTIAL PURPOSE. THE FOREGOING DISCLAIMER WILL NOT APPLY TO THE EXTENT PROHIBITED BY LAW."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "11. Binding Arbitration and Class Action Waiver."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "PLEASE READ THIS SECTION CAREFULLY \u2013 IT MAY SIGNIFICANTLY AFFECT YOUR LEGAL RIGHTS, INCLUDING YOUR RIGHT TO FILE A LAWSUIT IN COURT."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "11.1 Binding Arbitration. Any dispute, claim or controversy (\u201CClaim\u201D) relating in any way to this Agreement, the Site, or your use of the Offerings will be resolved by binding arbitration as provided in this Section 11, rather than in court, except that you may assert claims in small claims court if your claims qualify."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "11.1.1 If you are located in the United States: This agreement and any dispute or claim (including non-contractual disputes or claims) arising out of or in connection with it or its subject matter or formation shall be governed by and construed in accordance with the laws of the State of New York. The Federal Arbitration Act and federal arbitration law apply to this Agreement. There is no judge or jury in arbitration, and court review of an arbitration award is limited. However, an arbitrator can award on an individual basis the same damages and relief as a court (including injunctive and declaratory relief or statutory damages), and must follow the terms of this Agreement as a court would. The arbitration will be conducted in accordance with the expedited procedures set forth in the JAMS Comprehensive Arbitration Rules and Procedures (the \u201CRules\u201D) as those Rules exist on the effective date of this Agreement, including Rules 16.1 and 16.2 of those Rules. The arbitrator\u2019s decision shall be final, binding, and non-appealable. Judgment upon the award may be entered and enforced in any court having jurisdiction. Neither party shall sue the other party other than as provided herein or for enforcement of this clause or of the arbitrator\u2019s award; any such suit may be brought only in a Federal District Court or a New York state court located in New York County, New York. The arbitrator, and not any federal, state, or local court, shall have exclusive authority to resolve any dispute relating to the interpretation, applicability, unconscionability, arbitrability, enforceability, or formation of this Agreement including any claim that all or any part of the Agreement is void or voidable.\xA0 If for any reason a claim proceeds in court rather than in arbitration we and you waive any right to a jury trial. Notwithstanding the foregoing we and you both agree that you or we may bring suit in court to enjoin infringement or other misuse of intellectual property rights.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "11.1.2 If you are located in the United Kingdom: This agreement and any dispute or claim (including non-contractual disputes or claims) arising out of or in connection with it or its subject matter or formation shall be governed by and construed in accordance with the law of England and Wales. Any dispute, claim or controversy relating in any way to this Agreement, the Offerings, your use of the Offerings, or to any products or services licensed or distributed by us will be resolved by binding arbitration as provided in this clause. Prior to commencing any formal arbitration proceedings, parties shall first seek settlement of any claim by mediation in accordance with the LCIA Mediation Rules, which Rules are deemed to be incorporated by reference into this clause. If the dispute is not settled by mediation within 14 days of the commencement of the mediation, or such further period as the parties shall agree in writing, the dispute shall be referred to and finally resolved by arbitration under the LCIA Rules, which are deemed to be incorporated by reference into this clause. The language to be used in the mediation and in the arbitration shall be English. The seat or legal place of arbitration shall be London."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "11.1.3 If you are located in any territory that is not specifically enumerated in Sections 11.1.1 or 11.1.2, you may elect for either of Section 11.1.1 or 11.1.2 to apply to you, otherwise this Agreement and any Claim (including non-contractual disputes or claims) arising out of or in connection with it or its subject matter or formation shall be governed by and construed in accordance with the law of Ireland. Any Claim relating in any way to this Agreement, the Offerings, your use of the Offerings, or to any products or services licensed or distributed by us will be resolved by binding arbitration as provided in this clause. Prior to commencing any formal arbitration proceedings, parties shall first seek settlement of any claim by mediation in accordance with the LCIA Mediation Rules, which Rules are deemed to be incorporated by reference into this clause. If the dispute is not settled by mediation within 14 days of the commencement of the mediation, or such further period as the parties shall agree in writing, the Claim shall be referred to and finally resolved by arbitration under the LCIA Rules, which are deemed to be incorporated by reference into this clause. The language to be used in the mediation and in the arbitration shall be English. The seat or legal place of arbitration shall be Dublin, Ireland."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "11.2 Class Action Waiver. YOU AND WE AGREE THAT EACH MAY BRING CLAIMS AGAINST THE OTHER ONLY ON AN INDIVIDUAL BASIS, AND NOT AS A PLAINTIFF OR CLASS MEMBER IN ANY PURPORTED CLASS OR REPRESENTATIVE PROCEEDING. YOU AND WE EXPRESSLY WAIVE ANY RIGHT TO FILE A CLASS ACTION OR SEEK RELIEF ON A CLASS BASIS. Unless both you and we agree, no arbitrator or judge may consolidate more than one person\u2019s claims or otherwise preside over any form of a representative or class proceeding. The arbitrator may award injunctive relief only in favor of the individual party seeking relief and only to the extent necessary to provide relief warranted by that party\u2019s individual claim. If a court decides that applicable law precludes enforcement of any of this paragraph\u2019s limitations as to a particular claim for relief, then that claim (and only that claim) must be severed from the arbitration and may be brought in court. If any court or arbitrator determines that the class action waiver set forth in this paragraph is void or unenforceable for any reason or that an arbitration can proceed on a class basis, then the arbitration provision set forth above shall be deemed null and void in its entirety and the parties shall be deemed to have not agreed to arbitrate disputes."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "11.3 30-Day Right to Opt Out. You have the right to opt-out and not be bound by the arbitration and class action waiver provisions set forth above by sending written notice of your decision to opt-out to the email address notices@consensys.net with subject line LEGAL OPT OUT. The notice must be sent within 30 days of your first use of the Offerings, otherwise you shall be bound to arbitrate disputes and will be deemed to have agreed to waive any right to pursue a class action in accordance with the terms of those paragraphs. If you opt-out of these provisions, we will also not be bound by them."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "12. Miscellaneous."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.1 Assignment. You will not assign or otherwise transfer this Agreement or any of your rights and obligations under this Agreement, without our prior written consent. Any assignment or transfer in violation of this Section 12.1 will be void. We may assign this Agreement without your consent (a) in connection with a merger, acquisition or sale of all or substantially all of our assets, or (b) to any Affiliate or as part of a corporate reorganization; and effective upon such assignment, the assignee is deemed substituted for us as a party to this Agreement and we are fully released from all of our obligations and duties to perform under this Agreement. Subject to the foregoing, this Agreement will be binding upon, and inure to the benefit of the parties and their respective permitted successors and assigns."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.2 DAOs. As a blockchain native company, we may interact with and provide certain Offerings to DAOs. Due to the unique nature of DAOs, to the extent the DAO votes in favor of and/or accepts such Offerings from ConsenSys, the DAO has acknowledged and agreed to these Terms in their entirety."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.2 Entire Agreement and Modifications. This Agreement incorporates the Policies by reference and is the entire agreement between you and us regarding the subject matter of this Agreement. If the terms of this document are inconsistent with the terms contained in any Policy, the terms contained in this document will control. Any modification to the terms of this Agreement may only be made in writing."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.3 Force Majeure. Neither party nor their respective affiliates will be liable for any delay or failure to perform any obligation under this Agreement where the delay or failure results from any cause beyond such party\u2019s reasonable control, including but not limited to acts of God, utilities or other telecommunications failures, cyber attacks, earthquake, storms or other elements of nature, pandemics, blockages, embargoes, riots, acts or orders of government, acts of terrorism, or war."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.4 Export and Sanctions Compliance. In connection with this Agreement, you will comply with all applicable import, re-import, sanctions, anti-boycott, export, and re-export control laws and regulations, including all such laws and regulations that may apply. For clarity, you are solely responsible for compliance related to the manner in which you choose to use the Offerings. You may not use any Offering if you are the subject of U.S. sanctions or of sanctions consistent with U.S. law imposed by the governments of the country where you are using the Offering.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.5 Independent Contractors; Non-Exclusive Rights. We and you are independent contractors, and this Agreement will not be construed to create a partnership, joint venture, agency, or employment relationship. Neither party, nor any of their respective affiliates, is an agent of the other for any purpose or has the authority to bind the other. Both parties reserve the right (a) to develop or have developed for it products, services, concepts, systems, or techniques that are similar to or compete with the products, services, concepts, systems, or techniques developed or contemplated by the other party, and (b) to assist third party developers or systems integrators who may offer products or services which compete with the other party\u2019s products or services."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.6 Eligibility. If you are under the age of majority in your jurisdiction of residence, you may use the Site or Offerings only with the consent of or under the supervision of your parent or legal guardian."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "NOTICE TO PARENTS AND GUARDIANS: By granting your minor permission to access the Site or Offerings, you agree to these Terms of Use on behalf of your minor. You are responsible for exercising supervision over your minor\u2019s online activities. If you do not agree to these Terms of Use, do not let your minor use the Site or Offerings."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.7 Language. All communications and notices made or given pursuant to this Agreement must be in the English language. If we provide a translation of the English language version of this Agreement, the English language version of the Agreement will control if there is any conflict."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.8 Notice."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(a) To You. We may provide any notice to you under this Agreement using commercially reasonable means, including: (i) posting a notice on the Site; (ii) sending a message to the email address then associated with your account; or (iii) using public communication channels . Notices we provide by posting on the Site or using public communication channels will be effective upon posting, and notices we provide by email will be effective when we send the email. It is your responsibility to keep your email address current to the extent you have an account. You will be deemed to have received any email sent to the email address then associated with your account when we send the email, whether or not you actually receive the email."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "(b) To Us. To give us notice under this Agreement, you must contact us by email at notices@consensys.net.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.9 No Third-Party Beneficiaries. Except as otherwise set forth herein, this Agreement does not create any third-party beneficiary rights in any individual or entity that is not a party to this Agreement."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.10 No Waivers. The failure by us to enforce any provision of this Agreement will not constitute a present or future waiver of such provision nor limit our right to enforce such provision at a later time. All waivers by us must be in writing to be effective."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.11 Severability. If any portion of this Agreement is held to be invalid or unenforceable, the remaining portions of this Agreement will remain in full force and effect. Any invalid or unenforceable portions will be interpreted to effect and intent of the original portion. If such construction is not possible, the invalid or unenforceable portion will be severed from this Agreement but the rest of the Agreement will remain in full force and effect."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "12.12 Notice and Procedure for Making Claims of Copyright Infringement. If you are a copyright owner or agent of the owner, and you believe that your copyright or the copyright of a person on whose behalf you are authorized to act has been infringed, please provide us a written notice at the address below with the following information:"), /*#__PURE__*/_react.default.createElement(_box.default, {
    as: "ol",
    marginLeft: 4,
    className: "terms-of-use__terms-list"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "an electronic or physical signature of the person authorized to act on behalf of the owner of the copyright or other intellectual property interest;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "a description of the copyrighted work or other intellectual property that you claim has been infringed;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "a description of where the material that you claim is infringing is located with respect to the Offerings;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "your address, telephone number, and email address;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "a statement by you that you have a good faith belief that the disputed use is not authorized by the copyright owner, its agent, or the law;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "a statement by you, made under penalty of perjury, that the above information in your notice is accurate and that you are the copyright or intellectual property owner or authorized to act on the copyright or intellectual property owner\u2019s behalf.")), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "You can reach us at:"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "Email: notices@consensys.net"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "Subject Line: Copyright Notification Mail"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "Attention: Copyright \u2105"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "ConsenSys Software Inc.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "49 Bogart Street Suite 22 Brooklyn, NY 11206"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 4
  }, "13. Definitions."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CAcceptable Use Policy\u201D means the policy set forth below, as it may be updated by us from time to time. You agree not to, and not to allow third parties to, use the Offerings:"), /*#__PURE__*/_react.default.createElement(_box.default, {
    as: "ol",
    marginLeft: 4,
    className: "terms-of-use__terms-list"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "to violate, or encourage the violation of, the legal rights of others (for example, this may include allowing End Users to infringe or misappropriate the intellectual property rights of others in violation of the Digital Millennium Copyright Act);"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "to engage in, promote or encourage any illegal or infringing content;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "for any unlawful, invasive, infringing, defamatory or fraudulent purpose (for example, this may include phishing, creating a pyramid scheme or mirroring a website);"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "to intentionally distribute viruses, worms, Trojan horses, corrupted files, hoaxes, or other items of a destructive or deceptive nature;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "to interfere with the use of the Offerings, or the equipment used to provide the Offerings, by customers, authorized resellers, or other authorized users;"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "to disable, interfere with or circumvent any aspect of the Offerings (for example, any thresholds or limits);"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "to generate, distribute, publish or facilitate unsolicited mass email, promotions, advertising or other solicitation; or"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 2
  }, "to use the Offerings, or any interfaces provided with the Offerings, to access any other product or service in a manner that violates the terms of service of such other product or service.")), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CAPI\u201D means an application program interface."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CAPI Requests\u201D has the meaning set forth in Section 5.3."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CApplicable Threshold\u201D has the meaning set forth in Section 4.2."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CBase Fees\u201D has the meaning set forth in Section 4.2."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CContent\u201D means any data, text, audio, video or images, software (including machine images), and any documentation."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CDAO\u201D means Decentralized Autonomous Organization."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CEnd User\u201D means any individual or entity that directly or indirectly through another user: (a) accesses or uses Your Content; or (b) otherwise accesses or uses the Offerings under your account.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CFees\u201D has the meaning set forth in Section 4.2."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CLosses\u201D means any claims, damages, losses, liabilities, costs, and expenses (including reasonable attorneys\u2019 fees).\u2019"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201COur Content\u201D means any software (including machine images), data, text, audio, video, images, or documentation that we offer in connection with the Offerings.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201COur Marks\u201D means any trademarks, service marks, service or trade names, logos, and other designations of ConsenSys Software Inc. and their affiliates or licensors that we may make available to you in connection with this Agreement."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201COrder\u201D means an order for Offerings executed through an order form directly with ConsenSys, or through a cloud vendor, such as Amazon Web Services, Microsoft Azure, or Google Cloud."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201COfferings\u201D means each of the products and services, including but not limited to Codefi, Infura, MetaMask, Quorum and any other features, tools, materials, or services offered from time to time, by us or our affiliates.\xA0"), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CPolicies\u201D means the Acceptable Use Policy, Privacy Policy, any supplemental policies or addendums applicable to any Service as provided to you, and any other policy or terms referenced in or incorporated into this Agreement, each as may be updated by us from time to time."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CPrivacy Policy\u201D means the privacy policy located at", ' ', /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    href: "https://consensys.net/privacy-policy",
    target: "_blank",
    rel: "noopener noreferrer",
    color: _designSystem.Color.primaryDefault,
    variant: _designSystem.TextVariant.bodySm
  }, "https://consensys.net/privacy-policy"), ' ', "(and any successor or related locations designated by us), as it may be updated by us from time to time."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CService Offerings\u201D means the Services (including associated APIs), Our Content, Our Marks, and any other product or service provided by us under this Agreement. Service Offerings do not include Third-Party Content or Third-Party Services."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CSuggestions\u201D means all suggested improvements to the Service Offerings that you provide to us.."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CTerm\u201D means the term of this Agreement described in Section 6.1."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CTermination Date\u201D means the effective date of termination provided in accordance with Section 6, in a notice from one party to the other."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CThird-Party Content\u201D means Content made available to you by any third party on the Site or in conjunction with the Offerings."), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    marginBottom: 4
  }, "\u201CYour Content\u201D means content that you or any End User transfers to us, storage or hosting by the Offerings in connection with account and any computational results that you or any End User derive from the foregoing through their use of the Offerings, excluding however any information submitted to a blockchain protocol for processing.\xA0"), /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.flexStart,
    marginLeft: 3,
    marginRight: 3,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "terms-of-use__checkbox",
    className: "terms-of-use__checkbox",
    dataTestId: "terms-of-use-checkbox",
    checked: isTermsOfUseChecked,
    onClick: () => {
      setIsTermsOfUseChecked(!isTermsOfUseChecked);
    }
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Label, {
    htmlFor: "terms-of-use__checkbox"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMdBold,
    as: "span",
    ref: bottomRef
  }, t('termsOfUseAgreeText')))))));
}
TermsOfUsePopup.propTypes = {
  onAccept: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\terms-of-use-popup\\terms-of-use-popup.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-cell\\index.js", {"./token-cell":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-cell\\token-cell.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctoken-cell%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenCell.default;
  }
});
var _tokenCell = _interopRequireDefault(require("./token-cell"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\token-cell\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-cell\\token-cell.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTokenFiatAmount":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../multichain":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\index.js","../asset-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\asset-list-item\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctoken-cell%5Ctoken-cell.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenCell;
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _assetListItem = _interopRequireDefault(require("../asset-list-item"));
var _selectors = require("../../../selectors");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _useTokenFiatAmount = require("../../../hooks/useTokenFiatAmount");
var _multichain = require("../../multichain");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function TokenCell({
  address,
  decimals,
  balanceError,
  image,
  symbol,
  string,
  onClick,
  isERC721
}) {
  const userAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const t = (0, _useI18nContext.useI18nContext)();
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const tokenData = Object.values(tokenList).find(token => token.symbol === symbol);
  const title = (tokenData === null || tokenData === void 0 ? void 0 : tokenData.name) || symbol;
  const tokenImage = (tokenData === null || tokenData === void 0 ? void 0 : tokenData.iconUrl) || image;
  const formattedFiat = (0, _useTokenFiatAmount.useTokenFiatAmount)(address, string, symbol);
  const warning = balanceError ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span"
  }, t('troubleTokenBalances'), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    href: `https://ethplorer.io/address/${userAddress}`,
    externalLink: true,
    onClick: event => event.stopPropagation(),
    textProps: {
      color: _designSystem.TextColor.warningDefault
    }
  }, t('here'))) : null;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, false ? /*#__PURE__*/_react.default.createElement(_multichain.MultichainTokenListItem, {
    onClick: () => onClick(address),
    tokenSymbol: symbol,
    tokenImage: tokenImage,
    primary: `${string || 0}`,
    secondary: formattedFiat,
    title: title
  }) : /*#__PURE__*/_react.default.createElement(_assetListItem.default, {
    className: (0, _classnames.default)('token-cell', {
      'token-cell--outdated': Boolean(balanceError)
    }),
    iconClassName: "token-cell__icon",
    onClick: () => onClick(address),
    tokenAddress: address,
    tokenSymbol: symbol,
    tokenDecimals: decimals,
    tokenImage: image,
    warning: warning,
    primary: `${string || 0}`,
    secondary: formattedFiat,
    isERC721: isERC721
  }));
}
TokenCell.propTypes = {
  address: _propTypes.default.string,
  balanceError: _propTypes.default.object,
  symbol: _propTypes.default.string,
  decimals: _propTypes.default.number,
  string: _propTypes.default.string,
  onClick: _propTypes.default.func.isRequired,
  isERC721: _propTypes.default.bool,
  image: _propTypes.default.string
};
TokenCell.defaultProps = {
  balanceError: null
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\token-cell\\token-cell.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-list-display\\index.js", {"./token-list-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-list-display\\token-list-display.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctoken-list-display%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenListDisplay.default;
  }
});
var _tokenListDisplay = _interopRequireDefault(require("./token-list-display"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\token-list-display\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-list-display\\token-list-display.js", {"../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTokenTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/token-balance":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\token-balance\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctoken-list-display%5Ctoken-list-display.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenListDisplay;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _selectors = require("../../../selectors");
var _useTokenTracker = require("../../../hooks/useTokenTracker");
var _identicon = _interopRequireDefault(require("../../ui/identicon"));
var _tokenBalance = _interopRequireDefault(require("../../ui/token-balance"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _metamask = require("../../../ducks/metamask/metamask");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function TokenListDisplay({
  clickHandler
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const shouldHideZeroBalanceTokens = (0, _reactRedux.useSelector)(_selectors.getShouldHideZeroBalanceTokens);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const {
    loading,
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(tokens, true, shouldHideZeroBalanceTokens);
  if (loading) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "loading-span"
    }, t('loadingTokens'));
  }
  const sendableTokens = tokensWithBalances.filter(token => !token.isERC721);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, sendableTokens.map(tokenData => {
    const {
      address,
      symbol,
      image
    } = tokenData;
    return /*#__PURE__*/_react.default.createElement("div", {
      key: address,
      className: "token-list-item",
      onClick: () => clickHandler(tokenData)
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 36,
      image: image
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list-item__data"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list-item__symbol"
    }, symbol), /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list-item__balance"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "token-list-item__balance__label"
    }, `${t('balance')}:`), /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: tokenData
    }))));
  }));
}
TokenListDisplay.propTypes = {
  clickHandler: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\token-list-display\\token-list-display.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-list\\index.js", {"./token-list":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-list\\token-list.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctoken-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenList.default;
  }
});
var _tokenList = _interopRequireDefault(require("./token-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\token-list\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-list\\token-list.js", {"../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTokenTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../token-cell":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\token-cell\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctoken-list%5Ctoken-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenList;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _reactRedux = require("react-redux");
var _tokenCell = _interopRequireDefault(require("../token-cell"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _useTokenTracker = require("../../../hooks/useTokenTracker");
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function TokenList({
  onTokenClick
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const shouldHideZeroBalanceTokens = (0, _reactRedux.useSelector)(_selectors.getShouldHideZeroBalanceTokens);
  // use `isEqual` comparison function because the token array is serialized
  // from the background so it has a new reference with each background update,
  // even if the tokens haven't changed
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens, _lodash.isEqual);
  const {
    loading,
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)(tokens, true, shouldHideZeroBalanceTokens);
  if (loading) {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        display: 'flex',
        height: '250px',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '30px'
      }
    }, t('loadingTokens'));
  }
  return /*#__PURE__*/_react.default.createElement("div", null, tokensWithBalances.map((tokenData, index) => {
    return /*#__PURE__*/_react.default.createElement(_tokenCell.default, _extends({
      key: index
    }, tokenData, {
      onClick: onTokenClick
    }));
  }));
}
TokenList.propTypes = {
  onTokenClick: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\token-list\\token-list.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\index.js", {"./transaction-activity-log.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-activity-log%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionActivityLog.default;
  }
});
var _transactionActivityLog = _interopRequireDefault(require("./transaction-activity-log.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-activity-log\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\index.js", {"./transaction-activity-log-icon.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\transaction-activity-log-icon.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-activity-log%5Ctransaction-activity-log-icon%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionActivityLogIcon.default;
  }
});
var _transactionActivityLogIcon = _interopRequireDefault(require("./transaction-activity-log-icon.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\transaction-activity-log-icon.component.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../transaction-activity-log.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-activity-log%5Ctransaction-activity-log-icon%5Ctransaction-activity-log-icon.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ACTIVITY_ICONS = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _transactionActivityLog = require("../transaction-activity-log.constants");
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const ACTIVITY_ICONS = {
  [_transactionActivityLog.TRANSACTION_CREATED_EVENT]: _componentLibrary.IconName.Add,
  [_transactionActivityLog.TRANSACTION_SUBMITTED_EVENT]: _componentLibrary.IconName.ArrowUp,
  [_transactionActivityLog.TRANSACTION_RESUBMITTED_EVENT]: _componentLibrary.IconName.ProgrammingArrows,
  [_transactionActivityLog.TRANSACTION_CONFIRMED_EVENT]: _componentLibrary.IconName.Check,
  [_transactionActivityLog.TRANSACTION_DROPPED_EVENT]: _componentLibrary.IconName.Close,
  [_transactionActivityLog.TRANSACTION_ERRORED_EVENT]: _componentLibrary.IconName.Danger,
  [_transactionActivityLog.TRANSACTION_CANCEL_ATTEMPTED_EVENT]: _componentLibrary.IconName.Close,
  [_transactionActivityLog.TRANSACTION_CANCEL_SUCCESS_EVENT]: _componentLibrary.IconName.Close
};
exports.ACTIVITY_ICONS = ACTIVITY_ICONS;
class TransactionActivityLogIcon extends _react.PureComponent {
  render() {
    const {
      className,
      eventKey
    } = this.props;
    const icon = ACTIVITY_ICONS[eventKey];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('transaction-activity-log-icon', className)
    }, icon ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: icon,
      color: _designSystem.Color.iconDefault,
      size: _componentLibrary.IconSize.Sm
    }) : null);
  }
}
exports.default = TransactionActivityLogIcon;
_defineProperty(TransactionActivityLogIcon, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(TransactionActivityLogIcon, "propTypes", {
  className: _propTypes.default.string,
  eventKey: _propTypes.default.oneOf(Object.keys(ACTIVITY_ICONS))
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\transaction-activity-log-icon.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.component.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","./transaction-activity-log-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log-icon\\index.js","./transaction-activity-log.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-activity-log%5Ctransaction-activity-log.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _etherscanLink = require("@metamask/etherscan-link");
var _util = require("../../../helpers/utils/util");
var _metametrics = require("../../../../shared/constants/metametrics");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _transactionActivityLogIcon = _interopRequireDefault(require("./transaction-activity-log-icon"));
var _transactionActivityLog = require("./transaction-activity-log.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class TransactionActivityLog extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleActivityClick", activity => {
      const {
        rpcPrefs
      } = this.props;
      const etherscanUrl = (0, _etherscanLink.getBlockExplorerLink)(activity, rpcPrefs);
      this.context.trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Transactions,
        event: 'Clicked Block Explorer Link',
        properties: {
          link_type: 'Transaction Block Explorer',
          action: 'Activity Details',
          block_explorer_domain: (0, _util.getURLHostName)(etherscanUrl)
        }
      });
      global.platform.openTab({
        url: etherscanUrl
      });
    });
  }
  renderInlineRetry(index) {
    const {
      t
    } = this.context;
    const {
      inlineRetryIndex,
      primaryTransaction = {},
      onRetry,
      isEarliestNonce
    } = this.props;
    const {
      status
    } = primaryTransaction;
    return isEarliestNonce && status !== _transactionActivityLog.CONFIRMED_STATUS && index === inlineRetryIndex ? /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__action-link",
      onClick: onRetry
    }, t('speedUpTransaction')) : null;
  }
  renderInlineCancel(index) {
    const {
      t
    } = this.context;
    const {
      inlineCancelIndex,
      primaryTransaction = {},
      onCancel,
      isEarliestNonce
    } = this.props;
    const {
      status
    } = primaryTransaction;
    return isEarliestNonce && status !== _transactionActivityLog.CONFIRMED_STATUS && index === inlineCancelIndex ? /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__action-link",
      onClick: onCancel
    }, t('speedUpCancellation')) : null;
  }
  renderActivity(activity, index) {
    const {
      conversionRate,
      nativeCurrency
    } = this.props;
    const {
      eventKey,
      value,
      timestamp
    } = activity;
    const ethValue = `${(0, _conversion.getValueFromWeiHex)({
      value,
      fromCurrency: 'ETH',
      toCurrency: 'ETH',
      conversionRate,
      numberOfDecimals: 6
    })} ${nativeCurrency}`;
    const formattedTimestamp = (0, _util.formatDate)(timestamp, "T 'on' M/d/y");
    const activityText = this.context.t(eventKey, [ethValue, formattedTimestamp]);
    return /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: "transaction-activity-log__activity"
    }, /*#__PURE__*/_react.default.createElement(_transactionActivityLogIcon.default, {
      className: "transaction-activity-log__activity-icon",
      eventKey: eventKey
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__entry-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__activity-text",
      title: activityText,
      onClick: () => this.handleActivityClick(activity)
    }, activityText), this.renderInlineRetry(index), this.renderInlineCancel(index)));
  }
  render() {
    const {
      t
    } = this.context;
    const {
      className,
      activities
    } = this.props;
    if (activities.length === 0) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('transaction-activity-log', className)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__title"
    }, t('activityLog')), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-activity-log__activities-container"
    }, activities.map((activity, index) => this.renderActivity(activity, index))));
  }
}
exports.default = TransactionActivityLog;
_defineProperty(TransactionActivityLog, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
_defineProperty(TransactionActivityLog, "propTypes", {
  activities: _propTypes.default.array,
  className: _propTypes.default.string,
  conversionRate: _propTypes.default.number,
  inlineRetryIndex: _propTypes.default.number,
  inlineCancelIndex: _propTypes.default.number,
  nativeCurrency: _propTypes.default.string,
  onCancel: _propTypes.default.func,
  onRetry: _propTypes.default.func,
  primaryTransaction: _propTypes.default.object,
  isEarliestNonce: _propTypes.default.bool,
  rpcPrefs: _propTypes.default.object
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-activity-log\\transaction-activity-log.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-activity-log%5Ctransaction-activity-log.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TRANSACTION_UPDATED_EVENT = exports.TRANSACTION_SUBMITTED_EVENT = exports.TRANSACTION_RESUBMITTED_EVENT = exports.TRANSACTION_ERRORED_EVENT = exports.TRANSACTION_DROPPED_EVENT = exports.TRANSACTION_CREATED_EVENT = exports.TRANSACTION_CONFIRMED_EVENT = exports.TRANSACTION_CANCEL_SUCCESS_EVENT = exports.TRANSACTION_CANCEL_ATTEMPTED_EVENT = exports.SUBMITTED_STATUS = exports.DROPPED_STATUS = exports.CONFIRMED_STATUS = void 0;
const TRANSACTION_CREATED_EVENT = 'transactionCreated';
exports.TRANSACTION_CREATED_EVENT = TRANSACTION_CREATED_EVENT;
const TRANSACTION_SUBMITTED_EVENT = 'transactionSubmitted';
exports.TRANSACTION_SUBMITTED_EVENT = TRANSACTION_SUBMITTED_EVENT;
const TRANSACTION_RESUBMITTED_EVENT = 'transactionResubmitted';
exports.TRANSACTION_RESUBMITTED_EVENT = TRANSACTION_RESUBMITTED_EVENT;
const TRANSACTION_CONFIRMED_EVENT = 'transactionConfirmed';
exports.TRANSACTION_CONFIRMED_EVENT = TRANSACTION_CONFIRMED_EVENT;
const TRANSACTION_DROPPED_EVENT = 'transactionDropped';
exports.TRANSACTION_DROPPED_EVENT = TRANSACTION_DROPPED_EVENT;
const TRANSACTION_UPDATED_EVENT = 'transactionUpdated';
exports.TRANSACTION_UPDATED_EVENT = TRANSACTION_UPDATED_EVENT;
const TRANSACTION_ERRORED_EVENT = 'transactionErrored';
exports.TRANSACTION_ERRORED_EVENT = TRANSACTION_ERRORED_EVENT;
const TRANSACTION_CANCEL_ATTEMPTED_EVENT = 'transactionCancelAttempted';
exports.TRANSACTION_CANCEL_ATTEMPTED_EVENT = TRANSACTION_CANCEL_ATTEMPTED_EVENT;
const TRANSACTION_CANCEL_SUCCESS_EVENT = 'transactionCancelSuccess';
exports.TRANSACTION_CANCEL_SUCCESS_EVENT = TRANSACTION_CANCEL_SUCCESS_EVENT;
const SUBMITTED_STATUS = 'submitted';
exports.SUBMITTED_STATUS = SUBMITTED_STATUS;
const CONFIRMED_STATUS = 'confirmed';
exports.CONFIRMED_STATUS = CONFIRMED_STATUS;
const DROPPED_STATUS = 'dropped';
exports.DROPPED_STATUS = DROPPED_STATUS;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.container.js", {"../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./transaction-activity-log.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.component.js","./transaction-activity-log.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js","./transaction-activity-log.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.util.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-activity-log%5Ctransaction-activity-log.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _transactionActivityLog = _interopRequireDefault(require("./transaction-activity-log.component"));
var _transactionActivityLog2 = require("./transaction-activity-log.util");
var _transactionActivityLog3 = require("./transaction-activity-log.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const matchesEventKey = matchEventKey => ({
  eventKey
}) => eventKey === matchEventKey;
const mapStateToProps = state => {
  return {
    conversionRate: (0, _selectors.conversionRateSelector)(state),
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state)
  };
};
const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    transactionGroup: {
      transactions = [],
      primaryTransaction
    } = {},
    ...restOwnProps
  } = ownProps;
  const activities = (0, _transactionActivityLog2.combineTransactionHistories)(transactions);
  const inlineRetryIndex = (0, _lodash.findLastIndex)(activities, matchesEventKey(_transactionActivityLog3.TRANSACTION_RESUBMITTED_EVENT));
  const inlineCancelIndex = (0, _lodash.findLastIndex)(activities, matchesEventKey(_transactionActivityLog3.TRANSACTION_CANCEL_ATTEMPTED_EVENT));
  return {
    ...stateProps,
    ...dispatchProps,
    ...restOwnProps,
    activities,
    inlineRetryIndex,
    inlineCancelIndex,
    primaryTransaction
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps, null, mergeProps)(_transactionActivityLog.default);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-activity-log\\transaction-activity-log.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.util.js", {"../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","./transaction-activity-log.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\transaction-activity-log.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-activity-log%5Ctransaction-activity-log.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineTransactionHistories = combineTransactionHistories;
exports.getActivities = getActivities;
var _transaction = require("../../../../shared/constants/transaction");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _confirmTx = require("../../../helpers/utils/confirm-tx.util");
var _transactionActivityLog = require("./transaction-activity-log.constants");
// path constants
const STATUS_PATH = '/status';
const GAS_PRICE_PATH = '/txParams/gasPrice';
const GAS_LIMIT_PATH = '/txParams/gas';
const ESTIMATE_BASE_FEE_PATH = '/estimatedBaseFee';
const BLOCKTIMESTAMP = '/blockTimestamp';

// op constants
const REPLACE_OP = 'replace';
const eventPathsHash = {
  [STATUS_PATH]: true,
  [GAS_PRICE_PATH]: true,
  [GAS_LIMIT_PATH]: true,
  [BLOCKTIMESTAMP]: true
};
const statusHash = {
  [_transactionActivityLog.SUBMITTED_STATUS]: _transactionActivityLog.TRANSACTION_SUBMITTED_EVENT,
  [_transactionActivityLog.CONFIRMED_STATUS]: _transactionActivityLog.TRANSACTION_CONFIRMED_EVENT,
  [_transactionActivityLog.DROPPED_STATUS]: _transactionActivityLog.TRANSACTION_DROPPED_EVENT
};

/**
 * @name getActivities
 * @param {object} transaction - txMeta object
 * @param {boolean} isFirstTransaction - True if the transaction is the first created transaction
 * in the list of transactions with the same nonce. If so, we use this transaction to create the
 * transactionCreated activity.
 * @returns {Array}
 */
function getActivities(transaction, isFirstTransaction = false) {
  const {
    id,
    chainId,
    metamaskNetworkId,
    hash,
    history = [],
    txParams: {
      gas: paramsGasLimit,
      gasPrice: paramsGasPrice,
      maxPriorityFeePerGas: paramsMaxPriorityFeePerGas
    },
    txReceipt: {
      status
    } = {},
    type,
    estimatedBaseFee: paramsEstimatedBaseFee
  } = transaction;
  const paramsEip1559Price = paramsEstimatedBaseFee && paramsMaxPriorityFeePerGas && (0, _conversion.sumHexes)(paramsEstimatedBaseFee, paramsMaxPriorityFeePerGas);
  let cachedGasLimit = '0x0';
  let cachedGasPrice = '0x0';
  const historyActivities = history.reduce((acc, base, index) => {
    // First history item should be transaction creation
    if (index === 0 && !Array.isArray(base) && base.txParams) {
      const {
        time: timestamp,
        estimatedBaseFee,
        txParams: {
          value,
          gas = '0x0',
          gasPrice,
          maxPriorityFeePerGas
        } = {}
      } = base;
      const eip1559Price = estimatedBaseFee && maxPriorityFeePerGas && (0, _conversion.sumHexes)(estimatedBaseFee, maxPriorityFeePerGas);
      // The cached gas limit and gas price are used to display the gas fee in the activity log. We
      // need to cache these values because the status update history events don't provide us with
      // the latest gas limit and gas price.
      cachedGasLimit = gas;
      cachedGasPrice = eip1559Price || gasPrice || paramsGasPrice || '0x0';
      if (isFirstTransaction) {
        return acc.concat({
          id,
          hash,
          chainId,
          metamaskNetworkId,
          eventKey: _transactionActivityLog.TRANSACTION_CREATED_EVENT,
          timestamp,
          value
        });
      }
      // An entry in the history may be an array of more sub-entries.
    } else if (Array.isArray(base)) {
      const events = [];
      base.forEach(entry => {
        const {
          op,
          path,
          value,
          timestamp: entryTimestamp
        } = entry;
        // Not all sub-entries in a history entry have a timestamp. If the sub-entry does not have a
        // timestamp, the first sub-entry in a history entry should.
        const timestamp = entryTimestamp || base[0] && base[0].timestamp;
        const isAddBaseFee = path === ESTIMATE_BASE_FEE_PATH && op === 'add';
        if (path in eventPathsHash && op === REPLACE_OP || isAddBaseFee) {
          switch (path) {
            case STATUS_PATH:
              {
                const gasFee = cachedGasLimit === '0x0' && cachedGasPrice === '0x0' ? (0, _confirmTx.getHexGasTotal)({
                  gasLimit: paramsGasLimit,
                  gasPrice: paramsEip1559Price || paramsGasPrice
                }) : (0, _confirmTx.getHexGasTotal)({
                  gasLimit: cachedGasLimit,
                  gasPrice: cachedGasPrice
                });
                if (value in statusHash) {
                  let eventKey = statusHash[value];

                  // If the status is 'submitted', we need to determine whether the event is a
                  // transaction retry or a cancellation attempt.
                  if (value === _transactionActivityLog.SUBMITTED_STATUS) {
                    if (type === _transaction.TransactionType.retry) {
                      eventKey = _transactionActivityLog.TRANSACTION_RESUBMITTED_EVENT;
                    } else if (type === _transaction.TransactionType.cancel) {
                      eventKey = _transactionActivityLog.TRANSACTION_CANCEL_ATTEMPTED_EVENT;
                    }
                  } else if (value === _transactionActivityLog.CONFIRMED_STATUS) {
                    if (type === _transaction.TransactionType.cancel) {
                      eventKey = _transactionActivityLog.TRANSACTION_CANCEL_SUCCESS_EVENT;
                    }
                  }
                  events.push({
                    id,
                    hash,
                    eventKey,
                    timestamp,
                    chainId,
                    metamaskNetworkId,
                    value: gasFee
                  });
                }
                break;
              }

            // If the gas price or gas limit has been changed, we update the gasFee of the
            // previously submitted event. These events happen when the gas limit and gas price is
            // changed at the confirm screen.
            case GAS_PRICE_PATH:
            case GAS_LIMIT_PATH:
            case ESTIMATE_BASE_FEE_PATH:
              {
                const lastEvent = events[events.length - 1] || {};
                const {
                  lastEventKey
                } = lastEvent;
                if (path === GAS_LIMIT_PATH) {
                  cachedGasLimit = value;
                } else if (path === GAS_PRICE_PATH) {
                  cachedGasPrice = value;
                } else if (path === ESTIMATE_BASE_FEE_PATH) {
                  var _base$txParams;
                  cachedGasPrice = paramsEip1559Price || (base === null || base === void 0 ? void 0 : (_base$txParams = base.txParams) === null || _base$txParams === void 0 ? void 0 : _base$txParams.gasPrice);
                  lastEvent.value = (0, _confirmTx.getHexGasTotal)({
                    gasLimit: paramsGasLimit,
                    gasPrice: cachedGasPrice
                  });
                }
                if (lastEventKey === _transactionActivityLog.TRANSACTION_SUBMITTED_EVENT || lastEventKey === _transactionActivityLog.TRANSACTION_RESUBMITTED_EVENT) {
                  lastEvent.value = (0, _confirmTx.getHexGasTotal)({
                    gasLimit: cachedGasLimit,
                    gasPrice: cachedGasPrice
                  });
                }
                break;
              }
            case BLOCKTIMESTAMP:
              {
                const filteredAcc = acc.find(ac => ac.eventKey === _transactionActivityLog.TRANSACTION_CONFIRMED_EVENT);
                if (filteredAcc !== undefined) {
                  filteredAcc.timestamp = new Date(parseInt(entry.value, 16) * 1000).getTime();
                }
                break;
              }
            default:
              {
                events.push({
                  id,
                  hash,
                  chainId,
                  metamaskNetworkId,
                  eventKey: _transactionActivityLog.TRANSACTION_UPDATED_EVENT,
                  timestamp
                });
              }
          }
        }
      });
      return acc.concat(events);
    }
    return acc;
  }, []);

  // If txReceipt.status is '0x0', that means that an on-chain error occurred for the transaction,
  // so we add an error entry to the Activity Log.
  return status === '0x0' ? historyActivities.concat({
    id,
    hash,
    chainId,
    metamaskNetworkId,
    eventKey: _transactionActivityLog.TRANSACTION_ERRORED_EVENT
  }) : historyActivities;
}

/**
 * @description Removes "Transaction dropped" activities from a list of sorted activities if one of
 * the transactions has been confirmed. Typically, if multiple transactions have the same nonce,
 * once one transaction is confirmed, the rest are dropped. In this case, we don't want to show
 * multiple "Transaction dropped" activities, and instead want to show a single "Transaction
 * confirmed".
 * @param {Array} activities - List of sorted activities generated from the getActivities function.
 * @returns {Array}
 */
function filterSortedActivities(activities) {
  const filteredActivities = [];
  const hasConfirmedActivity = Boolean(activities.find(({
    eventKey
  }) => eventKey === _transactionActivityLog.TRANSACTION_CONFIRMED_EVENT || eventKey === _transactionActivityLog.TRANSACTION_CANCEL_SUCCESS_EVENT));
  let addedDroppedActivity = false;
  activities.forEach(activity => {
    if (activity.eventKey === _transactionActivityLog.TRANSACTION_DROPPED_EVENT) {
      if (!hasConfirmedActivity && !addedDroppedActivity) {
        filteredActivities.push(activity);
        addedDroppedActivity = true;
      }
    } else {
      filteredActivities.push(activity);
    }
  });
  return filteredActivities;
}

/**
 * Combines the histories of an array of transactions into a single array.
 *
 * @param {Array} transactions - Array of txMeta transaction objects.
 * @returns {Array}
 */
function combineTransactionHistories(transactions = []) {
  if (!transactions.length) {
    return [];
  }
  const activities = [];
  transactions.forEach((transaction, index) => {
    // The first transaction should be the transaction with the earliest submittedTime. We show the
    // 'created' and 'submitted' activities here. All subsequent transactions will use 'resubmitted'
    // instead.
    const transactionActivities = getActivities(transaction, index === 0);
    activities.push(...transactionActivities);
  });
  const sortedActivities = activities.sort((a, b) => a.timestamp - b.timestamp);
  return filterSortedActivities(sortedActivities);
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-activity-log\\transaction-activity-log.util.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-alerts\\index.js", {"./transaction-alerts":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-alerts\\transaction-alerts.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-alerts%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionAlerts.default;
  }
});
var _transactionAlerts = _interopRequireDefault(require("./transaction-alerts"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-alerts\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-alerts\\transaction-alerts.js", {"../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/simulation-error-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\simulation-error-message\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-alerts%5Ctransaction-alerts.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _gas = require("../../../../shared/constants/gas");
var _selectors = require("../../../selectors");
var _gasFee = require("../../../contexts/gasFee");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _componentLibrary = require("../../component-library");
var _simulationErrorMessage = _interopRequireDefault(require("../../ui/simulation-error-message"));
var _designSystem = require("../../../helpers/constants/design-system");
var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const TransactionAlerts = ({
  userAcknowledgedGasMissing,
  setUserAcknowledgedGasMissing
}) => {
  const {
    estimateUsed,
    hasSimulationError,
    supportsEIP1559,
    isNetworkBusy
  } = (0, _gasFee.useGasFeeContext)();
  const pendingTransactions = (0, _reactRedux.useSelector)(_selectors.submittedPendingTransactionsSelector);
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-alerts"
  }, supportsEIP1559 && hasSimulationError && /*#__PURE__*/_react.default.createElement(_simulationErrorMessage.default, {
    userAcknowledgedGasMissing: userAcknowledgedGasMissing,
    setUserAcknowledgedGasMissing: setUserAcknowledgedGasMissing
  }), supportsEIP1559 && (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) > 0 && /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.WARNING
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "p"
  }, /*#__PURE__*/_react.default.createElement("strong", null, (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) === 1 ? t('pendingTransactionSingle', [pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length]) : t('pendingTransactionMultiple', [pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length])), ' ', t('pendingTransactionInfo'), t('learnCancelSpeeedup', [/*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    key: "cancelSpeedUpInfo",
    href: _zendeskUrl.default.SPEEDUP_CANCEL,
    rel: "noopener noreferrer",
    target: "_blank"
  }, t('cancelSpeedUp'))]))), estimateUsed === _gas.PriorityLevels.low && /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    "data-testid": "low-gas-fee-alert",
    severity: _designSystem.SEVERITIES.WARNING
  }, t('lowPriorityMessage')), supportsEIP1559 && isNetworkBusy ? /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.WARNING
  }, t('networkIsBusy')) : null);
};
TransactionAlerts.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool,
  setUserAcknowledgedGasMissing: _propTypes.default.func
};
var _default = TransactionAlerts;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-alerts\\transaction-alerts.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\index.js", {"./transaction-breakdown.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-breakdown%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionBreakdown.default;
  }
});
var _transactionBreakdown = _interopRequireDefault(require("./transaction-breakdown.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-breakdown\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\index.js", {"./transaction-breakdown-row.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\transaction-breakdown-row.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-breakdown%5Ctransaction-breakdown-row%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionBreakdownRow.default;
  }
});
var _transactionBreakdownRow = _interopRequireDefault(require("./transaction-breakdown-row.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\transaction-breakdown-row.component.js", {"classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-breakdown%5Ctransaction-breakdown-row%5Ctransaction-breakdown-row.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class TransactionBreakdownRow extends _react.PureComponent {
  render() {
    const {
      title,
      children,
      className,
      divider = false
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('transaction-breakdown-row', divider ? 'transaction-breakdown-row--with-bottom-border' : '', className),
      "data-testid": "transaction-breakdown-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-breakdown-row__title",
      "data-testid": "transaction-breakdown-row-title"
    }, title), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-breakdown-row__value",
      "data-testid": "transaction-breakdown-row-value"
    }, children));
  }
}
exports.default = TransactionBreakdownRow;
_defineProperty(TransactionBreakdownRow, "propTypes", {
  title: _propTypes.default.string,
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  divider: _propTypes.default.bool
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\transaction-breakdown-row.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown.component.js", {"../../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../ui/currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","../../ui/hex-to-decimal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\hex-to-decimal\\index.js","../user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","./transaction-breakdown-row":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown-row\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-breakdown%5Ctransaction-breakdown.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));
var _hexToDecimal = _interopRequireDefault(require("../../ui/hex-to-decimal"));
var _common = require("../../../helpers/constants/common");
var _common2 = require("../../../../shared/constants/common");
var _transactionBreakdownRow = _interopRequireDefault(require("./transaction-breakdown-row"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class TransactionBreakdown extends _react.PureComponent {
  render() {
    const {
      t
    } = this.context;
    const {
      gas,
      gasPrice,
      maxFeePerGas,
      primaryCurrency,
      className,
      nonce,
      nativeCurrency,
      showFiat,
      totalInHex,
      gasUsed,
      isTokenApprove,
      baseFee,
      priorityFee,
      hexGasTotal,
      isEIP1559Transaction,
      isMultiLayerFeeNetwork,
      l1HexGasTotal
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('transaction-breakdown', className)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-breakdown__title"
    }, t('transaction')), /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      divider: true,
      title: t('nonce')
    }, typeof nonce === 'undefined' ? null : /*#__PURE__*/_react.default.createElement(_hexToDecimal.default, {
      className: "transaction-breakdown__value",
      value: nonce
    })), /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: isTokenApprove ? t('spendingCap') : t('amount')
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "transaction-breakdown__value transaction-breakdown__value--amount"
    }, primaryCurrency)), /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: isMultiLayerFeeNetwork ? t('transactionHistoryL2GasLimitLabel') : `${t('gasLimit')} (${t('units')})`,
      className: "transaction-breakdown__row-title"
    }, typeof gas === 'undefined' ? '?' : /*#__PURE__*/_react.default.createElement(_hexToDecimal.default, {
      className: "transaction-breakdown__value",
      value: gas
    })), typeof gasUsed === 'string' && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: `${t('gasUsed')} (${t('units')})`,
      className: "transaction-breakdown__row-title"
    }, /*#__PURE__*/_react.default.createElement(_hexToDecimal.default, {
      className: "transaction-breakdown__value",
      value: gasUsed
    })), isEIP1559Transaction && typeof baseFee !== 'undefined' ? /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('transactionHistoryBaseFee')
    }, /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__base-fee",
      currency: nativeCurrency,
      denomination: _common2.EtherDenomination.GWEI,
      value: baseFee,
      numberOfDecimals: 10,
      hideLabel: true
    })) : null, isEIP1559Transaction && typeof priorityFee !== 'undefined' ? /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('transactionHistoryPriorityFee')
    }, /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__priority-fee",
      currency: nativeCurrency,
      denomination: _common2.EtherDenomination.GWEI,
      value: priorityFee,
      numberOfDecimals: 10,
      hideLabel: true
    })) : null, !isEIP1559Transaction && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: isMultiLayerFeeNetwork ? t('transactionHistoryL2GasPriceLabel') : t('advancedGasPriceTitle')
    }, typeof gasPrice === 'undefined' ? '?' : /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__gas-price",
      currency: nativeCurrency,
      denomination: _common2.EtherDenomination.GWEI,
      value: gasPrice,
      numberOfDecimals: 9,
      hideLabel: true
    })), isEIP1559Transaction && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('transactionHistoryTotalGasFee')
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__effective-gas-price",
      currency: nativeCurrency,
      denomination: _common2.EtherDenomination.ETH,
      numberOfDecimals: 6,
      value: hexGasTotal,
      type: _common.PRIMARY
    }), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      type: _common.SECONDARY,
      value: hexGasTotal
    })), isEIP1559Transaction && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      divider: true,
      title: t('transactionHistoryMaxFeePerGas')
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      currency: nativeCurrency,
      denomination: _common2.EtherDenomination.ETH,
      numberOfDecimals: 9,
      value: maxFeePerGas,
      type: _common.PRIMARY
    }), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      type: _common.SECONDARY,
      value: maxFeePerGas
    })), isMultiLayerFeeNetwork && /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('transactionHistoryL1GasLabel')
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      "data-testid": "transaction-breakdown__l1-gas-total",
      numberOfDecimals: 18,
      value: l1HexGasTotal,
      type: _common.PRIMARY
    }), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      type: _common.SECONDARY,
      value: l1HexGasTotal
    })), /*#__PURE__*/_react.default.createElement(_transactionBreakdownRow.default, {
      title: t('total')
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value transaction-breakdown__value--eth-total",
      type: _common.PRIMARY,
      value: totalInHex,
      numberOfDecimals: isMultiLayerFeeNetwork ? 18 : null
    }), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: "transaction-breakdown__value",
      type: _common.SECONDARY,
      value: totalInHex
    })));
  }
}
exports.default = TransactionBreakdown;
_defineProperty(TransactionBreakdown, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(TransactionBreakdown, "propTypes", {
  className: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  showFiat: _propTypes.default.bool,
  nonce: _propTypes.default.string,
  primaryCurrency: _propTypes.default.string,
  isTokenApprove: _propTypes.default.bool,
  gas: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gasPrice: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  maxFeePerGas: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  gasUsed: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  totalInHex: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  baseFee: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  priorityFee: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  hexGasTotal: _propTypes.default.string,
  isEIP1559Transaction: _propTypes.default.bool,
  isMultiLayerFeeNetwork: _propTypes.default.bool,
  l1HexGasTotal: _propTypes.default.string
});
_defineProperty(TransactionBreakdown, "defaultProps", {
  showFiat: true
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-breakdown\\transaction-breakdown.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown.container.js", {"../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/transaction.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\transaction.utils.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/utils/confirm-tx.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\confirm-tx.util.ts","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./transaction-breakdown.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\transaction-breakdown.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-breakdown%5Ctransaction-breakdown.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _confirmTx = require("../../../helpers/utils/confirm-tx.util");
var _transaction = require("../../../../shared/modules/transaction.utils");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _transactionBreakdown = _interopRequireDefault(require("./transaction-breakdown.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (state, ownProps) => {
  const {
    transaction,
    isTokenApprove
  } = ownProps;
  const {
    txParams: {
      gas,
      gasPrice,
      maxFeePerGas,
      value
    } = {},
    txReceipt: {
      gasUsed,
      effectiveGasPrice,
      l1Fee: l1HexGasTotal
    } = {},
    baseFeePerGas
  } = transaction;
  const gasLimit = typeof gasUsed === 'string' ? gasUsed : gas;
  const priorityFee = effectiveGasPrice && baseFeePerGas && (0, _conversion.subtractHexes)(effectiveGasPrice, baseFeePerGas);

  // To calculate the total cost of the transaction, we use gasPrice if it is in the txParam,
  // which will only be the case on non-EIP1559 networks. If it is not in the params, we can
  // use the effectiveGasPrice from the receipt, which will ultimately represent to true cost
  // of the transaction. Either of these are used the same way with gasLimit to calculate total
  // cost. effectiveGasPrice will be available on the txReciept for all EIP1559 networks
  const usedGasPrice = gasPrice || effectiveGasPrice;
  const hexGasTotal = gasLimit && usedGasPrice && (0, _confirmTx.getHexGasTotal)({
    gasLimit,
    gasPrice: usedGasPrice
  }) || '0x0';
  let totalInHex = (0, _conversion.sumHexes)(hexGasTotal, value);
  const isMultiLayerFeeNetwork = (0, _selectors.getIsMultiLayerFeeNetwork)(state) && l1HexGasTotal !== undefined;
  if (isMultiLayerFeeNetwork) {
    totalInHex = (0, _conversion.sumHexes)(totalInHex, l1HexGasTotal);
  }
  return {
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    showFiat: (0, _selectors.getShouldShowFiat)(state),
    totalInHex,
    gas,
    gasPrice,
    maxFeePerGas,
    gasUsed,
    isTokenApprove,
    hexGasTotal,
    priorityFee,
    baseFee: baseFeePerGas,
    isEIP1559Transaction: (0, _transaction.isEIP1559Transaction)(transaction),
    isMultiLayerFeeNetwork,
    l1HexGasTotal
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps)(_transactionBreakdown.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-breakdown\\transaction-breakdown.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\address.component.js", {"../../../../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../../../modals/nickname-popovers":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\modals\\nickname-popovers\\index.js","copy-to-clipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Ccomponents%5Cdecoding%5Caddress%5Caddress.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _util = require("../../../../../../helpers/utils/util");
var _identicon = _interopRequireDefault(require("../../../../../ui/identicon"));
var _useI18nContext = require("../../../../../../hooks/useI18nContext");
var _selectors = require("../../../../../../selectors");
var _nicknamePopovers = _interopRequireDefault(require("../../../../modals/nickname-popovers"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Address = ({
  checksummedRecipientAddress,
  onRecipientClick,
  addressOnly,
  recipientEns,
  recipientName
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [showNicknamePopovers, setShowNicknamePopovers] = (0, _react.useState)(false);
  const addressBook = (0, _reactRedux.useSelector)(_selectors.getMemoizedAddressBook);
  const addressBookEntryObject = addressBook.find(entry => entry.address.toLowerCase() === checksummedRecipientAddress.toLowerCase());
  const recipientNickname = addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.name;
  const recipientMetadataName = (0, _reactRedux.useSelector)(state => (0, _selectors.getMemoizedMetadataContractName)(state, checksummedRecipientAddress));
  const recipientToRender = addressOnly ? recipientName || recipientNickname || recipientMetadataName || recipientEns || (0, _util.shortenAddress)(checksummedRecipientAddress) : recipientName || recipientNickname || recipientMetadataName || recipientEns || t('newContract');
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight tx-insight-component tx-insight-component-address",
    onClick: () => {
      (0, _copyToClipboard.default)(checksummedRecipientAddress);
      if (onRecipientClick) {
        onRecipientClick();
      }
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight-component-address__sender-icon"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: checksummedRecipientAddress,
    diameter: 18
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight-component-address__name",
    onClick: () => setShowNicknamePopovers(true)
  }, recipientToRender), showNicknamePopovers ? /*#__PURE__*/_react.default.createElement(_nicknamePopovers.default, {
    onClose: () => setShowNicknamePopovers(false),
    address: checksummedRecipientAddress
  }) : null);
};
Address.propTypes = {
  checksummedRecipientAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientEns: _propTypes.default.string,
  addressOnly: _propTypes.default.bool,
  onRecipientClick: _propTypes.default.func
};
var _default = Address;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\address.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\index.js", {"./address.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\address.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Ccomponents%5Cdecoding%5Caddress%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _address.default;
  }
});
var _address = _interopRequireDefault(require("./address.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\accreditation.component.js", {"../../../../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../../../../ui/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\index.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Ccomponents%5Cui%5Caccreditation%5Caccreditation.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _selectors = require("../../../../../../selectors");
var _i18n = require("../../../../../../contexts/i18n");
var _designSystem = require("../../../../../../helpers/constants/design-system");
var _button = _interopRequireDefault(require("../../../../../ui/button"));
var _typography = _interopRequireDefault(require("../../../../../ui/typography"));
var _componentLibrary = require("../../../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Accreditation = ({
  fetchVia,
  address
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const addressLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
  const AccreditationLink = () => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H7,
      className: "accreditation__prefix",
      boxProps: {
        margin: 0
      }
    }, t('transactionDecodingAccreditationVerified', [/*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "accreditation__link",
      onClick: () => {
        global.platform.openTab({
          url: addressLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer",
      title: t('etherscanView'),
      key: "accreditation-link-button"
    }, fetchVia)])), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H7,
      boxProps: {
        margin: 0
      }
    }, t('transactionDecodingAccreditationDecoded')));
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation__icon"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Info
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation__info"
  }, /*#__PURE__*/_react.default.createElement(AccreditationLink, null)));
};
Accreditation.propTypes = {
  fetchVia: _propTypes.default.string.isRequired,
  address: _propTypes.default.string.isRequired
};
var _default = Accreditation;
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\accreditation.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\index.js", {"./accreditation.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\accreditation.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Ccomponents%5Cui%5Caccreditation%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accreditation.default;
  }
});
var _accreditation = _interopRequireDefault(require("./accreditation.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\copy-raw-data.component.js", {"../../../../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../../../../hooks/useCopyToClipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../../../ui/tooltip/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Ccomponents%5Cui%5Ccopy-raw-data%5Ccopy-raw-data.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _tooltip = _interopRequireDefault(require("../../../../../ui/tooltip/tooltip"));
var _i18n = require("../../../../../../contexts/i18n");
var _useCopyToClipboard = require("../../../../../../hooks/useCopyToClipboard");
var _componentLibrary = require("../../../../../component-library");
var _designSystem = require("../../../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const CopyRawData = ({
  data
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data"
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "right",
    title: copied ? t('copiedExclamation') : ''
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => {
      handleCopy(data);
    },
    className: "copy-raw-data__button"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data__icon"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: copied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
    color: _designSystem.IconColor.iconDefault
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data__label"
  }, t('copyRawTransactionData')))));
};
CopyRawData.propTypes = {
  data: _propTypes.default.string.isRequired
};
var _default = CopyRawData;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\copy-raw-data.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\index.js", {"./copy-raw-data.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\copy-raw-data.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Ccomponents%5Cui%5Ccopy-raw-data%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _copyRawData.default;
  }
});
var _copyRawData = _interopRequireDefault(require("./copy-raw-data.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\constants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Cconstants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FETCH_SUPPORTED_NETWORKS_URI = exports.FETCH_PROJECT_INFO_URI = void 0;
const TX_INSIGHTS_BASE_URI = 'https://tx-insights.metaswap.codefi.network';
const FETCH_PROJECT_INFO_URI = `${TX_INSIGHTS_BASE_URI}/fetch-project`;
exports.FETCH_PROJECT_INFO_URI = FETCH_PROJECT_INFO_URI;
const FETCH_SUPPORTED_NETWORKS_URI = `${TX_INSIGHTS_BASE_URI}/networks`;
exports.FETCH_SUPPORTED_NETWORKS_URI = FETCH_SUPPORTED_NETWORKS_URI;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\index.js", {"./transaction-decoding.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\transaction-decoding.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionDecoding.default;
  }
});
var _transactionDecoding = _interopRequireDefault(require("./transaction-decoding.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\transaction-decoding.component.js", {"../../../../shared/lib/fetch-with-cache":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\fetch-with-cache.js","../../../../shared/modules/conversion.utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../ui/error-message":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\error-message\\index.js","../../ui/spinner":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","./components/decoding/address":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\index.js","./components/ui/accreditation":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\accreditation\\index.js","./components/ui/copy-raw-data":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\components\\ui\\copy-raw-data\\index.js","./constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\constants.js","./transaction-decoding.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\transaction-decoding.util.js","@truffle/codec":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@truffle\\codec\\dist\\lib\\index.js","@truffle/decoder":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@truffle\\decoder\\dist\\index.js","browser-util-inspect":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\browser-util-inspect\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Ctransaction-decoding.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionDecoding;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _browserUtilInspect = _interopRequireDefault(require("browser-util-inspect"));
var _decoder = require("@truffle/decoder");
var _reactRedux = require("react-redux");
var Codec = _interopRequireWildcard(require("@truffle/codec"));
var _spinner = _interopRequireDefault(require("../../ui/spinner"));
var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));
var _fetchWithCache = _interopRequireDefault(require("../../../../shared/lib/fetch-with-cache"));
var _selectors = require("../../../selectors");
var _i18n = require("../../../contexts/i18n");
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _transactionDecoding = require("./transaction-decoding.util");
var _constants = require("./constants");
var _address = _interopRequireDefault(require("./components/decoding/address"));
var _copyRawData = _interopRequireDefault(require("./components/ui/copy-raw-data"));
var _accreditation = _interopRequireDefault(require("./components/ui/accreditation"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function TransactionDecoding({
  to = '',
  inputData: data = ''
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [tx, setTx] = (0, _react.useState)([]);
  const [sourceAddress, setSourceAddress] = (0, _react.useState)('');
  const [sourceFetchedVia, setSourceFetchedVia] = (0, _react.useState)('');
  const {
    address: from
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount);
  const network = (0, _conversion.hexToDecimal)((0, _reactRedux.useSelector)(_selectors.getCurrentChainId));
  const [loading, setLoading] = (0, _react.useState)(false);
  const [hasError, setError] = (0, _react.useState)(false);
  const [errorMessage, setErrorMessage] = (0, _react.useState)('');
  (0, _react.useEffect)(() => {
    (async () => {
      setLoading(true);
      try {
        const networks = await (0, _fetchWithCache.default)(_constants.FETCH_SUPPORTED_NETWORKS_URI, {
          method: 'GET'
        });
        if (!networks.some(n => n.active && Number(n.chainId) === Number(network))) {
          throw new Error(t('transactionDecodingUnsupportedNetworkError', [network]));
        }
        const requestUrl = `${_constants.FETCH_PROJECT_INFO_URI}?${new URLSearchParams({
          to,
          'network-id': network
        })}`;
        const response = await (0, _fetchWithCache.default)(requestUrl, {
          method: 'GET'
        });
        const {
          info: projectInfo,
          fetchedVia,
          address
        } = response;

        // update source information
        if (address) {
          setSourceAddress(address);
        }
        if (fetchedVia) {
          setSourceFetchedVia(fetchedVia);
        }

        // creating instance of the truffle decoder
        const decoder = await (0, _decoder.forAddress)(to, {
          provider: global.ethereumProvider,
          projectInfo
        });

        // decode tx input data
        const decoding = await decoder.decodeTransaction({
          from,
          to,
          input: data,
          blockNumber: null
        });

        // transform tx decoding arguments into tree data
        const params = (0, _transactionDecoding.transformTxDecoding)(decoding === null || decoding === void 0 ? void 0 : decoding.arguments);
        setTx(params);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        setError(true);
        if (error !== null && error !== void 0 && error.message.match('400')) {
          setErrorMessage(t('txInsightsNotSupported'));
        } else {
          setErrorMessage(error === null || error === void 0 ? void 0 : error.message);
        }
      }
    })();
  }, [t, from, to, network, data]);

  // ***********************************************************
  // component rendering methods
  // ***********************************************************
  const renderLeaf = ({
    name,
    kind,
    typeClass,
    value
  }) => {
    switch (kind) {
      case 'error':
        return /*#__PURE__*/_react.default.createElement("span", {
          className: "sol-item solidity-error"
        }, /*#__PURE__*/_react.default.createElement("span", null, t('malformedData')));
      default:
        switch (typeClass) {
          case 'int':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-int"
            }, [value.asBN || value.asString].toString());
          case 'uint':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-uint"
            }, [value.asBN || value.asString].toString());
          case 'bool':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item"
            }, String(value.asBoolean));
          case 'bytes':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-bytes"
            }, value.asHex);
          case 'string':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-string"
            }, value.asString);
          case 'array':
            return /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", {
              className: "typography--color-black"
            }, name, ": "), /*#__PURE__*/_react.default.createElement("ol", null, value.map((itemValue, index) => {
              var _itemValue$type, _itemValue$type2;
              return /*#__PURE__*/_react.default.createElement("li", {
                key: `${(_itemValue$type = itemValue.type) === null || _itemValue$type === void 0 ? void 0 : _itemValue$type.typeClass}-${index}`
              }, renderLeaf({
                typeClass: (_itemValue$type2 = itemValue.type) === null || _itemValue$type2 === void 0 ? void 0 : _itemValue$type2.typeClass,
                value: itemValue.value,
                kind: itemValue.kind
              }));
            })));
          case 'address':
            {
              const address = value === null || value === void 0 ? void 0 : value.asAddress;
              return /*#__PURE__*/_react.default.createElement(_address.default, {
                addressOnly: true,
                checksummedRecipientAddress: (0, _hexstringUtils.toChecksumHexAddress)(address)
              });
            }
          default:
            return /*#__PURE__*/_react.default.createElement("pre", {
              className: "sol-item solidity-raw"
            }, (0, _browserUtilInspect.default)(new Codec.Format.Utils.Inspect.ResultInspector(value)));
        }
    }
  };
  const renderTree = ({
    name,
    kind,
    typeClass,
    type,
    value,
    children
  }, index) => {
    return children ? /*#__PURE__*/_react.default.createElement("li", {
      key: `${typeClass}-${index}`
    }, /*#__PURE__*/_react.default.createElement("details", {
      open: index === 0 ? 'open' : ''
    }, /*#__PURE__*/_react.default.createElement("summary", null, name, ": "), /*#__PURE__*/_react.default.createElement("ol", null, children.map(renderTree)))) : /*#__PURE__*/_react.default.createElement("li", {
      className: "solidity-value",
      key: `solidity-value-${index}`
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "solidity-named-item solidity-item"
    }, typeClass !== 'array' && !Array.isArray(value) ? /*#__PURE__*/_react.default.createElement("span", {
      className: "param-name typography--color-black"
    }, name, ": ") : null, /*#__PURE__*/_react.default.createElement("span", {
      className: "sol-item solidity-uint"
    }, renderLeaf({
      name,
      typeClass,
      type,
      value,
      kind
    }))));
  };
  const renderTransactionDecoding = () => {
    if (loading) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "tx-insight-loading"
      }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
        color: "var(--color-warning-default)"
      }));
    }
    if (hasError) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "tx-insight-error"
      }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
        errorMessage: errorMessage
      }));
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__tree-component"
    }, /*#__PURE__*/_react.default.createElement("ol", null, tx.map(renderTree))), /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__copy-raw-tx"
    }, /*#__PURE__*/_react.default.createElement(_copyRawData.default, {
      data: data
    })), sourceFetchedVia && sourceAddress ? /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__accreditation"
    }, /*#__PURE__*/_react.default.createElement(_accreditation.default, {
      address: sourceAddress,
      fetchVia: sourceFetchedVia
    })) : null);
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight"
  }, renderTransactionDecoding());
}
TransactionDecoding.propTypes = {
  to: _propTypes.default.string,
  inputData: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\transaction-decoding.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\transaction-decoding.util.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-decoding%5Ctransaction-decoding.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformTxDecoding = void 0;
// *********************************************
// data transformation utils
// *********************************************
const transformTxDecoding = params => {
  return params.map(node => {
    const nodeName = node.name;
    const nodeValue = node.value;
    const nodeKind = nodeValue.kind;
    const nodeTypeClass = nodeValue.type.typeClass;
    const treeItem = {
      name: nodeName,
      kind: nodeKind,
      typeClass: nodeTypeClass,
      type: nodeValue.type
    };
    if (nodeTypeClass === 'struct') {
      return {
        ...treeItem,
        children: transformTxDecoding(nodeValue.value)
      };
    }
    return {
      ...treeItem,
      value: nodeValue.value ? nodeValue.value : nodeValue
    };
  });
};
exports.transformTxDecoding = transformTxDecoding;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-decoding\\transaction-decoding.util.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\index.js", {"./transaction-detail-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-detail-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionDetailItem.default;
  }
});
var _transactionDetailItem = _interopRequireDefault(require("./transaction-detail-item.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-detail-item\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/typography/typography":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\typography\\typography.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-detail-item%5Ctransaction-detail-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionDetailItem;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function TransactionDetailItem({
  detailTitle = '',
  detailText,
  detailTitleColor = _designSystem.Color.textDefault,
  detailTotal = '',
  subTitle = '',
  subText = '',
  boldHeadings = true,
  flexWidthValues = false
}) {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-item"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-item__row"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: detailTitleColor,
    fontWeight: boldHeadings ? _designSystem.FONT_WEIGHT.BOLD : _designSystem.FONT_WEIGHT.NORMAL,
    variant: _designSystem.TypographyVariant.H6,
    boxProps: {
      display: _designSystem.DISPLAY.FLEX,
      flexWrap: _designSystem.FLEX_WRAP.NO_WRAP,
      alignItems: _designSystem.AlignItems.center
    }
  }, detailTitle), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('transaction-detail-item__detail-values', {
      'transaction-detail-item__detail-values--flex-width': flexWidthValues
    })
  }, detailText && /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H6,
    color: _designSystem.Color.textAlternative
  }, detailText), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.Color.textDefault,
    fontWeight: boldHeadings ? _designSystem.FONT_WEIGHT.BOLD : _designSystem.FONT_WEIGHT.NORMAL,
    variant: _designSystem.TypographyVariant.H6,
    marginTop: 1,
    marginBottom: 1,
    marginLeft: 1,
    boxProps: {
      textAlign: _designSystem.TEXT_ALIGN.RIGHT
    }
  }, detailTotal))), /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-item__row"
  }, /*#__PURE__*/_react.default.isValidElement(subTitle) ? /*#__PURE__*/_react.default.createElement("div", null, subTitle) : /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H7,
    color: _designSystem.Color.textAlternative
  }, subTitle), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H7,
    color: _designSystem.Color.textAlternative,
    align: "end",
    className: "transaction-detail-item__row-subText"
  }, subText)));
}
TransactionDetailItem.propTypes = {
  /**
   * Detail title text wrapped in Typography component.
   */
  detailTitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * The color of the detailTitle text accepts all Typography color props
   */
  detailTitleColor: _propTypes.default.string,
  /**
   * Text to show on the left of the detailTotal. Wrapped in Typography component.
   */
  detailText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * Total amount to show. Wrapped in Typography component. Will be bold if boldHeadings is true
   */
  detailTotal: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * Subtitle text. Checks if React.isValidElement before displaying. Displays under detailTitle
   */
  subTitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * Text to show under detailTotal. Wrapped in Typography component.
   */
  subText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * Whether detailTotal is bold or not. Defaults to true
   */
  boldHeadings: _propTypes.default.bool,
  /**
   * Changes width to auto for transaction-detail-item__detail-values
   */
  flexWidthValues: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail\\index.js", {"./transaction-detail.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail\\transaction-detail.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-detail%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionDetail.default;
  }
});
var _transactionDetail = _interopRequireDefault(require("./transaction-detail.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-detail\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail\\transaction-detail.component.js", {"../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../edit-gas-fee-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-button\\index.js","../transaction-detail-item/transaction-detail-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-detail%5Ctransaction-detail.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionDetail;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _gasFee = require("../../../contexts/gasFee");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../ui/box"));
var _editGasFeeButton = _interopRequireDefault(require("../edit-gas-fee-button"));
var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function TransactionDetail({
  rows = [],
  onEdit,
  userAcknowledgedGasMissing = false,
  disableEditGasFeeButton = false
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    supportsEIP1559
  } = (0, _gasFee.useGasFeeContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail"
  }, supportsEIP1559 && !disableEditGasFeeButton && /*#__PURE__*/_react.default.createElement(_box.default, {
    display: "flex",
    justifyContent: "flex-end",
    paddingTop: 5
  }, /*#__PURE__*/_react.default.createElement(_editGasFeeButton.default, {
    userAcknowledgedGasMissing: userAcknowledgedGasMissing
  })), !supportsEIP1559 && onEdit && /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-edit"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: onEdit
  }, t('edit'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-detail-rows"
  }, rows));
}
TransactionDetail.propTypes = {
  /**
   * Show item content for transaction detail. Array of TransactionDetailItem components
   */
  rows: _propTypes.default.arrayOf(_transactionDetailItem.default).isRequired,
  /**
   * onClick handler for the Edit link
   */
  onEdit: _propTypes.default.func,
  userAcknowledgedGasMissing: _propTypes.default.bool,
  disableEditGasFeeButton: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-detail\\transaction-detail.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-icon\\index.js", {"./transaction-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-icon\\transaction-icon.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-icon%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionIcon.default;
  }
});
var _transactionIcon = _interopRequireDefault(require("./transaction-icon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-icon\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-icon\\transaction-icon.js", {"../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../ui/icon/approve-icon.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon\\approve-icon.component.js","../../ui/icon/interaction-icon.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon\\interaction-icon.component.js","../../ui/icon/receive-icon.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon\\receive-icon.component.js","../../ui/icon/send-icon.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon\\send-icon.component.js","../../ui/icon/sign-icon.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon\\sign-icon.component.js","../../ui/icon/swap-icon-for-list.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon\\swap-icon-for-list.component.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-icon%5Ctransaction-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionIcon;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _approveIcon = _interopRequireDefault(require("../../ui/icon/approve-icon.component"));
var _interactionIcon = _interopRequireDefault(require("../../ui/icon/interaction-icon.component"));
var _receiveIcon = _interopRequireDefault(require("../../ui/icon/receive-icon.component"));
var _sendIcon = _interopRequireDefault(require("../../ui/icon/send-icon.component"));
var _signIcon = _interopRequireDefault(require("../../ui/icon/sign-icon.component"));
var _swapIconForList = _interopRequireDefault(require("../../ui/icon/swap-icon-for-list.component"));
var _transaction = require("../../../../shared/constants/transaction");
var _actions = require("../../../store/actions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ICON_MAP = {
  [_transaction.TransactionGroupCategory.approval]: _approveIcon.default,
  [_transaction.TransactionGroupCategory.interaction]: _interactionIcon.default,
  [_transaction.TransactionGroupCategory.receive]: _receiveIcon.default,
  [_transaction.TransactionGroupCategory.send]: _sendIcon.default,
  [_transaction.TransactionGroupCategory.signatureRequest]: _signIcon.default,
  [_transaction.TransactionGroupCategory.swap]: _swapIconForList.default
};
const FAIL_COLOR = 'var(--color-error-default)';
const PENDING_COLOR = 'var(--color-icon-default)';
const OK_COLOR = 'var(--color-primary-default)';
const COLOR_MAP = {
  [_transaction.TransactionGroupStatus.pending]: PENDING_COLOR,
  [_transaction.TransactionGroupStatus.cancelled]: FAIL_COLOR,
  [_transaction.TransactionStatus.approved]: PENDING_COLOR,
  [_transaction.TransactionStatus.dropped]: FAIL_COLOR,
  [_transaction.TransactionStatus.failed]: FAIL_COLOR,
  [_transaction.TransactionStatus.rejected]: FAIL_COLOR,
  [_transaction.TransactionStatus.submitted]: PENDING_COLOR,
  [_transaction.TransactionStatus.unapproved]: PENDING_COLOR
};
function TransactionIcon({
  status,
  category
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const color = COLOR_MAP[status] || OK_COLOR;
  const Icon = ICON_MAP[category];
  if (!Icon) {
    dispatch((0, _actions.captureSingleException)(`The category prop passed to TransactionIcon is not supported. The prop is: ${category}`));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-icon__grey-circle"
    });
  }
  return /*#__PURE__*/_react.default.createElement(Icon, {
    color: color,
    size: 28
  });
}
TransactionIcon.propTypes = {
  status: _propTypes.default.oneOf([_transaction.TransactionGroupStatus.cancelled, _transaction.TransactionGroupStatus.pending, _transaction.TransactionStatus.approved, _transaction.TransactionStatus.confirmed, _transaction.TransactionStatus.dropped, _transaction.TransactionStatus.failed, _transaction.TransactionStatus.rejected, _transaction.TransactionStatus.submitted, _transaction.TransactionStatus.unapproved]).isRequired,
  category: _propTypes.default.oneOf([_transaction.TransactionGroupCategory.approval, _transaction.TransactionGroupCategory.interaction, _transaction.TransactionGroupCategory.receive, _transaction.TransactionGroupCategory.send, _transaction.TransactionGroupCategory.signatureRequest, _transaction.TransactionGroupCategory.swap]).isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-icon\\transaction-icon.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\index.js", {"./transaction-list-item-details.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-list-item-details%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionListItemDetails.default;
  }
});
var _transactionListItemDetails = _interopRequireDefault(require("./transaction-list-item-details.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-list-item-details\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.component.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/time":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\time.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/disclosure":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\disclosure\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","../../ui/sender-to-recipient":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\index.js","../../ui/sender-to-recipient/sender-to-recipient.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\sender-to-recipient\\sender-to-recipient.constants.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../cancel-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\cancel-button\\index.js","../transaction-activity-log":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-activity-log\\index.js","../transaction-breakdown":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-breakdown\\index.js","../transaction-decoding":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-decoding\\index.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","copy-to-clipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\copy-to-clipboard\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-list-item-details%5Ctransaction-list-item-details.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _etherscanLink = require("@metamask/etherscan-link");
var _senderToRecipient = _interopRequireDefault(require("../../ui/sender-to-recipient"));
var _senderToRecipient2 = require("../../ui/sender-to-recipient/sender-to-recipient.constants");
var _disclosure = _interopRequireDefault(require("../../ui/disclosure"));
var _transactionActivityLog = _interopRequireDefault(require("../transaction-activity-log"));
var _transactionBreakdown = _interopRequireDefault(require("../transaction-breakdown"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _cancelButton = _interopRequireDefault(require("../cancel-button"));
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _time = require("../../../../shared/constants/time");
var _metametrics = require("../../../../shared/constants/metametrics");
var _transaction = require("../../../../shared/constants/transaction");
var _util = require("../../../helpers/utils/util");
var _transactionDecoding = _interopRequireDefault(require("../transaction-decoding"));
var _routes = require("../../../helpers/constants/routes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class TransactionListItemDetails extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      justCopied: false
    });
    _defineProperty(this, "handleBlockExplorerClick", () => {
      const {
        transactionGroup: {
          primaryTransaction
        },
        rpcPrefs,
        isCustomNetwork,
        history,
        onClose
      } = this.props;
      const blockExplorerLink = (0, _etherscanLink.getBlockExplorerLink)(primaryTransaction, rpcPrefs);
      if (!rpcPrefs.blockExplorerUrl && isCustomNetwork) {
        onClose();
        history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
      } else {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Transactions,
          event: 'Clicked Block Explorer Link',
          properties: {
            link_type: 'Transaction Block Explorer',
            action: 'Transaction Details',
            block_explorer_domain: (0, _util.getURLHostName)(blockExplorerLink)
          }
        });
        global.platform.openTab({
          url: blockExplorerLink
        });
      }
    });
    _defineProperty(this, "handleCancel", event => {
      const {
        onCancel,
        onClose
      } = this.props;
      onCancel(event);
      onClose();
    });
    _defineProperty(this, "handleRetry", event => {
      const {
        onClose,
        onRetry
      } = this.props;
      onRetry(event);
      onClose();
    });
    _defineProperty(this, "handleCopyTxId", () => {
      const {
        transactionGroup
      } = this.props;
      const {
        primaryTransaction: transaction
      } = transactionGroup;
      const {
        hash
      } = transaction;
      this.context.trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        event: 'Copied Transaction ID',
        properties: {
          action: 'Activity Log',
          legacy_event: true
        }
      });
      this.setState({
        justCopied: true
      }, () => {
        (0, _copyToClipboard.default)(hash);
        setTimeout(() => this.setState({
          justCopied: false
        }), _time.SECOND);
      });
    });
  }
  componentDidMount() {
    const {
      recipientAddress,
      tryReverseResolveAddress
    } = this.props;
    if (recipientAddress) {
      tryReverseResolveAddress(recipientAddress);
    }
  }
  render() {
    var _transactionGroup$ini, _transactionGroup$ini2, _transactionGroup$ini3, _transactionGroup$ini4;
    const {
      t
    } = this.context;
    const {
      justCopied
    } = this.state;
    const {
      transactionGroup,
      primaryCurrency,
      showSpeedUp,
      showRetry,
      recipientEns,
      recipientAddress,
      recipientName,
      recipientMetadataName,
      senderAddress,
      isEarliestNonce,
      senderNickname,
      title,
      onClose,
      recipientNickname,
      showCancel,
      transactionStatus: TransactionStatus,
      blockExplorerLinkText
    } = this.props;
    const {
      primaryTransaction: transaction,
      initialTransaction: {
        type
      }
    } = transactionGroup;
    const {
      hash
    } = transaction;
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      title: title,
      onClose: onClose
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__operations"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__header-buttons"
    }, showSpeedUp && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: this.handleRetry,
      className: "transaction-list-item-details__header-button-rounded-button",
      "data-testid": "speedup-button"
    }, t('speedUp')), showCancel && /*#__PURE__*/_react.default.createElement(_cancelButton.default, {
      transaction: transaction,
      cancelTransaction: this.handleCancel,
      detailsModal: true
    }), showRetry && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      title: t('retryTransaction')
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "raised",
      onClick: this.handleRetry,
      className: "transaction-list-item-details__header-button",
      "data-testid": "rety-button"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-sync"
    }))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__tx-status"
    }, /*#__PURE__*/_react.default.createElement("div", null, t('status')), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(TransactionStatus, null))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__tx-hash"
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      onClick: this.handleBlockExplorerClick,
      disabled: !hash
    }, blockExplorerLinkText.firstPart === 'addBlockExplorer' ? t('addBlockExplorer') : t('viewOnBlockExplorer'))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      wrapperClassName: "transaction-list-item-details__header-button",
      containerClassName: "transaction-list-item-details__header-button-tooltip-container",
      title: justCopied ? t('copiedExclamation') : null
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      onClick: this.handleCopyTxId,
      disabled: !hash
    }, t('copyTransactionId')))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__sender-to-recipient-header"
    }, /*#__PURE__*/_react.default.createElement("div", null, t('from')), /*#__PURE__*/_react.default.createElement("div", null, t('to'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__sender-to-recipient-container"
    }, /*#__PURE__*/_react.default.createElement(_senderToRecipient.default, {
      warnUserOnAccountMismatch: false,
      variant: _senderToRecipient2.DEFAULT_VARIANT,
      addressOnly: true,
      recipientEns: recipientEns,
      recipientAddress: recipientAddress,
      recipientNickname: recipientNickname,
      recipientName: recipientName,
      recipientMetadataName: recipientMetadataName,
      senderName: senderNickname,
      senderAddress: senderAddress,
      onRecipientClick: () => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Navigation,
          event: 'Copied "To" Address',
          properties: {
            action: 'Activity Log',
            legacy_event: true
          }
        });
      },
      onSenderClick: () => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Navigation,
          event: 'Copied "From" Address',
          properties: {
            action: 'Activity Log',
            legacy_event: true
          }
        });
      }
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__cards-container"
    }, /*#__PURE__*/_react.default.createElement(_transactionBreakdown.default, {
      nonce: transactionGroup.initialTransaction.txParams.nonce,
      isTokenApprove: type === _transaction.TransactionType.tokenMethodApprove || type === _transaction.TransactionType.tokenMethodSetApprovalForAll,
      transaction: transaction,
      primaryCurrency: primaryCurrency,
      className: "transaction-list-item-details__transaction-breakdown"
    }), transactionGroup.initialTransaction.type !== _transaction.TransactionType.incoming && /*#__PURE__*/_react.default.createElement(_disclosure.default, {
      title: t('activityLog'),
      size: "small"
    }, /*#__PURE__*/_react.default.createElement(_transactionActivityLog.default, {
      transactionGroup: transactionGroup,
      className: "transaction-list-item-details__transaction-activity-log",
      onCancel: this.handleCancel,
      onRetry: this.handleRetry,
      isEarliestNonce: isEarliestNonce
    })), (_transactionGroup$ini = transactionGroup.initialTransaction) !== null && _transactionGroup$ini !== void 0 && (_transactionGroup$ini2 = _transactionGroup$ini.txParams) !== null && _transactionGroup$ini2 !== void 0 && _transactionGroup$ini2.data ? /*#__PURE__*/_react.default.createElement(_disclosure.default, {
      title: "Transaction data",
      size: "small"
    }, /*#__PURE__*/_react.default.createElement(_transactionDecoding.default, {
      title: t('transactionData'),
      to: (_transactionGroup$ini3 = transactionGroup.initialTransaction.txParams) === null || _transactionGroup$ini3 === void 0 ? void 0 : _transactionGroup$ini3.to,
      inputData: (_transactionGroup$ini4 = transactionGroup.initialTransaction.txParams) === null || _transactionGroup$ini4 === void 0 ? void 0 : _transactionGroup$ini4.data
    })) : null))));
  }
}
exports.default = TransactionListItemDetails;
_defineProperty(TransactionListItemDetails, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
_defineProperty(TransactionListItemDetails, "defaultProps", {
  recipientEns: null
});
_defineProperty(TransactionListItemDetails, "propTypes", {
  onCancel: _propTypes.default.func,
  onRetry: _propTypes.default.func,
  showCancel: _propTypes.default.bool,
  showSpeedUp: _propTypes.default.bool,
  showRetry: _propTypes.default.bool,
  isEarliestNonce: _propTypes.default.bool,
  primaryCurrency: _propTypes.default.string,
  transactionGroup: _propTypes.default.object,
  title: _propTypes.default.string.isRequired,
  onClose: _propTypes.default.func.isRequired,
  recipientEns: _propTypes.default.string,
  recipientAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientMetadataName: _propTypes.default.string,
  rpcPrefs: _propTypes.default.object,
  senderAddress: _propTypes.default.string.isRequired,
  tryReverseResolveAddress: _propTypes.default.func.isRequired,
  senderNickname: _propTypes.default.string.isRequired,
  recipientNickname: _propTypes.default.string,
  transactionStatus: _propTypes.default.func,
  isCustomNetwork: _propTypes.default.bool,
  history: _propTypes.default.object,
  blockExplorerLinkText: _propTypes.default.object
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.container.js", {"../../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","./transaction-list-item-details.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-list-item-details%5Ctransaction-list-item-details.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reactRouterDom = require("react-router-dom");
var _actions = require("../../../store/actions");
var _selectors = require("../../../selectors");
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _transactionListItemDetails = _interopRequireDefault(require("./transaction-list-item-details.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (state, ownProps) => {
  const {
    recipientAddress,
    senderAddress
  } = ownProps;
  let recipientEns;
  if (recipientAddress) {
    const address = (0, _hexstringUtils.toChecksumHexAddress)(recipientAddress);
    recipientEns = (0, _selectors.getEnsResolutionByAddress)(state, address);
  }
  const addressBook = (0, _selectors.getAddressBook)(state);
  const identities = (0, _selectors.getMetaMaskIdentities)(state);
  const recipientName = (0, _selectors.getAccountName)(identities, recipientAddress);
  const recipientMetadataName = (0, _selectors.getMetadataContractName)(state, recipientAddress);
  const getNickName = address => {
    const entry = addressBook.find(contact => {
      return address.toLowerCase() === contact.address.toLowerCase();
    });
    return entry && entry.name || '';
  };
  const rpcPrefs = (0, _selectors.getRpcPrefsForCurrentProvider)(state);
  const isCustomNetwork = (0, _selectors.getIsCustomNetwork)(state);
  return {
    rpcPrefs,
    recipientEns,
    senderNickname: getNickName(senderAddress),
    recipientNickname: recipientAddress ? getNickName(recipientAddress) : null,
    isCustomNetwork,
    blockExplorerLinkText: (0, _selectors.getBlockExplorerLinkText)(state),
    recipientName,
    recipientMetadataName
  };
};
const mapDispatchToProps = dispatch => {
  return {
    tryReverseResolveAddress: address => {
      return dispatch((0, _actions.tryReverseResolveAddress)(address));
    }
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_transactionListItemDetails.default);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-list-item-details\\transaction-list-item-details.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item\\index.js", {"./transaction-list-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item\\transaction-list-item.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-list-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionListItem.default;
  }
});
var _transactionListItem = _interopRequireDefault(require("./transaction-list-item.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-list-item\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item\\smart-transaction-list-item.component.js", {"../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../ducks/swaps/swaps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useTransactionDisplayData":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionDisplayData.js","../../ui/list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\list-item\\index.js","../../ui/site-origin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../cancel-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\cancel-button\\index.js","../transaction-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-icon\\index.js","../transaction-list-item-details":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\index.js","../transaction-status-label/transaction-status-label":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-status-label\\transaction-status-label.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-list-item%5Csmart-transaction-list-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SmartTransactionListItem;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _listItem = _interopRequireDefault(require("../../ui/list-item"));
var _transactionStatusLabel = _interopRequireDefault(require("../transaction-status-label/transaction-status-label"));
var _transactionIcon = _interopRequireDefault(require("../transaction-icon"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _useTransactionDisplayData = require("../../../hooks/useTransactionDisplayData");
var _util = require("../../../helpers/utils/util");
var _transaction = require("../../../../shared/constants/transaction");
var _cancelButton = _interopRequireDefault(require("../cancel-button"));
var _swaps = require("../../../ducks/swaps/swaps");
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
var _transactionListItemDetails = _interopRequireDefault(require("../transaction-list-item-details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SmartTransactionListItem({
  smartTransaction,
  transactionGroup,
  isEarliestNonce = false
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _useI18nContext.useI18nContext)();
  const [cancelSwapLinkClicked, setCancelSwapLinkClicked] = (0, _react.useState)(false);
  const [showDetails, setShowDetails] = (0, _react.useState)(false);
  const {
    primaryCurrency,
    recipientAddress,
    isPending,
    senderAddress
  } = (0, _useTransactionDisplayData.useTransactionDisplayData)(transactionGroup);
  const {
    sourceTokenSymbol,
    destinationTokenSymbol,
    time,
    status
  } = smartTransaction;
  const category = _transaction.TransactionGroupCategory.swap;
  const title = t('swapTokenToToken', [sourceTokenSymbol, destinationTokenSymbol]);
  const subtitle = 'metamask';
  const date = (0, _util.formatDateWithYearContext)(time);
  let displayedStatusKey;
  if (status === _transaction.SmartTransactionStatus.pending) {
    displayedStatusKey = _transaction.TransactionGroupStatus.pending;
  } else if (status !== null && status !== void 0 && status.startsWith(_transaction.SmartTransactionStatus.cancelled)) {
    displayedStatusKey = _transaction.TransactionGroupStatus.cancelled;
  }
  const showCancelSwapLink = smartTransaction.cancellable && !cancelSwapLinkClicked;
  const className = 'transaction-list-item transaction-list-item--unconfirmed';
  const toggleShowDetails = (0, _react.useCallback)(() => {
    setShowDetails(prev => !prev);
  }, []);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_listItem.default, {
    className: className,
    title: title,
    onClick: toggleShowDetails,
    icon: /*#__PURE__*/_react.default.createElement(_transactionIcon.default, {
      category: category,
      status: displayedStatusKey
    }),
    subtitle: /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_transactionStatusLabel.default, {
      isPending: true,
      isEarliestNonce: isEarliestNonce,
      date: date,
      status: displayedStatusKey
    }), /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      className: "transaction-list-item__origin",
      siteOrigin: subtitle,
      title: subtitle
    }))
  }, displayedStatusKey === _transaction.TransactionGroupStatus.pending && showCancelSwapLink && /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list-item__pending-actions"
  }, /*#__PURE__*/_react.default.createElement(_cancelButton.default, {
    transaction: smartTransaction.uuid,
    cancelTransaction: e => {
      e === null || e === void 0 ? void 0 : e.preventDefault();
      dispatch((0, _swaps.cancelSwapsSmartTransaction)(smartTransaction.uuid));
      setCancelSwapLinkClicked(true);
    }
  }))), showDetails && /*#__PURE__*/_react.default.createElement(_transactionListItemDetails.default, {
    title: title,
    onClose: toggleShowDetails,
    senderAddress: senderAddress,
    recipientAddress: recipientAddress,
    primaryCurrency: primaryCurrency,
    isEarliestNonce: isEarliestNonce,
    transactionGroup: transactionGroup,
    transactionStatus: () => /*#__PURE__*/_react.default.createElement(_transactionStatusLabel.default, {
      isPending: isPending,
      isEarliestNonce: isEarliestNonce,
      date: date,
      status: displayedStatusKey,
      statusOnly: true
    })
  }));
}
SmartTransactionListItem.propTypes = {
  smartTransaction: _propTypes.default.object.isRequired,
  isEarliestNonce: _propTypes.default.bool,
  transactionGroup: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-list-item\\smart-transaction-list-item.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item\\transaction-list-item.component.js", {"../../../../shared/constants/gas":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\gas.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../contexts/gasFee":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\gasFee.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../contexts/transaction-modal":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\transaction-modal.js","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/transactions.util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\transactions.util.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../hooks/useShouldShowSpeedUp":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useShouldShowSpeedUp.js","../../../hooks/useTransactionDisplayData":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTransactionDisplayData.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\list-item\\index.js","../../ui/site-origin":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\site-origin\\index.js","../advanced-gas-fee-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\advanced-gas-fee-popover\\index.js","../cancel-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\cancel-button\\index.js","../cancel-speedup-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\cancel-speedup-popover\\index.js","../edit-gas-fee-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-fee-popover\\index.js","../edit-gas-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\edit-gas-popover\\index.js","../transaction-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-icon\\index.js","../transaction-list-item-details":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item-details\\index.js","../transaction-status-label/transaction-status-label":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-status-label\\transaction-status-label.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-list-item%5Ctransaction-list-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _listItem = _interopRequireDefault(require("../../ui/list-item"));
var _useTransactionDisplayData = require("../../../hooks/useTransactionDisplayData");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _transactionListItemDetails = _interopRequireDefault(require("../transaction-list-item-details"));
var _routes = require("../../../helpers/constants/routes");
var _useShouldShowSpeedUp = require("../../../hooks/useShouldShowSpeedUp");
var _transactionStatusLabel = _interopRequireDefault(require("../transaction-status-label/transaction-status-label"));
var _transactionIcon = _interopRequireDefault(require("../transaction-icon"));
var _metametrics = require("../../../../shared/constants/metametrics");
var _transaction = require("../../../../shared/constants/transaction");
var _gas = require("../../../../shared/constants/gas");
var _gasFee = require("../../../contexts/gasFee");
var _transactionModal = require("../../../contexts/transaction-modal");
var _selectors = require("../../../selectors");
var _transactions = require("../../../helpers/utils/transactions.util");
var _button = _interopRequireDefault(require("../../ui/button"));
var _advancedGasFeePopover = _interopRequireDefault(require("../advanced-gas-fee-popover"));
var _cancelButton = _interopRequireDefault(require("../cancel-button"));
var _cancelSpeedupPopover = _interopRequireDefault(require("../cancel-speedup-popover"));
var _editGasFeePopover = _interopRequireDefault(require("../edit-gas-fee-popover"));
var _editGasPopover = _interopRequireDefault(require("../edit-gas-popover"));
var _metametrics2 = require("../../../contexts/metametrics");
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function TransactionListItemInner({
  transactionGroup,
  setEditGasMode,
  isEarliestNonce = false
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const {
    hasCancelled
  } = transactionGroup;
  const [showDetails, setShowDetails] = (0, _react.useState)(false);
  const [showCancelEditGasPopover, setShowCancelEditGasPopover] = (0, _react.useState)(false);
  const [showRetryEditGasPopover, setShowRetryEditGasPopover] = (0, _react.useState)(false);
  const {
    supportsEIP1559
  } = (0, _gasFee.useGasFeeContext)();
  const {
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const {
    initialTransaction: {
      id
    },
    primaryTransaction: {
      err,
      status
    }
  } = transactionGroup;
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const retryTransaction = (0, _react.useCallback)(async event => {
    event.stopPropagation();
    trackEvent({
      event: 'Clicked "Speed Up"',
      category: _metametrics.MetaMetricsEventCategory.Navigation,
      properties: {
        action: 'Activity Log',
        legacy_event: true
      }
    });
    if (supportsEIP1559) {
      setEditGasMode(_gas.EditGasModes.speedUp);
      openModal('cancelSpeedUpTransaction');
    } else {
      setShowRetryEditGasPopover(true);
    }
  }, [openModal, setEditGasMode, trackEvent, supportsEIP1559]);
  const cancelTransaction = (0, _react.useCallback)(event => {
    event.stopPropagation();
    trackEvent({
      event: 'Clicked "Cancel"',
      category: _metametrics.MetaMetricsEventCategory.Navigation,
      properties: {
        action: 'Activity Log',
        legacy_event: true
      }
    });
    if (supportsEIP1559) {
      setEditGasMode(_gas.EditGasModes.cancel);
      openModal('cancelSpeedUpTransaction');
    } else {
      setShowCancelEditGasPopover(true);
    }
  }, [trackEvent, openModal, setEditGasMode, supportsEIP1559]);
  const shouldShowSpeedUp = (0, _useShouldShowSpeedUp.useShouldShowSpeedUp)(transactionGroup, isEarliestNonce);
  const {
    title,
    subtitle,
    subtitleContainsOrigin,
    date,
    category,
    primaryCurrency,
    recipientAddress,
    secondaryCurrency,
    displayedStatusKey,
    isPending,
    senderAddress
  } = (0, _useTransactionDisplayData.useTransactionDisplayData)(transactionGroup);
  const isSignatureReq = category === _transaction.TransactionGroupCategory.signatureRequest;
  const isApproval = category === _transaction.TransactionGroupCategory.approval;
  const isUnapproved = status === _transaction.TransactionStatus.unapproved;
  const isSwap = category === _transaction.TransactionGroupCategory.swap;
  const className = (0, _classnames.default)('transaction-list-item', {
    'transaction-list-item--unconfirmed': isPending || [_transaction.TransactionStatus.failed, _transaction.TransactionStatus.dropped, _transaction.TransactionStatus.rejected].includes(displayedStatusKey)
  });
  const toggleShowDetails = (0, _react.useCallback)(() => {
    if (isUnapproved) {
      history.push(`${_routes.CONFIRM_TRANSACTION_ROUTE}/${id}`);
      return;
    }
    setShowDetails(prev => !prev);
  }, [isUnapproved, history, id]);
  const speedUpButton = (0, _react.useMemo)(() => {
    if (!shouldShowSpeedUp || !isPending || isUnapproved) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: hasCancelled ? cancelTransaction : retryTransaction,
      style: hasCancelled ? {
        width: 'auto'
      } : null
    }, hasCancelled ? t('speedUpCancellation') : t('speedUp'));
  }, [shouldShowSpeedUp, isUnapproved, t, isPending, hasCancelled, retryTransaction, cancelTransaction]);
  const showCancelButton = !hasCancelled && isPending && !isUnapproved;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_listItem.default, {
    onClick: toggleShowDetails,
    className: className,
    title: title,
    icon: /*#__PURE__*/_react.default.createElement(_transactionIcon.default, {
      category: category,
      status: displayedStatusKey
    }),
    subtitle: /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_transactionStatusLabel.default, {
      isPending: isPending,
      isEarliestNonce: isEarliestNonce,
      error: err,
      date: date,
      status: displayedStatusKey
    }), subtitleContainsOrigin ? /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      siteOrigin: subtitle
    }) : /*#__PURE__*/_react.default.createElement("span", {
      className: "transaction-list-item__address",
      title: subtitle
    }, subtitle)),
    rightContent: !isSignatureReq && !isApproval && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h2", {
      title: primaryCurrency,
      className: "transaction-list-item__primary-currency"
    }, primaryCurrency), /*#__PURE__*/_react.default.createElement("h3", {
      className: "transaction-list-item__secondary-currency"
    }, secondaryCurrency))
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list-item__pending-actions"
  }, speedUpButton, showCancelButton && /*#__PURE__*/_react.default.createElement(_cancelButton.default, {
    transaction: transactionGroup.primaryTransaction,
    cancelTransaction: cancelTransaction
  }))), showDetails && /*#__PURE__*/_react.default.createElement(_transactionListItemDetails.default, {
    title: title,
    onClose: toggleShowDetails,
    transactionGroup: transactionGroup,
    primaryCurrency: primaryCurrency,
    senderAddress: senderAddress,
    recipientAddress: recipientAddress,
    onRetry: retryTransaction,
    showRetry: status === _transaction.TransactionStatus.failed && !isSwap,
    showSpeedUp: shouldShowSpeedUp,
    isEarliestNonce: isEarliestNonce,
    onCancel: cancelTransaction,
    showCancel: isPending && !hasCancelled,
    transactionStatus: () => /*#__PURE__*/_react.default.createElement(_transactionStatusLabel.default, {
      isPending: isPending,
      isEarliestNonce: isEarliestNonce,
      error: err,
      date: date,
      status: displayedStatusKey,
      statusOnly: true
    })
  }), !supportsEIP1559 && showRetryEditGasPopover && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
    onClose: () => setShowRetryEditGasPopover(false),
    mode: _gas.EditGasModes.speedUp,
    transaction: transactionGroup.primaryTransaction
  }), !supportsEIP1559 && showCancelEditGasPopover && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
    onClose: () => setShowCancelEditGasPopover(false),
    mode: _gas.EditGasModes.cancel,
    transaction: transactionGroup.primaryTransaction
  }));
}
TransactionListItemInner.propTypes = {
  transactionGroup: _propTypes.default.object.isRequired,
  isEarliestNonce: _propTypes.default.bool,
  setEditGasMode: _propTypes.default.func
};
const TransactionListItem = props => {
  const {
    transactionGroup
  } = props;
  const [editGasMode, setEditGasMode] = (0, _react.useState)();
  const transaction = transactionGroup.primaryTransaction;
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  return /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
    transaction: transactionGroup.primaryTransaction,
    editGasMode: editGasMode
  }, /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, null, /*#__PURE__*/_react.default.createElement(TransactionListItemInner, _extends({}, props, {
    setEditGasMode: setEditGasMode
  })), supportsEIP1559 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_cancelSpeedupPopover.default, null), /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))));
};
TransactionListItem.propTypes = {
  transactionGroup: _propTypes.default.object.isRequired
};
var _default = TransactionListItem;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-list-item\\transaction-list-item.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list\\index.js", {"./transaction-list.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list\\transaction-list.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionList.default;
  }
});
var _transactionList = _interopRequireDefault(require("./transaction-list.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-list\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list\\transaction-list.component.js", {"../../../../shared/constants/swaps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\swaps.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../../shared/modules/string-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\string-utils.ts","../../../helpers/constants/transactions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\transactions.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../selectors/transactions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\transactions.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../transaction-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item\\index.js","../transaction-list-item/smart-transaction-list-item.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-list-item\\smart-transaction-list-item.component.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-list%5Ctransaction-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionList;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _transactions = require("../../../selectors/transactions");
var _selectors = require("../../../selectors");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _transactionListItem = _interopRequireDefault(require("../transaction-list-item"));
var _smartTransactionListItem = _interopRequireDefault(require("../transaction-list-item/smart-transaction-list-item.component"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _transactions2 = require("../../../helpers/constants/transactions");
var _swaps = require("../../../../shared/constants/swaps");
var _transaction = require("../../../../shared/constants/transaction");
var _stringUtils = require("../../../../shared/modules/string-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const PAGE_INCREMENT = 10;

// When we are on a token page, we only want to show transactions that involve that token.
// In the case of token transfers or approvals, these will be transactions sent to the
// token contract. In the case of swaps, these will be transactions sent to the swaps contract
// and which have the token address in the transaction data.
//
// getTransactionGroupRecipientAddressFilter is used to determine whether a transaction matches
// either of those criteria
const getTransactionGroupRecipientAddressFilter = (recipientAddress, chainId) => {
  return ({
    initialTransaction: {
      txParams
    }
  }) => {
    return (0, _stringUtils.isEqualCaseInsensitive)(txParams === null || txParams === void 0 ? void 0 : txParams.to, recipientAddress) || (txParams === null || txParams === void 0 ? void 0 : txParams.to) === _swaps.SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[chainId] && txParams.data.match(recipientAddress.slice(2));
  };
};
const tokenTransactionFilter = ({
  initialTransaction: {
    type,
    destinationTokenSymbol,
    sourceTokenSymbol
  }
}) => {
  if (_transactions2.TOKEN_CATEGORY_HASH[type]) {
    return false;
  } else if (type === _transaction.TransactionType.swap) {
    return destinationTokenSymbol === 'ETH' || sourceTokenSymbol === 'ETH';
  }
  return true;
};
const getFilteredTransactionGroups = (transactionGroups, hideTokenTransactions, tokenAddress, chainId) => {
  if (hideTokenTransactions) {
    return transactionGroups.filter(tokenTransactionFilter);
  } else if (tokenAddress) {
    return transactionGroups.filter(getTransactionGroupRecipientAddressFilter(tokenAddress, chainId));
  }
  return transactionGroups;
};
function TransactionList({
  hideTokenTransactions,
  tokenAddress
}) {
  const [limit, setLimit] = (0, _react.useState)(PAGE_INCREMENT);
  const t = (0, _useI18nContext.useI18nContext)();
  const unfilteredPendingTransactions = (0, _reactRedux.useSelector)(_transactions.nonceSortedPendingTransactionsSelector);
  const unfilteredCompletedTransactions = (0, _reactRedux.useSelector)(_transactions.nonceSortedCompletedTransactionsSelector);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const pendingTransactions = (0, _react.useMemo)(() => getFilteredTransactionGroups(unfilteredPendingTransactions, hideTokenTransactions, tokenAddress, chainId), [hideTokenTransactions, tokenAddress, unfilteredPendingTransactions, chainId]);
  const completedTransactions = (0, _react.useMemo)(() => getFilteredTransactionGroups(unfilteredCompletedTransactions, hideTokenTransactions, tokenAddress, chainId), [hideTokenTransactions, tokenAddress, unfilteredCompletedTransactions, chainId]);
  const viewMore = (0, _react.useCallback)(() => setLimit(prev => prev + PAGE_INCREMENT), []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__transactions"
  }, pendingTransactions.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__pending-transactions"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__header"
  }, `${t('queue')} (${pendingTransactions.length})`), pendingTransactions.map((transactionGroup, index) => transactionGroup.initialTransaction.transactionType === _transaction.TransactionType.smart ? /*#__PURE__*/_react.default.createElement(_smartTransactionListItem.default, {
    isEarliestNonce: index === 0,
    smartTransaction: transactionGroup.initialTransaction,
    transactionGroup: transactionGroup,
    key: `${transactionGroup.nonce}:${index}`
  }) : /*#__PURE__*/_react.default.createElement(_transactionListItem.default, {
    isEarliestNonce: index === 0,
    transactionGroup: transactionGroup,
    key: `${transactionGroup.nonce}:${index}`
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__completed-transactions"
  }, pendingTransactions.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__header"
  }, t('history')) : null, completedTransactions.length > 0 ? completedTransactions.slice(0, limit).map((transactionGroup, index) => {
    var _transactionGroup$ini;
    return ((_transactionGroup$ini = transactionGroup.initialTransaction) === null || _transactionGroup$ini === void 0 ? void 0 : _transactionGroup$ini.transactionType) === 'smart' ? /*#__PURE__*/_react.default.createElement(_smartTransactionListItem.default, {
      transactionGroup: transactionGroup,
      smartTransaction: transactionGroup.initialTransaction,
      key: `${transactionGroup.nonce}:${index}`
    }) : /*#__PURE__*/_react.default.createElement(_transactionListItem.default, {
      transactionGroup: transactionGroup,
      key: `${transactionGroup.nonce}:${limit + index - 10}`
    });
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__empty"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-list__empty-text"
  }, t('noTransactions'))), completedTransactions.length > limit && /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "transaction-list__view-more",
    type: "secondary",
    onClick: viewMore
  }, t('viewMore')))));
}
TransactionList.propTypes = {
  hideTokenTransactions: _propTypes.default.bool,
  tokenAddress: _propTypes.default.string
};
TransactionList.defaultProps = {
  hideTokenTransactions: false,
  tokenAddress: undefined
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-list\\transaction-list.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\transaction-status-label\\transaction-status-label.js", {"../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Ctransaction-status-label%5Ctransaction-status-label.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionStatusLabel;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _transaction = require("../../../../shared/constants/transaction");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const QUEUED_PSEUDO_STATUS = 'queued';

/**
 * A note about status logic for this component:
 * Approved, Signed and Submitted statuses are all treated, effectively
 * as pending. Transactions are only approved or signed for less than a
 * second, usually, and ultimately should be rendered in the UI no
 * differently than a pending transaction.
 *
 * Confirmed transactions are not especially highlighted except that their
 * status label will be the date the transaction was finalized.
 */
const pendingStatusHash = {
  [_transaction.TransactionStatus.submitted]: _transaction.TransactionGroupStatus.pending,
  [_transaction.TransactionStatus.approved]: _transaction.TransactionGroupStatus.pending,
  [_transaction.TransactionStatus.signed]: _transaction.TransactionGroupStatus.pending
};
const statusToClassNameHash = {
  [_transaction.TransactionStatus.unapproved]: 'transaction-status-label--unapproved',
  [_transaction.TransactionStatus.rejected]: 'transaction-status-label--rejected',
  [_transaction.TransactionStatus.failed]: 'transaction-status-label--failed',
  [_transaction.TransactionStatus.dropped]: 'transaction-status-label--dropped',
  [_transaction.TransactionGroupStatus.cancelled]: 'transaction-status-label--cancelled',
  [QUEUED_PSEUDO_STATUS]: 'transaction-status-label--queued',
  [_transaction.TransactionGroupStatus.pending]: 'transaction-status-label--pending'
};
function TransactionStatusLabel({
  status,
  date,
  error,
  isEarliestNonce,
  className,
  statusOnly
}) {
  var _error$rpc;
  const t = (0, _useI18nContext.useI18nContext)();
  let tooltipText = (error === null || error === void 0 ? void 0 : (_error$rpc = error.rpc) === null || _error$rpc === void 0 ? void 0 : _error$rpc.message) || (error === null || error === void 0 ? void 0 : error.message);
  let statusKey = status;
  if (pendingStatusHash[status]) {
    statusKey = isEarliestNonce ? _transaction.TransactionGroupStatus.pending : QUEUED_PSEUDO_STATUS;
  }
  let statusText = statusKey && t(statusKey);
  if (statusKey === _transaction.TransactionStatus.confirmed && !statusOnly) {
    statusText = date;
  }
  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: tooltipText,
    wrapperClassName: (0, _classnames.default)('transaction-status-label', `transaction-status-label--${statusKey}`, className, statusToClassNameHash[statusKey])
  }, statusText);
}
TransactionStatusLabel.propTypes = {
  status: _propTypes.default.string,
  className: _propTypes.default.string,
  date: _propTypes.default.string,
  error: _propTypes.default.object,
  isEarliestNonce: _propTypes.default.bool,
  statusOnly: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\transaction-status-label\\transaction-status-label.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js", {"./user-preferenced-currency-display.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\user-preferenced-currency-display.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cuser-preferenced-currency-display%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _userPreferencedCurrencyDisplay.default;
  }
});
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("./user-preferenced-currency-display.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\user-preferenced-currency-display\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\user-preferenced-currency-display.component.js", {"../../../../shared/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\common.ts","../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../hooks/useUserPreferencedCurrency":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useUserPreferencedCurrency.js","../../ui/currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cuser-preferenced-currency-display%5Cuser-preferenced-currency-display.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UserPreferencedCurrencyDisplay;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _common = require("../../../helpers/constants/common");
var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));
var _useUserPreferencedCurrency = require("../../../hooks/useUserPreferencedCurrency");
var _common2 = require("../../../../shared/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function UserPreferencedCurrencyDisplay({
  'data-testid': dataTestId,
  ethLogoHeight = 14,
  ethNumberOfDecimals,
  fiatNumberOfDecimals,
  numberOfDecimals: propsNumberOfDecimals,
  showEthLogo,
  type,
  showFiat,
  showCurrencySuffix,
  ...restProps
}) {
  const {
    currency,
    numberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(type, {
    ethNumberOfDecimals,
    fiatNumberOfDecimals,
    numberOfDecimals: propsNumberOfDecimals,
    showFiatOverride: showFiat
  });
  const prefixComponent = (0, _react.useMemo)(() => {
    return currency === _common2.EtherDenomination.ETH && showEthLogo && /*#__PURE__*/_react.default.createElement("i", {
      className: "fab fa-ethereum",
      style: {
        color: 'var(--color-icon-default)',
        fontSize: ethLogoHeight
      }
    });
  }, [currency, showEthLogo, ethLogoHeight]);
  return /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, _extends({}, restProps, {
    currency: currency,
    "data-testid": dataTestId,
    numberOfDecimals: numberOfDecimals,
    prefixComponent: prefixComponent,
    suffix: showCurrencySuffix && !showEthLogo && currency
  }));
}
UserPreferencedCurrencyDisplay.propTypes = {
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string,
  prefix: _propTypes.default.string,
  value: _propTypes.default.string,
  numberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  hideLabel: _propTypes.default.bool,
  hideTitle: _propTypes.default.bool,
  style: _propTypes.default.object,
  showEthLogo: _propTypes.default.bool,
  ethLogoHeight: _propTypes.default.number,
  type: _propTypes.default.oneOf([_common.PRIMARY, _common.SECONDARY]),
  ethNumberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  fiatNumberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  showFiat: _propTypes.default.bool,
  showCurrencySuffix: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\user-preferenced-currency-display\\user-preferenced-currency-display.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\index.js", {"./user-preferenced-currency-input.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cuser-preferenced-currency-input%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _userPreferencedCurrencyInput.default;
  }
});
var _userPreferencedCurrencyInput = _interopRequireDefault(require("./user-preferenced-currency-input.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\user-preferenced-currency-input\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.component.js", {"../currency-input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\currency-input\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cuser-preferenced-currency-input%5Cuser-preferenced-currency-input.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _currencyInput = _interopRequireDefault(require("../currency-input"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class UserPreferencedCurrencyInput extends _react.PureComponent {
  render() {
    const {
      useNativeCurrencyAsPrimaryCurrency,
      sendInputCurrencySwitched,
      ...restProps
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_currencyInput.default, _extends({}, restProps, {
      featureSecondary: Boolean(useNativeCurrencyAsPrimaryCurrency && sendInputCurrencySwitched || !useNativeCurrencyAsPrimaryCurrency && !sendInputCurrencySwitched)
    }));
  }
}
exports.default = UserPreferencedCurrencyInput;
_defineProperty(UserPreferencedCurrencyInput, "propTypes", {
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool,
  sendInputCurrencySwitched: _propTypes.default.bool
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.container.js", {"../../../ducks/app/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\app\\app.ts","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./user-preferenced-currency-input.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.component.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cuser-preferenced-currency-input%5Cuser-preferenced-currency-input.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _app = require("../../../ducks/app/app");
var _selectors = require("../../../selectors");
var _userPreferencedCurrencyInput = _interopRequireDefault(require("./user-preferenced-currency-input.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    useNativeCurrencyAsPrimaryCurrency,
    sendInputCurrencySwitched: state.appState.sendInputCurrencySwitched
  };
};
const mapDispatchToProps = dispatch => {
  return {
    onPreferenceToggle: () => dispatch((0, _app.toggleCurrencySwitch)())
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_userPreferencedCurrencyInput.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\user-preferenced-currency-input\\user-preferenced-currency-input.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\index.js", {"./user-preferenced-token-input.container":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cuser-preferenced-token-input%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _userPreferencedTokenInput.default;
  }
});
var _userPreferencedTokenInput = _interopRequireDefault(require("./user-preferenced-token-input.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\user-preferenced-token-input\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.component.js", {"../../ui/token-input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\token-input\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cuser-preferenced-token-input%5Cuser-preferenced-token-input.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _tokenInput = _interopRequireDefault(require("../../ui/token-input"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class UserPreferencedTokenInput extends _react.PureComponent {
  render() {
    const {
      useNativeCurrencyAsPrimaryCurrency,
      ...restProps
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_tokenInput.default, _extends({}, restProps, {
      showFiat: !useNativeCurrencyAsPrimaryCurrency
    }));
  }
}
exports.default = UserPreferencedTokenInput;
_defineProperty(UserPreferencedTokenInput, "propTypes", {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.component.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.container.js", {"../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","./user-preferenced-token-input.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.component.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cuser-preferenced-token-input%5Cuser-preferenced-token-input.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _selectors = require("../../../selectors");
var _userPreferencedTokenInput = _interopRequireDefault(require("./user-preferenced-token-input.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    useNativeCurrencyAsPrimaryCurrency
  };
};
const UserPreferencedTokenInputContainer = (0, _reactRedux.connect)(mapStateToProps)(_userPreferencedTokenInput.default);
UserPreferencedTokenInputContainer.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired
};
var _default = UserPreferencedTokenInputContainer;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\user-preferenced-token-input\\user-preferenced-token-input.container.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\eth-overview.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../../ducks/swaps/swaps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/hardware":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\hardware.js","../../../helpers/utils/portfolio":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\portfolio.js","../../../hooks/experiences/useRamps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\experiences\\useRamps.ts","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/icon-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon-button\\index.js","../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","../../ui/spinner":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\spinner\\index.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","../user-preferenced-currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\index.js","./wallet-overview":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\wallet-overview.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cwallet-overview%5Ceth-overview.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRouterDom = require("react-router-dom");
var _identicon = _interopRequireDefault(require("../../ui/identicon"));
var _i18n = require("../../../contexts/i18n");
var _routes = require("../../../helpers/constants/routes");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));
var _common = require("../../../helpers/constants/common");
var _selectors = require("../../../selectors");
var _swaps = require("../../../ducks/swaps/swaps");
var _iconButton = _interopRequireDefault(require("../../ui/icon-button"));
var _hardware = require("../../../helpers/utils/hardware");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _spinner = _interopRequireDefault(require("../../ui/spinner"));
var _send = require("../../../ducks/send");
var _transaction = require("../../../../shared/constants/transaction");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _useRamps = _interopRequireDefault(require("../../../hooks/experiences/useRamps"));
var _portfolio = require("../../../helpers/utils/portfolio");
var _walletOverview = _interopRequireDefault(require("./wallet-overview"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const EthOverview = ({
  className
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const location = (0, _reactRouterDom.useLocation)();
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const usingHardwareWallet = (0, _hardware.isHardwareKeyring)(keyring === null || keyring === void 0 ? void 0 : keyring.type);
  const balanceIsCached = (0, _reactRedux.useSelector)(_selectors.isBalanceCached);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const balance = (0, _reactRedux.useSelector)(_selectors.getSelectedAccountCachedBalance);
  const isSwapsChain = (0, _reactRedux.useSelector)(_selectors.getIsSwapsChain);
  const isBridgeChain = (0, _reactRedux.useSelector)(_selectors.getIsBridgeChain);
  const isBuyableChain = (0, _reactRedux.useSelector)(_selectors.getIsBuyableChain);
  const primaryTokenImage = (0, _reactRedux.useSelector)(_selectors.getNativeCurrencyImage);
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const metaMetricsId = (0, _reactRedux.useSelector)(_selectors.getMetaMetricsId);
  const {
    openBuyCryptoInPdapp
  } = (0, _useRamps.default)();
  return /*#__PURE__*/_react.default.createElement(_walletOverview.default, {
    loading: !balance,
    balance: /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "top",
      title: t('balanceOutdated'),
      disabled: !balanceIsCached
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "eth-overview__balance"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "eth-overview__primary-container"
    }, balance ? /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      style: {
        display: 'contents'
      },
      className: (0, _classnames.default)('eth-overview__primary-balance', {
        'eth-overview__cached-balance': balanceIsCached
      }),
      "data-testid": "eth-overview__primary-currency",
      value: balance,
      type: _common.PRIMARY,
      ethNumberOfDecimals: 4,
      hideTitle: true
    }) : /*#__PURE__*/_react.default.createElement(_spinner.default, {
      color: "var(--color-secondary-default)",
      className: "loading-overlay__spinner"
    }), balanceIsCached ? /*#__PURE__*/_react.default.createElement("span", {
      className: "eth-overview__cached-star"
    }, "*") : null,
    ///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)
    false ? null : /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      className: "eth-overview__portfolio-button",
      "data-testid": "home__portfolio-site",
      color: _designSystem.IconColor.primaryDefault,
      iconName: _componentLibrary.IconName.Diagram,
      ariaLabel: t('portfolio'),
      size: _componentLibrary.ButtonIconSize.Lg,
      onClick: () => {
        const portfolioUrl = (0, _portfolio.getPortfolioUrl)('', 'ext', metaMetricsId);
        global.platform.openTab({
          url: portfolioUrl
        });
        trackEvent({
          category: _metametrics2.MetaMetricsEventCategory.Home,
          event: _metametrics2.MetaMetricsEventName.PortfolioLinkClicked,
          properties: {
            url: portfolioUrl
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics2.MetaMetricsContextProp.PageTitle]
        });
      }
    })
    ///: END:ONLY_INCLUDE_IN
    ), showFiat && balance && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: (0, _classnames.default)({
        'eth-overview__cached-secondary-balance': balanceIsCached,
        'eth-overview__secondary-balance': !balanceIsCached
      }),
      "data-testid": "eth-overview__secondary-currency",
      value: balance,
      type: _common.SECONDARY,
      ethNumberOfDecimals: 4,
      hideTitle: true
    }))),
    buttons: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
    /*#__PURE__*/
    ///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)
    _react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      Icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Add,
        color: _designSystem.IconColor.primaryInverse
      }),
      disabled: !isBuyableChain,
      "data-testid": "eth-overview-buy",
      label: t('buy'),
      onClick: () => {
        openBuyCryptoInPdapp();
        trackEvent({
          event: _metametrics2.MetaMetricsEventName.NavBuyButtonClicked,
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          properties: {
            location: 'Home',
            text: 'Buy',
            chain_id: chainId,
            token_symbol: defaultSwapsToken
          }
        });
      }
    })
    ///: END:ONLY_INCLUDE_IN
    , /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      "data-testid": "eth-overview-send",
      Icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Arrow2UpRight,
        color: _designSystem.IconColor.primaryInverse
      }),
      label: t('send'),
      onClick: () => {
        trackEvent({
          event: _metametrics2.MetaMetricsEventName.NavSendButtonClicked,
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          properties: {
            token_symbol: 'ETH',
            location: 'Home',
            text: 'Send',
            chain_id: chainId
          }
        });
        dispatch((0, _send.startNewDraftTransaction)({
          type: _transaction.AssetType.native
        })).then(() => {
          history.push(_routes.SEND_ROUTE);
        });
      }
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      disabled: !isSwapsChain,
      Icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.SwapHorizontal,
        color: _designSystem.IconColor.primaryInverse
      }),
      onClick: () => {
        if (isSwapsChain) {
          trackEvent({
            event: _metametrics2.MetaMetricsEventName.NavSwapButtonClicked,
            category: _metametrics2.MetaMetricsEventCategory.Swaps,
            properties: {
              token_symbol: 'ETH',
              location: _metametrics2.MetaMetricsSwapsEventSource.MainView,
              text: 'Swap',
              chain_id: chainId
            }
          });
          dispatch((0, _swaps.setSwapsFromToken)(defaultSwapsToken));
          if (usingHardwareWallet) {
            global.platform.openExtensionInBrowser(_routes.BUILD_QUOTE_ROUTE);
          } else {
            history.push(_routes.BUILD_QUOTE_ROUTE);
          }
        }
      },
      label: t('swap'),
      tooltipRender: isSwapsChain ? null : contents => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        title: t('currentlyUnavailable'),
        position: "bottom"
      }, contents)
    }),
    /*#__PURE__*/
    ///: BEGIN:ONLY_INCLUDE_IN(build-main,build-beta,build-flask)
    _react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      disabled: !isBridgeChain,
      "data-testid": "eth-overview-bridge",
      Icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Bridge,
        color: _designSystem.IconColor.primaryInverse
      }),
      label: t('bridge'),
      onClick: () => {
        if (isBridgeChain) {
          const portfolioUrl = (0, _portfolio.getPortfolioUrl)('bridge', 'ext_bridge_button', metaMetricsId);
          global.platform.openTab({
            url: `${portfolioUrl}${location.pathname.includes('asset') ? '&token=native' : ''}`
          });
          trackEvent({
            category: _metametrics2.MetaMetricsEventCategory.Navigation,
            event: _metametrics2.MetaMetricsEventName.BridgeLinkClicked,
            properties: {
              location: 'Home',
              text: 'Bridge',
              chain_id: chainId,
              token_symbol: 'ETH'
            }
          });
        }
      },
      tooltipRender: isBridgeChain ? null : contents => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        title: t('currentlyUnavailable'),
        position: "bottom"
      }, contents)
    })
    ///: END:ONLY_INCLUDE_IN
    ),

    className: className,
    icon: /*#__PURE__*/_react.default.createElement(_identicon.default, {
      diameter: 32,
      image: primaryTokenImage
    })
  });
};
EthOverview.propTypes = {
  className: _propTypes.default.string
};
EthOverview.defaultProps = {
  className: undefined
};
var _default = EthOverview;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\wallet-overview\\eth-overview.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\index.js", {"./eth-overview":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\eth-overview.js","./token-overview":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\token-overview.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cwallet-overview%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EthOverview", {
  enumerable: true,
  get: function () {
    return _ethOverview.default;
  }
});
Object.defineProperty(exports, "TokenOverview", {
  enumerable: true,
  get: function () {
    return _tokenOverview.default;
  }
});
var _ethOverview = _interopRequireDefault(require("./eth-overview"));
var _tokenOverview = _interopRequireDefault(require("./token-overview"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\wallet-overview\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\token-overview.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/constants/transaction":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\transaction.ts","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../../ducks/swaps/swaps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\swaps\\swaps.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/error-keys":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\error-keys.js","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/hardware":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\hardware.js","../../../helpers/utils/portfolio":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\portfolio.js","../../../hooks/experiences/useRamps":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\experiences\\useRamps.ts","../../../hooks/useTokenFiatAmount":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenFiatAmount.js","../../../hooks/useTokenTracker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useTokenTracker.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../component-library/button-icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\index.js","../../ui/currency-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\currency-display\\index.js","../../ui/icon-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\icon-button\\index.js","../../ui/identicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\index.js","./wallet-overview":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\wallet-overview.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cwallet-overview%5Ctoken-overview.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _identicon = _interopRequireDefault(require("../../ui/identicon"));
var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));
var _i18n = require("../../../contexts/i18n");
var _hardware = require("../../../helpers/utils/hardware");
var _routes = require("../../../helpers/constants/routes");
var _useTokenTracker = require("../../../hooks/useTokenTracker");
var _useTokenFiatAmount = require("../../../hooks/useTokenFiatAmount");
var _send = require("../../../ducks/send");
var _swaps = require("../../../ducks/swaps/swaps");
var _selectors = require("../../../selectors");
var _iconButton = _interopRequireDefault(require("../../ui/icon-button"));
var _errorKeys = require("../../../helpers/constants/error-keys");
var _actions = require("../../../store/actions");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _transaction = require("../../../../shared/constants/transaction");
var _useRamps = _interopRequireDefault(require("../../../hooks/experiences/useRamps"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _deprecated = require("../../component-library/button-icon/deprecated");
var _portfolio = require("../../../helpers/utils/portfolio");
var _walletOverview = _interopRequireDefault(require("./wallet-overview"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const TokenOverview = ({
  className,
  token
}) => {
  var _tokensWithBalances$, _tokensWithBalances$2;
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const usingHardwareWallet = (0, _hardware.isHardwareKeyring)(keyring.type);
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const balanceToRender = (_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.string;
  const balance = (_tokensWithBalances$2 = tokensWithBalances[0]) === null || _tokensWithBalances$2 === void 0 ? void 0 : _tokensWithBalances$2.balance;
  const formattedFiatBalance = (0, _useTokenFiatAmount.useTokenFiatAmount)(token.address, balanceToRender, token.symbol);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const isSwapsChain = (0, _reactRedux.useSelector)(_selectors.getIsSwapsChain);
  const isBridgeToken = (0, _reactRedux.useSelector)((0, _selectors.getIsBridgeToken)(token.address));
  const isBuyableChain = (0, _reactRedux.useSelector)(_selectors.getIsBuyableChain);
  const metaMetricsId = (0, _reactRedux.useSelector)(_selectors.getMetaMetricsId);
  const {
    openBuyCryptoInPdapp
  } = (0, _useRamps.default)();
  (0, _react.useEffect)(() => {
    if (token.isERC721) {
      dispatch((0, _actions.showModal)({
        name: 'CONVERT_TOKEN_TO_NFT',
        tokenAddress: token.address
      }));
    }
  }, [token.isERC721, token.address, dispatch]);
  return /*#__PURE__*/_react.default.createElement(_walletOverview.default, {
    balance: /*#__PURE__*/_react.default.createElement("div", {
      className: "token-overview__balance"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "token-overview__primary-container"
    }, /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      style: {
        display: 'contents'
      },
      className: "token-overview__primary-balance",
      displayValue: balanceToRender,
      suffix: token.symbol
    }), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      className: "token-overview__portfolio-button",
      "data-testid": "home__portfolio-site",
      color: _designSystem.IconColor.primaryDefault,
      iconName: _componentLibrary.IconName.Diagram,
      ariaLabel: t('portfolio'),
      size: _deprecated.BUTTON_ICON_SIZES.LG,
      onClick: () => {
        const portfolioUrl = (0, _portfolio.getPortfolioUrl)('', 'ext', metaMetricsId);
        global.platform.openTab({
          url: portfolioUrl
        });
        trackEvent({
          category: _metametrics2.MetaMetricsEventCategory.Home,
          event: _metametrics2.MetaMetricsEventName.PortfolioLinkClicked,
          properties: {
            url: portfolioUrl
          }
        }, {
          contextPropsIntoEventProperties: [_metametrics2.MetaMetricsContextProp.PageTitle]
        });
      }
    })), formattedFiatBalance ? /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "token-overview__secondary-balance",
      displayValue: formattedFiatBalance,
      hideLabel: true
    }) : null),
    buttons: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      Icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Add,
        color: _designSystem.IconColor.primaryInverse
      }),
      label: t('buy'),
      "data-testid": "token-overview-buy",
      onClick: () => {
        openBuyCryptoInPdapp();
        trackEvent({
          event: _metametrics2.MetaMetricsEventName.NavBuyButtonClicked,
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          properties: {
            location: 'Token Overview',
            text: 'Buy',
            chain_id: chainId,
            token_symbol: token.symbol
          }
        });
      },
      disabled: token.isERC721 || !isBuyableChain
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      onClick: async () => {
        trackEvent({
          event: _metametrics2.MetaMetricsEventName.NavSendButtonClicked,
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          properties: {
            token_symbol: token.symbol,
            location: _metametrics2.MetaMetricsSwapsEventSource.TokenView,
            text: 'Send',
            chain_id: chainId
          }
        });
        try {
          await dispatch((0, _send.startNewDraftTransaction)({
            type: _transaction.AssetType.token,
            details: token
          }));
          history.push(_routes.SEND_ROUTE);
        } catch (err) {
          if (!err.message.includes(_errorKeys.INVALID_ASSET_TYPE)) {
            throw err;
          }
        }
      },
      Icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Arrow2UpRight,
        color: _designSystem.IconColor.primaryInverse
      }),
      label: t('send'),
      "data-testid": "eth-overview-send",
      disabled: token.isERC721
    }), isSwapsChain && /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      Icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.SwapHorizontal,
        color: _designSystem.IconColor.primaryInverse
      }),
      onClick: () => {
        trackEvent({
          event: _metametrics2.MetaMetricsEventName.NavSwapButtonClicked,
          category: _metametrics2.MetaMetricsEventCategory.Swaps,
          properties: {
            token_symbol: token.symbol,
            location: _metametrics2.MetaMetricsSwapsEventSource.TokenView,
            text: 'Swap',
            chain_id: chainId
          }
        });
        dispatch((0, _swaps.setSwapsFromToken)({
          ...token,
          address: token.address.toLowerCase(),
          iconUrl: token.image,
          balance,
          string: balanceToRender
        }));
        if (usingHardwareWallet) {
          global.platform.openExtensionInBrowser(_routes.BUILD_QUOTE_ROUTE);
        } else {
          history.push(_routes.BUILD_QUOTE_ROUTE);
        }
      },
      label: t('swap'),
      tooltipRender: null
    }), isBridgeToken && /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      "data-testid": "token-overview-bridge",
      Icon: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Bridge,
        color: _designSystem.IconColor.primaryInverse
      }),
      label: t('bridge'),
      onClick: () => {
        const portfolioUrl = (0, _portfolio.getPortfolioUrl)('bridge', 'ext_bridge_button', metaMetricsId);
        global.platform.openTab({
          url: `${portfolioUrl}&token=${token.address}`
        });
        trackEvent({
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          event: _metametrics2.MetaMetricsEventName.BridgeLinkClicked,
          properties: {
            location: 'Token Overview',
            text: 'Bridge',
            url: portfolioUrl,
            chain_id: chainId,
            token_symbol: token.symbol
          }
        });
      },
      tooltipRender: null
    })),
    className: className,
    icon: /*#__PURE__*/_react.default.createElement(_identicon.default, {
      diameter: 32,
      address: token.address,
      image: token.image
    })
  });
};
TokenOverview.propTypes = {
  className: _propTypes.default.string,
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string,
    image: _propTypes.default.string,
    isERC721: _propTypes.default.bool
  }).isRequired
};
TokenOverview.defaultProps = {
  className: undefined
};
var _default = TokenOverview;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\wallet-overview\\token-overview.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\wallet-overview\\wallet-overview.js", {"../../../../shared/modules/hexstring-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\modules\\hexstring-utils.ts","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../multichain":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cwallet-overview%5Cwallet-overview.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _selectors = require("../../../selectors");
var _multichain = require("../../multichain");
var _box = _interopRequireDefault(require("../../ui/box/box"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const WalletOverview = ({
  balance,
  buttons,
  className,
  icon,
  loading
}) => {
  const selectedIdentity = (0, _reactRedux.useSelector)(_selectors.getSelectedIdentity);
  const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(selectedIdentity === null || selectedIdentity === void 0 ? void 0 : selectedIdentity.address);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('wallet-overview', className)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "wallet-overview__balance"
  }, false ? /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 2
  }, /*#__PURE__*/_react.default.createElement(_multichain.AddressCopyButton, {
    address: checksummedAddress,
    shorten: true
  })) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, loading ? null : icon), balance), /*#__PURE__*/_react.default.createElement("div", {
    className: "wallet-overview__buttons"
  }, buttons));
};
WalletOverview.propTypes = {
  balance: _propTypes.default.element.isRequired,
  buttons: _propTypes.default.element.isRequired,
  className: _propTypes.default.string,
  icon: _propTypes.default.element.isRequired,
  loading: _propTypes.default.bool
};
WalletOverview.defaultProps = {
  className: undefined
};
var _default = WalletOverview;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\wallet-overview\\wallet-overview.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\whats-new-popup\\index.js", {"./whats-new-popup":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\whats-new-popup\\whats-new-popup.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cwhats-new-popup%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _whatsNewPopup.default;
  }
});
var _whatsNewPopup = _interopRequireDefault(require("./whats-new-popup"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\whats-new-popup\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\whats-new-popup\\whats-new-popup.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/notifications":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\notifications\\index.js","../../../contexts/i18n":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/locale/locale":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\locale\\locale.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/constants/zendesk-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useEqualityCheck":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useEqualityCheck.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\button\\index.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","lodash":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\lodash\\lodash.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Capp%5Cwhats-new-popup%5Cwhats-new-popup.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WhatsNewPopup;
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _lodash = require("lodash");
var _locale = require("../../../ducks/locale/locale");
var _i18n = require("../../../contexts/i18n");
var _useEqualityCheck = require("../../../hooks/useEqualityCheck");
var _button = _interopRequireDefault(require("../../ui/button"));
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _componentLibrary = require("../../component-library");
var _actions = require("../../../store/actions");
var _notifications = require("../../../../shared/notifications");
var _selectors = require("../../../selectors");
var _routes = require("../../../helpers/constants/routes");
var _designSystem = require("../../../helpers/constants/design-system");
var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function getActionFunctionById(id, history) {
  const actionFunctions = {
    2: () => {
      global.platform.openTab({
        url: 'https://survey.alchemer.com/s3/6173069/MetaMask-Extension-NPS-January-2021'
      });
    },
    3: () => {
      global.platform.openTab({
        url: 'https://community.metamask.io/t/about-the-security-category/72'
      });
    },
    4: () => {
      (0, _actions.updateViewedNotifications)({
        4: true
      });
      history.push(_routes.BUILD_QUOTE_ROUTE);
    },
    5: () => {
      (0, _actions.updateViewedNotifications)({
        5: true
      });
      global.platform.openTab({
        url: _zendeskUrl.default.SECRET_RECOVERY_PHRASE
      });
    },
    8: () => {
      (0, _actions.updateViewedNotifications)({
        8: true
      });
      history.push(_routes.ADVANCED_ROUTE);
    },
    10: () => {
      (0, _actions.updateViewedNotifications)({
        10: true
      });
      history.push(`${_routes.SECURITY_ROUTE}#token-description`);
    },
    12: () => {
      (0, _actions.updateViewedNotifications)({
        12: true
      });
      history.push(_routes.EXPERIMENTAL_ROUTE);
    },
    14: () => {
      (0, _actions.updateViewedNotifications)({
        14: true
      });
      history.push(`${_routes.ADVANCED_ROUTE}#backup-userdata`);
    },
    16: () => {
      (0, _actions.updateViewedNotifications)({
        16: true
      });
    },
    17: () => {
      (0, _actions.updateViewedNotifications)({
        17: true
      });
    },
    18: () => {
      (0, _actions.updateViewedNotifications)({
        18: true
      });
      history.push(`${_routes.EXPERIMENTAL_ROUTE}#transaction-security-check`);
    },
    19: () => {
      (0, _actions.updateViewedNotifications)({
        19: true
      });
      history.push(`${_routes.EXPERIMENTAL_ROUTE}#autodetect-nfts`);
    },
    20: () => {
      (0, _actions.updateViewedNotifications)({
        20: true
      });
      global.platform.openTab({
        url: _zendeskUrl.default.LEDGER_FIREFOX_U2F_GUIDE
      });
    }
  };
  return actionFunctions[id];
}
const renderDescription = description => {
  if (!Array.isArray(description)) {
    return /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMd
    }, description);
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, description.map((piece, index) => {
    const isLast = index === description.length - 1;
    return /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: `item-${index}`,
      variant: _designSystem.TextVariant.bodyMd,
      marginBottom: isLast ? 0 : 4
    }, piece);
  }));
};
const renderFirstNotification = (notification, idRefMap, history, isLast, trackEvent) => {
  const {
    id,
    date,
    title,
    description,
    image,
    actionText
  } = notification;
  const actionFunction = getActionFunctionById(id, history);
  const imageComponent = image && /*#__PURE__*/_react.default.createElement("img", {
    className: "whats-new-popup__notification-image",
    src: image.src,
    height: image.height,
    width: image.width
  });
  const placeImageBelowDescription = image === null || image === void 0 ? void 0 : image.placeImageBelowDescription;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('whats-new-popup__notification whats-new-popup__first-notification', {
      'whats-new-popup__last-notification': isLast
    }),
    key: `whats-new-popop-notification-${id}`
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginBottom: 2
  }, title), !placeImageBelowDescription && imageComponent, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__description-and-date"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-description"
  }, renderDescription(description)), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-date"
  }, date)), placeImageBelowDescription && imageComponent, actionText && /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "whats-new-popup__button",
    onClick: () => {
      actionFunction();
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Home,
        event: _metametrics2.MetaMetricsEventName.WhatsNewClicked
      });
    }
  }, actionText), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__intersection-observable",
    ref: idRefMap[id]
  }));
};
const renderSubsequentNotification = (notification, idRefMap, history, isLast) => {
  const {
    id,
    date,
    title,
    description,
    actionText
  } = notification;
  const actionFunction = getActionFunctionById(id, history);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('whats-new-popup__notification', {
      'whats-new-popup__last-notification': isLast
    }),
    key: `whats-new-popop-notification-${id}`
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-title"
  }, title), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__description-and-date"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-description"
  }, renderDescription(description)), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-date"
  }, date)), actionText && /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__link",
    onClick: actionFunction
  }, `${actionText} >`), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__intersection-observable",
    ref: idRefMap[id]
  }));
};
function WhatsNewPopup({
  onClose
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const notifications = (0, _reactRedux.useSelector)(_selectors.getSortedAnnouncementsToShow);
  const locale = (0, _reactRedux.useSelector)(_locale.getCurrentLocale);
  const [seenNotifications, setSeenNotifications] = (0, _react.useState)({});
  const [shouldShowScrollButton, setShouldShowScrollButton] = (0, _react.useState)(true);
  const popoverRef = (0, _react.useRef)();
  const memoizedNotifications = (0, _useEqualityCheck.useEqualityCheck)(notifications);
  const idRefMap = (0, _react.useMemo)(() => memoizedNotifications.reduce((_idRefMap, notification) => ({
    ..._idRefMap,
    [notification.id]: /*#__PURE__*/_react.default.createRef()
  }), {}), [memoizedNotifications]);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const handleDebouncedScroll = (0, _lodash.debounce)(target => {
    setShouldShowScrollButton(target.scrollHeight - target.scrollTop !== target.clientHeight);
  }, 100);
  const handleScroll = e => {
    handleDebouncedScroll(e.target);
  };
  const handleScrollDownClick = e => {
    e.stopPropagation();
    idRefMap[notifications[notifications.length - 1].id].current.scrollIntoView({
      behavior: 'smooth'
    });
  };
  (0, _react.useEffect)(() => {
    const observer = new window.IntersectionObserver((entries, _observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const [id, ref] = Object.entries(idRefMap).find(([_, _ref]) => _ref.current.isSameNode(entry.target));
          setSeenNotifications(_seenNotifications => ({
            ..._seenNotifications,
            [id]: true
          }));
          _observer.unobserve(ref.current);
        }
      });
    }, {
      root: popoverRef.current,
      threshold: 1.0
    });
    Object.values(idRefMap).forEach(ref => {
      observer.observe(ref.current);
    });
    return () => {
      observer.disconnect();
    };
  }, [idRefMap, setSeenNotifications]);
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: t('whatsNew'),
    headerProps: {
      padding: [4, 4, 4]
    },
    className: "whats-new-popup__popover",
    onClose: () => {
      (0, _actions.updateViewedNotifications)(seenNotifications);
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Home,
        event: _metametrics2.MetaMetricsEventName.WhatsNewViewed,
        properties: {
          number_viewed: Object.keys(seenNotifications).pop(),
          completed_all: true
        }
      });
      onClose();
    },
    popoverRef: popoverRef,
    showScrollDown: shouldShowScrollButton && notifications.length > 1,
    onScrollDownButtonClick: handleScrollDownClick,
    onScroll: handleScroll
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notifications"
  }, notifications.map(({
    id
  }, index) => {
    const notification = (0, _notifications.getTranslatedUINotifications)(t, locale)[id];
    const isLast = index === notifications.length - 1;
    // Display the swaps notification with full image
    // Displays the NFTs & OpenSea notifications 18,19 with full image
    return index === 0 || id === 1 || id === 18 || id === 19 ? renderFirstNotification(notification, idRefMap, history, isLast, trackEvent) : renderSubsequentNotification(notification, idRefMap, history, isLast);
  })));
}
WhatsNewPopup.propTypes = {
  onClose: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\whats-new-popup\\whats-new-popup.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-account\\avatar-account.js", {"../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/identicon/blockieIdenticon/blockieIdenticon.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\identicon\\blockieIdenticon\\blockieIdenticon.component.js","../../ui/jazzicon/jazzicon.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\jazzicon\\jazzicon.component.js","../avatar-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\index.ts","./avatar-account.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-account\\avatar-account.types.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-account%5Cavatar-account.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarAccount = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jazzicon = _interopRequireDefault(require("../../ui/jazzicon/jazzicon.component"));
var _blockieIdenticon = _interopRequireDefault(require("../../ui/identicon/blockieIdenticon/blockieIdenticon.component"));
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _avatarBase = require("../avatar-base");
var _avatarAccount = require("./avatar-account.types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AvatarAccount = /*#__PURE__*/_react.default.forwardRef(({
  size = _avatarAccount.AvatarAccountSize.Md,
  address,
  className,
  variant = _avatarAccount.AvatarAccountVariant.Jazzicon,
  ...props
}, ref) => /*#__PURE__*/_react.default.createElement(_avatarBase.AvatarBase, _extends({
  ref: ref,
  size: size,
  className: (0, _classnames.default)('mm-avatar-account', className)
}, props), variant === _avatarAccount.AvatarAccountVariant.Jazzicon ? /*#__PURE__*/_react.default.createElement(_jazzicon.default, {
  className: (0, _classnames.default)('mm-avatar-account__jazzicon'),
  address: address,
  diameter: _avatarAccount.AvatarAccountDiameter[size]
}) : /*#__PURE__*/_react.default.createElement(_blockieIdenticon.default, {
  address: address,
  diameter: _avatarAccount.AvatarAccountDiameter[size],
  borderRadius: "50%"
})));
exports.AvatarAccount = AvatarAccount;
AvatarAccount.propTypes = {
  /**
   * The size of the AvatarAccount.
   * Possible values could be 'AvatarAccountSize.Xs', 'AvatarAccountSize.Sm', 'AvatarAccountSize.Md', 'AvatarAccountSize.Lg', 'AvatarAccountSize.Xl'
   * Defaults to AvatarAccountSize.Md
   */
  size: _propTypes.default.oneOf(Object.values(_avatarAccount.AvatarAccountSize)),
  /**
   * The variant of the avatar to be rendered, it can render either a AvatarAccountVariant.Jazzicon or a AvatarAccountVariant.Blockie
   */
  variant: _propTypes.default.oneOf(Object.values(_avatarAccount.AvatarAccountVariant)),
  /**
   * Address used for generating random image
   */
  address: _propTypes.default.string.isRequired,
  /**
   * Add custom css class
   */
  className: _propTypes.default.string,
  /**
   * AvatarAccount also accepts all Box props including but not limited to
   * className, as(change root element of HTML element) and margin props
   */
  ..._box.default.propTypes
};
AvatarAccount.displayName = 'AvatarAccount';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-account\\avatar-account.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-account\\avatar-account.types.ts", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-account%5Cavatar-account.types.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarAccountVariant = exports.AvatarAccountSize = exports.AvatarAccountDiameter = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
let AvatarAccountVariant;
exports.AvatarAccountVariant = AvatarAccountVariant;
(function (AvatarAccountVariant) {
  AvatarAccountVariant["Jazzicon"] = "jazzicon";
  AvatarAccountVariant["Blockies"] = "blockies";
})(AvatarAccountVariant || (exports.AvatarAccountVariant = AvatarAccountVariant = {}));
let AvatarAccountSize;
exports.AvatarAccountSize = AvatarAccountSize;
(function (AvatarAccountSize) {
  AvatarAccountSize[AvatarAccountSize["Xs"] = _designSystem.Size.XS] = "Xs";
  AvatarAccountSize[AvatarAccountSize["Sm"] = _designSystem.Size.SM] = "Sm";
  AvatarAccountSize[AvatarAccountSize["Md"] = _designSystem.Size.MD] = "Md";
  AvatarAccountSize[AvatarAccountSize["Lg"] = _designSystem.Size.LG] = "Lg";
  AvatarAccountSize[AvatarAccountSize["Xl"] = _designSystem.Size.XL] = "Xl";
})(AvatarAccountSize || (exports.AvatarAccountSize = AvatarAccountSize = {}));
const AvatarAccountDiameter = {
  [AvatarAccountSize.Xs]: 16,
  [AvatarAccountSize.Sm]: 24,
  [AvatarAccountSize.Md]: 32,
  [AvatarAccountSize.Lg]: 40,
  [AvatarAccountSize.Xl]: 48
};
exports.AvatarAccountDiameter = AvatarAccountDiameter;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-account\\avatar-account.types.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-account\\index.js", {"./avatar-account":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-account\\avatar-account.js","./avatar-account.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-account\\avatar-account.types.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-account%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AvatarAccount", {
  enumerable: true,
  get: function () {
    return _avatarAccount.AvatarAccount;
  }
});
Object.defineProperty(exports, "AvatarAccountDiameter", {
  enumerable: true,
  get: function () {
    return _avatarAccount2.AvatarAccountDiameter;
  }
});
Object.defineProperty(exports, "AvatarAccountSize", {
  enumerable: true,
  get: function () {
    return _avatarAccount2.AvatarAccountSize;
  }
});
Object.defineProperty(exports, "AvatarAccountVariant", {
  enumerable: true,
  get: function () {
    return _avatarAccount2.AvatarAccountVariant;
  }
});
var _avatarAccount = require("./avatar-account");
var _avatarAccount2 = require("./avatar-account.types");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-account\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\avatar-base.tsx", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","./avatar-base.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\avatar-base.types.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-base%5Cavatar-base.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarBase = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _text = require("../text");
var _avatarBase = require("./avatar-base.types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AvatarBase = /*#__PURE__*/(0, _react.forwardRef)(({
  size = _avatarBase.AvatarBaseSize.Md,
  children,
  backgroundColor = _designSystem.BackgroundColor.backgroundAlternative,
  borderColor = _designSystem.BorderColor.borderDefault,
  color = _designSystem.TextColor.textDefault,
  className = '',
  ...props
}, ref) => {
  let fallbackTextVariant;
  if (size === _avatarBase.AvatarBaseSize.Lg || size === _avatarBase.AvatarBaseSize.Xl) {
    fallbackTextVariant = _designSystem.TextVariant.bodyLgMedium;
  } else if (size === _avatarBase.AvatarBaseSize.Sm || size === _avatarBase.AvatarBaseSize.Md) {
    fallbackTextVariant = _designSystem.TextVariant.bodySm;
  } else {
    fallbackTextVariant = _designSystem.TextVariant.bodyXs;
  }
  return /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
    className: (0, _classnames.default)('mm-avatar-base', `mm-avatar-base--size-${size}`, className),
    ref: ref,
    as: _text.ValidTag.Div,
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center,
    borderRadius: _designSystem.BorderRadius.full,
    variant: fallbackTextVariant,
    textTransform: _designSystem.TextTransform.Uppercase,
    backgroundColor,
    borderColor,
    color
  }, props), children);
});
exports.AvatarBase = AvatarBase;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-base\\avatar-base.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\avatar-base.types.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-base%5Cavatar-base.types.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarBaseSize = void 0;
let AvatarBaseSize;
exports.AvatarBaseSize = AvatarBaseSize;
(function (AvatarBaseSize) {
  AvatarBaseSize["Xs"] = "xs";
  AvatarBaseSize["Sm"] = "sm";
  AvatarBaseSize["Md"] = "md";
  AvatarBaseSize["Lg"] = "lg";
  AvatarBaseSize["Xl"] = "xl";
})(AvatarBaseSize || (exports.AvatarBaseSize = AvatarBaseSize = {}));

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-base\\avatar-base.types.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\index.ts", {"./avatar-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\avatar-base.tsx","./avatar-base.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\avatar-base.types.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-base%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AvatarBase", {
  enumerable: true,
  get: function () {
    return _avatarBase.AvatarBase;
  }
});
Object.defineProperty(exports, "AvatarBaseSize", {
  enumerable: true,
  get: function () {
    return _avatarBase2.AvatarBaseSize;
  }
});
var _avatarBase = require("./avatar-base");
var _avatarBase2 = require("./avatar-base.types");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-base\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-favicon\\avatar-favicon.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-favicon%5Cavatar-favicon.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AVATAR_FAVICON_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const AVATAR_FAVICON_SIZES = {
  XS: _designSystem.Size.XS,
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG,
  XL: _designSystem.Size.XL
};
exports.AVATAR_FAVICON_SIZES = AVATAR_FAVICON_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-favicon\\avatar-favicon.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-favicon\\avatar-favicon.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../avatar-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\index.ts","../icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\index.ts","./avatar-favicon.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-favicon\\avatar-favicon.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-favicon%5Cavatar-favicon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarFavicon = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _avatarBase = require("../avatar-base");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _icon = require("../icon");
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _avatarFavicon = require("./avatar-favicon.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AvatarFavicon = /*#__PURE__*/_react.default.forwardRef(({
  size = _designSystem.Size.MD,
  src,
  name = 'avatar-favicon',
  className,
  fallbackIconProps,
  borderColor = _designSystem.BorderColor.transparent,
  ...props
}, ref) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_avatarBase.AvatarBase, _extends({
    ref: ref,
    size: size,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.center,
    className: (0, _classnames.default)('mm-avatar-favicon', className),
    borderColor
  }, props), src ? /*#__PURE__*/_react.default.createElement("img", {
    className: "mm-avatar-favicon__image",
    src: src,
    alt: t('logo', [name])
  }) : /*#__PURE__*/_react.default.createElement(_icon.Icon, _extends({
    name: _icon.IconName.Global,
    color: _designSystem.IconColor.iconDefault,
    size: size
  }, fallbackIconProps)));
});
exports.AvatarFavicon = AvatarFavicon;
AvatarFavicon.propTypes = {
  /**
   * The src accepts the string of the image to be rendered
   */
  src: _propTypes.default.string,
  /**
   * The alt text for the favicon avatar to be rendered
   */
  name: _propTypes.default.string.isRequired,
  /**
   * Props for the fallback icon. All Icon props can be used
   */
  fallbackIconProps: _propTypes.default.object,
  /**
   * The size of the AvatarFavicon
   * Possible values could be 'Size.XS' 16px, 'Size.SM' 24px, 'Size.MD' 32px, 'Size.LG' 40px, 'Size.XL' 48px
   * Defaults to Size.MD
   */
  size: _propTypes.default.oneOf(Object.values(_avatarFavicon.AVATAR_FAVICON_SIZES)),
  /**
   * The border color of the AvatarFavicon
   * Defaults to Color.transparent
   */
  borderColor: _propTypes.default.oneOf(Object.values(_designSystem.BorderColor)),
  /**
   * Additional classNames to be added to the AvatarFavicon
   */
  className: _propTypes.default.string,
  /**
   * AvatarFavicon also accepts all Box props including but not limited to
   * className, as(change root element of HTML element) and margin props
   */
  ..._box.default.propTypes
};
AvatarFavicon.displayName = 'AvatarFavicon';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-favicon\\avatar-favicon.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-favicon\\index.js", {"./avatar-favicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-favicon\\avatar-favicon.js","./avatar-favicon.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-favicon\\avatar-favicon.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-favicon%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AVATAR_FAVICON_SIZES", {
  enumerable: true,
  get: function () {
    return _avatarFavicon2.AVATAR_FAVICON_SIZES;
  }
});
Object.defineProperty(exports, "AvatarFavicon", {
  enumerable: true,
  get: function () {
    return _avatarFavicon.AvatarFavicon;
  }
});
var _avatarFavicon = require("./avatar-favicon");
var _avatarFavicon2 = require("./avatar-favicon.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-favicon\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-icon\\avatar-icon.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-icon%5Cavatar-icon.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AVATAR_ICON_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const AVATAR_ICON_SIZES = {
  XS: _designSystem.Size.XS,
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG,
  XL: _designSystem.Size.XL
};
exports.AVATAR_ICON_SIZES = AVATAR_ICON_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-icon\\avatar-icon.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-icon\\avatar-icon.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../avatar-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\index.ts","../icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\index.ts","./avatar-icon.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-icon\\avatar-icon.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-icon%5Cavatar-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarIcon = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _icon = require("../icon");
var _avatarBase = require("../avatar-base");
var _avatarIcon = require("./avatar-icon.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AvatarIcon = /*#__PURE__*/_react.default.forwardRef(({
  size = _designSystem.Size.MD,
  color = _designSystem.TextColor.primaryDefault,
  backgroundColor = _designSystem.BackgroundColor.primaryMuted,
  className,
  iconProps,
  iconName,
  ...props
}, ref) => /*#__PURE__*/_react.default.createElement(_avatarBase.AvatarBase, _extends({
  ref: ref,
  size: size,
  display: _designSystem.DISPLAY.FLEX,
  alignItems: _designSystem.AlignItems.center,
  justifyContent: _designSystem.JustifyContent.center,
  color: color,
  backgroundColor: backgroundColor,
  borderColor: _designSystem.BorderColor.transparent,
  className: (0, _classnames.default)('mm-avatar-icon', className)
}, props), /*#__PURE__*/_react.default.createElement(_icon.Icon, _extends({
  color: _designSystem.IconColor.inherit,
  name: iconName,
  size: size
}, iconProps))));
exports.AvatarIcon = AvatarIcon;
AvatarIcon.propTypes = {
  /**
   *
   * The name of the icon to display. Should be one of IconName
   */
  iconName: _propTypes.default.oneOf(Object.values(_icon.IconName)).isRequired,
  /**
   * Props for the icon inside AvatarIcon. All Icon props can be used
   */
  iconProps: _propTypes.default.object,
  /**
   * The size of the AvatarIcon
   * Possible values could be 'SIZES.XS' 16px, 'SIZES.SM' 24px, 'SIZES.MD' 32px, 'SIZES.LG' 40px, 'SIZES.XL' 48px
   * Defaults to SIZES.MD
   */
  size: _propTypes.default.oneOf(Object.values(_avatarIcon.AVATAR_ICON_SIZES)),
  /**
   * The background color of the AvatarIcon
   * Defaults to BackgroundColor.primaryMuted
   */
  backgroundColor: _propTypes.default.oneOf(Object.values(_designSystem.BackgroundColor)),
  /**
   * The color of the text inside the AvatarIcon
   * Defaults to TextColor.primaryDefault
   */
  color: _propTypes.default.oneOf([...Object.values(_designSystem.TextColor), ...Object.values(_designSystem.IconColor)]),
  /**
   * Additional classNames to be added to the AvatarIcon
   */
  className: _propTypes.default.string,
  /**
   * AvatarIcon also accepts all Box props including but not limited to
   * className, as(change root element of HTML element) and margin props
   */
  ..._box.default.propTypes
};
AvatarIcon.displayName = 'AvatarIcon';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-icon\\avatar-icon.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-icon\\index.js", {"./avatar-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-icon\\avatar-icon.js","./avatar-icon.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-icon\\avatar-icon.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-icon%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AVATAR_ICON_SIZES", {
  enumerable: true,
  get: function () {
    return _avatarIcon2.AVATAR_ICON_SIZES;
  }
});
Object.defineProperty(exports, "AvatarIcon", {
  enumerable: true,
  get: function () {
    return _avatarIcon.AvatarIcon;
  }
});
var _avatarIcon = require("./avatar-icon");
var _avatarIcon2 = require("./avatar-icon.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-icon\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-network\\avatar-network.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-network%5Cavatar-network.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AVATAR_NETWORK_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const AVATAR_NETWORK_SIZES = {
  XS: _designSystem.Size.XS,
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG,
  XL: _designSystem.Size.XL
};
exports.AVATAR_NETWORK_SIZES = AVATAR_NETWORK_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-network\\avatar-network.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-network\\avatar-network.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../avatar-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\index.ts","./avatar-network.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-network\\avatar-network.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-network%5Cavatar-network.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarNetwork = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _avatarBase = require("../avatar-base");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _avatarNetwork = require("./avatar-network.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AvatarNetwork = /*#__PURE__*/_react.default.forwardRef(({
  size = _designSystem.Size.MD,
  name,
  src,
  showHalo,
  color = _designSystem.TextColor.textDefault,
  backgroundColor = _designSystem.BackgroundColor.backgroundAlternative,
  borderColor = _designSystem.BorderColor.transparent,
  className,
  ...props
}, ref) => {
  const [showFallback, setShowFallback] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    setShowFallback(!src);
  }, [src]);
  const fallbackString = name && name[0] ? name[0] : '?';
  const handleOnError = () => {
    setShowFallback(true);
  };
  return /*#__PURE__*/_react.default.createElement(_avatarBase.AvatarBase, _extends({
    ref: ref,
    size: size,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.center,
    className: (0, _classnames.default)('mm-avatar-network', showHalo && 'mm-avatar-network--with-halo', className),
    backgroundColor,
    borderColor,
    color
  }, props), showFallback ? fallbackString : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showHalo && /*#__PURE__*/_react.default.createElement("img", {
    src: src,
    className: showHalo ? 'mm-avatar-network__network-image--blurred' : '',
    "aria-hidden": "true"
  }), /*#__PURE__*/_react.default.createElement("img", {
    className: showHalo ? 'mm-avatar-network__network-image--size-reduced' : 'mm-avatar-network__network-image',
    onError: handleOnError,
    src: src,
    alt: `${name} logo` || 'network logo'
  })));
});
exports.AvatarNetwork = AvatarNetwork;
AvatarNetwork.propTypes = {
  /**
   * The name accepts the string to render the first alphabet of the Avatar Name
   */
  name: _propTypes.default.string,
  /**
   * The src accepts the string of the image to be rendered
   */
  src: _propTypes.default.string,
  /**
   * The showHalo accepts a boolean prop to render the image with halo effect
   */
  showHalo: _propTypes.default.bool,
  /**
   * The size of the AvatarNetwork
   * Possible values could be Size.XS(16px), Size.SM(24px), Size.MD(32px), Size.LG(40px), Size.XL(48px)
   * Defaults to Size.MD
   */
  size: _propTypes.default.oneOf(Object.values(_avatarNetwork.AVATAR_NETWORK_SIZES)),
  /**
   * The background color of the AvatarNetwork
   * Defaults to BackgroundColor.backgroundAlternative
   */
  backgroundColor: _propTypes.default.oneOf(Object.values(_designSystem.BackgroundColor)),
  /**
   * The background color of the AvatarNetwork
   * Defaults to BorderColor.borderDefault
   */
  borderColor: _propTypes.default.oneOf(Object.values(_designSystem.BorderColor)),
  /**
   * The color of the text inside the AvatarNetwork
   * Defaults to TextColor.textDefault
   */
  color: _propTypes.default.oneOf(Object.values(_designSystem.TextColor)),
  /**
   * Additional classNames to be added to the AvatarNetwork
   */
  className: _propTypes.default.string,
  /**
   * AvatarNetwork also accepts all Box props including but not limited to
   * className, as(change root element of HTML element) and margin props
   */
  ..._box.default.propTypes
};
AvatarNetwork.displayName = 'AvatarNetwork';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-network\\avatar-network.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-network\\index.js", {"./avatar-network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-network\\avatar-network.js","./avatar-network.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-network\\avatar-network.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-network%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AVATAR_NETWORK_SIZES", {
  enumerable: true,
  get: function () {
    return _avatarNetwork2.AVATAR_NETWORK_SIZES;
  }
});
Object.defineProperty(exports, "AvatarNetwork", {
  enumerable: true,
  get: function () {
    return _avatarNetwork.AvatarNetwork;
  }
});
var _avatarNetwork = require("./avatar-network");
var _avatarNetwork2 = require("./avatar-network.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-network\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-token\\avatar-token.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-token%5Cavatar-token.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AVATAR_TOKEN_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const AVATAR_TOKEN_SIZES = {
  XS: _designSystem.Size.XS,
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG,
  XL: _designSystem.Size.XL
};
exports.AVATAR_TOKEN_SIZES = AVATAR_TOKEN_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-token\\avatar-token.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-token\\avatar-token.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../avatar-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\index.ts","./avatar-token.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-token\\avatar-token.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-token%5Cavatar-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarToken = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _avatarBase = require("../avatar-base");
var _designSystem = require("../../../helpers/constants/design-system");
var _avatarToken = require("./avatar-token.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AvatarToken = /*#__PURE__*/_react.default.forwardRef(({
  size = _designSystem.Size.MD,
  name,
  src,
  showHalo,
  color = _designSystem.TextColor.textDefault,
  backgroundColor = _designSystem.BackgroundColor.backgroundAlternative,
  borderColor = _designSystem.BorderColor.transparent,
  className,
  ...props
}, ref) => {
  const [showFallback, setShowFallback] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    setShowFallback(!src);
  }, [src]);
  const handleOnError = () => {
    setShowFallback(true);
  };
  const fallbackString = name && name[0] ? name[0] : '?';
  return /*#__PURE__*/_react.default.createElement(_avatarBase.AvatarBase, _extends({
    ref: ref,
    size: size,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.center,
    className: (0, _classnames.default)('mm-avatar-token', showHalo && 'mm-avatar-token--with-halo', className),
    backgroundColor,
    borderColor,
    color
  }, props), showFallback ? fallbackString : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showHalo && /*#__PURE__*/_react.default.createElement("img", {
    src: src,
    className: showHalo ? 'mm-avatar-token__token-image--blurred' : '',
    "aria-hidden": "true"
  }), /*#__PURE__*/_react.default.createElement("img", {
    className: showHalo ? 'mm-avatar-token__token-image--size-reduced' : 'mm-avatar-token__token-image',
    onError: handleOnError,
    src: src,
    alt: `${name} logo` || 'token logo'
  })));
});
exports.AvatarToken = AvatarToken;
AvatarToken.propTypes = {
  /**
   * The name accepts the string to render the first letter of the AvatarToken. This will be used as the fallback display if no image url is passed to the src
   */
  name: _propTypes.default.string,
  /**
   * The src accepts the string of the image to be rendered
   */
  src: _propTypes.default.string,
  /**
   * The showHalo accepts a boolean prop to render the image with halo effect
   */
  showHalo: _propTypes.default.bool,
  /**
   * The size of the AvatarToken.
   * Possible values could be SIZES.XS(16px), SIZES.SM(24px), SIZES.MD(32px), SIZES.LG(40px), SIZES.XL(48px)
   * Defaults to SIZES.MD
   */
  size: _propTypes.default.oneOf(Object.values(_avatarToken.AVATAR_TOKEN_SIZES)),
  /**
   * The background color of the AvatarToken
   * Defaults to Color.backgroundAlternative
   */
  backgroundColor: _propTypes.default.oneOf(Object.values(_designSystem.BackgroundColor)),
  /**
   * The background color of the AvatarToken
   * Defaults to Color.borderDefault
   */
  borderColor: _propTypes.default.oneOf(Object.values(_designSystem.BorderColor)),
  /**
   * The color of the text inside the AvatarToken
   * Defaults to Color.textDefault
   */
  color: _propTypes.default.oneOf(Object.values(_designSystem.TextColor)),
  /**
   * Additional classNames to be added to the AvatarToken
   */
  className: _propTypes.default.string,
  /**
   * AvatarToken also accepts all Box props including but not limited to
   * className, as(change root element of HTML element) and margin props
   */
  ..._box.default.propTypes
};
AvatarToken.displayName = 'AvatarToken';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-token\\avatar-token.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-token\\index.js", {"./avatar-token":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-token\\avatar-token.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cavatar-token%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AvatarToken", {
  enumerable: true,
  get: function () {
    return _avatarToken.AvatarToken;
  }
});
var _avatarToken = require("./avatar-token");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\avatar-token\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\badge-wrapper\\badge-wrapper.tsx", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","./badge-wrapper.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\badge-wrapper\\badge-wrapper.types.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbadge-wrapper%5Cbadge-wrapper.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BadgeWrapper = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box"));
var _badgeWrapper = require("./badge-wrapper.types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const BadgeWrapper = ({
  children,
  badge,
  badgeContainerProps,
  position = _badgeWrapper.BadgeWrapperPosition.topRight,
  positionObj,
  anchorElementShape = _badgeWrapper.BadgeWrapperAnchorElementShape.circular,
  className = '',
  color,
  ...props
}) => /*#__PURE__*/_react.default.createElement(_box.default, _extends({
  className: (0, _classnames.default)('mm-badge-wrapper', className),
  display: _designSystem.DISPLAY.INLINE_BLOCK
}, props), children, /*#__PURE__*/_react.default.createElement(_box.default, _extends({
  className: (0, _classnames.default)('mm-badge-wrapper__badge-container', {
    [`mm-badge-wrapper__badge-container--${anchorElementShape}-${position}`]: !positionObj
  }),
  style: {
    ...positionObj
  }
}, badgeContainerProps), badge));
exports.BadgeWrapper = BadgeWrapper;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\badge-wrapper\\badge-wrapper.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\badge-wrapper\\badge-wrapper.types.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbadge-wrapper%5Cbadge-wrapper.types.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BadgeWrapperPosition = exports.BadgeWrapperAnchorElementShape = void 0;
let BadgeWrapperPosition;
exports.BadgeWrapperPosition = BadgeWrapperPosition;
(function (BadgeWrapperPosition) {
  BadgeWrapperPosition["topRight"] = "top-right";
  BadgeWrapperPosition["bottomRight"] = "bottom-right";
  BadgeWrapperPosition["topLeft"] = "top-left";
  BadgeWrapperPosition["bottomLeft"] = "bottom-left";
})(BadgeWrapperPosition || (exports.BadgeWrapperPosition = BadgeWrapperPosition = {}));
let BadgeWrapperAnchorElementShape;
exports.BadgeWrapperAnchorElementShape = BadgeWrapperAnchorElementShape;
(function (BadgeWrapperAnchorElementShape) {
  BadgeWrapperAnchorElementShape["rectangular"] = "rectangular";
  BadgeWrapperAnchorElementShape["circular"] = "circular";
})(BadgeWrapperAnchorElementShape || (exports.BadgeWrapperAnchorElementShape = BadgeWrapperAnchorElementShape = {}));

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\badge-wrapper\\badge-wrapper.types.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\badge-wrapper\\index.ts", {"./badge-wrapper":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\badge-wrapper\\badge-wrapper.tsx","./badge-wrapper.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\badge-wrapper\\badge-wrapper.types.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbadge-wrapper%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BadgeWrapper", {
  enumerable: true,
  get: function () {
    return _badgeWrapper.BadgeWrapper;
  }
});
Object.defineProperty(exports, "BadgeWrapperAnchorElementShape", {
  enumerable: true,
  get: function () {
    return _badgeWrapper2.BadgeWrapperAnchorElementShape;
  }
});
Object.defineProperty(exports, "BadgeWrapperPosition", {
  enumerable: true,
  get: function () {
    return _badgeWrapper2.BadgeWrapperPosition;
  }
});
var _badgeWrapper = require("./badge-wrapper");
var _badgeWrapper2 = require("./badge-wrapper.types");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\badge-wrapper\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-alert\\banner-alert.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbanner-alert%5Cbanner-alert.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BANNER_ALERT_SEVERITIES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const BANNER_ALERT_SEVERITIES = {
  DANGER: _designSystem.SEVERITIES.DANGER,
  INFO: _designSystem.SEVERITIES.INFO,
  SUCCESS: _designSystem.SEVERITIES.SUCCESS,
  WARNING: _designSystem.SEVERITIES.WARNING
};
exports.BANNER_ALERT_SEVERITIES = BANNER_ALERT_SEVERITIES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\banner-alert\\banner-alert.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-alert\\banner-alert.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","./banner-alert.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-alert\\banner-alert.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbanner-alert%5Cbanner-alert.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BannerAlert = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _ = require("..");
var _designSystem = require("../../../helpers/constants/design-system");
var _bannerAlert = require("./banner-alert.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const BannerAlert = ({
  children,
  className,
  severity = _designSystem.SEVERITIES.INFO,
  ...props
}) => {
  const severityIcon = () => {
    switch (severity) {
      case _designSystem.SEVERITIES.DANGER:
        return {
          name: _.IconName.Danger,
          color: _designSystem.IconColor.errorDefault
        };
      case _designSystem.SEVERITIES.WARNING:
        return {
          name: _.IconName.Warning,
          color: _designSystem.IconColor.warningDefault
        };
      case _designSystem.SEVERITIES.SUCCESS:
        return {
          name: _.IconName.Confirmation,
          color: _designSystem.IconColor.successDefault
        };
      // Defaults to SEVERITIES.INFO
      default:
        return {
          name: _.IconName.Info,
          color: _designSystem.IconColor.primaryDefault
        };
    }
  };
  const severityBackground = () => {
    switch (severity) {
      case _designSystem.SEVERITIES.DANGER:
        return _designSystem.BackgroundColor.errorMuted;
      case _designSystem.SEVERITIES.WARNING:
        return _designSystem.BackgroundColor.warningMuted;
      case _designSystem.SEVERITIES.SUCCESS:
        return _designSystem.BackgroundColor.successMuted;
      // Defaults to SEVERITIES.INFO
      default:
        return _designSystem.BackgroundColor.primaryMuted;
    }
  };
  return /*#__PURE__*/_react.default.createElement(_.BannerBase, _extends({
    startAccessory: /*#__PURE__*/_react.default.createElement(_.Icon, _extends({
      size: _.IconSize.Lg
    }, severityIcon())),
    backgroundColor: severityBackground(),
    paddingLeft: 2,
    className: (0, _classnames.default)('mm-banner-alert', {
      [`mm-banner-alert--severity-${severity}`]: Object.values(_bannerAlert.BANNER_ALERT_SEVERITIES).includes(severity)
    }, className)
  }, props), children);
};
exports.BannerAlert = BannerAlert;
BannerAlert.propTypes = {
  /**
   * An additional className to apply to the Banner
   */
  className: _propTypes.default.string,
  /**
   * Use the `severity` prop and the `SEVERITIES` object from `./ui/helpers/constants/design-system.js` to change the context of `Banner`.
   * Possible options: `SEVERITIES.INFO`(Default), `SEVERITIES.WARNING`, `SEVERITIES.DANGER`, `SEVERITIES.SUCCESS`
   */
  severity: _propTypes.default.oneOf(Object.values(_bannerAlert.BANNER_ALERT_SEVERITIES)),
  /**
   * BannerAlert accepts all the props from BannerBase
   */
  ..._.BannerBase.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\banner-alert\\banner-alert.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-alert\\index.js", {"./banner-alert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-alert\\banner-alert.js","./banner-alert.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-alert\\banner-alert.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbanner-alert%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BANNER_ALERT_SEVERITIES", {
  enumerable: true,
  get: function () {
    return _bannerAlert2.BANNER_ALERT_SEVERITIES;
  }
});
Object.defineProperty(exports, "BannerAlert", {
  enumerable: true,
  get: function () {
    return _bannerAlert.BannerAlert;
  }
});
var _bannerAlert = require("./banner-alert");
var _bannerAlert2 = require("./banner-alert.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\banner-alert\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-base\\banner-base.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../button-icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\index.js","../icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbanner-base%5Cbanner-base.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BannerBase = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _deprecated = require("../button-icon/deprecated");
var _ = require("..");
var _deprecated2 = require("../icon/deprecated");
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const BannerBase = ({
  className,
  title,
  titleProps,
  description,
  descriptionProps,
  children,
  actionButtonLabel,
  actionButtonOnClick,
  actionButtonProps,
  startAccessory,
  onClose,
  closeButtonProps,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('mm-banner-base', className),
    display: _designSystem.DISPLAY.FLEX,
    gap: 2,
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
    borderRadius: _designSystem.BorderRadius.SM,
    padding: 3
  }, props), startAccessory && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, startAccessory), /*#__PURE__*/_react.default.createElement("div", null, title && /*#__PURE__*/_react.default.createElement(_.Text, _extends({
    className: "mm-banner-base__title",
    variant: _designSystem.TextVariant.bodyLgMedium,
    as: "h5"
  }, titleProps), title), description && /*#__PURE__*/_react.default.createElement(_.Text, descriptionProps, description), children && typeof children === 'object' ? children : /*#__PURE__*/_react.default.createElement(_.Text, null, children), actionButtonLabel && /*#__PURE__*/_react.default.createElement(_.ButtonLink, _extends({
    size: _designSystem.Size.auto,
    onClick: actionButtonOnClick
  }, actionButtonProps), actionButtonLabel)), onClose && /*#__PURE__*/_react.default.createElement(_deprecated.ButtonIcon, _extends({
    className: "mm-banner-base__close-button",
    marginLeft: "auto",
    iconName: _deprecated2.ICON_NAMES.CLOSE,
    size: _designSystem.Size.SM,
    ariaLabel: "Close" // TODO: i18n
    ,
    onClick: onClose
  }, closeButtonProps)));
};
exports.BannerBase = BannerBase;
BannerBase.propTypes = {
  /**
   * The title of the BannerBase
   */
  title: _propTypes.default.string,
  /**
   * Additional props to pass to the `Text` component used for the `title` text
   */
  titleProps: _propTypes.default.shape(_.Text.PropTypes),
  /**
   * The description is the content area below BannerBase title
   */
  description: _propTypes.default.string,
  /**
   * Additional props to pass to the `Text` component used for the `description` text
   */
  descriptionProps: _propTypes.default.shape(_.Text.PropTypes),
  /**
   * The children is an alternative to using the description prop for BannerBase content below the title
   */
  children: _propTypes.default.node,
  /**
   * Label for action button (ButtonLink) of the BannerBase below the children
   */
  actionButtonLabel: _propTypes.default.string,
  /**
   * Props for action button (ButtonLink) of the BannerBase below the children
   */
  actionButtonProps: _propTypes.default.shape(_.ButtonLink.PropTypes),
  /**
   * The onClick handler for the action button (ButtonLink)
   */
  actionButtonOnClick: _propTypes.default.func,
  /**
   * The start(defualt left) content area of BannerBase
   */
  startAccessory: _propTypes.default.node,
  /**
   * The onClick handler for the close button
   * When passed this will allow for the close button to show
   */
  onClose: _propTypes.default.func,
  /**
   * The props to pass to the close button
   */
  closeButtonProps: _propTypes.default.shape(_deprecated.ButtonIcon.PropTypes),
  /**
   * An additional className to apply to the BannerBase
   */
  className: _propTypes.default.string,
  /**
   * BannerBase accepts all the props from Box
   */
  ..._box.default.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\banner-base\\banner-base.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-base\\index.js", {"./banner-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-base\\banner-base.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbanner-base%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BannerBase", {
  enumerable: true,
  get: function () {
    return _bannerBase.BannerBase;
  }
});
var _bannerBase = require("./banner-base");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\banner-base\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-tip\\banner-tip.constants.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbanner-tip%5Cbanner-tip.constants.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BannerTipLogoType = void 0;
let BannerTipLogoType;
exports.BannerTipLogoType = BannerTipLogoType;
(function (BannerTipLogoType) {
  BannerTipLogoType["Greeting"] = "greeting";
  BannerTipLogoType["Chat"] = "chat";
})(BannerTipLogoType || (exports.BannerTipLogoType = BannerTipLogoType = {}));

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\banner-tip\\banner-tip.constants.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-tip\\banner-tip.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","./banner-tip.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-tip\\banner-tip.constants.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbanner-tip%5Cbanner-tip.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BannerTip = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box"));
var _ = require("..");
var _bannerTip = require("./banner-tip.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const BannerTip = ({
  children,
  className,
  logoType = _bannerTip.BannerTipLogoType.Greeting,
  logoWrapperProps,
  logoProps,
  startAccessory,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_.BannerBase, _extends({
    startAccessory: startAccessory || /*#__PURE__*/_react.default.createElement(_box.default, _extends({
      display: _designSystem.DISPLAY.FLEX,
      alignItems: _designSystem.AlignItems.center
    }, logoWrapperProps), /*#__PURE__*/_react.default.createElement(_box.default, _extends({
      as: "img",
      className: "mm-banner-tip--logo",
      src: `images/fox-${logoType}.png`,
      alt: logoType
    }, logoProps))),
    borderColor: _designSystem.BorderColor.borderDefault,
    className: (0, _classnames.default)('mm-banner-tip', className)
  }, props), children);
};
exports.BannerTip = BannerTip;
BannerTip.propTypes = {
  /**
   * An additional className to apply to the Banner
   */
  className: _propTypes.default.string,
  /**
   * Use the `logoType` prop with the `BannerTipLogoType` enum from `../../component-library` to change the logo image of `BannerTip`.
   * Possible options: `BannerTipLogoType.Greeting`(Default), `BannerTipLogoType.Chat`,
   */
  logoType: _propTypes.default.oneOf(Object.values(_bannerTip.BannerTipLogoType)),
  /**
   * logoProps accepts all the props from Box
   */
  logoProps: _propTypes.default.shape(_box.default.propTypes),
  /**
   * logoWrapperProps accepts all the props from Box
   */
  logoWrapperProps: _propTypes.default.shape(_box.default.propTypes),
  /**
   * The start(defualt left) content area of BannerBase
   */
  startAccessory: _propTypes.default.node,
  /**
   * BannerTip accepts all the props from BannerBase
   */
  ..._.BannerBase.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\banner-tip\\banner-tip.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-tip\\index.js", {"./banner-tip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-tip\\banner-tip.js","./banner-tip.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-tip\\banner-tip.constants.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbanner-tip%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BannerTip", {
  enumerable: true,
  get: function () {
    return _bannerTip.BannerTip;
  }
});
Object.defineProperty(exports, "BannerTipLogoType", {
  enumerable: true,
  get: function () {
    return _bannerTip2.BannerTipLogoType;
  }
});
var _bannerTip = require("./banner-tip");
var _bannerTip2 = require("./banner-tip.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\banner-tip\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\button-base.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-base%5Cbutton-base.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BUTTON_BASE_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const BUTTON_BASE_SIZES = {
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG
};
exports.BUTTON_BASE_SIZES = BUTTON_BASE_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-base\\button-base.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\button-base.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\index.ts","../text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","./button-base.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\button-base.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-base%5Cbutton-base.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonBase = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _icon = require("../icon");
var _text = require("../text");
var _designSystem = require("../../../helpers/constants/design-system");
var _buttonBase = require("./button-base.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ButtonBase = ({
  as = 'button',
  block,
  children,
  className,
  href,
  ellipsis = false,
  externalLink,
  size = _buttonBase.BUTTON_BASE_SIZES.MD,
  startIconName,
  startIconProps,
  endIconName,
  endIconProps,
  loading,
  disabled,
  iconLoadingProps,
  textProps,
  color = _designSystem.TextColor.textDefault,
  ...props
}) => {
  const Tag = href ? 'a' : as;
  if (Tag === 'a' && externalLink) {
    props.target = '_blank';
    props.rel = 'noopener noreferrer';
  }
  return /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
    as: Tag,
    backgroundColor: _designSystem.BackgroundColor.backgroundAlternative,
    color: loading ? _designSystem.TextColor.transparent : color,
    href: href,
    paddingLeft: 4,
    paddingRight: 4,
    ellipsis: ellipsis,
    className: (0, _classnames.default)('mm-button-base', {
      [`mm-button-base--size-${size}`]: Object.values(_buttonBase.BUTTON_BASE_SIZES).includes(size),
      'mm-button-base--loading': loading,
      'mm-button-base--disabled': disabled,
      'mm-button-base--block': block,
      'mm-button-base--ellipsis': ellipsis
    }, className),
    disabled: disabled,
    display: _designSystem.DISPLAY.INLINE_FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center,
    borderRadius: _designSystem.BorderRadius.pill
  }, props), startIconName && /*#__PURE__*/_react.default.createElement(_icon.Icon, _extends({
    name: startIconName,
    size: _icon.IconSize.Sm,
    marginInlineEnd: 1
  }, startIconProps, {
    color: loading ? _designSystem.IconColor.transparent : startIconProps === null || startIconProps === void 0 ? void 0 : startIconProps.color
  })), typeof children === 'string' && !ellipsis && !loading ? children : /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
    as: "span",
    ellipsis: ellipsis,
    variant: _designSystem.TextVariant.inherit,
    color: loading ? _designSystem.TextColor.transparent : color
  }, textProps), children), endIconName && /*#__PURE__*/_react.default.createElement(_icon.Icon, _extends({
    name: endIconName,
    size: _icon.IconSize.Sm,
    marginInlineStart: 1
  }, endIconProps, {
    color: loading ? _designSystem.IconColor.transparent : endIconProps === null || endIconProps === void 0 ? void 0 : endIconProps.color
  })), loading && /*#__PURE__*/_react.default.createElement(_icon.Icon, _extends({
    className: "mm-button-base__icon-loading",
    name: _icon.IconName.Loading,
    color: color,
    size: _icon.IconSize.Md
  }, iconLoadingProps)));
};
exports.ButtonBase = ButtonBase;
ButtonBase.propTypes = {
  /**
   * The polymorphic `as` prop allows you to change the root HTML element of the Button component between `button` and `a` tag
   */
  as: _propTypes.default.string,
  /**
   * Boolean prop to quickly activate box prop display block
   */
  block: _propTypes.default.bool,
  /**
   * Additional props to pass to the Text component that wraps the button children
   */
  buttonTextProps: _propTypes.default.shape(_text.Text.PropTypes),
  /**
   * The children to be rendered inside the ButtonBase
   */
  children: _propTypes.default.node,
  /**
   * An additional className to apply to the ButtonBase.
   */
  className: _propTypes.default.string,
  /**
   * Boolean to disable button
   */
  disabled: _propTypes.default.bool,
  /**
   * When an `href` prop is passed, ButtonBase will automatically change the root element to be an `a` (anchor) tag
   */
  href: _propTypes.default.string,
  /**
   * Used for long strings that can be cut off...
   */
  ellipsis: _propTypes.default.bool,
  /**
   * Boolean indicating if the link targets external content, it will cause the link to open in a new tab
   */
  externalLink: _propTypes.default.bool,
  /**
   * Add icon to start (left side) of button text passing icon name
   * The name of the icon to display. Should be one of IconName
   */
  startIconName: _propTypes.default.oneOf(Object.values(_icon.IconName)),
  /**
   * iconProps accepts all the props from Icon
   */
  startIconProps: _propTypes.default.object,
  /**
   * Add icon to end (right side) of button text passing icon name
   * The name of the icon to display. Should be one of IconName
   */
  endIconName: _propTypes.default.oneOf(Object.values(_icon.IconName)),
  /**
   * iconProps accepts all the props from Icon
   */
  endIconProps: _propTypes.default.object,
  /**
   * iconLoadingProps accepts all the props from Icon
   */
  iconLoadingProps: _propTypes.default.object,
  /**
   * Boolean to show loading spinner in button
   */
  loading: _propTypes.default.bool,
  /**
   * The size of the ButtonBase.
   * Possible values could be 'Size.SM'(32px), 'Size.MD'(40px), 'Size.LG'(48px),
   */
  size: _propTypes.default.oneOfType([_propTypes.default.shape(_buttonBase.BUTTON_BASE_SIZES), _propTypes.default.string]),
  /**
   * textProps accepts all the props from Icon
   */
  textProps: _propTypes.default.shape(_text.Text.PropTypes),
  /**
   * ButtonBase accepts all the props from Box
   */
  ..._box.default.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-base\\button-base.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\index.js", {"./button-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\button-base.js","./button-base.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\button-base.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-base%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BUTTON_BASE_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonBase2.BUTTON_BASE_SIZES;
  }
});
Object.defineProperty(exports, "ButtonBase", {
  enumerable: true,
  get: function () {
    return _buttonBase.ButtonBase;
  }
});
var _buttonBase = require("./button-base");
var _buttonBase2 = require("./button-base.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-base\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\button-icon.tsx", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\index.ts","./button-icon.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\button-icon.types.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-icon%5Cbutton-icon.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonIcon = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box"));
var _icon = require("../icon");
var _buttonIcon = require("./button-icon.types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const buttonIconSizeToIconSize = {
  [_buttonIcon.ButtonIconSize.Sm]: _icon.IconSize.Sm,
  [_buttonIcon.ButtonIconSize.Lg]: _icon.IconSize.Lg
};
const ButtonIcon = /*#__PURE__*/_react.default.forwardRef(({
  ariaLabel,
  as = 'button',
  className = '',
  color = _designSystem.IconColor.iconDefault,
  href,
  size = _buttonIcon.ButtonIconSize.Lg,
  iconName,
  disabled,
  iconProps,
  ...props
}, ref) => {
  const Tag = href ? 'a' : as;
  const isDisabled = disabled && Tag === 'button';
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    "aria-label": ariaLabel,
    as: Tag,
    className: (0, _classnames.default)('mm-button-icon', `mm-button-icon--size-${String(size)}`, {
      'mm-button-icon--disabled': Boolean(disabled)
    }, className),
    color: color
  }, isDisabled ? {
    disabled: true
  } : {}, {
    // only allow disabled attribute to be passed down to the Box when the as prop is equal to a button element
    display: _designSystem.DISPLAY.INLINE_FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center,
    borderRadius: _designSystem.BorderRadius.LG,
    backgroundColor: _designSystem.BackgroundColor.transparent
  }, href ? {
    href
  } : {}, {
    ref: ref
  }, props), /*#__PURE__*/_react.default.createElement(_icon.Icon, _extends({
    name: iconName,
    size: buttonIconSizeToIconSize[size]
  }, iconProps)));
});
exports.ButtonIcon = ButtonIcon;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-icon\\button-icon.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\button-icon.types.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-icon%5Cbutton-icon.types.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonIconSize = void 0;
let ButtonIconSize;
exports.ButtonIconSize = ButtonIconSize;
(function (ButtonIconSize) {
  ButtonIconSize["Sm"] = "sm";
  ButtonIconSize["Lg"] = "lg";
})(ButtonIconSize || (exports.ButtonIconSize = ButtonIconSize = {}));

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-icon\\button-icon.types.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\button-icon.constants.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-icon%5Cdeprecated%5Cbutton-icon.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BUTTON_ICON_SIZES = void 0;
var _designSystem = require("../../../../helpers/constants/design-system");
const BUTTON_ICON_SIZES = {
  SM: _designSystem.Size.SM,
  LG: _designSystem.Size.LG
};
exports.BUTTON_ICON_SIZES = BUTTON_ICON_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-icon\\deprecated\\button-icon.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\button-icon.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\index.js","./button-icon.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\button-icon.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-icon%5Cdeprecated%5Cbutton-icon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonIcon = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _deprecated = require("../../icon/deprecated");
var _buttonIcon = require("./button-icon.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ButtonIcon = ({
  ariaLabel,
  as = 'button',
  className,
  color = _designSystem.IconColor.iconDefault,
  href,
  size = _designSystem.Size.LG,
  iconName,
  disabled,
  iconProps,
  ...props
}) => {
  const Tag = href ? 'a' : as;
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    "aria-label": ariaLabel,
    as: Tag,
    className: (0, _classnames.default)('mm-button-icon', `mm-button-icon--size-${size}`, {
      'mm-button-icon--disabled': disabled
    }, className),
    color: color,
    disabled: disabled,
    display: _designSystem.DISPLAY.INLINE_FLEX,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center,
    borderRadius: _designSystem.BorderRadius.LG,
    backgroundColor: _designSystem.BackgroundColor.transparent,
    href: href
  }, props), /*#__PURE__*/_react.default.createElement(_deprecated.Icon, _extends({
    name: iconName,
    size: size
  }, iconProps)));
};
exports.ButtonIcon = ButtonIcon;
ButtonIcon.propTypes = {
  /**
   *  String that adds an accessible name for ButtonIcon
   */
  ariaLabel: _propTypes.default.string.isRequired,
  /**
   * The polymorphic `as` prop allows you to change the root HTML element of the Button component between `button` and `a` tag
   */
  as: _propTypes.default.string,
  /**
   * An additional className to apply to the ButtonIcon.
   */
  className: _propTypes.default.string,
  /**
   * The color of the ButtonIcon component should use the IconColor object from
   * ./ui/helpers/constants/design-system.js
   */
  color: _propTypes.default.oneOf(Object.values(_designSystem.IconColor)),
  /**
   * Boolean to disable button
   */
  disabled: _propTypes.default.bool,
  /**
   * When an `href` prop is passed, ButtonIcon will automatically change the root element to be an `a` (anchor) tag
   */
  href: _propTypes.default.string,
  /**
   * The name of the icon to display. Should be one of IconName
   */
  iconName: _propTypes.default.oneOf(Object.values(_deprecated.ICON_NAMES)).isRequired,
  /**
   * iconProps accepts all the props from Icon
   */
  iconProps: _propTypes.default.object,
  /**
   * The size of the ButtonIcon.
   * Possible values could be 'Size.SM' 24px, 'Size.LG' 32px,
   */
  size: _propTypes.default.oneOf(Object.values(_buttonIcon.BUTTON_ICON_SIZES)),
  /**
   * ButtonIcon accepts all the props from Box
   */
  ..._box.default.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-icon\\deprecated\\button-icon.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\index.js", {"./button-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\button-icon.js","./button-icon.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\deprecated\\button-icon.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-icon%5Cdeprecated%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BUTTON_ICON_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonIcon2.BUTTON_ICON_SIZES;
  }
});
Object.defineProperty(exports, "ButtonIcon", {
  enumerable: true,
  get: function () {
    return _buttonIcon.ButtonIcon;
  }
});
var _buttonIcon = require("./button-icon");
var _buttonIcon2 = require("./button-icon.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-icon\\deprecated\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\index.ts", {"./button-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\button-icon.tsx","./button-icon.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\button-icon.types.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-icon%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ButtonIcon", {
  enumerable: true,
  get: function () {
    return _buttonIcon.ButtonIcon;
  }
});
Object.defineProperty(exports, "ButtonIconSize", {
  enumerable: true,
  get: function () {
    return _buttonIcon2.ButtonIconSize;
  }
});
var _buttonIcon = require("./button-icon");
var _buttonIcon2 = require("./button-icon.types");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-icon\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-link\\button-link.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-link%5Cbutton-link.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BUTTON_LINK_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const BUTTON_LINK_SIZES = {
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG,
  AUTO: _designSystem.Size.auto,
  INHERIT: _designSystem.Size.inherit
};
exports.BUTTON_LINK_SIZES = BUTTON_LINK_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-link\\button-link.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-link\\button-link.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../button-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\index.js","./button-link.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-link\\button-link.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-link%5Cbutton-link.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonLink = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _buttonBase = require("../button-base");
var _designSystem = require("../../../helpers/constants/design-system");
var _buttonLink = require("./button-link.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ButtonLink = ({
  className,
  danger,
  disabled,
  size = _designSystem.Size.auto,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_buttonBase.ButtonBase, _extends({
    className: (0, _classnames.default)(className, 'mm-button-link', {
      'mm-button-link--type-danger': danger,
      'mm-button-link--disabled': disabled,
      'mm-button-link--size-inherit': size === _buttonLink.BUTTON_LINK_SIZES.INHERIT,
      'mm-button-link--size-auto': size === _buttonLink.BUTTON_LINK_SIZES.AUTO
    }),
    paddingLeft: 0,
    paddingRight: 0,
    size: size === _buttonLink.BUTTON_LINK_SIZES.INHERIT ? null : size,
    backgroundColor: _designSystem.BackgroundColor.transparent,
    color: danger ? _designSystem.Color.errorDefault : _designSystem.Color.primaryDefault,
    borderRadius: null,
    startIconProps: {
      size: size === _buttonLink.BUTTON_LINK_SIZES.INHERIT ? _designSystem.Size.inherit : _designSystem.Size.SM
    },
    endIconProps: {
      size: size === _buttonLink.BUTTON_LINK_SIZES.INHERIT ? _designSystem.Size.inherit : _designSystem.Size.SM
    },
    iconLoadingProps: {
      size: size === _buttonLink.BUTTON_LINK_SIZES.INHERIT ? _designSystem.Size.inherit : _designSystem.Size.MD
    },
    disabled
  }, props));
};
exports.ButtonLink = ButtonLink;
ButtonLink.propTypes = {
  /**
   * An additional className to apply to the ButtonLink.
   */
  className: _propTypes.default.string,
  /**
   * Boolean to change button type to Danger when true
   */
  danger: _propTypes.default.bool,
  /**
   * Boolean to disable button
   */
  disabled: _propTypes.default.bool,
  /**
   * Possible size values: 'SIZES.AUTO'(auto), 'SIZES.SM'(32px), 'SIZES.MD'(40px), 'SIZES.LG'(48px), 'SIZES.INHERIT'(inherits parents font-size)
   * Default value is 'SIZES.AUTO'.
   */
  size: _propTypes.default.oneOf(Object.values(_buttonLink.BUTTON_LINK_SIZES)),
  /**
   * ButtonLink accepts all the props from ButtonBase
   */
  ..._buttonBase.ButtonBase.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-link\\button-link.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-link\\index.js", {"./button-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-link\\button-link.js","./button-link.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-link\\button-link.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-link%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BUTTON_LINK_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonLink2.BUTTON_LINK_SIZES;
  }
});
Object.defineProperty(exports, "ButtonLink", {
  enumerable: true,
  get: function () {
    return _buttonLink.ButtonLink;
  }
});
var _buttonLink = require("./button-link");
var _buttonLink2 = require("./button-link.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-link\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-primary\\button-primary.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-primary%5Cbutton-primary.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BUTTON_PRIMARY_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const BUTTON_PRIMARY_SIZES = {
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG
};
exports.BUTTON_PRIMARY_SIZES = BUTTON_PRIMARY_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-primary\\button-primary.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-primary\\button-primary.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../button-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\index.js","./button-primary.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-primary\\button-primary.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-primary%5Cbutton-primary.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonPrimary = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _buttonBase = require("../button-base");
var _designSystem = require("../../../helpers/constants/design-system");
var _buttonPrimary = require("./button-primary.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ButtonPrimary = ({
  className,
  danger,
  disabled,
  size = _buttonPrimary.BUTTON_PRIMARY_SIZES.MD,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_buttonBase.ButtonBase, _extends({
    backgroundColor: danger ? _designSystem.BackgroundColor.errorDefault : _designSystem.BackgroundColor.primaryDefault,
    color: danger ? _designSystem.TextColor.errorInverse : _designSystem.TextColor.primaryInverse,
    className: (0, _classnames.default)(className, 'mm-button-primary', {
      'mm-button-primary--type-danger': danger,
      'mm-button-primary--disabled': disabled
    }),
    size: size,
    disabled
  }, props));
};
exports.ButtonPrimary = ButtonPrimary;
ButtonPrimary.propTypes = {
  /**
   * An additional className to apply to the ButtonPrimary.
   */
  className: _propTypes.default.string,
  /**
   * When true, `ButtonPrimary` color becomes Danger.
   */
  danger: _propTypes.default.bool,
  /**
   * Boolean to disable button
   */
  disabled: _propTypes.default.bool,
  /**
   * Possible size values: 'SIZES.SM'(32px), 'SIZES.MD'(40px), 'SIZES.LG'(48px).
   * Default value is 'SIZES.MD'.
   */
  size: _propTypes.default.oneOf(Object.values(_buttonPrimary.BUTTON_PRIMARY_SIZES)),
  /**
   * ButtonPrimary accepts all the props from ButtonBase
   */
  ..._buttonBase.ButtonBase.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-primary\\button-primary.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-primary\\index.js", {"./button-primary":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-primary\\button-primary.js","./button-primary.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-primary\\button-primary.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-primary%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BUTTON_PRIMARY_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonPrimary2.BUTTON_PRIMARY_SIZES;
  }
});
Object.defineProperty(exports, "ButtonPrimary", {
  enumerable: true,
  get: function () {
    return _buttonPrimary.ButtonPrimary;
  }
});
var _buttonPrimary = require("./button-primary");
var _buttonPrimary2 = require("./button-primary.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-primary\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-secondary\\button-secondary.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-secondary%5Cbutton-secondary.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BUTTON_SECONDARY_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const BUTTON_SECONDARY_SIZES = {
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG
};
exports.BUTTON_SECONDARY_SIZES = BUTTON_SECONDARY_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-secondary\\button-secondary.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-secondary\\button-secondary.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../button-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\index.js","./button-secondary.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-secondary\\button-secondary.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-secondary%5Cbutton-secondary.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonSecondary = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _buttonBase = require("../button-base");
var _designSystem = require("../../../helpers/constants/design-system");
var _buttonSecondary = require("./button-secondary.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ButtonSecondary = ({
  className,
  danger,
  disabled,
  size = _buttonSecondary.BUTTON_SECONDARY_SIZES.MD,
  ...props
}) => {
  const buttonColor = danger ? _designSystem.Color.errorDefault : _designSystem.Color.primaryDefault;
  return /*#__PURE__*/_react.default.createElement(_buttonBase.ButtonBase, _extends({
    backgroundColor: _designSystem.Color.transparent,
    borderColor: buttonColor,
    color: buttonColor,
    className: (0, _classnames.default)(className, 'mm-button-secondary', {
      'mm-button-secondary--type-danger': danger,
      'mm-button-secondary--disabled': disabled
    }),
    size: size,
    disabled
  }, props));
};
exports.ButtonSecondary = ButtonSecondary;
ButtonSecondary.propTypes = {
  /**
   * An additional className to apply to the ButtonSecondary.
   */
  className: _propTypes.default.string,
  /**
   * When true, ButtonSecondary color becomes Danger.
   */
  danger: _propTypes.default.bool,
  /**
   * Boolean to disable button
   */
  disabled: _propTypes.default.bool,
  /**
   * Possible size values: 'SIZES.SM'(32px), 'SIZES.MD'(40px), 'SIZES.LG'(48px).
   * Default value is 'SIZES.MD'.
   */
  size: _propTypes.default.oneOf(Object.values(_buttonSecondary.BUTTON_SECONDARY_SIZES)),
  /**
   * ButtonSecondary accepts all the props from ButtonBase
   */
  ..._buttonBase.ButtonBase.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-secondary\\button-secondary.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-secondary\\index.js", {"./button-secondary":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-secondary\\button-secondary.js","./button-secondary.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-secondary\\button-secondary.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton-secondary%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BUTTON_SECONDARY_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonSecondary2.BUTTON_SECONDARY_SIZES;
  }
});
Object.defineProperty(exports, "ButtonSecondary", {
  enumerable: true,
  get: function () {
    return _buttonSecondary.ButtonSecondary;
  }
});
var _buttonSecondary = require("./button-secondary");
var _buttonSecondary2 = require("./button-secondary.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button-secondary\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button\\button.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton%5Cbutton.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BUTTON_VARIANT = exports.BUTTON_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const BUTTON_SIZES = {
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG,
  INHERIT: _designSystem.Size.inherit,
  AUTO: _designSystem.Size.auto
};
exports.BUTTON_SIZES = BUTTON_SIZES;
const BUTTON_VARIANT = {
  PRIMARY: 'primary',
  SECONDARY: 'secondary',
  LINK: 'link'
};
exports.BUTTON_VARIANT = BUTTON_VARIANT;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button\\button.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button\\button.js", {"../button-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-link\\index.js","../button-primary":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-primary\\index.js","../button-secondary":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-secondary\\index.js","./button.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button\\button.constants.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton%5Cbutton.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _buttonPrimary = require("../button-primary");
var _buttonSecondary = require("../button-secondary");
var _buttonLink = require("../button-link");
var _button = require("./button.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Button = ({
  variant,
  ...props
}) => {
  switch (variant) {
    case _button.BUTTON_VARIANT.PRIMARY:
      return /*#__PURE__*/_react.default.createElement(_buttonPrimary.ButtonPrimary, props);
    case _button.BUTTON_VARIANT.SECONDARY:
      return /*#__PURE__*/_react.default.createElement(_buttonSecondary.ButtonSecondary, props);
    case _button.BUTTON_VARIANT.LINK:
      return /*#__PURE__*/_react.default.createElement(_buttonLink.ButtonLink, props);
    default:
      return /*#__PURE__*/_react.default.createElement(_buttonPrimary.ButtonPrimary, props);
  }
};
exports.Button = Button;
Button.propTypes = {
  /**
   * Select the variant of Button.
   * Possible values could be 'BUTTON_VARIANT.PRIMARY', 'BUTTON_VARIANT.SECONDARY', 'BUTTON_VARIANT.LINK'
   * Button will default to `BUTTON_VARIANT.PRIMARY`
   */
  variant: _propTypes.default.oneOf(Object.values(_button.BUTTON_VARIANT)),
  /**
   * Button accepts all the props from ButtonPrimary (same props as ButtonSecondary & ButtonLink)
   */
  ..._buttonPrimary.ButtonPrimary.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button\\button.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button\\index.js", {"./button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button\\button.js","./button.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button\\button.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cbutton%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BUTTON_SIZES", {
  enumerable: true,
  get: function () {
    return _button2.BUTTON_SIZES;
  }
});
Object.defineProperty(exports, "BUTTON_VARIANT", {
  enumerable: true,
  get: function () {
    return _button2.BUTTON_VARIANT;
  }
});
Object.defineProperty(exports, "Button", {
  enumerable: true,
  get: function () {
    return _button.Button;
  }
});
var _button = require("./button");
var _button2 = require("./button.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\button\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\form-text-field\\form-text-field.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../help-text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\help-text\\index.js","../label":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\label\\index.js","../text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cform-text-field%5Cform-text-field.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormTextField = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _textField = require("../text-field");
var _helpText = require("../help-text");
var _label = require("../label");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const FormTextField = ({
  autoComplete,
  autoFocus,
  className,
  defaultValue,
  disabled,
  error,
  helpText,
  helpTextProps,
  id,
  inputProps,
  inputRef,
  label,
  labelProps,
  startAccessory,
  maxLength,
  name,
  onBlur,
  onChange,
  onFocus,
  placeholder,
  readOnly,
  required,
  endAccessory,
  size = _designSystem.Size.MD,
  textFieldProps,
  truncate,
  type = 'text',
  value,
  ...props
}) => /*#__PURE__*/_react.default.createElement(_box.default, _extends({
  className: (0, _classnames.default)('mm-form-text-field', {
    'mm-form-text-field--disabled': disabled
  }, className),
  display: _designSystem.DISPLAY.FLEX,
  flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
}, props), label && /*#__PURE__*/_react.default.createElement(_label.Label, _extends({
  htmlFor: id
}, labelProps, {
  className: (0, _classnames.default)('mm-form-text-field__label', labelProps === null || labelProps === void 0 ? void 0 : labelProps.className)
}), label), /*#__PURE__*/_react.default.createElement(_textField.TextField, _extends({
  className: (0, _classnames.default)('mm-form-text-field__text-field', textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.className),
  id: id,
  autoComplete,
  autoFocus,
  defaultValue,
  disabled,
  error,
  id,
  inputProps,
  inputRef,
  startAccessory,
  maxLength,
  name,
  onBlur,
  onChange,
  onFocus,
  placeholder,
  readOnly,
  required,
  endAccessory,
  size,
  truncate,
  type,
  value
}, textFieldProps)), helpText && /*#__PURE__*/_react.default.createElement(_helpText.HelpText, _extends({
  severity: error && _designSystem.SEVERITIES.DANGER,
  marginTop: 1
}, helpTextProps, {
  className: (0, _classnames.default)('mm-form-text-field__help-text', helpTextProps === null || helpTextProps === void 0 ? void 0 : helpTextProps.className)
}), helpText));
exports.FormTextField = FormTextField;
FormTextField.propTypes = {
  /**
   * An additional className to apply to the form-text-field
   */
  className: _propTypes.default.string,
  /**
   * The id of the FormTextField
   * Required if label prop exists to ensure accessibility
   *
   * @param {object} props - The props passed to the component.
   * @param {string} propName - The prop name in this case 'id'.
   * @param {string} componentName - The name of the component.
   */
  id: (props, propName, componentName) => {
    if (props.label && !props[propName]) {
      return new Error(`If a label prop exists you must provide an ${propName} prop for the label's htmlFor attribute for accessibility. Warning coming from ${componentName} ui/components/component-library/form-text-field/form-text-field.js`);
    }
    return null;
  },
  /**
   * The content of the Label component
   */
  label: _propTypes.default.string,
  /**
   * Props that are applied to the Label component
   */
  labelProps: _propTypes.default.object,
  /**
   * The content of the HelpText component
   */
  helpText: _propTypes.default.string,
  /**
   * Props that are applied to the HelpText component
   */
  helpTextProps: _propTypes.default.object,
  /**
   * Props that are applied to the TextField component
   */
  textFieldProps: _propTypes.default.object,
  /**
   * FormTextField accepts all the props from TextField and Box
   */
  ..._textField.TextField.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\form-text-field\\form-text-field.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\form-text-field\\index.js", {"./form-text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\form-text-field\\form-text-field.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cform-text-field%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FormTextField", {
  enumerable: true,
  get: function () {
    return _formTextField.FormTextField;
  }
});
var _formTextField = require("./form-text-field");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\form-text-field\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\header-base\\header-base.tsx", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cheader-base%5Cheader-base.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderBase = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const HeaderBase = ({
  startAccessory,
  endAccessory,
  className = '',
  children,
  childrenWrapperProps,
  startAccessoryWrapperProps,
  endAccessoryWrapperProps,
  ...props
}) => {
  const startAccessoryRef = (0, _react.useRef)(null);
  const endAccessoryRef = (0, _react.useRef)(null);
  const [accessoryMinWidth, setAccessoryMinWidth] = (0, _react.useState)();
  (0, _react.useEffect)(() => {
    function handleResize() {
      if (startAccessoryRef.current && endAccessoryRef.current) {
        const accMinWidth = Math.max(startAccessoryRef.current.scrollWidth, endAccessoryRef.current.scrollWidth);
        setAccessoryMinWidth(accMinWidth);
      } else if (startAccessoryRef.current && !endAccessoryRef.current) {
        setAccessoryMinWidth(startAccessoryRef.current.scrollWidth);
      } else if (!startAccessoryRef.current && endAccessoryRef.current) {
        setAccessoryMinWidth(endAccessoryRef.current.scrollWidth);
      } else {
        setAccessoryMinWidth(0);
      }
    }
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [startAccessoryRef, endAccessoryRef, children]);
  const getTitleStyles = (0, _react.useMemo)(() => {
    if (startAccessory && !endAccessory) {
      return {
        marginRight: `${accessoryMinWidth}px`
      };
    } else if (!startAccessory && endAccessory) {
      return {
        marginLeft: `${accessoryMinWidth}px`
      };
    }
    return {};
  }, [accessoryMinWidth, startAccessory, endAccessory]);
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('mm-header-base', className),
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, props), startAccessory && /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    ref: startAccessoryRef,
    style: children ? {
      minWidth: `${accessoryMinWidth}px`
    } : undefined
  }, startAccessoryWrapperProps), startAccessory), children && /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    width: _designSystem.BLOCK_SIZES.FULL,
    style: getTitleStyles
  }, childrenWrapperProps), children), endAccessory && /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.flexEnd,
    ref: endAccessoryRef,
    style: children ? {
      minWidth: `${accessoryMinWidth}px`
    } : undefined
  }, endAccessoryWrapperProps), endAccessory));
};
exports.HeaderBase = HeaderBase;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\header-base\\header-base.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\header-base\\index.ts", {"./header-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\header-base\\header-base.tsx"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cheader-base%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "HeaderBase", {
  enumerable: true,
  get: function () {
    return _headerBase.HeaderBase;
  }
});
var _headerBase = require("./header-base");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\header-base\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\help-text\\help-text.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Chelp-text%5Chelp-text.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HelpText = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _text = require("../text");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const HelpText = ({
  severity,
  color = _designSystem.Color.textDefault,
  className,
  children,
  ...props
}) => {
  const severityColor = () => {
    switch (severity) {
      case _designSystem.SEVERITIES.DANGER:
        return _designSystem.TextColor.errorDefault;
      case _designSystem.SEVERITIES.WARNING:
        return _designSystem.TextColor.warningDefault;
      case _designSystem.SEVERITIES.SUCCESS:
        return _designSystem.TextColor.successDefault;
      case _designSystem.SEVERITIES.INFO:
        return _designSystem.TextColor.infoDefault;
      // Defaults to SEVERITIES.INFO
      default:
        return _designSystem.TextColor.textDefault;
    }
  };
  return /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
    className: (0, _classnames.default)('mm-help-text', className),
    as: children && typeof children === 'object' ? 'div' : 'p',
    variant: _designSystem.TextVariant.bodyXs,
    color: severity ? severityColor() : color
  }, props), children);
};
exports.HelpText = HelpText;
HelpText.propTypes = {
  /**
   * The color of the HelpText will be overridden if there is a severity passed
   * Defaults to Color.textDefault
   */
  color: _propTypes.default.oneOf(Object.values(_designSystem.TextColor)),
  /**
   * The content of the help-text
   */
  children: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * Additional classNames to be added to the HelpText component
   */
  className: _propTypes.default.string,
  /**
   * HelpText also accepts all Text and Box props
   */
  ..._text.Text.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\help-text\\help-text.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\help-text\\index.js", {"./help-text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\help-text\\help-text.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Chelp-text%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "HelpText", {
  enumerable: true,
  get: function () {
    return _helpText.HelpText;
  }
});
var _helpText = require("./help-text");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\help-text\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\icon.constants.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cicon%5Cdeprecated%5Cicon.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ICON_SIZES = exports.ICON_NAMES = void 0;
var _designSystem = require("../../../../helpers/constants/design-system");
/**
 * @deprecated `ICON_NAMES` has been deprecated in favour of the `IconName` enum
 *
 * import { Icon, IconName } from '../../component-library';
 */
/* eslint-disable prefer-destructuring*/ // process.env is not a standard JavaScript object, so we are not able to use object destructuring
const ICON_NAMES = JSON.parse("{\"ADD_SQUARE\":\"add-square\",\"ADD\":\"add\",\"ARROW_2_DOWN\":\"arrow-2-down\",\"ARROW_2_LEFT\":\"arrow-2-left\",\"ARROW_2_RIGHT\":\"arrow-2-right\",\"ARROW_2_UP_RIGHT\":\"arrow-2-up-right\",\"ARROW_2_UP\":\"arrow-2-up\",\"ARROW_DOUBLE_LEFT\":\"arrow-double-left\",\"ARROW_DOUBLE_RIGHT\":\"arrow-double-right\",\"ARROW_DOWN\":\"arrow-down\",\"ARROW_LEFT\":\"arrow-left\",\"ARROW_RIGHT\":\"arrow-right\",\"ARROW_UP\":\"arrow-up\",\"BAN\":\"ban\",\"BANK_TOKEN\":\"bank-token\",\"BANK\":\"bank\",\"BOLD\":\"bold\",\"BOOK\":\"book\",\"BOOKMARK\":\"bookmark\",\"BRIDGE\":\"bridge\",\"CALCULATOR\":\"calculator\",\"CARD_POS\":\"card-pos\",\"CARD_TOKEN\":\"card-token\",\"CARD\":\"card\",\"CATEGORY\":\"category\",\"CHART\":\"chart\",\"CHECK\":\"check\",\"CIRCLE_X\":\"circle-x\",\"CLOCK\":\"clock\",\"CLOSE\":\"close\",\"CODE_CIRCLE\":\"code-circle\",\"COIN\":\"coin\",\"CONFIRMATION\":\"confirmation\",\"CONNECT\":\"connect\",\"COPY_SUCCESS\":\"copy-success\",\"COPY\":\"copy\",\"DANGER\":\"danger\",\"DARK\":\"dark\",\"DATA\":\"data\",\"DIAGRAM\":\"diagram\",\"DOCUMENT_CODE\":\"document-code\",\"DOWNLOAD\":\"download\",\"EDIT\":\"edit\",\"ERASER\":\"eraser\",\"ETHEREUM\":\"ethereum\",\"EXPAND\":\"expand\",\"EXPLORE\":\"explore\",\"EXPORT\":\"export\",\"EYE_SLASH\":\"eye-slash\",\"EYE\":\"eye\",\"FILE\":\"file\",\"FILTER\":\"filter\",\"FLAG\":\"flag\",\"FLASH_SLASH\":\"flash-slash\",\"FLASH\":\"flash\",\"FLASK\":\"flask\",\"FULL_CIRCLE\":\"full-circle\",\"GAS\":\"gas\",\"GLOBAL_SEARCH\":\"global-search\",\"GLOBAL\":\"global\",\"GRAPH\":\"graph\",\"HARDWARE\":\"hardware\",\"HEART\":\"heart\",\"HIERARCHY\":\"hierarchy\",\"HOME\":\"home\",\"IMPORT\":\"import\",\"INFO\":\"info\",\"KEY\":\"key\",\"LIGHT\":\"light\",\"LINK\":\"link\",\"LOADING\":\"loading\",\"LOCK_CIRCLE\":\"lock-circle\",\"LOCK_SLASH\":\"lock-slash\",\"LOCK\":\"lock\",\"LOGIN\":\"login\",\"LOGOUT\":\"logout\",\"MENU\":\"menu\",\"MESSAGE_QUESTION\":\"message-question\",\"MESSAGES\":\"messages\",\"MINUS_SQUARE\":\"minus-square\",\"MINUS\":\"minus\",\"MOBILE\":\"mobile\",\"MONEY\":\"money\",\"MONITOR\":\"monitor\",\"MORE_HORIZONTAL\":\"more-horizontal\",\"MORE_VERTICAL\":\"more-vertical\",\"NOTIFICATION_CIRCLE\":\"notification-circle\",\"NOTIFICATION\":\"notification\",\"PASSWORD_CHECK\":\"password-check\",\"PEOPLE\":\"people\",\"PLUG\":\"plug\",\"PROGRAMMING_ARROWS\":\"programming-arrows\",\"QR_CODE\":\"qr-code\",\"QUESTION\":\"question\",\"RECEIVED\":\"received\",\"REFRESH\":\"refresh\",\"SAVE\":\"save\",\"SCAN_BARCODE\":\"scan-barcode\",\"SCAN_FOCUS\":\"scan-focus\",\"SCAN\":\"scan\",\"SCROLL\":\"scroll\",\"SEARCH\":\"search\",\"SECURITY_CARD\":\"security-card\",\"SECURITY_CROSS\":\"security-cross\",\"SECURITY_KEY\":\"security-key\",\"SECURITY_SEARCH\":\"security-search\",\"SECURITY_SLASH\":\"security-slash\",\"SECURITY_TICK\":\"security-tick\",\"SECURITY_TIME\":\"security-time\",\"SECURITY_USER\":\"security-user\",\"SECURITY\":\"security\",\"SEND_1\":\"send-1\",\"SEND_2\":\"send-2\",\"SETTING\":\"setting\",\"SHARE\":\"share\",\"SLASH\":\"slash\",\"SNAPS_MOBILE\":\"snaps-mobile\",\"SNAPS_PLUS\":\"snaps-plus\",\"SNAPS\":\"snaps\",\"SPEEDOMETER\":\"speedometer\",\"SQUARE\":\"square\",\"STAR\":\"star\",\"STUDENT\":\"student\",\"SWAP_HORIZONTAL\":\"swap-horizontal\",\"SWAP_VERTICAL\":\"swap-vertical\",\"TAG\":\"tag\",\"TILDE\":\"tilde\",\"TIMER\":\"timer\",\"TINT\":\"tint\",\"TRASH\":\"trash\",\"TREND_DOWN\":\"trend-down\",\"TREND_UP\":\"trend-up\",\"TWITTER\":\"twitter\",\"UPLOAD\":\"upload\",\"USB\":\"usb\",\"USER_CHECK\":\"user-check\",\"USER_CIRCLE_ADD\":\"user-circle-add\",\"USER_CIRCLE\":\"user-circle\",\"USER\":\"user\",\"WALLET_CARD\":\"wallet-card\",\"WALLET_MONEY\":\"wallet-money\",\"WALLET\":\"wallet\",\"WARNING\":\"warning\",\"WIFI\":\"wifi\"}");

/**
 * @deprecated `ICON_SIZES` has been deprecated in favour of the `IconSize` enum
 *
 * import { Icon, IconSize, IconName } from '../../component-library';
 */
exports.ICON_NAMES = ICON_NAMES;
const ICON_SIZES = {
  XS: _designSystem.Size.XS,
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG,
  XL: _designSystem.Size.XL,
  AUTO: _designSystem.Size.inherit
};
exports.ICON_SIZES = ICON_SIZES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\icon\\deprecated\\icon.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\icon.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","./icon.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\icon.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cicon%5Cdeprecated%5Cicon.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Icon = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _box = _interopRequireDefault(require("../../../ui/box/box"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _icon = require("./icon.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
/**
 * @deprecated This is the javascript version of `Icon` which has been deprecated in favour of the TypeScript version of the same name.
 *
 * To use the TS version update the imports and enums as follows:
 *
 * `import { Icon, IconSize, IconName } from '../../component-library'`;
 */

const Icon = ({
  name,
  size = _designSystem.Size.MD,
  color = _designSystem.IconColor.inherit,
  className,
  style,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)(className, 'mm-icon', `mm-icon--size-${size}`),
    as: "span",
    display: _designSystem.DISPLAY.INLINE_BLOCK,
    color: color,
    style: {
      /**
       * To reduce the possibility of injection attacks
       * the icon component uses mask-image instead of rendering
       * the svg directly.
       */
      maskImage: `url('./images/icons/${name}.svg')`,
      WebkitMaskImage: `url('./images/icons/${name}.svg')`,
      ...style
    }
  }, props));
};
exports.Icon = Icon;
Icon.propTypes = {
  /**
   * The name of the icon to display. Should be one of ICON_NAMES
   */
  name: _propTypes.default.oneOf(Object.values(_icon.ICON_NAMES)).isRequired,
  /**
   * The size of the Icon.
   * Possible values could be SIZES.XS (12px), SIZES.SM (16px), SIZES.MD (20px), SIZES.LG (24px), SIZES.XL (32px),
   * Default value is SIZES.MD (20px).
   */
  size: _propTypes.default.oneOf(Object.values(_icon.ICON_SIZES)),
  /**
   * The color of the icon.
   * Defaults to IconColor.inherit.
   */
  color: _propTypes.default.oneOf(Object.values(_designSystem.IconColor)),
  /**
   * An additional className to apply to the icon.
   */
  className: _propTypes.default.string,
  /**
   * Addition style properties to apply to the icon.
   * The Icon component uses inline styles to apply the icon's mask-image so be wary of overriding
   */
  style: _propTypes.default.object,
  /**
   * Icon accepts all the props from Box
   */
  ..._box.default.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\icon\\deprecated\\icon.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\index.js", {"./icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\icon.js","./icon.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\icon.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cicon%5Cdeprecated%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ICON_NAMES", {
  enumerable: true,
  get: function () {
    return _icon2.ICON_NAMES;
  }
});
Object.defineProperty(exports, "ICON_SIZES", {
  enumerable: true,
  get: function () {
    return _icon2.ICON_SIZES;
  }
});
Object.defineProperty(exports, "Icon", {
  enumerable: true,
  get: function () {
    return _icon.Icon;
  }
});
var _icon = require("./icon");
var _icon2 = require("./icon.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\icon\\deprecated\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\icon.tsx", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","./icon.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\icon.types.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cicon%5Cicon.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Icon = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _icon = require("./icon.types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const Icon = ({
  name,
  size = _icon.IconSize.Md,
  color = _designSystem.IconColor.inherit,
  className = '',
  style,
  ...props
}) => /*#__PURE__*/_react.default.createElement(_box.default, _extends({
  className: (0, _classnames.default)(className, 'mm-icon', `mm-icon--size-${size}`),
  as: "span",
  display: _designSystem.DISPLAY.INLINE_BLOCK,
  color: color,
  style: {
    /**
     * To reduce the possibility of injection attacks
     * the icon component uses mask-image instead of rendering
     * the svg directly.
     */
    maskImage: `url('./images/icons/${String(name)}.svg')`,
    WebkitMaskImage: `url('./images/icons/${String(name)}.svg')`,
    ...style
  }
}, props));
exports.Icon = Icon;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\icon\\icon.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\icon.types.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cicon%5Cicon.types.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconSize = exports.IconName = void 0;
let IconSize;
/**
 * The IconName enum contains all the possible icon names.
 *
 * Search for an icon: https://metamask.github.io/metamask-storybook/?path=/story/components-componentlibrary-icon--default-story
 *
 * Add an icon: https://metamask.github.io/metamask-storybook/?path=/docs/components-componentlibrary-icon--default-story#adding-a-new-icon
 *
 */
exports.IconSize = IconSize;
(function (IconSize) {
  IconSize["Xs"] = "xs";
  IconSize["Sm"] = "sm";
  IconSize["Md"] = "md";
  IconSize["Lg"] = "lg";
  IconSize["Xl"] = "xl";
  IconSize["Inherit"] = "inherit";
})(IconSize || (exports.IconSize = IconSize = {}));
let IconName;
exports.IconName = IconName;
(function (IconName) {
  IconName["AddSquare"] = "add-square";
  IconName["Add"] = "add";
  IconName["Arrow2Down"] = "arrow-2-down";
  IconName["Arrow2Left"] = "arrow-2-left";
  IconName["Arrow2Right"] = "arrow-2-right";
  IconName["Arrow2Up"] = "arrow-2-up";
  IconName["Arrow2UpRight"] = "arrow-2-up-right";
  IconName["ArrowDoubleLeft"] = "arrow-double-left";
  IconName["ArrowDoubleRight"] = "arrow-double-right";
  IconName["ArrowDown"] = "arrow-down";
  IconName["ArrowLeft"] = "arrow-left";
  IconName["ArrowRight"] = "arrow-right";
  IconName["ArrowUp"] = "arrow-up";
  IconName["BankToken"] = "bank-token";
  IconName["Bank"] = "bank";
  IconName["Book"] = "book";
  IconName["Bookmark"] = "bookmark";
  IconName["Bridge"] = "bridge";
  IconName["Calculator"] = "calculator";
  IconName["CardPos"] = "card-pos";
  IconName["CardToken"] = "card-token";
  IconName["Card"] = "card";
  IconName["Category"] = "category";
  IconName["Chart"] = "chart";
  IconName["Check"] = "check";
  IconName["Clock"] = "clock";
  IconName["Close"] = "close";
  IconName["CodeCircle"] = "code-circle";
  IconName["Coin"] = "coin";
  IconName["Confirmation"] = "confirmation";
  IconName["Connect"] = "connect";
  IconName["CopySuccess"] = "copy-success";
  IconName["Copy"] = "copy";
  IconName["Danger"] = "danger";
  IconName["Dark"] = "dark";
  IconName["Data"] = "data";
  IconName["Diagram"] = "diagram";
  IconName["DocumentCode"] = "document-code";
  IconName["Edit"] = "edit";
  IconName["Eraser"] = "eraser";
  IconName["Ethereum"] = "ethereum";
  IconName["Expand"] = "expand";
  IconName["Explore"] = "explore";
  IconName["Export"] = "export";
  IconName["EyeSlash"] = "eye-slash";
  IconName["Eye"] = "eye";
  IconName["Filter"] = "filter";
  IconName["Flag"] = "flag";
  IconName["FlashSlash"] = "flash-slash";
  IconName["Flash"] = "flash";
  IconName["FullCircle"] = "full-circle";
  IconName["Gas"] = "gas";
  IconName["GlobalSearch"] = "global-search";
  IconName["Global"] = "global";
  IconName["Graph"] = "graph";
  IconName["Hardware"] = "hardware";
  IconName["Heart"] = "heart";
  IconName["Hierarchy"] = "hierarchy";
  IconName["Home"] = "home";
  IconName["Import"] = "import";
  IconName["Info"] = "info";
  IconName["Key"] = "key";
  IconName["Light"] = "light";
  IconName["Link"] = "link";
  IconName["Loading"] = "loading";
  IconName["LockCircle"] = "lock-circle";
  IconName["LockSlash"] = "lock-slash";
  IconName["Lock"] = "lock";
  IconName["Login"] = "login";
  IconName["Logout"] = "logout";
  IconName["Menu"] = "menu";
  IconName["MessageQuestion"] = "message-question";
  IconName["Messages"] = "messages";
  IconName["MinusSquare"] = "minus-square";
  IconName["Minus"] = "minus";
  IconName["Mobile"] = "mobile";
  IconName["Money"] = "money";
  IconName["Monitor"] = "monitor";
  IconName["MoreHorizontal"] = "more-horizontal";
  IconName["MoreVertical"] = "more-vertical";
  IconName["NotificationCircle"] = "notification-circle";
  IconName["Notification"] = "notification";
  IconName["PasswordCheck"] = "password-check";
  IconName["People"] = "people";
  IconName["ProgrammingArrows"] = "programming-arrows";
  IconName["Question"] = "question";
  IconName["Received"] = "received";
  IconName["Refresh"] = "refresh";
  IconName["Save"] = "save";
  IconName["ScanBarcode"] = "scan-barcode";
  IconName["ScanFocus"] = "scan-focus";
  IconName["Scan"] = "scan";
  IconName["Scroll"] = "scroll";
  IconName["Search"] = "search";
  IconName["SecurityCard"] = "security-card";
  IconName["SecurityCross"] = "security-cross";
  IconName["SecurityKey"] = "security-key";
  IconName["SecuritySearch"] = "security-search";
  IconName["SecuritySlash"] = "security-slash";
  IconName["SecurityTick"] = "security-tick";
  IconName["SecurityTime"] = "security-time";
  IconName["SecurityUser"] = "security-user";
  IconName["Security"] = "security";
  IconName["Send1"] = "send-1";
  IconName["Send2"] = "send-2";
  IconName["Setting"] = "setting";
  IconName["Slash"] = "slash";
  IconName["SnapsMobile"] = "snaps-mobile";
  IconName["SnapsPlus"] = "snaps-plus";
  IconName["Snaps"] = "snaps";
  IconName["Speedometer"] = "speedometer";
  IconName["Star"] = "star";
  IconName["Stake"] = "stake";
  IconName["Student"] = "student";
  IconName["SwapHorizontal"] = "swap-horizontal";
  IconName["SwapVertical"] = "swap-vertical";
  IconName["Tag"] = "tag";
  IconName["Tilde"] = "tilde";
  IconName["Timer"] = "timer";
  IconName["Trash"] = "trash";
  IconName["TrendDown"] = "trend-down";
  IconName["TrendUp"] = "trend-up";
  IconName["UserCircleAdd"] = "user-circle-add";
  IconName["UserCircle"] = "user-circle";
  IconName["User"] = "user";
  IconName["WalletCard"] = "wallet-card";
  IconName["WalletMoney"] = "wallet-money";
  IconName["Wallet"] = "wallet";
  IconName["Warning"] = "warning";
  IconName["Twitter"] = "twitter";
  IconName["QrCode"] = "qr-code";
  IconName["UserCheck"] = "user-check";
  IconName["Ban"] = "ban";
  IconName["Bold"] = "bold";
  IconName["CircleX"] = "circle-x";
  IconName["Download"] = "download";
  IconName["File"] = "file";
  IconName["Flask"] = "flask";
  IconName["Plug"] = "plug";
  IconName["Share"] = "share";
  IconName["Square"] = "square";
  IconName["Tint"] = "tint";
  IconName["Upload"] = "upload";
  IconName["Usb"] = "usb";
  IconName["Wifi"] = "wifi";
})(IconName || (exports.IconName = IconName = {}));

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\icon\\icon.types.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\index.ts", {"./icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\icon.tsx","./icon.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\icon.types.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cicon%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Icon", {
  enumerable: true,
  get: function () {
    return _icon.Icon;
  }
});
Object.defineProperty(exports, "IconName", {
  enumerable: true,
  get: function () {
    return _icon2.IconName;
  }
});
Object.defineProperty(exports, "IconSize", {
  enumerable: true,
  get: function () {
    return _icon2.IconSize;
  }
});
var _icon = require("./icon");
var _icon2 = require("./icon.types");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\icon\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js", {"./avatar-account":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-account\\index.js","./avatar-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-base\\index.ts","./avatar-favicon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-favicon\\index.js","./avatar-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-icon\\index.js","./avatar-network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-network\\index.js","./avatar-token":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-token\\index.js","./badge-wrapper":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\badge-wrapper\\index.ts","./banner-alert":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-alert\\index.js","./banner-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-base\\index.js","./banner-tip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\banner-tip\\index.js","./button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button\\index.js","./button-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-base\\index.js","./button-icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-icon\\index.ts","./button-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-link\\index.js","./button-primary":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-primary\\index.js","./button-secondary":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\button-secondary\\index.js","./form-text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\form-text-field\\index.js","./header-base":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\header-base\\index.ts","./help-text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\help-text\\index.js","./icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\index.ts","./input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\input\\index.js","./label":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\label\\index.js","./modal-content":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-content\\index.ts","./modal-focus":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-focus\\index.ts","./modal-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-header\\index.ts","./modal-overlay":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-overlay\\index.ts","./picker-network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\picker-network\\index.js","./popover-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\popover-header\\index.ts","./tag":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\tag\\index.js","./tag-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\tag-url\\index.js","./text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","./text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\index.js","./text-field-search":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field-search\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AVATAR_FAVICON_SIZES", {
  enumerable: true,
  get: function () {
    return _avatarFavicon.AVATAR_FAVICON_SIZES;
  }
});
Object.defineProperty(exports, "AVATAR_ICON_SIZES", {
  enumerable: true,
  get: function () {
    return _avatarIcon.AVATAR_ICON_SIZES;
  }
});
Object.defineProperty(exports, "AVATAR_NETWORK_SIZES", {
  enumerable: true,
  get: function () {
    return _avatarNetwork.AVATAR_NETWORK_SIZES;
  }
});
Object.defineProperty(exports, "AvatarAccount", {
  enumerable: true,
  get: function () {
    return _avatarAccount.AvatarAccount;
  }
});
Object.defineProperty(exports, "AvatarAccountDiameter", {
  enumerable: true,
  get: function () {
    return _avatarAccount.AvatarAccountDiameter;
  }
});
Object.defineProperty(exports, "AvatarAccountSize", {
  enumerable: true,
  get: function () {
    return _avatarAccount.AvatarAccountSize;
  }
});
Object.defineProperty(exports, "AvatarAccountVariant", {
  enumerable: true,
  get: function () {
    return _avatarAccount.AvatarAccountVariant;
  }
});
Object.defineProperty(exports, "AvatarBase", {
  enumerable: true,
  get: function () {
    return _avatarBase.AvatarBase;
  }
});
Object.defineProperty(exports, "AvatarFavicon", {
  enumerable: true,
  get: function () {
    return _avatarFavicon.AvatarFavicon;
  }
});
Object.defineProperty(exports, "AvatarIcon", {
  enumerable: true,
  get: function () {
    return _avatarIcon.AvatarIcon;
  }
});
Object.defineProperty(exports, "AvatarNetwork", {
  enumerable: true,
  get: function () {
    return _avatarNetwork.AvatarNetwork;
  }
});
Object.defineProperty(exports, "AvatarToken", {
  enumerable: true,
  get: function () {
    return _avatarToken.AvatarToken;
  }
});
Object.defineProperty(exports, "BANNER_ALERT_SEVERITIES", {
  enumerable: true,
  get: function () {
    return _bannerAlert.BANNER_ALERT_SEVERITIES;
  }
});
Object.defineProperty(exports, "BUTTON_BASE_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonBase.BUTTON_BASE_SIZES;
  }
});
Object.defineProperty(exports, "BUTTON_LINK_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonLink.BUTTON_LINK_SIZES;
  }
});
Object.defineProperty(exports, "BUTTON_PRIMARY_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonPrimary.BUTTON_PRIMARY_SIZES;
  }
});
Object.defineProperty(exports, "BUTTON_SECONDARY_SIZES", {
  enumerable: true,
  get: function () {
    return _buttonSecondary.BUTTON_SECONDARY_SIZES;
  }
});
Object.defineProperty(exports, "BUTTON_SIZES", {
  enumerable: true,
  get: function () {
    return _button.BUTTON_SIZES;
  }
});
Object.defineProperty(exports, "BUTTON_VARIANT", {
  enumerable: true,
  get: function () {
    return _button.BUTTON_VARIANT;
  }
});
Object.defineProperty(exports, "BadgeWrapper", {
  enumerable: true,
  get: function () {
    return _badgeWrapper.BadgeWrapper;
  }
});
Object.defineProperty(exports, "BadgeWrapperAnchorElementShape", {
  enumerable: true,
  get: function () {
    return _badgeWrapper.BadgeWrapperAnchorElementShape;
  }
});
Object.defineProperty(exports, "BadgeWrapperPosition", {
  enumerable: true,
  get: function () {
    return _badgeWrapper.BadgeWrapperPosition;
  }
});
Object.defineProperty(exports, "BannerAlert", {
  enumerable: true,
  get: function () {
    return _bannerAlert.BannerAlert;
  }
});
Object.defineProperty(exports, "BannerBase", {
  enumerable: true,
  get: function () {
    return _bannerBase.BannerBase;
  }
});
Object.defineProperty(exports, "BannerTip", {
  enumerable: true,
  get: function () {
    return _bannerTip.BannerTip;
  }
});
Object.defineProperty(exports, "BannerTipLogoType", {
  enumerable: true,
  get: function () {
    return _bannerTip.BannerTipLogoType;
  }
});
Object.defineProperty(exports, "Button", {
  enumerable: true,
  get: function () {
    return _button.Button;
  }
});
Object.defineProperty(exports, "ButtonBase", {
  enumerable: true,
  get: function () {
    return _buttonBase.ButtonBase;
  }
});
Object.defineProperty(exports, "ButtonIcon", {
  enumerable: true,
  get: function () {
    return _buttonIcon.ButtonIcon;
  }
});
Object.defineProperty(exports, "ButtonIconSize", {
  enumerable: true,
  get: function () {
    return _buttonIcon.ButtonIconSize;
  }
});
Object.defineProperty(exports, "ButtonLink", {
  enumerable: true,
  get: function () {
    return _buttonLink.ButtonLink;
  }
});
Object.defineProperty(exports, "ButtonPrimary", {
  enumerable: true,
  get: function () {
    return _buttonPrimary.ButtonPrimary;
  }
});
Object.defineProperty(exports, "ButtonSecondary", {
  enumerable: true,
  get: function () {
    return _buttonSecondary.ButtonSecondary;
  }
});
Object.defineProperty(exports, "FormTextField", {
  enumerable: true,
  get: function () {
    return _formTextField.FormTextField;
  }
});
Object.defineProperty(exports, "HeaderBase", {
  enumerable: true,
  get: function () {
    return _headerBase.HeaderBase;
  }
});
Object.defineProperty(exports, "HelpText", {
  enumerable: true,
  get: function () {
    return _helpText.HelpText;
  }
});
Object.defineProperty(exports, "INPUT_TYPES", {
  enumerable: true,
  get: function () {
    return _input.INPUT_TYPES;
  }
});
Object.defineProperty(exports, "Icon", {
  enumerable: true,
  get: function () {
    return _icon.Icon;
  }
});
Object.defineProperty(exports, "IconName", {
  enumerable: true,
  get: function () {
    return _icon.IconName;
  }
});
Object.defineProperty(exports, "IconSize", {
  enumerable: true,
  get: function () {
    return _icon.IconSize;
  }
});
Object.defineProperty(exports, "Input", {
  enumerable: true,
  get: function () {
    return _input.Input;
  }
});
Object.defineProperty(exports, "InvisibleCharacter", {
  enumerable: true,
  get: function () {
    return _text.InvisibleCharacter;
  }
});
Object.defineProperty(exports, "Label", {
  enumerable: true,
  get: function () {
    return _label.Label;
  }
});
Object.defineProperty(exports, "ModalContent", {
  enumerable: true,
  get: function () {
    return _modalContent.ModalContent;
  }
});
Object.defineProperty(exports, "ModalContentSize", {
  enumerable: true,
  get: function () {
    return _modalContent.ModalContentSize;
  }
});
Object.defineProperty(exports, "ModalFocus", {
  enumerable: true,
  get: function () {
    return _modalFocus.ModalFocus;
  }
});
Object.defineProperty(exports, "ModalHeader", {
  enumerable: true,
  get: function () {
    return _modalHeader.ModalHeader;
  }
});
Object.defineProperty(exports, "ModalOverlay", {
  enumerable: true,
  get: function () {
    return _modalOverlay.ModalOverlay;
  }
});
Object.defineProperty(exports, "PickerNetwork", {
  enumerable: true,
  get: function () {
    return _pickerNetwork.PickerNetwork;
  }
});
Object.defineProperty(exports, "PopoverHeader", {
  enumerable: true,
  get: function () {
    return _popoverHeader.PopoverHeader;
  }
});
Object.defineProperty(exports, "TEXT_FIELD_SIZES", {
  enumerable: true,
  get: function () {
    return _textField.TEXT_FIELD_SIZES;
  }
});
Object.defineProperty(exports, "TEXT_FIELD_TYPES", {
  enumerable: true,
  get: function () {
    return _textField.TEXT_FIELD_TYPES;
  }
});
Object.defineProperty(exports, "Tag", {
  enumerable: true,
  get: function () {
    return _tag.Tag;
  }
});
Object.defineProperty(exports, "TagUrl", {
  enumerable: true,
  get: function () {
    return _tagUrl.TagUrl;
  }
});
Object.defineProperty(exports, "Text", {
  enumerable: true,
  get: function () {
    return _text.Text;
  }
});
Object.defineProperty(exports, "TextDirection", {
  enumerable: true,
  get: function () {
    return _text.TextDirection;
  }
});
Object.defineProperty(exports, "TextField", {
  enumerable: true,
  get: function () {
    return _textField.TextField;
  }
});
Object.defineProperty(exports, "TextFieldSearch", {
  enumerable: true,
  get: function () {
    return _textFieldSearch.TextFieldSearch;
  }
});
Object.defineProperty(exports, "ValidTag", {
  enumerable: true,
  get: function () {
    return _text.ValidTag;
  }
});
var _avatarAccount = require("./avatar-account");
var _avatarFavicon = require("./avatar-favicon");
var _avatarIcon = require("./avatar-icon");
var _avatarNetwork = require("./avatar-network");
var _avatarToken = require("./avatar-token");
var _badgeWrapper = require("./badge-wrapper");
var _avatarBase = require("./avatar-base");
var _button = require("./button");
var _buttonBase = require("./button-base");
var _buttonIcon = require("./button-icon");
var _buttonLink = require("./button-link");
var _buttonPrimary = require("./button-primary");
var _buttonSecondary = require("./button-secondary");
var _formTextField = require("./form-text-field");
var _headerBase = require("./header-base");
var _helpText = require("./help-text");
var _icon = require("./icon");
var _label = require("./label");
var _pickerNetwork = require("./picker-network");
var _tag = require("./tag");
var _tagUrl = require("./tag-url");
var _text = require("./text");
var _input = require("./input");
var _textField = require("./text-field");
var _textFieldSearch = require("./text-field-search");
var _modalContent = require("./modal-content");
var _modalOverlay = require("./modal-overlay");
var _modalFocus = require("./modal-focus");
var _bannerBase = require("./banner-base");
var _bannerAlert = require("./banner-alert");
var _bannerTip = require("./banner-tip");
var _popoverHeader = require("./popover-header");
var _modalHeader = require("./modal-header");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\input\\index.js", {"./input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\input\\input.js","./input.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\input\\input.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cinput%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "INPUT_TYPES", {
  enumerable: true,
  get: function () {
    return _input2.INPUT_TYPES;
  }
});
Object.defineProperty(exports, "Input", {
  enumerable: true,
  get: function () {
    return _input.Input;
  }
});
var _input = require("./input");
var _input2 = require("./input.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\input\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\input\\input.constants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cinput%5Cinput.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INPUT_TYPES = void 0;
const INPUT_TYPES = {
  TEXT: 'text',
  NUMBER: 'number',
  PASSWORD: 'password',
  SEARCH: 'search'
};
exports.INPUT_TYPES = INPUT_TYPES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\input\\input.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\input\\input.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","./input.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\input\\input.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cinput%5Cinput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box"));
var _text = require("../text");
var _input = require("./input.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const Input = /*#__PURE__*/_react.default.forwardRef(({
  autoComplete,
  autoFocus,
  className,
  defaultValue,
  disabled,
  error,
  id,
  maxLength,
  name,
  onBlur,
  onChange,
  onFocus,
  placeholder,
  readOnly,
  required,
  type = 'text',
  value,
  textVariant = _designSystem.TextVariant.bodyMd,
  disableStateStyles,
  ...props
}, ref) => /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
  className: (0, _classnames.default)('mm-input', {
    'mm-input--disable-state-styles': disableStateStyles,
    'mm-input--disabled': disabled && !disableStateStyles
  }, className),
  "aria-invalid": error,
  as: "input",
  autoComplete: autoComplete ? 'on' : 'off',
  autoFocus: autoFocus,
  backgroundColor: _designSystem.BackgroundColor.transparent,
  borderStyle: _designSystem.BorderStyle.none,
  defaultValue: defaultValue,
  disabled: disabled,
  id: id,
  margin: 0,
  maxLength: maxLength,
  name: name,
  onBlur: onBlur,
  onChange: onChange,
  onFocus: onFocus,
  padding: 0,
  placeholder: placeholder,
  readOnly: readOnly,
  ref: ref,
  required: required,
  value: value,
  variant: textVariant,
  type: type
}, props)));
exports.Input = Input;
Input.propTypes = {
  /**
   * Autocomplete allows the browser to predict the value based on earlier typed values
   */
  autoComplete: _propTypes.default.bool,
  /**
   * If `true`, the input will be focused during the first mount.
   */
  autoFocus: _propTypes.default.bool,
  /**
   * An additional className to apply to the input
   */
  className: _propTypes.default.string,
  /**
   * The default input value, useful when not controlling the component.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  /**
   * If `true`, the input will be disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * Disables focus state by setting CSS outline: none;
   * !!IMPORTANT!!
   * If this is set to true ensure there is a proper fallback
   * to enable accessibility for keyboard only and vision impaired users
   */
  disableStateStyles: _propTypes.default.bool,
  /**
   * If `true`, aria-invalid will be true
   */
  error: _propTypes.default.bool,
  /**
   * The id of the `input` element.
   */
  id: _propTypes.default.string,
  /**
   * Max number of characters to allow
   */
  maxLength: _propTypes.default.number,
  /**
   * Name attribute of the `input` element.
   */
  name: _propTypes.default.string,
  /**
   * Callback fired on blur
   */
  onBlur: _propTypes.default.func,
  /**
   * Callback fired when the value is changed.
   */
  onChange: _propTypes.default.func,
  /**
   * Callback fired on focus
   */
  onFocus: _propTypes.default.func,
  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: _propTypes.default.string,
  /**
   * It prevents the user from changing the value of the field (not from interacting with the field).
   */
  readOnly: _propTypes.default.bool,
  /**
   * If `true`, the input will be required. Currently no visual difference is shown.
   */
  required: _propTypes.default.bool,
  /**
   * Use this to override the text variant of the Text component.
   * Should only be used for approved custom input components
   * Use the TextVariant enum
   */
  textVariant: _propTypes.default.oneOf(Object.values(_designSystem.TextVariant)),
  /**
   * Type of the input element. Can be INPUT_TYPES.TEXT, INPUT_TYPES.PASSWORD, INPUT_TYPES.NUMBER
   * Defaults to INPUT_TYPES.TEXT ('text')
   * If you require another type add it to INPUT_TYPES
   */
  type: _propTypes.default.oneOf(Object.values(_input.INPUT_TYPES)),
  /**
   * The input value, required for a controlled component.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  /**
   * Input accepts all the props from Box
   */
  ..._box.default.propTypes
};
Input.displayName = 'Input';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\input\\input.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\label\\index.js", {"./label":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\label\\label.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Clabel%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Label", {
  enumerable: true,
  get: function () {
    return _label.Label;
  }
});
var _label = require("./label");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\label\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\label\\label.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Clabel%5Clabel.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Label = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _text = require("../text");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const Label = ({
  htmlFor,
  className,
  children,
  ...props
}) => /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
  className: (0, _classnames.default)('mm-label', {
    'mm-label--html-for': htmlFor
  }, className),
  as: "label",
  htmlFor: htmlFor,
  variant: _designSystem.TextVariant.bodyMd,
  fontWeight: _designSystem.FONT_WEIGHT.BOLD,
  display: _designSystem.DISPLAY.INLINE_FLEX,
  alignItems: _designSystem.AlignItems.center
}, props), children);
exports.Label = Label;
Label.propTypes = {
  /**
   * The content of the label
   */
  children: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * The id of the input associated with the label
   */
  htmlFor: _propTypes.default.string,
  /**
   * Additional classNames to be added to the label component
   */
  className: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\label\\label.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-content\\index.ts", {"./modal-content":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-content\\modal-content.tsx","./modal-content.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-content\\modal-content.types.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-content%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalContent", {
  enumerable: true,
  get: function () {
    return _modalContent.ModalContent;
  }
});
Object.defineProperty(exports, "ModalContentSize", {
  enumerable: true,
  get: function () {
    return _modalContent2.ModalContentSize;
  }
});
var _modalContent = require("./modal-content");
var _modalContent2 = require("./modal-content.types");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-content\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-content\\modal-content.tsx", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","./modal-content.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-content\\modal-content.types.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-content%5Cmodal-content.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalContent = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _modalContent = require("./modal-content.types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ModalContent = ({
  className = '',
  children,
  size = _modalContent.ModalContentSize.Sm,
  width,
  modalContentRef,
  // Would have preferred to forwardRef but it's not trivial in TypeScript. Will update once we have an established pattern
  ...props
}) => /*#__PURE__*/_react.default.createElement(_box.default, _extends({
  className: (0, _classnames.default)('mm-modal-content', {
    [`mm-modal-content--size-${size}`]: !width
  }, className),
  backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
  borderRadius: _designSystem.BorderRadius.LG,
  width: width || _designSystem.BLOCK_SIZES.FULL,
  padding: 4,
  ref: modalContentRef
}, props), children);
exports.ModalContent = ModalContent;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-content\\modal-content.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-content\\modal-content.types.ts", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-content%5Cmodal-content.types.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalContentSize = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
/*
 * ModalContent sizes
 * Currently there is only use case for one size of ModalContent in the extension
 * See audit https://www.figma.com/file/hxYqloYgmVcgsoiVqmGZ8K/Modal-Audit?node-id=481%3A244&t=XITeuRB1pRc09hiG-1
 * Not to say there won't be more in the future, but to prevent redundant code there is only one for now
 */
let ModalContentSize;
exports.ModalContentSize = ModalContentSize;
(function (ModalContentSize) {
  ModalContentSize[ModalContentSize["Sm"] = _designSystem.Size.SM] = "Sm";
})(ModalContentSize || (exports.ModalContentSize = ModalContentSize = {}));

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-content\\modal-content.types.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-focus\\index.ts", {"./modal-focus":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-focus\\modal-focus.tsx"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-focus%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalFocus", {
  enumerable: true,
  get: function () {
    return _modalFocus.ModalFocus;
  }
});
var _modalFocus = require("./modal-focus");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-focus\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-focus\\modal-focus.tsx", {"react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-focus-lock":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-focus-lock\\dist\\cjs\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-focus%5Cmodal-focus.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalFocus = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
/**
 * Based on the ModalFocusScope component from chakra-ui
 * https://github.com/chakra-ui/chakra-ui/blob/main/packages/components/modal/src/modal-focus.tsx
 */

const FocusTrap = _reactFocusLock.default.default ?? _reactFocusLock.default;
const ModalFocus = ({
  initialFocusRef,
  finalFocusRef,
  restoreFocus,
  children,
  autoFocus,
  ...props
}) => {
  const onActivation = (0, _react.useCallback)(() => {
    if (initialFocusRef !== null && initialFocusRef !== void 0 && initialFocusRef.current) {
      initialFocusRef.current.focus();
    }
  }, [initialFocusRef]);
  const onDeactivation = (0, _react.useCallback)(() => {
    var _finalFocusRef$curren;
    finalFocusRef === null || finalFocusRef === void 0 ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) === null || _finalFocusRef$curren === void 0 ? void 0 : _finalFocusRef$curren.focus();
  }, [finalFocusRef]);
  const returnFocus = restoreFocus && !finalFocusRef;
  return /*#__PURE__*/_react.default.createElement(FocusTrap, _extends({
    autoFocus: autoFocus,
    onActivation: onActivation,
    onDeactivation: onDeactivation,
    returnFocus: returnFocus
  }, props), children);
};
exports.ModalFocus = ModalFocus;
ModalFocus.displayName = 'ModalFocus';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-focus\\modal-focus.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-header\\index.ts", {"./modal-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-header\\modal-header.tsx"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-header%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalHeader", {
  enumerable: true,
  get: function () {
    return _modalHeader.ModalHeader;
  }
});
var _modalHeader = require("./modal-header");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-header\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-header\\modal-header.tsx", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-header%5Cmodal-header.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalHeader = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _ = require("..");
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ModalHeader = ({
  children,
  className = '',
  startAccessory,
  endAccessory,
  onClose,
  closeButtonProps,
  onBack,
  backButtonProps,
  ...props
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_.HeaderBase, _extends({
    className: (0, _classnames.default)('mm-modal-header', className),
    startAccessory: startAccessory || onBack && /*#__PURE__*/_react.default.createElement(_.ButtonIcon, _extends({
      iconName: _.IconName.ArrowLeft,
      ariaLabel: t('back'),
      size: _.ButtonIconSize.Sm,
      onClick: onBack
    }, backButtonProps)),
    endAccessory: endAccessory || onClose && /*#__PURE__*/_react.default.createElement(_.ButtonIcon, _extends({
      iconName: _.IconName.Close,
      ariaLabel: t('close'),
      size: _.ButtonIconSize.Sm,
      onClick: onClose
    }, closeButtonProps))
  }, props), typeof children === 'string' ? /*#__PURE__*/_react.default.createElement(_.Text, {
    as: _.ValidTag.Header,
    variant: _designSystem.TextVariant.headingSm,
    textAlign: _designSystem.TextAlign.Center
  }, children) : children);
};
exports.ModalHeader = ModalHeader;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-header\\modal-header.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-overlay\\index.ts", {"./modal-overlay":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-overlay\\modal-overlay.tsx"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-overlay%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalOverlay", {
  enumerable: true,
  get: function () {
    return _modalOverlay.ModalOverlay;
  }
});
var _modalOverlay = require("./modal-overlay");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-overlay\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\modal-overlay\\modal-overlay.tsx", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cmodal-overlay%5Cmodal-overlay.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ModalOverlay = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box/box"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ModalOverlay = ({
  onClick,
  className = '',
  ...props
}) => /*#__PURE__*/_react.default.createElement(_box.default, _extends({
  className: (0, _classnames.default)('mm-modal-overlay', className),
  backgroundColor: _designSystem.BackgroundColor.overlayDefault,
  width: _designSystem.BLOCK_SIZES.FULL,
  height: _designSystem.BLOCK_SIZES.FULL,
  onClick: onClick,
  "aria-hidden": "true"
}, props));
exports.ModalOverlay = ModalOverlay;
var _default = ModalOverlay;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\modal-overlay\\modal-overlay.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\picker-network\\index.js", {"./picker-network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\picker-network\\picker-network.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cpicker-network%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PickerNetwork", {
  enumerable: true,
  get: function () {
    return _pickerNetwork.PickerNetwork;
  }
});
var _pickerNetwork = require("./picker-network");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\picker-network\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\picker-network\\picker-network.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../avatar-network":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\avatar-network\\index.js","../icon":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\index.ts","../text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cpicker-network%5Cpicker-network.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PickerNetwork = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _avatarNetwork = require("../avatar-network");
var _icon = require("../icon");
var _text = require("../text");
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const PickerNetwork = ({
  className,
  avatarNetworkProps,
  iconProps,
  label,
  src,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('mm-picker-network', className),
    as: "button",
    backgroundColor: _designSystem.BackgroundColor.backgroundAlternative,
    alignItems: _designSystem.AlignItems.center,
    paddingLeft: 2,
    paddingRight: 4,
    gap: 2,
    borderRadius: _designSystem.BorderRadius.pill,
    display: _designSystem.DISPLAY.FLEX
  }, props), /*#__PURE__*/_react.default.createElement(_avatarNetwork.AvatarNetwork, _extends({
    className: "mm-picker-network__avatar-network",
    src: src,
    name: label,
    size: _designSystem.Size.XS
  }, avatarNetworkProps)), /*#__PURE__*/_react.default.createElement(_text.Text, {
    ellipsis: true,
    variant: _designSystem.TextVariant.bodySm
  }, label), /*#__PURE__*/_react.default.createElement(_icon.Icon, _extends({
    className: "mm-picker-network__arrow-down-icon",
    name: _icon.IconName.ArrowDown,
    color: _designSystem.IconColor.iconDefault,
    size: _icon.IconSize.Xs
  }, iconProps)));
};
exports.PickerNetwork = PickerNetwork;
PickerNetwork.propTypes = {
  /**
   * The src accepts the string of the image to be rendered
   */
  src: _propTypes.default.string,
  /**
   * An additional className to apply to the PickerNetwork.
   */
  className: _propTypes.default.string,
  /**
   * It accepts all the props from AvatarNetwork
   */
  avatarNetworkProps: _propTypes.default.shape(_avatarNetwork.AvatarNetwork.PropTypes),
  /**
   * It accepts all the props from Icon
   */
  iconProps: _propTypes.default.object,
  /**
   * The text content of the PickerNetwork component
   */
  label: _propTypes.default.string.isRequired,
  /**
   * PickerNetwork accepts all the props from Box
   */
  ..._box.default.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\picker-network\\picker-network.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\popover-header\\index.ts", {"./popover-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\popover-header\\popover-header.tsx"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cpopover-header%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PopoverHeader", {
  enumerable: true,
  get: function () {
    return _popoverHeader.PopoverHeader;
  }
});
var _popoverHeader = require("./popover-header");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\popover-header\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\popover-header\\popover-header.tsx", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Cpopover-header%5Cpopover-header.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopoverHeader = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _ = require("..");
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const PopoverHeader = ({
  children,
  className = '',
  startAccessory,
  endAccessory,
  onClose,
  closeButtonProps,
  onBack,
  backButtonProps,
  ...props
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_.HeaderBase, _extends({
    className: (0, _classnames.default)('mm-popover-header', className),
    startAccessory: startAccessory || onBack && /*#__PURE__*/_react.default.createElement(_.ButtonIcon, _extends({
      iconName: _.IconName.ArrowLeft,
      ariaLabel: t('back'),
      size: _.ButtonIconSize.Sm,
      onClick: onBack
    }, backButtonProps)),
    endAccessory: endAccessory || onClose && /*#__PURE__*/_react.default.createElement(_.ButtonIcon, _extends({
      iconName: _.IconName.Close,
      ariaLabel: t('close'),
      size: _.ButtonIconSize.Sm,
      onClick: onClose
    }, closeButtonProps))
  }, props), typeof children === 'string' ? /*#__PURE__*/_react.default.createElement(_.Text, {
    variant: _designSystem.TextVariant.headingSm,
    textAlign: _designSystem.TextAlign.Center
  }, children) : children);
};
exports.PopoverHeader = PopoverHeader;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\popover-header\\popover-header.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\tag-url\\index.js", {"./tag-url":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\tag-url\\tag-url.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctag-url%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "TagUrl", {
  enumerable: true,
  get: function () {
    return _tagUrl.TagUrl;
  }
});
var _tagUrl = require("./tag-url");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\tag-url\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\tag-url\\tag-url.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctag-url%5Ctag-url.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TagUrl = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _text = require("../text");
var _designSystem = require("../../../helpers/constants/design-system");
var _ = require("..");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const TagUrl = ({
  label,
  labelProps,
  actionButtonLabel,
  actionButtonProps,
  src,
  showLockIcon,
  avatarFaviconProps,
  lockIconProps,
  className,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('mm-tag-url', className),
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
    borderColor: _designSystem.BorderColor.borderDefault,
    borderWidth: 1,
    alignItems: _designSystem.AlignItems.center,
    paddingLeft: 2,
    paddingRight: 4,
    gap: 2,
    borderRadius: _designSystem.BorderRadius.pill,
    display: _designSystem.DISPLAY.FLEX
  }, props), /*#__PURE__*/_react.default.createElement(_.AvatarFavicon, _extends({
    src: src,
    name: label
  }, avatarFaviconProps)), showLockIcon && /*#__PURE__*/_react.default.createElement(_.Icon, _extends({
    className: "mm-tag-url__lock-icon",
    name: _.IconName.Lock,
    color: _designSystem.IconColor.iconAlternative,
    size: _.IconSize.Sm,
    "aria-label": "https://",
    role: "img"
  }, lockIconProps)), /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
    variant: _designSystem.TextVariant.bodyMd,
    ellipsis: true
  }, labelProps), label), actionButtonLabel && /*#__PURE__*/_react.default.createElement(_.ButtonLink, _extends({
    as: "a",
    size: _designSystem.Size.SM,
    paddingLeft: 0,
    paddingRight: 0,
    marginLeft: 2,
    marginRight: 2
  }, actionButtonProps), actionButtonLabel));
};
exports.TagUrl = TagUrl;
TagUrl.propTypes = {
  /**
   * The src accepts the string of the image to be rendered
   */
  src: _propTypes.default.string,
  /**
   * The showLockIcon accepts a boolean prop to render the lock icon instead of https in label
   */
  showLockIcon: _propTypes.default.bool,
  /**
   * It accepts all the props from Avatar Favicon
   */
  avatarFaviconProps: _propTypes.default.shape(_.AvatarFavicon.PropTypes),
  /**
   * It accepts all the props from Icon
   */
  lockIconProps: _propTypes.default.object,
  /**
   * The text content of the TagUrl component
   */
  label: _propTypes.default.string.isRequired,
  /**
   * It accepts all the props from Text Component
   */
  labelProps: _propTypes.default.shape(_text.Text.PropTypes),
  /**
   * If we want a button in TagUrl component.
   */
  actionButtonLabel: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * It accepts all the props from ButtonLink
   */
  actionButtonProps: _propTypes.default.shape(_.ButtonLink.PropTypes),
  /**
   * Additional classNames to be added to the TagUrl component
   */
  className: _propTypes.default.string,
  /**
   * TagUrl accepts all the props from Box
   */
  ..._box.default.propTypes
};
var _default = TagUrl;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\tag-url\\tag-url.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\tag\\index.js", {"./tag":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\tag\\tag.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctag%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Tag", {
  enumerable: true,
  get: function () {
    return _tag.Tag;
  }
});
var _tag = require("./tag");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\tag\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\tag\\tag.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctag%5Ctag.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tag = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _text = require("../text");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const Tag = ({
  label,
  className,
  labelProps,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('mm-tag', className),
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
    borderColor: _designSystem.BorderColor.borderDefault,
    borderWidth: 1,
    justifyContent: _designSystem.JustifyContent.center,
    alignItems: _designSystem.AlignItems.center,
    paddingLeft: 1,
    paddingRight: 1,
    borderRadius: _designSystem.BorderRadius.pill,
    display: _designSystem.DISPLAY.INLINE_BLOCK
  }, props), /*#__PURE__*/_react.default.createElement(_text.Text, _extends({
    variant: _designSystem.TextVariant.bodySm
  }, labelProps), label));
};
exports.Tag = Tag;
Tag.propTypes = {
  /**
   * The text content of the Tag component
   */
  label: _propTypes.default.string,
  /**
   * The label props of the component. Most Text component props can be used
   */
  labelProps: _propTypes.default.shape(_text.Text.PropTypes),
  /**
   * Additional classNames to be added to the Tag component
   */
  className: _propTypes.default.string,
  /**
   * Tag also accepts all props from Box
   */
  ..._box.default.propTypes
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\tag\\tag.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field-search\\index.js", {"./text-field-search":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field-search\\text-field-search.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext-field-search%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "TextFieldSearch", {
  enumerable: true,
  get: function () {
    return _textFieldSearch.TextFieldSearch;
  }
});
var _textFieldSearch = require("./text-field-search");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text-field-search\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field-search\\text-field-search.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext-field-search%5Ctext-field-search.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextFieldSearch = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _ = require("..");
var _textField = require("../text-field");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const TextFieldSearch = ({
  className,
  showClearButton = true,
  // only works with a controlled input
  clearButtonOnClick,
  clearButtonProps,
  endAccessory,
  inputProps,
  value,
  onChange,
  ...props
}) => /*#__PURE__*/_react.default.createElement(_textField.TextField, _extends({
  className: (0, _classnames.default)('mm-text-field-search', className),
  value: value,
  onChange: onChange,
  type: _textField.TEXT_FIELD_TYPES.SEARCH,
  endAccessory: value && showClearButton ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_.ButtonIcon, _extends({
    className: "mm-text-field__button-clear",
    ariaLabel: "Clear" // TODO: i18n
    ,
    iconName: _.IconName.Close,
    size: _.ButtonIconSize.SM,
    onClick: clearButtonOnClick
  }, clearButtonProps)), endAccessory) : endAccessory,
  startAccessory: /*#__PURE__*/_react.default.createElement(_.Icon, {
    name: _.IconName.Search,
    size: _.IconSize.Sm
  }),
  inputProps: {
    marginRight: showClearButton ? 6 : 0,
    ...inputProps
  }
}, props));
exports.TextFieldSearch = TextFieldSearch;
TextFieldSearch.propTypes = {
  /**
   * The value of the TextFieldSearch
   */
  value: _textField.TextField.propTypes.value,
  /**
   * The onChange handler of the TextFieldSearch
   */
  onChange: _textField.TextField.propTypes.onChange,
  /**
   * The clear button for the TextFieldSearch.
   * Defaults to true
   */
  showClearButton: _propTypes.default.bool,
  /**
   * The onClick handler for the clear button
   * Required unless showClearButton is false
   *
   * @param {object} props - The props passed to the component.
   * @param {string} propName - The prop name in this case 'id'.
   * @param {string} componentName - The name of the component.
   */
  clearButtonOnClick: (props, propName, componentName) => {
    var _props$clearButtonPro;
    if (props.showClearButton && (!props[propName] || !((_props$clearButtonPro = props.clearButtonProps) !== null && _props$clearButtonPro !== void 0 && _props$clearButtonPro.onClick))) {
      return new Error(`${propName} is required unless showClearButton is false. Warning coming from ${componentName} ui/components/component-library/text-field-search/text-field-search.js`);
    }
    return null;
  },
  /**
   * The props to pass to the clear button
   */
  clearButtonProps: _propTypes.default.shape(_.ButtonIcon.PropTypes),
  /**
   * An additional className to apply to the TextFieldSearch
   */
  className: _propTypes.default.string,
  /**
   * Component to appear on the right side of the input
   */
  endAccessory: _propTypes.default.node,
  /**
   * Attributes applied to the `input` element.
   */
  inputProps: _propTypes.default.object,
  /**
   * FormTextField accepts all the props from TextField and Box
   */
  ..._textField.TextField.propTypes
};
TextFieldSearch.displayName = 'TextFieldSearch';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text-field-search\\text-field-search.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\index.js", {"./text-field":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\text-field.js","./text-field.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\text-field.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext-field%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "TEXT_FIELD_SIZES", {
  enumerable: true,
  get: function () {
    return _textField2.TEXT_FIELD_SIZES;
  }
});
Object.defineProperty(exports, "TEXT_FIELD_TYPES", {
  enumerable: true,
  get: function () {
    return _textField2.TEXT_FIELD_TYPES;
  }
});
Object.defineProperty(exports, "TextField", {
  enumerable: true,
  get: function () {
    return _textField.TextField;
  }
});
var _textField = require("./text-field");
var _textField2 = require("./text-field.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text-field\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\text-field.constants.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext-field%5Ctext-field.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TEXT_FIELD_TYPES = exports.TEXT_FIELD_SIZES = void 0;
var _designSystem = require("../../../helpers/constants/design-system");
const TEXT_FIELD_SIZES = {
  SM: _designSystem.Size.SM,
  MD: _designSystem.Size.MD,
  LG: _designSystem.Size.LG
};
exports.TEXT_FIELD_SIZES = TEXT_FIELD_SIZES;
const TEXT_FIELD_TYPES = {
  TEXT: 'text',
  NUMBER: 'number',
  PASSWORD: 'password',
  SEARCH: 'search'
};
exports.TEXT_FIELD_TYPES = TEXT_FIELD_TYPES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text-field\\text-field.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\text-field.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../input":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\input\\index.js","./text-field.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text-field\\text-field.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext-field%5Ctext-field.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextField = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box"));
var _input = require("../input");
var _textField = require("./text-field.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const TextField = ({
  autoComplete,
  autoFocus,
  className,
  defaultValue,
  disabled,
  error,
  id,
  inputProps,
  inputRef,
  startAccessory,
  endAccessory,
  maxLength,
  name,
  onBlur,
  onChange,
  onClick,
  onFocus,
  placeholder,
  readOnly,
  required,
  size = _designSystem.Size.MD,
  type = 'text',
  truncate = true,
  value,
  InputComponent = _input.Input,
  ...props
}) => {
  const internalInputRef = (0, _react.useRef)(null);
  const [focused, setFocused] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    // The blur won't fire when the disabled state is set on a focused input.
    // We need to set the focused state manually.
    if (disabled) {
      setFocused(false);
    }
  }, [disabled]);
  const handleClick = event => {
    const {
      current
    } = internalInputRef;
    if (current) {
      current.focus();
      setFocused(true);
    }
    if (onClick && !disabled) {
      onClick(event);
    }
  };
  const handleFocus = event => {
    setFocused(true);
    onFocus && onFocus(event);
  };
  const handleBlur = event => {
    setFocused(false);
    onBlur && onBlur(event);
  };
  const handleInputRef = ref => {
    internalInputRef.current = ref;
    if (inputRef && inputRef.current !== undefined) {
      inputRef.current = ref;
    } else if (typeof inputRef === 'function') {
      inputRef(ref);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('mm-text-field', `mm-text-field--size-${size}`, {
      'mm-text-field--focused': focused && !disabled,
      'mm-text-field--error': error,
      'mm-text-field--disabled': disabled,
      'mm-text-field--truncate': truncate
    }, className),
    display: _designSystem.DISPLAY.INLINE_FLEX,
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
    alignItems: _designSystem.AlignItems.center,
    borderWidth: 1,
    borderRadius: _designSystem.BorderRadius.SM,
    paddingLeft: startAccessory ? 4 : 0,
    paddingRight: endAccessory ? 4 : 0,
    onClick: handleClick
  }, props), startAccessory, /*#__PURE__*/_react.default.createElement(InputComponent, _extends({
    "aria-invalid": error,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    backgroundColor: _designSystem.BackgroundColor.transparent,
    defaultValue: defaultValue,
    disabled: disabled,
    focused: focused.toString(),
    id: id,
    margin: 0,
    maxLength: maxLength,
    name: name,
    onBlur: handleBlur,
    onChange: onChange,
    onFocus: handleFocus,
    padding: 0,
    paddingLeft: startAccessory ? 2 : 4,
    paddingRight: endAccessory ? 2 : 4,
    placeholder: placeholder,
    readOnly: readOnly,
    ref: handleInputRef,
    required: required,
    value: value,
    type: type,
    disableStateStyles: true
  }, inputProps, {
    // before className so input className isn't overridden
    className: (0, _classnames.default)('mm-text-field__input', inputProps === null || inputProps === void 0 ? void 0 : inputProps.className)
  })), endAccessory);
};
exports.TextField = TextField;
TextField.propTypes = {
  /**
   * Autocomplete allows the browser to predict the value based on earlier typed values
   */
  autoComplete: _propTypes.default.bool,
  /**
   * If `true`, the input will be focused during the first mount.
   */
  autoFocus: _propTypes.default.bool,
  /**
   * An additional className to apply to the text-field
   */
  className: _propTypes.default.string,
  /**
   * The default input value, useful when not controlling the component.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  /**
   * If `true`, the input will be disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * If `true`, the input will indicate an error
   */
  error: _propTypes.default.bool,
  /**
   * The id of the `input` element.
   */
  id: _propTypes.default.string,
  /**
   * The the component that is rendered as the input
   * Defaults to the Text component
   */
  InputComponent: _propTypes.default.elementType,
  /**
   * Attributes applied to the `input` element.
   */
  inputProps: _propTypes.default.object,
  /**
   * Component to appear on the left side of the input
   */
  startAccessory: _propTypes.default.node,
  /**
   * Component to appear on the right side of the input
   */
  endAccessory: _propTypes.default.node,
  /**
   * Use inputRef to pass a ref to the html input element.
   */
  inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  /**
   * Max number of characters to allow
   */
  maxLength: _propTypes.default.number,
  /**
   * Name attribute of the `input` element.
   */
  name: _propTypes.default.string,
  /**
   * Callback fired on blur
   */
  onBlur: _propTypes.default.func,
  /**
   * Callback fired when the value is changed.
   */
  onChange: _propTypes.default.func,
  /**
   * Callback fired when the TextField is clicked on
   */
  onClick: _propTypes.default.func,
  /**
   * Callback fired on focus
   */
  onFocus: _propTypes.default.func,
  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: _propTypes.default.string,
  /**
   * It prevents the user from changing the value of the field (not from interacting with the field).
   */
  readOnly: _propTypes.default.bool,
  /**
   * If `true`, the input will be required. Currently no visual difference is shown.
   */
  required: _propTypes.default.bool,
  /**
   * The size of the text field. Changes the height of the component
   * Accepts SM(32px), MD(40px), LG(48px)
   */
  size: _propTypes.default.oneOf(Object.values(_textField.TEXT_FIELD_SIZES)),
  /**
   * Type of the input element. Can be TEXT_FIELD_TYPES.TEXT, TEXT_FIELD_TYPES.PASSWORD, TEXT_FIELD_TYPES.NUMBER
   * Defaults to TEXT_FIELD_TYPES.TEXT ('text')
   */
  type: _propTypes.default.oneOf(Object.values(_textField.TEXT_FIELD_TYPES)),
  /**
   * If true will ellipse the text of the input
   * Defaults to true
   */
  truncate: _propTypes.default.bool,
  /**
   * The input value, required for a controlled component.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  /**
   * TextField accepts all the props from Box
   */
  ..._box.default.propTypes
};
TextField.displayName = 'TextField';

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text-field\\text-field.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\deprecated\\index.js", {"./text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\deprecated\\text.js","./text.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\deprecated\\text.constants.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext%5Cdeprecated%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "INVISIBLE_CHARACTER", {
  enumerable: true,
  get: function () {
    return _text2.INVISIBLE_CHARACTER;
  }
});
Object.defineProperty(exports, "TEXT_DIRECTIONS", {
  enumerable: true,
  get: function () {
    return _text2.TEXT_DIRECTIONS;
  }
});
Object.defineProperty(exports, "Text", {
  enumerable: true,
  get: function () {
    return _text.Text;
  }
});
var _text = require("./text");
var _text2 = require("./text.constants");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text\\deprecated\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\deprecated\\text.constants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext%5Cdeprecated%5Ctext.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TEXT_DIRECTIONS = exports.INVISIBLE_CHARACTER = void 0;
const TEXT_DIRECTIONS = {
  LEFT_TO_RIGHT: 'ltr',
  RIGHT_TO_LEFT: 'rtl',
  AUTO: 'auto'
};

/**
 * The INVISIBLE_CHARACTER is a very useful tool if you want to make sure a line of text
 * takes up vertical space even if it's empty.
 */
exports.TEXT_DIRECTIONS = TEXT_DIRECTIONS;
const INVISIBLE_CHARACTER = '\u200B';
exports.INVISIBLE_CHARACTER = INVISIBLE_CHARACTER;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text\\deprecated\\text.constants.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\deprecated\\text.js", {"../../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","./text.constants":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\deprecated\\text.constants.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext%5Cdeprecated%5Ctext.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidTags = exports.Text = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _text = require("./text.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ValidTags = ['dd', 'div', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'p', 'span', 'strong', 'ul', 'label', 'input'];
exports.ValidTags = ValidTags;
const getTextElementDefault = variant => {
  switch (variant) {
    case _designSystem.TextVariant.displayMd:
      return 'h1';
    case _designSystem.TextVariant.headingLg:
      return 'h2';
    case _designSystem.TextVariant.headingMd:
      return 'h3';
    case _designSystem.TextVariant.headingSm:
      return 'h4';
    case _designSystem.TextVariant.inherit:
      return 'span';
    // TextVariant.bodyLgMedium, TextVariant.bodyMd, TextVariant.bodyMdBold, TextVariant.bodySm, TextVariant.bodySmBold, TextVariant.bodyXs use default 'p' tag
    default:
      return 'p';
  }
};
const Text = /*#__PURE__*/_react.default.forwardRef(({
  variant = _designSystem.TextVariant.bodyMd,
  color = _designSystem.TextColor.textDefault,
  fontWeight,
  fontStyle,
  textTransform,
  textAlign,
  textDirection,
  overflowWrap,
  ellipsis,
  as,
  className,
  children,
  ...props
}, ref) => {
  // Check if as is set otherwise set a default tag based on variant
  const Tag = as ?? getTextElementDefault(variant);
  let strongTagFontWeight;
  if (Tag === 'strong') {
    strongTagFontWeight = _designSystem.FONT_WEIGHT.BOLD;
  }
  const computedClassName = (0, _classnames.default)('mm-text', className, `mm-text--${variant}`, (strongTagFontWeight || fontWeight) && `mm-text--font-weight-${strongTagFontWeight || fontWeight}`, {
    [`mm-text--font-style-${fontStyle}`]: Boolean(fontStyle),
    [`mm-text--ellipsis`]: Boolean(ellipsis),
    [`mm-text--text-transform-${textTransform}`]: Boolean(textTransform),
    [`mm-text--text-align-${textAlign}`]: Boolean(textAlign),
    [`mm-text--overflow-wrap-${overflowWrap}`]: Boolean(overflowWrap)
  });
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    ref: ref,
    className: (0, _classnames.default)(computedClassName),
    as: Tag,
    dir: textDirection,
    color: color
  }, props), children);
});
exports.Text = Text;
Text.propTypes = {
  /**
   * The variation of font styles including sizes and weights of the Text component
   * Possible values:
   * `DISPLAY_MD` large screen: 48px / small screen: 32px,
   * `HEADING_LG` large screen: 32px / small screen: 24px,
   * `HEADING_MD` large screen: 24px / small screen: 18px,
   * `HEADING_SM` large screen: 18px / small screen: 16px,
   * `BODY_LG_MEDIUM` large screen: 18px / small screen: 16px,
   * `BODY_MD` large screen: 16px / small screen: 14px,
   * `BODY_MD_BOLD` large screen: 16px / small screen: 14px,
   * `BODY_SM` large screen: 14px / small screen: 12px,
   * `BODY_SM_BOLD` large screen: 14px / small screen: 12px,
   * `BODY_XS` large screen: 12px / small screen: 10px,
   * `INHERIT`
   */
  variant: _propTypes.default.oneOf(Object.values(_designSystem.TextVariant)),
  /**
   * The color of the Text component Should use the COLOR object from
   * ./ui/helpers/constants/design-system.js
   */
  color: _propTypes.default.oneOf(Object.values(_designSystem.TextColor)),
  /**
   * The font-weight of the Text component. Should use the FONT_WEIGHT object from
   * ./ui/helpers/constants/design-system.js
   */
  fontWeight: _propTypes.default.oneOf(Object.values(_designSystem.FONT_WEIGHT)),
  /**
   * The font-style of the Text component. Should use the FONT_STYLE object from
   * ./ui/helpers/constants/design-system.js
   */
  fontStyle: _propTypes.default.oneOf(Object.values(_designSystem.FONT_STYLE)),
  /**
   * The textTransform of the Text component. Should use the TEXT_TRANSFORM object from
   * ./ui/helpers/constants/design-system.js
   */
  textTransform: _propTypes.default.oneOf(Object.values(_designSystem.TEXT_TRANSFORM)),
  /**
   * The text-align of the Text component. Should use the TEXT_ALIGN object from
   * ./ui/helpers/constants/design-system.js
   */
  textAlign: _propTypes.default.oneOf(Object.values(_designSystem.TEXT_ALIGN)),
  /**
   * Change the dir (direction) global attribute of text to support the direction a language is written
   * Possible values: `LEFT_TO_RIGHT` (default), `RIGHT_TO_LEFT`, `AUTO` (user agent decides)
   */
  textDirection: _propTypes.default.oneOf(Object.values(_text.TEXT_DIRECTIONS)),
  /**
   * The overflow-wrap of the Text component. Should use the OVERFLOW_WRAP object from
   * ./ui/helpers/constants/design-system.js
   */
  overflowWrap: _propTypes.default.oneOf(Object.values(_designSystem.OVERFLOW_WRAP)),
  /**
   * Used for long strings that can be cut off...
   */
  ellipsis: _propTypes.default.bool,
  /**
   * Changes the root html element tag of the Text component.
   */
  as: _propTypes.default.oneOf(ValidTags),
  /**
   * Additional className to assign the Text component
   */
  className: _propTypes.default.string,
  /**
   * The text content of the Text component
   */
  children: _propTypes.default.node.isRequired,
  /**
   * Text component accepts all Box component props
   */
  ..._box.default.propTypes
};
Text.displayName = 'Text'; // Used for React DevTools profiler

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text\\deprecated\\text.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\index.ts", {"./text":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\text.tsx","./text.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\text.types.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "InvisibleCharacter", {
  enumerable: true,
  get: function () {
    return _text2.InvisibleCharacter;
  }
});
Object.defineProperty(exports, "Text", {
  enumerable: true,
  get: function () {
    return _text.Text;
  }
});
Object.defineProperty(exports, "TextDirection", {
  enumerable: true,
  get: function () {
    return _text2.TextDirection;
  }
});
Object.defineProperty(exports, "ValidTag", {
  enumerable: true,
  get: function () {
    return _text2.ValidTag;
  }
});
var _text = require("./text");
var _text2 = require("./text.types");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text\\index.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\text.tsx", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","./text.types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\text.types.ts","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext%5Ctext.tsx
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _text = require("./text.types");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const getTextElementDefault = variant => {
  switch (variant) {
    case _designSystem.TextVariant.displayMd:
      return _text.ValidTag.H1;
    case _designSystem.TextVariant.headingLg:
      return _text.ValidTag.H2;
    case _designSystem.TextVariant.headingMd:
      return _text.ValidTag.H3;
    case _designSystem.TextVariant.headingSm:
      return _text.ValidTag.H4;
    case _designSystem.TextVariant.inherit:
      return _text.ValidTag.Span;
    // TextVariant.bodyLgMedium, TextVariant.bodyMd, TextVariant.bodyMdBold, TextVariant.bodySm, TextVariant.bodySmBold, TextVariant.bodyXs use default 'p' tag
    default:
      return _text.ValidTag.P;
  }
};
const Text = /*#__PURE__*/(0, _react.forwardRef)(function Text({
  variant = _designSystem.TextVariant.bodyMd,
  color = _designSystem.TextColor.textDefault,
  fontWeight,
  fontStyle,
  textTransform,
  textAlign,
  textDirection,
  overflowWrap,
  ellipsis,
  as,
  className = '',
  children,
  ...props
}, ref) {
  // Check if as is set otherwise set a default tag based on variant
  const Tag = as ?? getTextElementDefault(variant);
  let strongTagFontWeight;
  if (Tag === 'strong') {
    strongTagFontWeight = _designSystem.FontWeight.Bold;
  }
  const computedClassName = (0, _classnames.default)('mm-text', className, `mm-text--${variant}`, {
    [`mm-text--font-weight-${strongTagFontWeight || fontWeight}`]: Boolean(strongTagFontWeight || fontWeight),
    [`mm-text--font-style-${String(fontStyle)}`]: Boolean(fontStyle),
    [`mm-text--ellipsis`]: Boolean(ellipsis),
    [`mm-text--text-transform-${String(textTransform)}`]: Boolean(textTransform),
    [`mm-text--text-align-${String(textAlign)}`]: Boolean(textAlign),
    [`mm-text--overflow-wrap-${String(overflowWrap)}`]: Boolean(overflowWrap)
  });
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)(computedClassName),
    as: Tag,
    dir: textDirection,
    color: color,
    ref: ref
  }, props), children);
});
exports.Text = Text;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text\\text.tsx",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\text\\text.types.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Ccomponent-library%5Ctext%5Ctext.types.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidTag = exports.TextDirection = exports.InvisibleCharacter = void 0;
let TextDirection;
/**
 * The InvisibleCharacter is a very useful tool if you want to make sure a line of text
 * takes up vertical space even if it's empty.
 */
exports.TextDirection = TextDirection;
(function (TextDirection) {
  TextDirection["LeftToRight"] = "ltr";
  TextDirection["RightToLeft"] = "rtl";
  TextDirection["Auto"] = "auto";
})(TextDirection || (exports.TextDirection = TextDirection = {}));
const InvisibleCharacter = '\u200B';
exports.InvisibleCharacter = InvisibleCharacter;
let ValidTag;
exports.ValidTag = ValidTag;
(function (ValidTag) {
  ValidTag["Dd"] = "dd";
  ValidTag["Div"] = "div";
  ValidTag["Dt"] = "dt";
  ValidTag["Em"] = "em";
  ValidTag["H1"] = "h1";
  ValidTag["H2"] = "h2";
  ValidTag["H3"] = "h3";
  ValidTag["H4"] = "h4";
  ValidTag["H5"] = "h5";
  ValidTag["H6"] = "h6";
  ValidTag["Li"] = "li";
  ValidTag["P"] = "p";
  ValidTag["Span"] = "span";
  ValidTag["Strong"] = "strong";
  ValidTag["Ul"] = "ul";
  ValidTag["Label"] = "label";
  ValidTag["Input"] = "input";
  ValidTag["Header"] = "header";
})(ValidTag || (exports.ValidTag = ValidTag = {}));

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\component-library\\text\\text.types.ts",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\account-details-authenticate.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-details%5Caccount-details-authenticate.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountDetailsAuthenticate = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _actions = require("../../../store/actions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const AccountDetailsAuthenticate = ({
  address,
  onCancel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const [password, setPassword] = (0, _react.useState)('');

  // Password error would result from appState
  const warning = (0, _reactRedux.useSelector)(state => state.appState.warning);
  const onSubmit = (0, _react.useCallback)(() => {
    dispatch((0, _actions.exportAccount)(password, address)).then(res => {
      dispatch((0, _actions.hideWarning)());
      return res;
    });
  }, [dispatch, password, address]);
  const handleKeyPress = (0, _react.useCallback)(e => {
    if (e.key === 'Enter') {
      onSubmit();
    }
  }, [onSubmit]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.FormTextField, {
    marginTop: 6,
    id: "account-details-authenticate",
    label: t('enterYourPassword'),
    placeholder: t('password'),
    error: warning,
    helpText: warning,
    onChange: e => setPassword(e.target.value),
    value: password,
    variant: _designSystem.TextVariant.bodySm,
    type: "password",
    inputProps: {
      onKeyPress: handleKeyPress
    },
    labelProps: {
      fontWeight: _designSystem.FontWeight.Medium
    },
    autoFocus: true
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    marginTop: 6,
    severity: _designSystem.SEVERITIES.DANGER
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm
  }, t('privateKeyWarning'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 6,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonSecondary, {
    onClick: onCancel,
    block: true
  }, t('cancel')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
    onClick: onSubmit,
    disabled: password === '',
    block: true
  }, t('confirm'))));
};
exports.AccountDetailsAuthenticate = AccountDetailsAuthenticate;
AccountDetailsAuthenticate.propTypes = {
  address: _propTypes.default.string.isRequired,
  onCancel: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-details\\account-details-authenticate.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\account-details-display.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/hardware":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\hardware.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/editable-label/editable-label":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\editable-label\\editable-label.js","../../ui/qr-code":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\qr-code\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-details%5Caccount-details-display.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountDetailsDisplay = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _qrCode = _interopRequireDefault(require("../../ui/qr-code"));
var _editableLabel = _interopRequireDefault(require("../../ui/editable-label/editable-label"));
var _actions = require("../../../store/actions");
var _selectors = require("../../../selectors");
var _hardware = require("../../../helpers/utils/hardware");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../ui/box/box"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const AccountDetailsDisplay = ({
  accounts,
  accountName,
  address,
  onExportClick
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  const keyrings = (0, _reactRedux.useSelector)(_selectors.getMetaMaskKeyrings);
  const keyring = keyrings.find(kr => kr.accounts.includes(address));
  const exportPrivateKeyFeatureEnabled = !(0, _hardware.isHardwareKeyring)(keyring === null || keyring === void 0 ? void 0 : keyring.type);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const deviceName = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_editableLabel.default, {
    defaultValue: accountName,
    onSubmit: label => {
      dispatch((0, _actions.setAccountLabel)(address, label));
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Accounts,
        event: _metametrics2.MetaMetricsEventName.AccountRenamed,
        properties: {
          location: 'Account Details Modal',
          chain_id: chainId,
          account_hardware_type: deviceName
        }
      });
    },
    accounts: accounts
  }), /*#__PURE__*/_react.default.createElement(_qrCode.default, {
    Qr: {
      data: address
    }
  }), exportPrivateKeyFeatureEnabled ? /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonSecondary, {
    block: true,
    size: _componentLibrary.BUTTON_SECONDARY_SIZES.LG,
    variant: _designSystem.TextVariant.bodyMd,
    onClick: () => {
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Accounts,
        event: _metametrics2.MetaMetricsEventName.KeyExportSelected,
        properties: {
          key_type: _metametrics2.MetaMetricsEventKeyType.Pkey,
          location: 'Account Details Modal'
        }
      });
      onExportClick();
    }
  }, t('showPrivateKey')) : null);
};
exports.AccountDetailsDisplay = AccountDetailsDisplay;
AccountDetailsDisplay.propTypes = {
  accounts: _propTypes.default.array.isRequired,
  accountName: _propTypes.default.string.isRequired,
  address: _propTypes.default.string.isRequired,
  onExportClick: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-details\\account-details-display.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\account-details-key.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useCopyToClipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-details%5Caccount-details-key.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountDetailsKey = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const AccountDetailsKey = ({
  accountName,
  onClose,
  privateKey
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [privateKeyCopied, handlePrivateKeyCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    marginTop: 6,
    variant: _designSystem.TextVariant.bodySm,
    style: {
      wordBreak: 'break-word'
    }
  }, t('privateKeyCopyWarning', [accountName])), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center,
    borderRadius: _designSystem.BorderRadius.SM,
    borderWidth: 1,
    borderColor: _designSystem.BorderColor.default,
    padding: 4,
    gap: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    style: {
      wordBreak: 'break-word'
    }
  }, privateKey), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    onClick: () => handlePrivateKeyCopy(privateKey),
    iconName: privateKeyCopied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy
  })), /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.DANGER,
    marginTop: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm
  }, t('privateKeyWarning'))), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
    marginTop: 6,
    onClick: onClose
  }, t('done')));
};
exports.AccountDetailsKey = AccountDetailsKey;
AccountDetailsKey.propTypes = {
  accountName: _propTypes.default.string.isRequired,
  onClose: _propTypes.default.func.isRequired,
  privateKey: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-details\\account-details-key.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\account-details.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/popover/popover.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\popover.component.js","../address-copy-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\address-copy-button\\index.js","./account-details-authenticate":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\account-details-authenticate.js","./account-details-display":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\account-details-display.js","./account-details-key":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\account-details-key.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-details%5Caccount-details.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountDetails = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _popover = _interopRequireDefault(require("../../ui/popover/popover.component"));
var _actions = require("../../../store/actions");
var _componentLibrary = require("../../component-library");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _selectors = require("../../../selectors");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _designSystem = require("../../../helpers/constants/design-system");
var _addressCopyButton = require("../address-copy-button");
var _accountDetailsDisplay = require("./account-details-display");
var _accountDetailsAuthenticate = require("./account-details-authenticate");
var _accountDetailsKey = require("./account-details-key");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const AccountDetails = ({
  address
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _useI18nContext.useI18nContext)();
  const useBlockie = (0, _reactRedux.useSelector)(state => state.metamask.useBlockie);
  const accounts = (0, _reactRedux.useSelector)(_selectors.getMetaMaskAccountsOrdered);
  const {
    name
  } = accounts.find(account => account.address === address);
  const [attemptingExport, setAttemptingExport] = (0, _react.useState)(false);

  // This is only populated when the user properly authenticates
  const privateKey = (0, _reactRedux.useSelector)(state => state.appState.accountDetail.privateKey);
  const onClose = (0, _react.useCallback)(() => {
    dispatch((0, _actions.setAccountDetailsAddress)(''));
    dispatch((0, _actions.clearAccountDetails)());
    dispatch((0, _actions.hideWarning)());
  }, [dispatch]);
  const avatar = /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarAccount, {
    variant: useBlockie ? _componentLibrary.AvatarAccountVariant.Blockies : _componentLibrary.AvatarAccountVariant.Jazzicon,
    address: address,
    size: _componentLibrary.AvatarAccountSize.Lg
  });
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    headerProps: {
      paddingBottom: 1
    },
    contentProps: {
      paddingLeft: 4,
      paddingRight: 4,
      paddingBottom: 4
    },
    title: attemptingExport ? /*#__PURE__*/_react.default.createElement(_componentLibrary.PopoverHeader, {
      startAccessory: /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
        onClick: () => {
          dispatch((0, _actions.hideWarning)());
          setAttemptingExport(false);
        },
        iconName: _componentLibrary.IconName.ArrowLeft,
        size: _designSystem.Size.SM
      })
    }, t('showPrivateKey')) : /*#__PURE__*/_react.default.createElement(_componentLibrary.PopoverHeader, {
      childrenWrapperProps: {
        display: _designSystem.DISPLAY.FLEX,
        justifyContent: _designSystem.JustifyContent.center
      }
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      paddingLeft: 6
    }, avatar)),
    onClose: onClose
  }, attemptingExport ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, avatar, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    marginTop: 2,
    marginBottom: 2,
    variant: _designSystem.TextVariant.bodyLgMedium,
    style: {
      wordBreak: 'break-word'
    }
  }, name), /*#__PURE__*/_react.default.createElement(_addressCopyButton.AddressCopyButton, {
    address: address,
    shorten: true
  })), privateKey ? /*#__PURE__*/_react.default.createElement(_accountDetailsKey.AccountDetailsKey, {
    accountName: name,
    onClose: onClose,
    privateKey: privateKey
  }) : /*#__PURE__*/_react.default.createElement(_accountDetailsAuthenticate.AccountDetailsAuthenticate, {
    address: address,
    onCancel: onClose
  })) : /*#__PURE__*/_react.default.createElement(_accountDetailsDisplay.AccountDetailsDisplay, {
    accounts: accounts,
    accountName: name,
    address: address,
    onExportClick: () => setAttemptingExport(true)
  }));
};
exports.AccountDetails = AccountDetails;
AccountDetails.propTypes = {
  address: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-details\\account-details.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\index.js", {"./account-details":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\account-details.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-details%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccountDetails", {
  enumerable: true,
  get: function () {
    return _accountDetails.AccountDetails;
  }
});
var _accountDetails = require("./account-details");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-details\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-item-menu\\account-list-item-menu.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/metrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\metrics.js","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\menu\\index.js","@metamask/etherscan-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-list-item-menu%5Caccount-list-item-menu.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountListItemMenu = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _metametrics = require("../../../contexts/metametrics");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _routes = require("../../../helpers/constants/routes");
var _menu = require("../../ui/menu");
var _componentLibrary = require("../../component-library");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _util = require("../../../helpers/utils/util");
var _actions = require("../../../store/actions");
var _designSystem = require("../../../helpers/constants/design-system");
var _metrics = require("../../../helpers/utils/metrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const AccountListItemMenu = ({
  anchorElement,
  blockExplorerUrlSubTitle,
  onClose,
  closeMenu,
  isRemovable,
  identity
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const addressLink = (0, _etherscanLink.getAccountLink)(identity.address, chainId, rpcPrefs);
  const deviceName = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const keyring = (0, _reactRedux.useSelector)(state => (0, _metamask.findKeyringForAddress)(state, identity.address));
  const accountType = (0, _metrics.formatAccountType)((0, _selectors.getAccountTypeForKeyring)(keyring));
  const blockExplorerLinkText = (0, _reactRedux.useSelector)(_selectors.getBlockExplorerLinkText);
  const openBlockExplorer = () => {
    trackEvent({
      event: _metametrics2.MetaMetricsEventName.ExternalLinkClicked,
      category: _metametrics2.MetaMetricsEventCategory.Navigation,
      properties: {
        link_type: _metametrics2.MetaMetricsEventLinkType.AccountTracker,
        location: 'Account Options',
        url_domain: (0, _util.getURLHostName)(addressLink)
      }
    });
    global.platform.openTab({
      url: addressLink
    });
    onClose();
  };
  const routeToAddBlockExplorerUrl = () => {
    history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
  };
  return /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: anchorElement,
    className: "account-list-item-menu",
    onHide: onClose
  }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    onClick: () => {
      blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl() : openBlockExplorer();
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.BlockExplorerLinkClicked,
        category: _metametrics2.MetaMetricsEventCategory.Accounts,
        properties: {
          location: 'Account Options',
          chain_id: chainId
        }
      });
    },
    subtitle: blockExplorerUrlSubTitle || null,
    iconName: _componentLibrary.IconName.Export,
    "data-testid": "account-list-menu-open-explorer"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm
  }, t('viewOnExplorer'))), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    onClick: () => {
      dispatch((0, _actions.setAccountDetailsAddress)(identity.address));
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.NavAccountDetailsOpened,
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Account Options'
        }
      });
      onClose();
      closeMenu === null || closeMenu === void 0 ? void 0 : closeMenu();
    },
    iconName: _componentLibrary.IconName.ScanBarcode
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm
  }, t('accountDetails'))), isRemovable ? /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-list-menu-remove",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'CONFIRM_REMOVE_ACCOUNT',
        identity
      }));
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.AccountRemoved,
        category: _metametrics2.MetaMetricsEventCategory.Accounts,
        properties: {
          account_hardware_type: deviceName,
          chain_id: chainId,
          account_type: accountType
        }
      });
      onClose();
    },
    iconName: _componentLibrary.IconName.Trash
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm
  }, t('removeAccount'))) : null);
};
exports.AccountListItemMenu = AccountListItemMenu;
AccountListItemMenu.propTypes = {
  /**
   * Element that the menu should display next to
   */
  anchorElement: _propTypes.default.instanceOf(window.Element),
  /**
   * Function that executes when the menu is closed
   */
  onClose: _propTypes.default.func.isRequired,
  /**
   * Function that closes the menu
   */
  closeMenu: _propTypes.default.func,
  /**
   * Domain of the block explorer
   */
  blockExplorerUrlSubTitle: _propTypes.default.string,
  /**
   * Represents if the account should be removable
   */
  isRemovable: _propTypes.default.bool.isRequired,
  /**
   * Identity of the account
   */
  /**
   * Identity of the account
   */
  identity: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string.isRequired
  }).isRequired
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-list-item-menu\\account-list-item-menu.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-item-menu\\index.js", {"./account-list-item-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-item-menu\\account-list-item-menu.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-list-item-menu%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccountListItemMenu", {
  enumerable: true,
  get: function () {
    return _accountListItemMenu.AccountListItemMenu;
  }
});
var _accountListItemMenu = require("./account-list-item-menu");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-list-item-menu\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-item\\account-list-item.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\index.js","../../../../shared/constants/hardware-wallets":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\hardware-wallets.ts","../../../../shared/constants/keyring":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\keyring.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/common":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\common.ts","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../app/user-preferenced-currency-display/user-preferenced-currency-display.component":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\user-preferenced-currency-display\\user-preferenced-currency-display.component.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/tooltip/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-list-item%5Caccount-list-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountListItem = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _util = require("../../../helpers/utils/util");
var _ = require("..");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");
var _keyring = require("../../../../shared/constants/keyring");
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../app/user-preferenced-currency-display/user-preferenced-currency-display.component"));
var _common = require("../../../helpers/constants/common");
var _metamask = require("../../../ducks/metamask/metamask");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip/tooltip"));
var _metametrics = require("../../../../shared/constants/metametrics");
var _metametrics2 = require("../../../contexts/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const MAXIMUM_CURRENCY_DECIMALS = 3;
const MAXIMUM_CHARACTERS_WITHOUT_TOOLTIP = 17;
function getLabel(keyring = {}, t) {
  const {
    type
  } = keyring;
  switch (type) {
    case _keyring.KeyringType.qr:
      return _hardwareWallets.HardwareKeyringNames.qr;
    case _keyring.KeyringType.imported:
      return t('imported');
    case _keyring.KeyringType.trezor:
      return _hardwareWallets.HardwareKeyringNames.trezor;
    case _keyring.KeyringType.ledger:
      return _hardwareWallets.HardwareKeyringNames.ledger;
    case _keyring.KeyringType.lattice:
      return _hardwareWallets.HardwareKeyringNames.lattice;
    default:
      return null;
  }
}
const AccountListItem = ({
  identity,
  selected = false,
  onClick,
  closeMenu,
  connectedAvatar,
  connectedAvatarName
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [accountOptionsMenuOpen, setAccountOptionsMenuOpen] = (0, _react.useState)(false);
  const ref = (0, _react.useRef)(false);
  const useBlockie = (0, _reactRedux.useSelector)(state => state.metamask.useBlockie);
  const keyring = (0, _reactRedux.useSelector)(state => (0, _metamask.findKeyringForAddress)(state, identity.address));
  const label = getLabel(keyring, t);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const {
    blockExplorerUrl
  } = rpcPrefs;
  const blockExplorerUrlSubTitle = (0, _util.getURLHostName)(blockExplorerUrl);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    padding: 4,
    gap: 2,
    backgroundColor: selected ? _designSystem.Color.primaryMuted : _designSystem.Color.transparent,
    className: (0, _classnames.default)('multichain-account-list-item', {
      'multichain-account-list-item--selected': selected
    }),
    onClick: () => {
      // Without this check, the account will be selected after
      // the account options menu closes
      if (!accountOptionsMenuOpen) {
        onClick();
      }
    }
  }, selected && /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "multichain-account-list-item__selected-indicator",
    borderRadius: _designSystem.BorderRadius.pill,
    backgroundColor: _designSystem.Color.primaryDefault
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarAccount, {
    borderColor: _designSystem.BorderColor.transparent,
    size: _designSystem.Size.SM,
    address: identity.address,
    variant: useBlockie ? _componentLibrary.AvatarAccountVariant.Blockies : _componentLibrary.AvatarAccountVariant.Jazzicon
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    className: "multichain-account-list-item__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    ellipsis: true,
    as: "div"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    onClick: e => {
      e.stopPropagation();
      onClick();
    },
    className: "multichain-account-list-item__account-name",
    color: _designSystem.Color.textDefault,
    ellipsis: true
  }, identity.name.length > MAXIMUM_CHARACTERS_WITHOUT_TOOLTIP ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    title: identity.name,
    position: "bottom",
    wrapperClassName: "multichain-account-list-item__tooltip"
  }, identity.name) : identity.name)), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center
  }, connectedAvatar ? /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarFavicon, {
    size: _designSystem.Size.XS,
    src: connectedAvatar,
    name: connectedAvatarName,
    marginInlineEnd: 2
  }) : null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    textAlign: _designSystem.TextAlign.End,
    as: "div"
  }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    ethNumberOfDecimals: MAXIMUM_CURRENCY_DECIMALS,
    value: identity.balance,
    type: _common.SECONDARY
  }))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    color: _designSystem.Color.textAlternative
  }, (0, _util.shortenAddress)(identity.address)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    color: _designSystem.Color.textAlternative,
    textAlign: _designSystem.TextAlign.End,
    as: "div"
  }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    ethNumberOfDecimals: MAXIMUM_CURRENCY_DECIMALS,
    value: identity.balance,
    type: _common.PRIMARY
  }))), label ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Tag, {
    label: label,
    labelProps: {
      variant: _designSystem.TextVariant.bodyXs,
      color: _designSystem.Color.textAlternative
    }
  }) : null), /*#__PURE__*/_react.default.createElement("div", {
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    ariaLabel: `${identity.name} ${t('options')}`,
    iconName: _componentLibrary.IconName.MoreVertical,
    size: _componentLibrary.IconSize.Sm,
    onClick: e => {
      e.stopPropagation();
      trackEvent({
        event: _metametrics.MetaMetricsEventName.AccountDetailMenuOpened,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Account Options'
        }
      });
      setAccountOptionsMenuOpen(true);
    },
    "data-testid": "account-list-item-menu-button"
  }), accountOptionsMenuOpen ? /*#__PURE__*/_react.default.createElement(_.AccountListItemMenu, {
    anchorElement: ref.current,
    blockExplorerUrlSubTitle: blockExplorerUrlSubTitle,
    identity: identity,
    onClose: () => setAccountOptionsMenuOpen(false),
    isRemovable: (keyring === null || keyring === void 0 ? void 0 : keyring.type) !== _keyring.KeyringType.hdKeyTree,
    closeMenu: closeMenu
  }) : null));
};
exports.AccountListItem = AccountListItem;
AccountListItem.propTypes = {
  /**
   * Identity of the account
   */
  identity: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string.isRequired
  }).isRequired,
  /**
   * Represents if this account is currently selected
   */
  selected: _propTypes.default.bool,
  /**
   * Function to execute when the item is clicked
   */
  onClick: _propTypes.default.func.isRequired,
  /**
   * Function that closes the menu
   */
  closeMenu: _propTypes.default.func,
  /**
   * File location of the avatar icon
   */
  connectedAvatar: _propTypes.default.string,
  /**
   * Text used as the avatar alt text
   */
  connectedAvatarName: _propTypes.default.string
};
AccountListItem.displayName = 'AccountListItem';


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-list-item\\account-list-item.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-item\\index.js", {"./account-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-item\\account-list-item.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-list-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccountListItem", {
  enumerable: true,
  get: function () {
    return _accountListItem.AccountListItem;
  }
});
var _accountListItem = require("./account-list-item");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-list-item\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-menu\\account-list-menu.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\index.js","../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../component-library/icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\popover\\index.js","fuse.js":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\fuse.js\\dist\\fuse.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-list-menu%5Caccount-list-menu.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountListMenu = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _fuse = _interopRequireDefault(require("fuse.js"));
var _reactRedux = require("react-redux");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _componentLibrary = require("../../component-library");
var _deprecated = require("../../component-library/icon/deprecated");
var _ = require("..");
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _metametrics = require("../../../contexts/metametrics");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _selectors = require("../../../selectors");
var _actions = require("../../../store/actions");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _routes = require("../../../helpers/constants/routes");
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// TODO: Replace ICON_NAMES with IconName when ButtonBase/Buttons have been updated

const AccountListMenu = ({
  onClose
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const accounts = (0, _reactRedux.useSelector)(_selectors.getMetaMaskAccountsOrdered);
  const selectedAccount = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount);
  const connectedSites = (0, _reactRedux.useSelector)(_selectors.getConnectedSubjectsForAllAddresses);
  const currentTabOrigin = (0, _reactRedux.useSelector)(_selectors.getOriginOfCurrentTab);
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const inputRef = (0, _react.useRef)();
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  let searchResults = accounts;
  if (searchQuery) {
    const fuse = new _fuse.default(accounts, {
      threshold: 0.2,
      location: 0,
      distance: 100,
      maxPatternLength: 32,
      minMatchCharLength: 1,
      keys: ['name', 'address']
    });
    fuse.setCollection(accounts);
    searchResults = fuse.search(searchQuery);
  }

  // Focus on the search box when the popover is opened
  (0, _react.useEffect)(() => {
    if (inputRef.current) {
      var _inputRef$current$roo;
      (_inputRef$current$roo = inputRef.current.rootNode.querySelector('input[type=search]')) === null || _inputRef$current$roo === void 0 ? void 0 : _inputRef$current$roo.focus();
    }
  }, [inputRef]);
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: t('selectAnAccount'),
    ref: inputRef,
    centerTitle: true,
    onClose: onClose
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "multichain-account-menu"
  }, accounts.length > 1 ? /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 4,
    paddingRight: 4,
    paddingBottom: 4,
    paddingTop: 0
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.TextFieldSearch, {
    size: _designSystem.Size.SM,
    width: _designSystem.BLOCK_SIZES.FULL,
    placeholder: t('searchAccounts'),
    value: searchQuery,
    onChange: e => setSearchQuery(e.target.value),
    clearButtonOnClick: () => setSearchQuery(''),
    clearButtonProps: {
      size: _designSystem.Size.SM
    }
  })) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "multichain-account-menu__list"
  }, searchResults.length === 0 && searchQuery !== '' ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    paddingLeft: 4,
    paddingRight: 4,
    color: _designSystem.TextColor.textMuted,
    "data-testid": "multichain-account-menu-no-results"
  }, t('noAccountsFound')) : null, searchResults.map(account => {
    var _connectedSites$accou;
    const connectedSite = (_connectedSites$accou = connectedSites[account.address]) === null || _connectedSites$accou === void 0 ? void 0 : _connectedSites$accou.find(({
      origin
    }) => origin === currentTabOrigin);
    return /*#__PURE__*/_react.default.createElement(_.AccountListItem, {
      onClick: () => {
        dispatch((0, _actions.toggleAccountMenu)());
        trackEvent({
          category: _metametrics2.MetaMetricsEventCategory.Navigation,
          event: _metametrics2.MetaMetricsEventName.NavAccountSwitched,
          properties: {
            location: 'Main Menu'
          }
        });
        dispatch((0, _actions.setSelectedAccount)(account.address));
      },
      identity: account,
      key: account.address,
      selected: selectedAccount.address === account.address,
      closeMenu: onClose,
      connectedAvatar: connectedSite === null || connectedSite === void 0 ? void 0 : connectedSite.iconUrl,
      connectedAvatarName: connectedSite === null || connectedSite === void 0 ? void 0 : connectedSite.name
    });
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    size: _designSystem.Size.SM,
    startIconName: _deprecated.ICON_NAMES.ADD,
    onClick: () => {
      dispatch((0, _actions.toggleAccountMenu)());
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        event: _metametrics2.MetaMetricsEventName.AccountAddSelected,
        properties: {
          account_type: _metametrics2.MetaMetricsEventAccountType.Default,
          location: 'Main Menu'
        }
      });
      history.push(_routes.NEW_ACCOUNT_ROUTE);
    }
  }, t('addAccount'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    size: _designSystem.Size.SM,
    startIconName: _deprecated.ICON_NAMES.IMPORT,
    onClick: () => {
      dispatch((0, _actions.toggleAccountMenu)());
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        event: _metametrics2.MetaMetricsEventName.AccountAddSelected,
        properties: {
          account_type: _metametrics2.MetaMetricsEventAccountType.Imported,
          location: 'Main Menu'
        }
      });
      history.push(_routes.IMPORT_ACCOUNT_ROUTE);
    }
  }, t('importAccount'))), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    size: _designSystem.Size.SM,
    startIconName: _deprecated.ICON_NAMES.HARDWARE,
    onClick: () => {
      dispatch((0, _actions.toggleAccountMenu)());
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        event: _metametrics2.MetaMetricsEventName.AccountAddSelected,
        properties: {
          account_type: _metametrics2.MetaMetricsEventAccountType.Hardware,
          location: 'Main Menu'
        }
      });
      if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP) {
        global.platform.openExtensionInBrowser(_routes.CONNECT_HARDWARE_ROUTE);
      } else {
        history.push(_routes.CONNECT_HARDWARE_ROUTE);
      }
    }
  }, t('hardwareWallet'))))));
};
exports.AccountListMenu = AccountListMenu;
AccountListMenu.propTypes = {
  /**
   * Function that executes when the menu closes
   */
  onClose: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-list-menu\\account-list-menu.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-menu\\index.js", {"./account-list-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-menu\\account-list-menu.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-list-menu%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccountListMenu", {
  enumerable: true,
  get: function () {
    return _accountListMenu.AccountListMenu;
  }
});
var _accountListMenu = require("./account-list-menu");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-list-menu\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-picker\\account-picker.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-picker%5Caccount-picker.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountPicker = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const AccountPicker = ({
  address,
  name,
  onClick,
  disabled
}) => {
  const useBlockie = (0, _reactRedux.useSelector)(state => state.metamask.useBlockie);
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    className: "multichain-account-picker",
    onClick: onClick,
    backgroundColor: _designSystem.BackgroundColor.transparent,
    borderRadius: _designSystem.BorderRadius.LG,
    ellipsis: true,
    textProps: {
      display: _designSystem.DISPLAY.FLEX,
      gap: 2,
      alignItems: _designSystem.AlignItems.center
    },
    disabled: disabled
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarAccount, {
    variant: useBlockie ? _componentLibrary.AvatarAccountVariant.Blockies : _componentLibrary.AvatarAccountVariant.Jazzicon,
    address: address,
    size: _designSystem.Size.XS,
    borderColor: _designSystem.BackgroundColor.backgroundDefault // we currently don't have white color for border hence using backgroundDefault as the border
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span",
    fontWeight: _designSystem.FontWeight.Bold,
    ellipsis: true
  }, name), /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.ArrowDown,
    color: _designSystem.IconColor.iconDefault,
    size: _designSystem.Size.SM
  }));
};
exports.AccountPicker = AccountPicker;
AccountPicker.propTypes = {
  /**
   * Account name
   */
  name: _propTypes.default.string.isRequired,
  /**
   * Account address, used for blockie or jazzicon
   */
  address: _propTypes.default.string.isRequired,
  /**
   * Action to perform when the account picker is clicked
   */
  onClick: _propTypes.default.func.isRequired,
  /**
   * Represents if the AccountPicker should be actionable
   */
  disabled: _propTypes.default.bool.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-picker\\account-picker.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-picker\\index.js", {"./account-picker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-picker\\account-picker.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caccount-picker%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccountPicker", {
  enumerable: true,
  get: function () {
    return _accountPicker.AccountPicker;
  }
});
var _accountPicker = require("./account-picker");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\account-picker\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\address-copy-button\\address-copy-button.js", {"../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\util.js","../../../hooks/useCopyToClipboard":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useCopyToClipboard.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../component-library/icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\index.js","../../ui/tooltip/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\tooltip.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caddress-copy-button%5Caddress-copy-button.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddressCopyButton = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _componentLibrary = require("../../component-library");
var _deprecated = require("../../component-library/icon/deprecated");
var _designSystem = require("../../../helpers/constants/design-system");
var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");
var _util = require("../../../helpers/utils/util");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip/tooltip"));
var _useI18nContext = require("../../../hooks/useI18nContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// TODO: Replace ICON_NAMES with IconName when ButtonBase/Buttons have been updated

const AddressCopyButton = ({
  address,
  shorten = false,
  wrap = false,
  onClick
}) => {
  const displayAddress = shorten ? (0, _util.shortenAddress)(address) : address;
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : null
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonBase, {
    backgroundColor: _designSystem.BackgroundColor.primaryMuted,
    onClick: () => {
      handleCopy(address);
      onClick === null || onClick === void 0 ? void 0 : onClick();
    },
    paddingRight: 4,
    paddingLeft: 4,
    size: _designSystem.Size.SM,
    variant: _designSystem.TextVariant.bodySm,
    color: _designSystem.TextColor.primaryDefault,
    endIconName: copied ? _deprecated.ICON_NAMES.COPY_SUCCESS : _deprecated.ICON_NAMES.COPY,
    className: (0, _classnames.default)('multichain-address-copy-button', {
      'multichain-address-copy-button__address--wrap': wrap
    }),
    borderRadius: _designSystem.BorderRadius.pill,
    alignItems: _designSystem.AlignItems.center,
    "data-testid": "address-copy-button-text"
  }, displayAddress));
};
exports.AddressCopyButton = AddressCopyButton;
AddressCopyButton.propTypes = {
  /**
   * Address to be copied
   */
  address: _propTypes.default.string.isRequired,
  /**
   * Represents if the address should be shortened
   */
  shorten: _propTypes.default.bool,
  /**
   * Represents if the element should wrap to multiple lines
   */
  wrap: _propTypes.default.bool,
  /**
   * Fires when the button is clicked
   */
  onClick: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\address-copy-button\\address-copy-button.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\address-copy-button\\index.js", {"./address-copy-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\address-copy-button\\address-copy-button.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Caddress-copy-button%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AddressCopyButton", {
  enumerable: true,
  get: function () {
    return _addressCopyButton.AddressCopyButton;
  }
});
var _addressCopyButton = require("./address-copy-button");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\address-copy-button\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\app-header\\app-header.js", {"..":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\index.js","../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../ducks/metamask/metamask":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\metamask\\metamask.js","../../../ducks/send":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\ducks\\send\\index.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../app/connected-status-indicator":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\app\\connected-status-indicator\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/metafox-logo":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\metafox-logo\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js","webextension-polyfill":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Capp-header%5Capp-header.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppHeader = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _routes = require("../../../helpers/constants/routes");
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
var _selectors = require("../../../selectors");
var _ = require("..");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _actions = require("../../../store/actions");
var _metafoxLogo = _interopRequireDefault(require("../../ui/metafox-logo"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _connectedStatusIndicator = _interopRequireDefault(require("../../app/connected-status-indicator"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _metamask = require("../../../ducks/metamask/metamask");
var _send = require("../../../ducks/send");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const AppHeader = ({
  location
}) => {
  var _document$querySelect, _currentNetwork$rpcPr, _currentNetwork$rpcPr2, _currentNetwork$rpcPr3;
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const [accountOptionsMenuOpen, setAccountOptionsMenuOpen] = (0, _react.useState)(false);
  const [multichainProductTourStep, setMultichainProductTourStep] = (0, _react.useState)(1);
  const menuRef = (0, _react.useRef)(false);
  const origin = (0, _reactRedux.useSelector)(_selectors.getOriginOfCurrentTab);
  const history = (0, _reactRouterDom.useHistory)();
  const isUnlocked = (0, _reactRedux.useSelector)(state => state.metamask.isUnlocked);
  const t = (0, _useI18nContext.useI18nContext)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);

  // Used for account picker
  const identity = (0, _reactRedux.useSelector)(_selectors.getSelectedIdentity);
  const dispatch = (0, _reactRedux.useDispatch)();
  const completedOnboarding = (0, _reactRedux.useSelector)(_metamask.getCompletedOnboarding);
  const onboardedInThisUISession = (0, _reactRedux.useSelector)(_selectors.getOnboardedInThisUISession);
  const showProductTourPopup = (0, _reactRedux.useSelector)(_selectors.getShowProductTour);

  // Used for network icon / dropdown
  const currentNetwork = (0, _reactRedux.useSelector)(_selectors.getCurrentNetwork);

  // Used to get the environment and connection status
  const popupStatus = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;
  const showStatus = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP && origin && origin !== _webextensionPolyfill.default.runtime.id;
  const showProductTour = completedOnboarding && !onboardedInThisUISession && showProductTourPopup;
  const productTourDirection = (_document$querySelect = document.querySelector('[dir]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getAttribute('dir');

  // Disable the network and account pickers if the user is in
  // a critical flow
  const sendStage = (0, _reactRedux.useSelector)(_send.getSendStage);
  const isConfirmationPage = Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
    path: _routes.CONFIRM_TRANSACTION_ROUTE,
    exact: false
  }));
  const isTransactionEditPage = [_send.SEND_STAGES.EDIT, _send.SEND_STAGES.DRAFT, _send.SEND_STAGES.ADD_RECIPIENT].includes(sendStage);
  const isSwapsPage = Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
    path: _routes.SWAPS_ROUTE,
    exact: false
  }));
  const isSwapsBuildQuotePage = Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
    path: _routes.BUILD_QUOTE_ROUTE,
    exact: false
  }));
  const disablePickers = isConfirmationPage || isTransactionEditPage || isSwapsPage && !isSwapsBuildQuotePage;
  const disableNetworkPicker = isSwapsPage || disablePickers;

  // Callback for network dropdown
  const networkOpenCallback = (0, _react.useCallback)(() => {
    dispatch((0, _actions.toggleNetworkMenu)());
    trackEvent({
      event: _metametrics2.MetaMetricsEventName.NavNetworkMenuOpened,
      category: _metametrics2.MetaMetricsEventCategory.Navigation,
      properties: {
        location: 'App header',
        chain_id: chainId
      }
    });
  }, [chainId, dispatch, trackEvent]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isUnlocked && !popupStatus ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: [_designSystem.DISPLAY.NONE, _designSystem.DISPLAY.FLEX],
    alignItems: _designSystem.AlignItems.center,
    margin: 2,
    className: "multichain-app-header-logo",
    "data-testid": "app-header-logo",
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, {
    unsetIconHeight: true,
    onClick: async () => history.push(_routes.DEFAULT_ROUTE)
  })) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    className: (0, _classnames.default)('multichain-app-header', {
      'multichain-app-header-shadow': !isUnlocked || popupStatus
    }),
    alignItems: _designSystem.AlignItems.center,
    width: _designSystem.BLOCK_SIZES.FULL,
    backgroundColor: !isUnlocked || popupStatus ? _designSystem.BackgroundColor.backgroundDefault : _designSystem.BackgroundColor.backgroundAlternative
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isUnlocked ? /*#__PURE__*/_react.default.createElement(_box.default, {
    className: (0, _classnames.default)('multichain-app-header__contents', {
      'multichain-app-header-shadow': isUnlocked && !popupStatus
    }),
    alignItems: _designSystem.AlignItems.center,
    width: _designSystem.BLOCK_SIZES.FULL,
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
    padding: 2,
    paddingLeft: 4,
    paddingRight: 4,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarNetwork, {
    className: "multichain-app-header__contents--avatar-network",
    ref: menuRef,
    as: "button",
    "aria-label": t('networkMenu'),
    padding: 0,
    name: currentNetwork === null || currentNetwork === void 0 ? void 0 : currentNetwork.nickname,
    src: currentNetwork === null || currentNetwork === void 0 ? void 0 : (_currentNetwork$rpcPr = currentNetwork.rpcPrefs) === null || _currentNetwork$rpcPr === void 0 ? void 0 : _currentNetwork$rpcPr.imageUrl,
    size: _designSystem.Size.SM,
    onClick: networkOpenCallback,
    display: [_designSystem.DISPLAY.FLEX, _designSystem.DISPLAY.NONE] // show on popover hide on desktop
    ,
    disabled: disableNetworkPicker
  }), popupStatus ? null : /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.PickerNetwork, {
    margin: 2,
    label: currentNetwork === null || currentNetwork === void 0 ? void 0 : currentNetwork.nickname,
    src: currentNetwork === null || currentNetwork === void 0 ? void 0 : (_currentNetwork$rpcPr2 = currentNetwork.rpcPrefs) === null || _currentNetwork$rpcPr2 === void 0 ? void 0 : _currentNetwork$rpcPr2.imageUrl,
    onClick: networkOpenCallback,
    display: [_designSystem.DISPLAY.NONE, _designSystem.DISPLAY.FLEX] // show on desktop hide on popover
    ,
    className: "multichain-app-header__contents__network-picker",
    disabled: disableNetworkPicker
  })), showProductTour && popupStatus && multichainProductTourStep === 1 ? /*#__PURE__*/_react.default.createElement(_.ProductTour, {
    className: "multichain-app-header__product-tour",
    anchorElement: menuRef.current,
    title: t('switcherTitle'),
    description: t('switcherTourDescription'),
    currentStep: "1",
    totalSteps: "3",
    onClick: () => setMultichainProductTourStep(multichainProductTourStep + 1),
    positionObj: productTourDirection === 'rtl' ? '0%' : '88%',
    productTourDirection: productTourDirection
  }) : null, /*#__PURE__*/_react.default.createElement(_.AccountPicker, {
    address: identity.address,
    name: identity.name,
    onClick: () => {
      dispatch((0, _actions.toggleAccountMenu)());
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.NavAccountMenuOpened,
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Home'
        }
      });
    },
    disabled: disablePickers
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.flexEnd
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    gap: 4
  }, showStatus ? /*#__PURE__*/_react.default.createElement(_box.default, {
    ref: menuRef
  }, /*#__PURE__*/_react.default.createElement(_connectedStatusIndicator.default, {
    onClick: () => {
      history.push(_routes.CONNECTED_ACCOUNTS_ROUTE);
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.NavConnectedSitesOpened,
        category: _metametrics2.MetaMetricsEventCategory.Navigation
      });
    }
  })) : null, ' ', popupStatus && multichainProductTourStep === 2 ? /*#__PURE__*/_react.default.createElement(_.ProductTour, {
    className: "multichain-app-header__product-tour",
    anchorElement: menuRef.current,
    closeMenu: () => setAccountOptionsMenuOpen(false),
    prevIcon: true,
    title: t('permissionsTitle'),
    description: t('permissionsTourDescription'),
    currentStep: "2",
    totalSteps: "3",
    prevClick: () => setMultichainProductTourStep(multichainProductTourStep - 1),
    onClick: () => setMultichainProductTourStep(multichainProductTourStep + 1),
    positionObj: productTourDirection === 'rtl' ? '76%' : '12%',
    productTourDirection: productTourDirection
  }) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    ref: menuRef,
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.flexEnd,
    width: _designSystem.BLOCK_SIZES.FULL
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.MoreVertical,
    "data-testid": "account-options-menu-button",
    ariaLabel: t('accountOptions'),
    onClick: () => {
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.NavAccountMenuOpened,
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Home'
        }
      });
      setAccountOptionsMenuOpen(true);
    },
    size: _componentLibrary.ButtonIconSize.Sm,
    iconProps: {
      size: _componentLibrary.IconSize.Sm
    }
  }))), accountOptionsMenuOpen ? /*#__PURE__*/_react.default.createElement(_.GlobalMenu, {
    anchorElement: menuRef.current,
    closeMenu: () => setAccountOptionsMenuOpen(false)
  }) : null, showProductTour && popupStatus && multichainProductTourStep === 3 ? /*#__PURE__*/_react.default.createElement(_.ProductTour, {
    className: "multichain-app-header__product-tour",
    anchorElement: menuRef.current,
    closeMenu: () => setAccountOptionsMenuOpen(false),
    prevIcon: true,
    title: t('globalTitle'),
    description: t('globalTourDescription'),
    currentStep: "3",
    totalSteps: "3",
    prevClick: () => setMultichainProductTourStep(multichainProductTourStep - 1),
    onClick: () => {
      (0, _actions.hideProductTour)();
    },
    positionObj: productTourDirection === 'rtl' ? '88%' : '0%',
    productTourDirection: productTourDirection
  }) : null)) : /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    className: (0, _classnames.default)('multichain-app-header__lock-contents', {
      'multichain-app-header-shadow': isUnlocked && !popupStatus
    }),
    alignItems: _designSystem.AlignItems.center,
    width: _designSystem.BLOCK_SIZES.FULL,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault,
    padding: 2,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.PickerNetwork, {
    label: currentNetwork === null || currentNetwork === void 0 ? void 0 : currentNetwork.nickname,
    src: currentNetwork === null || currentNetwork === void 0 ? void 0 : (_currentNetwork$rpcPr3 = currentNetwork.rpcPrefs) === null || _currentNetwork$rpcPr3 === void 0 ? void 0 : _currentNetwork$rpcPr3.imageUrl,
    onClick: () => dispatch((0, _actions.toggleNetworkMenu)()),
    className: "multichain-app-header__contents__network-picker"
  })), /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, {
    unsetIconHeight: true,
    onClick: async () => {
      history.push(_routes.DEFAULT_ROUTE);
    }
  })))));
};
exports.AppHeader = AppHeader;
AppHeader.propTypes = {
  /**
   * The location object for the application
   */
  location: _propTypes.default.object
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\app-header\\app-header.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\app-header\\index.js", {"./app-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\app-header\\app-header.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Capp-header%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AppHeader", {
  enumerable: true,
  get: function () {
    return _appHeader.AppHeader;
  }
});
var _appHeader = require("./app-header");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\app-header\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\detected-token-banner\\detected-token-banner.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cdetected-token-banner%5Cdetected-token-banner.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DetectedTokensBanner = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const DetectedTokensBanner = ({
  className,
  actionButtonOnClick,
  ...props
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const detectedTokens = (0, _reactRedux.useSelector)(_selectors.getDetectedTokensInCurrentNetwork);
  const detectedTokensDetails = detectedTokens.map(({
    address,
    symbol
  }) => `${symbol} - ${address}`);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const handleOnClick = () => {
    actionButtonOnClick();
    trackEvent({
      event: _metametrics2.MetaMetricsEventName.TokenImportClicked,
      category: _metametrics2.MetaMetricsEventCategory.Wallet,
      properties: {
        source_connection_method: _metametrics2.MetaMetricsTokenEventSource.Detected,
        tokens: detectedTokensDetails,
        chain_id: chainId
      }
    });
  };
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, _extends({
    className: (0, _classnames.default)('multichain-detected-token-banner', className),
    actionButtonLabel: t('importTokensCamelCase'),
    actionButtonOnClick: handleOnClick,
    "data-testid": "detected-token-banner"
  }, props), detectedTokens.length === 1 ? t('numberOfNewTokensDetectedSingular') : t('numberOfNewTokensDetectedPlural', [detectedTokens.length]));
};
exports.DetectedTokensBanner = DetectedTokensBanner;
DetectedTokensBanner.propTypes = {
  /**
   * Handler to be passed to the DetectedTokenBanner component
   */
  actionButtonOnClick: _propTypes.default.func.isRequired,
  /**
   * An additional className to the DetectedTokenBanner component
   */
  className: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\detected-token-banner\\detected-token-banner.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\detected-token-banner\\index.js", {"./detected-token-banner":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\detected-token-banner\\detected-token-banner.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cdetected-token-banner%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DetectedTokensBanner", {
  enumerable: true,
  get: function () {
    return _detectedTokenBanner.DetectedTokensBanner;
  }
});
var _detectedTokenBanner = require("./detected-token-banner");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\detected-token-banner\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\global-menu\\global-menu.js", {"../../../../app/scripts/lib/util":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../../shared/lib/ui-utils":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\lib\\ui-utils.js","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/portfolio":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\utils\\portfolio.js","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\menu\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cglobal-menu%5Cglobal-menu.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlobalMenu = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _routes = require("../../../helpers/constants/routes");
var _actions = require("../../../store/actions");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _componentLibrary = require("../../component-library");
var _menu = require("../../ui/menu");
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _uiUtils = require("../../../../shared/lib/ui-utils");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _portfolio = require("../../../helpers/utils/portfolio");
var _selectors = require("../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const GlobalMenu = ({
  closeMenu,
  anchorElement
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const metaMetricsId = (0, _reactRedux.useSelector)(_selectors.getMetaMetricsId);
  return /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: anchorElement,
    onHide: closeMenu
  }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Connect,
    onClick: () => {
      history.push(_routes.CONNECTED_ROUTE);
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.NavConnectedSitesOpened,
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Global Menu'
        }
      });
      closeMenu();
    }
  }, t('connectedSites')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Diagram,
    onClick: () => {
      const portfolioUrl = (0, _portfolio.getPortfolioUrl)('', 'ext', metaMetricsId);
      global.platform.openTab({
        url: portfolioUrl
      });
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Home,
        event: _metametrics2.MetaMetricsEventName.PortfolioLinkClicked,
        properties: {
          url: portfolioUrl,
          location: 'Global Menu'
        }
      }, {
        contextPropsIntoEventProperties: [_metametrics2.MetaMetricsContextProp.PageTitle]
      });
      closeMenu();
    },
    "data-testid": "global-menu-portfolio"
  }, t('portfolioView')), (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_FULLSCREEN ? null : /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Expand,
    onClick: () => {
      global.platform.openExtensionInBrowser();
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.AppWindowExpanded,
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Global Menu'
        }
      });
      closeMenu();
    },
    "data-testid": "global-menu-expand"
  }, t('expandView')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.MessageQuestion,
    onClick: () => {
      global.platform.openTab({
        url: _uiUtils.SUPPORT_LINK
      });
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Home,
        event: _metametrics2.MetaMetricsEventName.SupportLinkClicked,
        properties: {
          url: _uiUtils.SUPPORT_LINK,
          location: 'Global Menu'
        }
      }, {
        contextPropsIntoEventProperties: [_metametrics2.MetaMetricsContextProp.PageTitle]
      });
      closeMenu();
    },
    "data-testid": "global-menu-support"
  }, t('support')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Setting,
    onClick: () => {
      history.push(_routes.SETTINGS_ROUTE);
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        event: _metametrics2.MetaMetricsEventName.NavSettingsOpened,
        properties: {
          location: 'Global Menu'
        }
      });
      closeMenu();
    }
  }, t('settings')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Lock,
    onClick: () => {
      dispatch((0, _actions.lockMetamask)());
      history.push(_routes.DEFAULT_ROUTE);
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        event: _metametrics2.MetaMetricsEventName.AppLocked,
        properties: {
          location: 'Global Menu'
        }
      });
      closeMenu();
    },
    "data-testid": "global-menu-lock"
  }, t('lockMetaMask')));
};
exports.GlobalMenu = GlobalMenu;
GlobalMenu.propTypes = {
  /**
   * The element that the menu should display next to
   */
  anchorElement: _propTypes.default.instanceOf(window.Element),
  /**
   * Function that closes this menu
   */
  closeMenu: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\global-menu\\global-menu.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\global-menu\\index.js", {"./global-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\global-menu\\global-menu.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cglobal-menu%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GlobalMenu", {
  enumerable: true,
  get: function () {
    return _globalMenu.GlobalMenu;
  }
});
var _globalMenu = require("./global-menu");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\global-menu\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\index.js", {"./account-details":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-details\\index.js","./account-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-item\\index.js","./account-list-item-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-item-menu\\index.js","./account-list-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-list-menu\\index.js","./account-picker":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\account-picker\\index.js","./address-copy-button":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\address-copy-button\\index.js","./app-header":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\app-header\\index.js","./detected-token-banner":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\detected-token-banner\\index.js","./global-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\global-menu\\index.js","./multichain-connected-site-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-connected-site-menu\\index.js","./multichain-import-token-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-import-token-link\\index.js","./multichain-token-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-token-list-item\\index.js","./network-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\network-list-item\\index.js","./network-list-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\network-list-menu\\index.js","./product-tour-popover":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\product-tour-popover\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccountDetails", {
  enumerable: true,
  get: function () {
    return _accountDetails.AccountDetails;
  }
});
Object.defineProperty(exports, "AccountListItem", {
  enumerable: true,
  get: function () {
    return _accountListItem.AccountListItem;
  }
});
Object.defineProperty(exports, "AccountListItemMenu", {
  enumerable: true,
  get: function () {
    return _accountListItemMenu.AccountListItemMenu;
  }
});
Object.defineProperty(exports, "AccountListMenu", {
  enumerable: true,
  get: function () {
    return _accountListMenu.AccountListMenu;
  }
});
Object.defineProperty(exports, "AccountPicker", {
  enumerable: true,
  get: function () {
    return _accountPicker.AccountPicker;
  }
});
Object.defineProperty(exports, "AddressCopyButton", {
  enumerable: true,
  get: function () {
    return _addressCopyButton.AddressCopyButton;
  }
});
Object.defineProperty(exports, "AppHeader", {
  enumerable: true,
  get: function () {
    return _appHeader.AppHeader;
  }
});
Object.defineProperty(exports, "DetectedTokensBanner", {
  enumerable: true,
  get: function () {
    return _detectedTokenBanner.DetectedTokensBanner;
  }
});
Object.defineProperty(exports, "GlobalMenu", {
  enumerable: true,
  get: function () {
    return _globalMenu.GlobalMenu;
  }
});
Object.defineProperty(exports, "MultichainConnectedSiteMenu", {
  enumerable: true,
  get: function () {
    return _multichainConnectedSiteMenu.MultichainConnectedSiteMenu;
  }
});
Object.defineProperty(exports, "MultichainImportTokenLink", {
  enumerable: true,
  get: function () {
    return _multichainImportTokenLink.MultichainImportTokenLink;
  }
});
Object.defineProperty(exports, "MultichainTokenListItem", {
  enumerable: true,
  get: function () {
    return _multichainTokenListItem.MultichainTokenListItem;
  }
});
Object.defineProperty(exports, "NetworkListItem", {
  enumerable: true,
  get: function () {
    return _networkListItem.NetworkListItem;
  }
});
Object.defineProperty(exports, "NetworkListMenu", {
  enumerable: true,
  get: function () {
    return _networkListMenu.NetworkListMenu;
  }
});
Object.defineProperty(exports, "ProductTour", {
  enumerable: true,
  get: function () {
    return _productTourPopover.ProductTour;
  }
});
var _accountListItem = require("./account-list-item");
var _accountListItemMenu = require("./account-list-item-menu");
var _accountListMenu = require("./account-list-menu");
var _accountPicker = require("./account-picker");
var _appHeader = require("./app-header");
var _detectedTokenBanner = require("./detected-token-banner");
var _globalMenu = require("./global-menu");
var _multichainImportTokenLink = require("./multichain-import-token-link");
var _multichainTokenListItem = require("./multichain-token-list-item");
var _addressCopyButton = require("./address-copy-button");
var _multichainConnectedSiteMenu = require("./multichain-connected-site-menu");
var _networkListItem = require("./network-list-item");
var _networkListMenu = require("./network-list-menu");
var _productTourPopover = require("./product-tour-popover");
var _accountDetails = require("./account-details");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-connected-site-menu\\index.js", {"./multichain-connected-site-menu":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-connected-site-menu\\multichain-connected-site-menu.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cmultichain-connected-site-menu%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "MultichainConnectedSiteMenu", {
  enumerable: true,
  get: function () {
    return _multichainConnectedSiteMenu.MultichainConnectedSiteMenu;
  }
});
var _multichainConnectedSiteMenu = require("./multichain-connected-site-menu");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\multichain-connected-site-menu\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-connected-site-menu\\multichain-connected-site-menu.js", {"../../../helpers/constants/connected-sites":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\connected-sites.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\index.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cmultichain-connected-site-menu%5Cmultichain-connected-site-menu.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultichainConnectedSiteMenu = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _connectedSites = require("../../../helpers/constants/connected-sites");
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
var _box = _interopRequireDefault(require("../../ui/box"));
var _selectors = require("../../../selectors");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _useI18nContext = require("../../../hooks/useI18nContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const MultichainConnectedSiteMenu = ({
  className,
  globalMenuColor,
  status,
  text,
  onClick
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const selectedAccount = (0, _reactRedux.useSelector)(_selectors.getSelectedIdentity);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: (0, _classnames.default)('multichain-connected-site-menu', className),
    "data-testid": "connection-menu",
    as: "button",
    onClick: onClick,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.center,
    backgroundColor: _designSystem.BackgroundColor.backgroundDefault
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    title: status === _connectedSites.STATUS_NOT_CONNECTED ? t('statusNotConnectedAccount') : `${selectedAccount === null || selectedAccount === void 0 ? void 0 : selectedAccount.name} ${text}`,
    "data-testid": "multichain-connected-site-menu__tooltip",
    position: "bottom"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.BadgeWrapper, {
    positionObj: status === _connectedSites.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT ? {
      bottom: 4,
      right: -1,
      zIndex: 1
    } : {
      bottom: 2,
      right: -4,
      zIndex: 1
    },
    badge: /*#__PURE__*/_react.default.createElement(_box.default, {
      backgroundColor: globalMenuColor,
      className: `multichain-connected-site-menu__badge ${status === _connectedSites.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT ? 'not-connected' : ''}`,
      borderRadius: _designSystem.BorderRadius.full,
      borderColor: status === _connectedSites.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT ? _designSystem.BorderColor.successDefault : _designSystem.BackgroundColor.backgroundDefault,
      borderWidth: status === _connectedSites.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT ? 2 : 3
    })
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Global,
    size: _componentLibrary.IconSize.Sm,
    color: _designSystem.IconColor.iconDefault
  }))));
};
exports.MultichainConnectedSiteMenu = MultichainConnectedSiteMenu;
MultichainConnectedSiteMenu.propTypes = {
  /**
   * Additional classNames to be added to the MultichainConnectedSiteMenu
   */
  className: _propTypes.default.string,
  /**
   * Background color based on the connection status
   */
  globalMenuColor: _propTypes.default.string.isRequired,
  /**
   * Connection status string
   */
  status: _propTypes.default.string.isRequired,
  /**
   * Connection status message
   */
  text: _propTypes.default.string,
  /**
   * onClick handler to be passed
   */
  onClick: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\multichain-connected-site-menu\\multichain-connected-site-menu.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-import-token-link\\index.js", {"./multichain-import-token-link":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-import-token-link\\multichain-import-token-link.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cmultichain-import-token-link%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "MultichainImportTokenLink", {
  enumerable: true,
  get: function () {
    return _multichainImportTokenLink.MultichainImportTokenLink;
  }
});
var _multichainImportTokenLink = require("./multichain-import-token-link");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\multichain-import-token-link\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-import-token-link\\multichain-import-token-link.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../../store/actions":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\store\\actions.ts","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../component-library/icon/deprecated":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\icon\\deprecated\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cmultichain-import-token-link%5Cmultichain-import-token-link.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultichainImportTokenLink = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _componentLibrary = require("../../component-library");
var _deprecated = require("../../component-library/icon/deprecated");
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _routes = require("../../../helpers/constants/routes");
var _actions = require("../../../store/actions");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _selectors = require("../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } // TODO: Replace ICON_NAMES with IconName when ButtonBase/Buttons have been updated
const MultichainImportTokenLink = ({
  className,
  ...props
}) => {
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const isTokenDetectionSupported = (0, _reactRedux.useSelector)(_selectors.getIsTokenDetectionSupported);
  const isTokenDetectionInactiveOnMainnet = (0, _reactRedux.useSelector)(_selectors.getIsTokenDetectionInactiveOnMainnet);
  const isTokenDetectionAvailable = isTokenDetectionSupported || isTokenDetectionInactiveOnMainnet || Boolean(false);
  return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
    className: (0, _classnames.default)('multichain-import-token-link', className)
  }, props), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    size: _designSystem.Size.MD,
    "data-testid": "import-token-button",
    startIconName: _deprecated.ICON_NAMES.ADD,
    onClick: () => {
      history.push(_routes.IMPORT_TOKEN_ROUTE);
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.TokenImportButtonClicked,
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Home'
        }
      });
    }
  }, isTokenDetectionAvailable ? t('importTokensCamelCase') : t('importTokensCamelCase').charAt(0).toUpperCase() + t('importTokensCamelCase').slice(1))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    paddingBottom: 4,
    paddingTop: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    startIconName: _deprecated.ICON_NAMES.REFRESH,
    "data-testid": "refresh-list-button",
    onClick: () => (0, _actions.detectNewTokens)()
  }, t('refreshList'))));
};
exports.MultichainImportTokenLink = MultichainImportTokenLink;
MultichainImportTokenLink.propTypes = {
  /**
   * An additional className to apply to the TokenList.
   */
  className: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\multichain-import-token-link\\multichain-import-token-link.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-token-list-item\\index.js", {"./multichain-token-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-token-list-item\\multichain-token-list-item.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cmultichain-token-list-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "MultichainTokenListItem", {
  enumerable: true,
  get: function () {
    return _multichainTokenListItem.MultichainTokenListItem;
  }
});
var _multichainTokenListItem = require("./multichain-token-list-item");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\multichain-token-list-item\\index.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\multichain-token-list-item\\multichain-token-list-item.js", {"../../../../shared/constants/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\selectors\\index.js","../../component-library":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\component-library\\index.js","../../ui/box/box":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\box\\box.js","../../ui/tooltip":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\ui\\tooltip\\index.js","classnames":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\classnames\\index.js","prop-types":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\prop-types\\index.js","react":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react\\index.js","react-redux":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cmultichain-token-list-item%5Cmultichain-token-list-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultichainTokenListItem = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _selectors = require("../../../selectors");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const MultichainTokenListItem = ({
  className,
  onClick,
  tokenSymbol,
  tokenImage,
  primary,
  secondary,
  title
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const primaryTokenImage = (0, _reactRedux.useSelector)(_selectors.getNativeCurrencyImage);
  const dataTheme = document.documentElement.getAttribute('data-theme');
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: (0, _classnames.default)('multichain-token-list-item', className),
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    gap: 4,
    "data-testid": "multichain-token-list-item"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "multichain-token-list-item__container-cell",
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    padding: 4,
    as: "a",
    "data-testid": "multichain-token-list-button",
    href: "#",
    onClick: e => {
      e.preventDefault();
      onClick();
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Tokens,
        event: _metametrics2.MetaMetricsEventName.TokenDetailsOpened,
        properties: {
          location: 'Home',
          chain_id: chainId,
          token_symbol: tokenSymbol
        }
      });
    }
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.BadgeWrapper, {
    badge: /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarNetwork, {
      size: _designSystem.Size.XS,
      name: tokenSymbol,
      src: primaryTokenImage,
      borderColor: primaryTokenImage ? _designSystem.BorderColor.borderMuted : _designSystem.BorderColor.borderDefault
    }),
    marginRight: 3
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.AvatarToken, {
    name: tokenSymbol,
    src: tokenImage,
    showHalo: true,
    borderColor: tokenImage ? _designSystem.BorderColor.transparent : _designSystem.BorderColor.borderDefault
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "multichain-token-list-item__container-cell--text-container",
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    width: _designSystem.BLOCK_SIZES.FULL,
    style: {
      flexGrow: 1,
      overflow: 'hidden'
    }
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    gap: 1
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    width: [_designSystem.BLOCK_SIZES.ONE_THIRD]
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    interactive: true,
    html: title,
    disabled: (title === null || title === void 0 ? void 0 : title.length) < 12,
    tooltipInnerClassName: "multichain-token-list-item__tooltip",
    theme: dataTheme === 'light' ? 'dark' : 'light'
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Medium,
    variant: _designSystem.TextVariant.bodyMd,
    ellipsis: true
  }, title === 'ETH' ? t('networkNameEthereum') : title))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Medium,
    variant: _designSystem.TextVariant.bodyMd,
    width: [_designSystem.BLOCK_SIZES.TWO_THIRD],
    textAlign: _designSystem.TextAlign.End
  }, secondary)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative
  }, primary, " ", tokenSymbol, ' '))));
};
exports.MultichainTokenListItem = MultichainTokenListItem;
MultichainTokenListItem.propTypes = {
  /**
   * An additional className to apply to the TokenList.
   */
  className: _propTypes.default.string,
  /**
   * The onClick handler to be passed to the MultichainTokenListItem component
   */
  onClick: _propTypes.default.func,
  /**
   * tokenSymbol represents the symbol of the Token
   */
  tokenSymbol: _propTypes.default.string,
  /**
   * title represents the name of the token and if name is not available then Symbol
   */
  title: _propTypes.default.string,
  /**
   * tokenImage represnts the image of the token icon
   */
  tokenImage: _propTypes.default.string,
  /**
   * primary represents the balance
   */
  primary: _propTypes.default.string,
  /**
   * secondary represents the balance in dollars
   */
  secondary: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\multichain-token-list-item\\multichain-token-list-item.js",}],
["D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\network-list-item\\index.js", {"./network-list-item":"D:\\onedrive\\sdu\\Research\\Web3 Signature Authentication\\demo\\metamask-extension\\ui\\components\\multichain\\network-list-item\\network-list-item.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: D:%5Conedrive%5Csdu%5CResearch%5CWeb3%20Signature%20Authentication%5Cdemo%5Cmetamask-extension%5Cui%5Ccomponents%5Cmultichain%5Cnetwork-list-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "NetworkListItem", {
  enumerable: true,
  get: function () {
    return _networkListItem.NetworkListItem;
  }
});
var _networkListItem = require("./network-list-item");

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\multichain\\network-list-item\\index.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
